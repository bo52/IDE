/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var __webpack_modules__={545:(t,e,i)=>{"use strict";i.d(e,{Z:()=>a});var n=i(537),s=i.n(n),o=i(645),r=i.n(o)()(s());r.push([t.id,".fm-abs {\n    background: white;\n    border: 2px solid;\n    position: absolute;\n    display: inline-block;\n}","",{version:3,sources:["webpack://./src/injectable/class.js/TEG/FORM/fm.abs.2304131351/style.css"],names:[],mappings:"AAAA;IACI,iBAAiB;IACjB,iBAAiB;IACjB,kBAAkB;IAClB,qBAAqB;AACzB",sourcesContent:[".fm-abs {\r\n    background: white;\r\n    border: 2px solid;\r\n    position: absolute;\r\n    display: inline-block;\r\n}"],sourceRoot:""}]);const a=r},165:(t,e,i)=>{"use strict";i.d(e,{Z:()=>a});var n=i(537),s=i.n(n),o=i(645),r=i.n(o)()(s());r.push([t.id,".Fm-body {\n    width: 100%;\n    height: 100vh;\n    display: block;\n    max-width: 100%;\n    max-height: 100%;\n    margin: 0 auto;\n}","",{version:3,sources:["webpack://./src/injectable/class.js/TEG/FORM/fm.body/style.css"],names:[],mappings:"AAAA;IACI,WAAW;IACX,aAAa;IACb,cAAc;IACd,eAAe;IACf,gBAAgB;IAChB,cAAc;AAClB",sourcesContent:[".Fm-body {\r\n    width: 100%;\r\n    height: 100vh;\r\n    display: block;\r\n    max-width: 100%;\r\n    max-height: 100%;\r\n    margin: 0 auto;\r\n}"],sourceRoot:""}]);const a=r},956:(t,e,i)=>{"use strict";i.d(e,{Z:()=>a});var n=i(537),s=i.n(n),o=i(645),r=i.n(o)()(s());r.push([t.id,".menu {\n    padding: 5px;\n    border-radius: 6px;\n    position: absolute;\n    top: 0;\n    left: 0;\n    border: 1px solid #666;\n    background-color: #CCC;\n    display: none;\n    float: left;\n}","",{version:3,sources:["webpack://./src/injectable/class.js/TEG/MENU/menu.2206161052/style.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,kBAAkB;IAClB,kBAAkB;IAClB,MAAM;IACN,OAAO;IACP,sBAAsB;IACtB,sBAAsB;IACtB,aAAa;IACb,WAAW;AACf",sourcesContent:[".menu {\r\n    padding: 5px;\r\n    border-radius: 6px;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    border: 1px solid #666;\r\n    background-color: #CCC;\r\n    display: none;\r\n    float: left;\r\n}"],sourceRoot:""}]);const a=r},46:(t,e,i)=>{"use strict";i.d(e,{Z:()=>a});var n=i(537),s=i.n(n),o=i(645),r=i.n(o)()(s());r.push([t.id,".custom {\n    background-color: green;\n}","",{version:3,sources:["webpack://./src/injectable/class.js/TEG/custom/style.css"],names:[],mappings:"AAAA;IACI,uBAAuB;AAC3B",sourcesContent:[".custom {\r\n    background-color: green;\r\n}"],sourceRoot:""}]);const a=r},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i="",n=void 0!==e[5];return e[4]&&(i+="@supports (".concat(e[4],") {")),e[2]&&(i+="@media ".concat(e[2]," {")),n&&(i+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),i+=t(e),n&&(i+="}"),e[2]&&(i+="}"),e[4]&&(i+="}"),i})).join("")},e.i=function(t,i,n,s,o){"string"==typeof t&&(t=[[null,t,void 0]]);var r={};if(n)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(r[l]=!0)}for(var c=0;c<t.length;c++){var h=[].concat(t[c]);n&&r[h[0]]||(void 0!==o&&(void 0===h[5]||(h[1]="@layer".concat(h[5].length>0?" ".concat(h[5]):""," {").concat(h[1],"}")),h[5]=o),i&&(h[2]?(h[1]="@media ".concat(h[2]," {").concat(h[1],"}"),h[2]=i):h[2]=i),s&&(h[4]?(h[1]="@supports (".concat(h[4],") {").concat(h[1],"}"),h[4]=s):h[4]="".concat(s)),e.push(h))}},e}},537:t=>{"use strict";t.exports=function(t){var e=t[1],i=t[3];if(!i)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),o="/*# ".concat(s," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},555:(t,e,i)=>{var n,s,o;s=[i(755)],n=function(t){t.ui=t.ui||{},t.ui.version="1.12.1";var e,i,n=0,s=Array.prototype.slice;t.cleanData=(e=t.cleanData,function(i){var n,s,o;for(o=0;null!=(s=i[o]);o++)try{(n=t._data(s,"events"))&&n.remove&&t(s).triggerHandler("remove")}catch(t){}e(i)}),t.widget=function(e,i,n){var s,o,r,a={},l=e.split(".")[0],c=l+"-"+(e=e.split(".")[1]);return n||(n=i,i=t.Widget),t.isArray(n)&&(n=t.extend.apply(null,[{}].concat(n))),t.expr.pseudos[c.toLowerCase()]=function(e){return!!t.data(e,c)},t[l]=t[l]||{},s=t[l][e],o=t[l][e]=function(t,e){if(!this._createWidget)return new o(t,e);arguments.length&&this._createWidget(t,e)},t.extend(o,s,{version:n.version,_proto:t.extend({},n),_childConstructors:[]}),(r=new i).options=t.widget.extend({},r.options),t.each(n,(function(e,n){t.isFunction(n)?a[e]=function(){function t(){return i.prototype[e].apply(this,arguments)}function s(t){return i.prototype[e].apply(this,t)}return function(){var e,i=this._super,o=this._superApply;return this._super=t,this._superApply=s,e=n.apply(this,arguments),this._super=i,this._superApply=o,e}}():a[e]=n})),o.prototype=t.widget.extend(r,{widgetEventPrefix:s&&r.widgetEventPrefix||e},a,{constructor:o,namespace:l,widgetName:e,widgetFullName:c}),s?(t.each(s._childConstructors,(function(e,i){var n=i.prototype;t.widget(n.namespace+"."+n.widgetName,o,i._proto)})),delete s._childConstructors):i._childConstructors.push(o),t.widget.bridge(e,o),o},t.widget.extend=function(e){for(var i,n,o=s.call(arguments,1),r=0,a=o.length;r<a;r++)for(i in o[r])n=o[r][i],o[r].hasOwnProperty(i)&&void 0!==n&&(t.isPlainObject(n)?e[i]=t.isPlainObject(e[i])?t.widget.extend({},e[i],n):t.widget.extend({},n):e[i]=n);return e},t.widget.bridge=function(e,i){var n=i.prototype.widgetFullName||e;t.fn[e]=function(o){var r="string"==typeof o,a=s.call(arguments,1),l=this;return r?this.length||"instance"!==o?this.each((function(){var i,s=t.data(this,n);return"instance"===o?(l=s,!1):s?t.isFunction(s[o])&&"_"!==o.charAt(0)?(i=s[o].apply(s,a))!==s&&void 0!==i?(l=i&&i.jquery?l.pushStack(i.get()):i,!1):void 0:t.error("no such method '"+o+"' for "+e+" widget instance"):t.error("cannot call methods on "+e+" prior to initialization; attempted to call method '"+o+"'")})):l=void 0:(a.length&&(o=t.widget.extend.apply(null,[o].concat(a))),this.each((function(){var e=t.data(this,n);e?(e.option(o||{}),e._init&&e._init()):t.data(this,n,new i(o,this))}))),l}},t.Widget=function(){},t.Widget._childConstructors=[],t.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{classes:{},disabled:!1,create:null},_createWidget:function(e,i){i=t(i||this.defaultElement||this)[0],this.element=t(i),this.uuid=n++,this.eventNamespace="."+this.widgetName+this.uuid,this.bindings=t(),this.hoverable=t(),this.focusable=t(),this.classesElementLookup={},i!==this&&(t.data(i,this.widgetFullName,this),this._on(!0,this.element,{remove:function(t){t.target===i&&this.destroy()}}),this.document=t(i.style?i.ownerDocument:i.document||i),this.window=t(this.document[0].defaultView||this.document[0].parentWindow)),this.options=t.widget.extend({},this.options,this._getCreateOptions(),e),this._create(),this.options.disabled&&this._setOptionDisabled(this.options.disabled),this._trigger("create",null,this._getCreateEventData()),this._init()},_getCreateOptions:function(){return{}},_getCreateEventData:t.noop,_create:t.noop,_init:t.noop,destroy:function(){var e=this;this._destroy(),t.each(this.classesElementLookup,(function(t,i){e._removeClass(i,t)})),this.element.off(this.eventNamespace).removeData(this.widgetFullName),this.widget().off(this.eventNamespace).removeAttr("aria-disabled"),this.bindings.off(this.eventNamespace)},_destroy:t.noop,widget:function(){return this.element},option:function(e,i){var n,s,o,r=e;if(0===arguments.length)return t.widget.extend({},this.options);if("string"==typeof e)if(r={},n=e.split("."),e=n.shift(),n.length){for(s=r[e]=t.widget.extend({},this.options[e]),o=0;o<n.length-1;o++)s[n[o]]=s[n[o]]||{},s=s[n[o]];if(e=n.pop(),1===arguments.length)return void 0===s[e]?null:s[e];s[e]=i}else{if(1===arguments.length)return void 0===this.options[e]?null:this.options[e];r[e]=i}return this._setOptions(r),this},_setOptions:function(t){var e;for(e in t)this._setOption(e,t[e]);return this},_setOption:function(t,e){return"classes"===t&&this._setOptionClasses(e),this.options[t]=e,"disabled"===t&&this._setOptionDisabled(e),this},_setOptionClasses:function(e){var i,n,s;for(i in e)s=this.classesElementLookup[i],e[i]!==this.options.classes[i]&&s&&s.length&&(n=t(s.get()),this._removeClass(s,i),n.addClass(this._classes({element:n,keys:i,classes:e,add:!0})))},_setOptionDisabled:function(t){this._toggleClass(this.widget(),this.widgetFullName+"-disabled",null,!!t),t&&(this._removeClass(this.hoverable,null,"ui-state-hover"),this._removeClass(this.focusable,null,"ui-state-focus"))},enable:function(){return this._setOptions({disabled:!1})},disable:function(){return this._setOptions({disabled:!0})},_classes:function(e){var i=[],n=this;function s(s,o){var r,a;for(a=0;a<s.length;a++)r=n.classesElementLookup[s[a]]||t(),r=e.add?t(t.uniqueSort(r.get().concat(e.element.get()))):t(r.not(e.element).get()),n.classesElementLookup[s[a]]=r,i.push(s[a]),o&&e.classes[s[a]]&&i.push(e.classes[s[a]])}return e=t.extend({element:this.element,classes:this.options.classes||{}},e),this._on(e.element,{remove:"_untrackClassesElement"}),e.keys&&s(e.keys.match(/\S+/g)||[],!0),e.extra&&s(e.extra.match(/\S+/g)||[]),i.join(" ")},_untrackClassesElement:function(e){var i=this;t.each(i.classesElementLookup,(function(n,s){-1!==t.inArray(e.target,s)&&(i.classesElementLookup[n]=t(s.not(e.target).get()))}))},_removeClass:function(t,e,i){return this._toggleClass(t,e,i,!1)},_addClass:function(t,e,i){return this._toggleClass(t,e,i,!0)},_toggleClass:function(t,e,i,n){n="boolean"==typeof n?n:i;var s="string"==typeof t||null===t,o={extra:s?e:i,keys:s?t:e,element:s?this.element:t,add:n};return o.element.toggleClass(this._classes(o),n),this},_on:function(e,i,n){var s,o=this;"boolean"!=typeof e&&(n=i,i=e,e=!1),n?(i=s=t(i),this.bindings=this.bindings.add(i)):(n=i,i=this.element,s=this.widget()),t.each(n,(function(n,r){function a(){if(e||!0!==o.options.disabled&&!t(this).hasClass("ui-state-disabled"))return("string"==typeof r?o[r]:r).apply(o,arguments)}"string"!=typeof r&&(a.guid=r.guid=r.guid||a.guid||t.guid++);var l=n.match(/^([\w:-]*)\s*(.*)$/),c=l[1]+o.eventNamespace,h=l[2];h?s.on(c,h,a):i.on(c,a)}))},_off:function(e,i){i=(i||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace,e.off(i).off(i),this.bindings=t(this.bindings.not(e).get()),this.focusable=t(this.focusable.not(e).get()),this.hoverable=t(this.hoverable.not(e).get())},_delay:function(t,e){var i=this;return setTimeout((function(){return("string"==typeof t?i[t]:t).apply(i,arguments)}),e||0)},_hoverable:function(e){this.hoverable=this.hoverable.add(e),this._on(e,{mouseenter:function(e){this._addClass(t(e.currentTarget),null,"ui-state-hover")},mouseleave:function(e){this._removeClass(t(e.currentTarget),null,"ui-state-hover")}})},_focusable:function(e){this.focusable=this.focusable.add(e),this._on(e,{focusin:function(e){this._addClass(t(e.currentTarget),null,"ui-state-focus")},focusout:function(e){this._removeClass(t(e.currentTarget),null,"ui-state-focus")}})},_trigger:function(e,i,n){var s,o,r=this.options[e];if(n=n||{},(i=t.Event(i)).type=(e===this.widgetEventPrefix?e:this.widgetEventPrefix+e).toLowerCase(),i.target=this.element[0],o=i.originalEvent)for(s in o)s in i||(i[s]=o[s]);return this.element.trigger(i,n),!(t.isFunction(r)&&!1===r.apply(this.element[0],[i].concat(n))||i.isDefaultPrevented())}},t.each({show:"fadeIn",hide:"fadeOut"},(function(e,i){t.Widget.prototype["_"+e]=function(n,s,o){var r;"string"==typeof s&&(s={effect:s});var a=s?!0===s||"number"==typeof s?i:s.effect||i:e;"number"==typeof(s=s||{})&&(s={duration:s}),r=!t.isEmptyObject(s),s.complete=o,s.delay&&n.delay(s.delay),r&&t.effects&&t.effects.effect[a]?n[e](s):a!==e&&n[a]?n[a](s.duration,s.easing,o):n.queue((function(i){t(this)[e](),o&&o.call(n[0]),i()}))}})),t.widget,function(){var e,i=Math.max,n=Math.abs,s=/left|center|right/,o=/top|center|bottom/,r=/[\+\-]\d+(\.[\d]+)?%?/,a=/^\w+/,l=/%$/,c=t.fn.position;function h(t,e,i){return[parseFloat(t[0])*(l.test(t[0])?e/100:1),parseFloat(t[1])*(l.test(t[1])?i/100:1)]}function u(e,i){return parseInt(t.css(e,i),10)||0}t.position={scrollbarWidth:function(){if(void 0!==e)return e;var i,n,s=t("<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"),o=s.children()[0];return t("body").append(s),i=o.offsetWidth,s.css("overflow","scroll"),i===(n=o.offsetWidth)&&(n=s[0].clientWidth),s.remove(),e=i-n},getScrollInfo:function(e){var i=e.isWindow||e.isDocument?"":e.element.css("overflow-x"),n=e.isWindow||e.isDocument?"":e.element.css("overflow-y"),s="scroll"===i||"auto"===i&&e.width<e.element[0].scrollWidth;return{width:"scroll"===n||"auto"===n&&e.height<e.element[0].scrollHeight?t.position.scrollbarWidth():0,height:s?t.position.scrollbarWidth():0}},getWithinInfo:function(e){var i=t(e||window),n=t.isWindow(i[0]),s=!!i[0]&&9===i[0].nodeType;return{element:i,isWindow:n,isDocument:s,offset:n||s?{left:0,top:0}:t(e).offset(),scrollLeft:i.scrollLeft(),scrollTop:i.scrollTop(),width:i.outerWidth(),height:i.outerHeight()}}},t.fn.position=function(e){if(!e||!e.of)return c.apply(this,arguments);e=t.extend({},e);var l,d,p,f,g,m,v,_,y=t(e.of),b=t.position.getWithinInfo(e.within),w=t.position.getScrollInfo(b),x=(e.collision||"flip").split(" "),k={};return m=9===(_=(v=y)[0]).nodeType?{width:v.width(),height:v.height(),offset:{top:0,left:0}}:t.isWindow(_)?{width:v.width(),height:v.height(),offset:{top:v.scrollTop(),left:v.scrollLeft()}}:_.preventDefault?{width:0,height:0,offset:{top:_.pageY,left:_.pageX}}:{width:v.outerWidth(),height:v.outerHeight(),offset:v.offset()},y[0].preventDefault&&(e.at="left top"),d=m.width,p=m.height,f=m.offset,g=t.extend({},f),t.each(["my","at"],(function(){var t,i,n=(e[this]||"").split(" ");1===n.length&&(n=s.test(n[0])?n.concat(["center"]):o.test(n[0])?["center"].concat(n):["center","center"]),n[0]=s.test(n[0])?n[0]:"center",n[1]=o.test(n[1])?n[1]:"center",t=r.exec(n[0]),i=r.exec(n[1]),k[this]=[t?t[0]:0,i?i[0]:0],e[this]=[a.exec(n[0])[0],a.exec(n[1])[0]]})),1===x.length&&(x[1]=x[0]),"right"===e.at[0]?g.left+=d:"center"===e.at[0]&&(g.left+=d/2),"bottom"===e.at[1]?g.top+=p:"center"===e.at[1]&&(g.top+=p/2),l=h(k.at,d,p),g.left+=l[0],g.top+=l[1],this.each((function(){var s,o,r=t(this),a=r.outerWidth(),c=r.outerHeight(),m=u(this,"marginLeft"),v=u(this,"marginTop"),_=a+m+u(this,"marginRight")+w.width,C=c+v+u(this,"marginBottom")+w.height,D=t.extend({},g),T=h(k.my,r.outerWidth(),r.outerHeight());"right"===e.my[0]?D.left-=a:"center"===e.my[0]&&(D.left-=a/2),"bottom"===e.my[1]?D.top-=c:"center"===e.my[1]&&(D.top-=c/2),D.left+=T[0],D.top+=T[1],s={marginLeft:m,marginTop:v},t.each(["left","top"],(function(i,n){t.ui.position[x[i]]&&t.ui.position[x[i]][n](D,{targetWidth:d,targetHeight:p,elemWidth:a,elemHeight:c,collisionPosition:s,collisionWidth:_,collisionHeight:C,offset:[l[0]+T[0],l[1]+T[1]],my:e.my,at:e.at,within:b,elem:r})})),e.using&&(o=function(t){var s=f.left-D.left,o=s+d-a,l=f.top-D.top,h=l+p-c,u={target:{element:y,left:f.left,top:f.top,width:d,height:p},element:{element:r,left:D.left,top:D.top,width:a,height:c},horizontal:o<0?"left":s>0?"right":"center",vertical:h<0?"top":l>0?"bottom":"middle"};d<a&&n(s+o)<d&&(u.horizontal="center"),p<c&&n(l+h)<p&&(u.vertical="middle"),i(n(s),n(o))>i(n(l),n(h))?u.important="horizontal":u.important="vertical",e.using.call(this,t,u)}),r.offset(t.extend(D,{using:o}))}))},t.ui.position={fit:{left:function(t,e){var n,s=e.within,o=s.isWindow?s.scrollLeft:s.offset.left,r=s.width,a=t.left-e.collisionPosition.marginLeft,l=o-a,c=a+e.collisionWidth-r-o;e.collisionWidth>r?l>0&&c<=0?(n=t.left+l+e.collisionWidth-r-o,t.left+=l-n):t.left=c>0&&l<=0?o:l>c?o+r-e.collisionWidth:o:l>0?t.left+=l:c>0?t.left-=c:t.left=i(t.left-a,t.left)},top:function(t,e){var n,s=e.within,o=s.isWindow?s.scrollTop:s.offset.top,r=e.within.height,a=t.top-e.collisionPosition.marginTop,l=o-a,c=a+e.collisionHeight-r-o;e.collisionHeight>r?l>0&&c<=0?(n=t.top+l+e.collisionHeight-r-o,t.top+=l-n):t.top=c>0&&l<=0?o:l>c?o+r-e.collisionHeight:o:l>0?t.top+=l:c>0?t.top-=c:t.top=i(t.top-a,t.top)}},flip:{left:function(t,e){var i,s,o=e.within,r=o.offset.left+o.scrollLeft,a=o.width,l=o.isWindow?o.scrollLeft:o.offset.left,c=t.left-e.collisionPosition.marginLeft,h=c-l,u=c+e.collisionWidth-a-l,d="left"===e.my[0]?-e.elemWidth:"right"===e.my[0]?e.elemWidth:0,p="left"===e.at[0]?e.targetWidth:"right"===e.at[0]?-e.targetWidth:0,f=-2*e.offset[0];h<0?((i=t.left+d+p+f+e.collisionWidth-a-r)<0||i<n(h))&&(t.left+=d+p+f):u>0&&((s=t.left-e.collisionPosition.marginLeft+d+p+f-l)>0||n(s)<u)&&(t.left+=d+p+f)},top:function(t,e){var i,s,o=e.within,r=o.offset.top+o.scrollTop,a=o.height,l=o.isWindow?o.scrollTop:o.offset.top,c=t.top-e.collisionPosition.marginTop,h=c-l,u=c+e.collisionHeight-a-l,d="top"===e.my[1]?-e.elemHeight:"bottom"===e.my[1]?e.elemHeight:0,p="top"===e.at[1]?e.targetHeight:"bottom"===e.at[1]?-e.targetHeight:0,f=-2*e.offset[1];h<0?((s=t.top+d+p+f+e.collisionHeight-a-r)<0||s<n(h))&&(t.top+=d+p+f):u>0&&((i=t.top-e.collisionPosition.marginTop+d+p+f-l)>0||n(i)<u)&&(t.top+=d+p+f)}},flipfit:{left:function(){t.ui.position.flip.left.apply(this,arguments),t.ui.position.fit.left.apply(this,arguments)},top:function(){t.ui.position.flip.top.apply(this,arguments),t.ui.position.fit.top.apply(this,arguments)}}}}(),t.ui.position,t.extend(t.expr.pseudos,{data:t.expr.createPseudo?t.expr.createPseudo((function(e){return function(i){return!!t.data(i,e)}})):function(e,i,n){return!!t.data(e,n[3])}}),t.fn.extend({disableSelection:(i="onselectstart"in document.createElement("div")?"selectstart":"mousedown",function(){return this.on(i+".ui-disableSelection",(function(t){t.preventDefault()}))}),enableSelection:function(){return this.off(".ui-disableSelection")}}),t.ui.focusable=function(e,i){var n,s,o,r,a,l=e.nodeName.toLowerCase();return"area"===l?(s=(n=e.parentNode).name,!(!e.href||!s||"map"!==n.nodeName.toLowerCase())&&(o=t("img[usemap='#"+s+"']")).length>0&&o.is(":visible")):(/^(input|select|textarea|button|object)$/.test(l)?(r=!e.disabled)&&(a=t(e).closest("fieldset")[0])&&(r=!a.disabled):r="a"===l&&e.href||i,r&&t(e).is(":visible")&&function(t){for(var e=t.css("visibility");"inherit"===e;)e=(t=t.parent()).css("visibility");return"hidden"!==e}(t(e)))},t.extend(t.expr.pseudos,{focusable:function(e){return t.ui.focusable(e,null!=t.attr(e,"tabindex"))}}),t.ui.focusable,t.fn.form=function(){return"string"==typeof this[0].form?this.closest("form"):t(this[0].form)},t.ui.formResetMixin={_formResetHandler:function(){var e=t(this);setTimeout((function(){var i=e.data("ui-form-reset-instances");t.each(i,(function(){this.refresh()}))}))},_bindFormResetHandler:function(){if(this.form=this.element.form(),this.form.length){var t=this.form.data("ui-form-reset-instances")||[];t.length||this.form.on("reset.ui-form-reset",this._formResetHandler),t.push(this),this.form.data("ui-form-reset-instances",t)}},_unbindFormResetHandler:function(){if(this.form.length){var e=this.form.data("ui-form-reset-instances");e.splice(t.inArray(this,e),1),e.length?this.form.data("ui-form-reset-instances",e):this.form.removeData("ui-form-reset-instances").off("reset.ui-form-reset")}}},"1.7"===t.fn.jquery.substring(0,3)&&(t.each(["Width","Height"],(function(e,i){var n="Width"===i?["Left","Right"]:["Top","Bottom"],s=i.toLowerCase(),o={innerWidth:t.fn.innerWidth,innerHeight:t.fn.innerHeight,outerWidth:t.fn.outerWidth,outerHeight:t.fn.outerHeight};function r(e,i,s,o){return t.each(n,(function(){i-=parseFloat(t.css(e,"padding"+this))||0,s&&(i-=parseFloat(t.css(e,"border"+this+"Width"))||0),o&&(i-=parseFloat(t.css(e,"margin"+this))||0)})),i}t.fn["inner"+i]=function(e){return void 0===e?o["inner"+i].call(this):this.each((function(){t(this).css(s,r(this,e)+"px")}))},t.fn["outer"+i]=function(e,n){return"number"!=typeof e?o["outer"+i].call(this,e):this.each((function(){t(this).css(s,r(this,e,!0,n)+"px")}))}})),t.fn.addBack=function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}),t.ui.keyCode={BACKSPACE:8,COMMA:188,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,LEFT:37,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SPACE:32,TAB:9,UP:38},t.ui.escapeSelector=(r=/([!"#$%&'()*+,./:;<=>?@[\]^`{|}~])/g,function(t){return t.replace(r,"\\$1")}),t.fn.labels=function(){var e,i,n,s,o;return this[0].labels&&this[0].labels.length?this.pushStack(this[0].labels):(s=this.eq(0).parents("label"),(n=this.attr("id"))&&(o=(e=this.eq(0).parents().last()).add(e.length?e.siblings():this.siblings()),i="label[for='"+t.ui.escapeSelector(n)+"']",s=s.add(o.find(i).addBack(i))),this.pushStack(s))},t.fn.scrollParent=function(e){var i=this.css("position"),n="absolute"===i,s=e?/(auto|scroll|hidden)/:/(auto|scroll)/,o=this.parents().filter((function(){var e=t(this);return(!n||"static"!==e.css("position"))&&s.test(e.css("overflow")+e.css("overflow-y")+e.css("overflow-x"))})).eq(0);return"fixed"!==i&&o.length?o:t(this[0].ownerDocument||document)},t.extend(t.expr.pseudos,{tabbable:function(e){var i=t.attr(e,"tabindex"),n=null!=i;return(!n||i>=0)&&t.ui.focusable(e,n)}}),t.fn.extend({uniqueId:(o=0,function(){return this.each((function(){this.id||(this.id="ui-id-"+ ++o)}))}),removeUniqueId:function(){return this.each((function(){/^ui-id-\d+$/.test(this.id)&&t(this).removeAttr("id")}))}}),t.ui.ie=!!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase());var o,r,a=!1;t(document).on("mouseup",(function(){a=!1})),t.widget("ui.mouse",{version:"1.12.1",options:{cancel:"input, textarea, button, select, option",distance:1,delay:0},_mouseInit:function(){var e=this;this.element.on("mousedown."+this.widgetName,(function(t){return e._mouseDown(t)})).on("click."+this.widgetName,(function(i){if(!0===t.data(i.target,e.widgetName+".preventClickEvent"))return t.removeData(i.target,e.widgetName+".preventClickEvent"),i.stopImmediatePropagation(),!1})),this.started=!1},_mouseDestroy:function(){this.element.off("."+this.widgetName),this._mouseMoveDelegate&&this.document.off("mousemove."+this.widgetName,this._mouseMoveDelegate).off("mouseup."+this.widgetName,this._mouseUpDelegate)},_mouseDown:function(e){if(!a){this._mouseMoved=!1,this._mouseStarted&&this._mouseUp(e),this._mouseDownEvent=e;var i=this,n=1===e.which,s=!("string"!=typeof this.options.cancel||!e.target.nodeName)&&t(e.target).closest(this.options.cancel).length;return!(n&&!s&&this._mouseCapture(e)&&(this.mouseDelayMet=!this.options.delay,this.mouseDelayMet||(this._mouseDelayTimer=setTimeout((function(){i.mouseDelayMet=!0}),this.options.delay)),this._mouseDistanceMet(e)&&this._mouseDelayMet(e)&&(this._mouseStarted=!1!==this._mouseStart(e),!this._mouseStarted)?(e.preventDefault(),0):(!0===t.data(e.target,this.widgetName+".preventClickEvent")&&t.removeData(e.target,this.widgetName+".preventClickEvent"),this._mouseMoveDelegate=function(t){return i._mouseMove(t)},this._mouseUpDelegate=function(t){return i._mouseUp(t)},this.document.on("mousemove."+this.widgetName,this._mouseMoveDelegate).on("mouseup."+this.widgetName,this._mouseUpDelegate),e.preventDefault(),a=!0,0)))}},_mouseMove:function(e){if(this._mouseMoved){if(t.ui.ie&&(!document.documentMode||document.documentMode<9)&&!e.button)return this._mouseUp(e);if(!e.which)if(e.originalEvent.altKey||e.originalEvent.ctrlKey||e.originalEvent.metaKey||e.originalEvent.shiftKey)this.ignoreMissingWhich=!0;else if(!this.ignoreMissingWhich)return this._mouseUp(e)}return(e.which||e.button)&&(this._mouseMoved=!0),this._mouseStarted?(this._mouseDrag(e),e.preventDefault()):(this._mouseDistanceMet(e)&&this._mouseDelayMet(e)&&(this._mouseStarted=!1!==this._mouseStart(this._mouseDownEvent,e),this._mouseStarted?this._mouseDrag(e):this._mouseUp(e)),!this._mouseStarted)},_mouseUp:function(e){this.document.off("mousemove."+this.widgetName,this._mouseMoveDelegate).off("mouseup."+this.widgetName,this._mouseUpDelegate),this._mouseStarted&&(this._mouseStarted=!1,e.target===this._mouseDownEvent.target&&t.data(e.target,this.widgetName+".preventClickEvent",!0),this._mouseStop(e)),this._mouseDelayTimer&&(clearTimeout(this._mouseDelayTimer),delete this._mouseDelayTimer),this.ignoreMissingWhich=!1,a=!1,e.preventDefault()},_mouseDistanceMet:function(t){return Math.max(Math.abs(this._mouseDownEvent.pageX-t.pageX),Math.abs(this._mouseDownEvent.pageY-t.pageY))>=this.options.distance},_mouseDelayMet:function(){return this.mouseDelayMet},_mouseStart:function(){},_mouseDrag:function(){},_mouseStop:function(){},_mouseCapture:function(){return!0}}),t.ui.plugin={add:function(e,i,n){var s,o=t.ui[e].prototype;for(s in n)o.plugins[s]=o.plugins[s]||[],o.plugins[s].push([i,n[s]])},call:function(t,e,i,n){var s,o=t.plugins[e];if(o&&(n||t.element[0].parentNode&&11!==t.element[0].parentNode.nodeType))for(s=0;s<o.length;s++)t.options[o[s][0]]&&o[s][1].apply(t.element,i)}},t.ui.safeActiveElement=function(t){var e;try{e=t.activeElement}catch(i){e=t.body}return e||(e=t.body),e.nodeName||(e=t.body),e},t.ui.safeBlur=function(e){e&&"body"!==e.nodeName.toLowerCase()&&t(e).trigger("blur")},t.widget("ui.draggable",t.ui.mouse,{version:"1.12.1",widgetEventPrefix:"drag",options:{addClasses:!0,appendTo:"parent",axis:!1,connectToSortable:!1,containment:!1,cursor:"auto",cursorAt:!1,grid:!1,handle:!1,helper:"original",iframeFix:!1,opacity:!1,refreshPositions:!1,revert:!1,revertDuration:500,scope:"default",scroll:!0,scrollSensitivity:20,scrollSpeed:20,snap:!1,snapMode:"both",snapTolerance:20,stack:!1,zIndex:!1,drag:null,start:null,stop:null},_create:function(){"original"===this.options.helper&&this._setPositionRelative(),this.options.addClasses&&this._addClass("ui-draggable"),this._setHandleClassName(),this._mouseInit()},_setOption:function(t,e){this._super(t,e),"handle"===t&&(this._removeHandleClassName(),this._setHandleClassName())},_destroy:function(){(this.helper||this.element).is(".ui-draggable-dragging")?this.destroyOnClear=!0:(this._removeHandleClassName(),this._mouseDestroy())},_mouseCapture:function(e){var i=this.options;return!(this.helper||i.disabled||t(e.target).closest(".ui-resizable-handle").length>0||(this.handle=this._getHandle(e),!this.handle||(this._blurActiveElement(e),this._blockFrames(!0===i.iframeFix?"iframe":i.iframeFix),0)))},_blockFrames:function(e){this.iframeBlocks=this.document.find(e).map((function(){var e=t(this);return t("<div>").css("position","absolute").appendTo(e.parent()).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()).offset(e.offset())[0]}))},_unblockFrames:function(){this.iframeBlocks&&(this.iframeBlocks.remove(),delete this.iframeBlocks)},_blurActiveElement:function(e){var i=t.ui.safeActiveElement(this.document[0]);t(e.target).closest(i).length||t.ui.safeBlur(i)},_mouseStart:function(e){var i=this.options;return this.helper=this._createHelper(e),this._addClass(this.helper,"ui-draggable-dragging"),this._cacheHelperProportions(),t.ui.ddmanager&&(t.ui.ddmanager.current=this),this._cacheMargins(),this.cssPosition=this.helper.css("position"),this.scrollParent=this.helper.scrollParent(!0),this.offsetParent=this.helper.offsetParent(),this.hasFixedAncestor=this.helper.parents().filter((function(){return"fixed"===t(this).css("position")})).length>0,this.positionAbs=this.element.offset(),this._refreshOffsets(e),this.originalPosition=this.position=this._generatePosition(e,!1),this.originalPageX=e.pageX,this.originalPageY=e.pageY,i.cursorAt&&this._adjustOffsetFromHelper(i.cursorAt),this._setContainment(),!1===this._trigger("start",e)?(this._clear(),!1):(this._cacheHelperProportions(),t.ui.ddmanager&&!i.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e),this._mouseDrag(e,!0),t.ui.ddmanager&&t.ui.ddmanager.dragStart(this,e),!0)},_refreshOffsets:function(t){this.offset={top:this.positionAbs.top-this.margins.top,left:this.positionAbs.left-this.margins.left,scroll:!1,parent:this._getParentOffset(),relative:this._getRelativeOffset()},this.offset.click={left:t.pageX-this.offset.left,top:t.pageY-this.offset.top}},_mouseDrag:function(e,i){if(this.hasFixedAncestor&&(this.offset.parent=this._getParentOffset()),this.position=this._generatePosition(e,!0),this.positionAbs=this._convertPositionTo("absolute"),!i){var n=this._uiHash();if(!1===this._trigger("drag",e,n))return this._mouseUp(new t.Event("mouseup",e)),!1;this.position=n.position}return this.helper[0].style.left=this.position.left+"px",this.helper[0].style.top=this.position.top+"px",t.ui.ddmanager&&t.ui.ddmanager.drag(this,e),!1},_mouseStop:function(e){var i=this,n=!1;return t.ui.ddmanager&&!this.options.dropBehaviour&&(n=t.ui.ddmanager.drop(this,e)),this.dropped&&(n=this.dropped,this.dropped=!1),"invalid"===this.options.revert&&!n||"valid"===this.options.revert&&n||!0===this.options.revert||t.isFunction(this.options.revert)&&this.options.revert.call(this.element,n)?t(this.helper).animate(this.originalPosition,parseInt(this.options.revertDuration,10),(function(){!1!==i._trigger("stop",e)&&i._clear()})):!1!==this._trigger("stop",e)&&this._clear(),!1},_mouseUp:function(e){return this._unblockFrames(),t.ui.ddmanager&&t.ui.ddmanager.dragStop(this,e),this.handleElement.is(e.target)&&this.element.trigger("focus"),t.ui.mouse.prototype._mouseUp.call(this,e)},cancel:function(){return this.helper.is(".ui-draggable-dragging")?this._mouseUp(new t.Event("mouseup",{target:this.element[0]})):this._clear(),this},_getHandle:function(e){return!this.options.handle||!!t(e.target).closest(this.element.find(this.options.handle)).length},_setHandleClassName:function(){this.handleElement=this.options.handle?this.element.find(this.options.handle):this.element,this._addClass(this.handleElement,"ui-draggable-handle")},_removeHandleClassName:function(){this._removeClass(this.handleElement,"ui-draggable-handle")},_createHelper:function(e){var i=this.options,n=t.isFunction(i.helper),s=n?t(i.helper.apply(this.element[0],[e])):"clone"===i.helper?this.element.clone().removeAttr("id"):this.element;return s.parents("body").length||s.appendTo("parent"===i.appendTo?this.element[0].parentNode:i.appendTo),n&&s[0]===this.element[0]&&this._setPositionRelative(),s[0]===this.element[0]||/(fixed|absolute)/.test(s.css("position"))||s.css("position","absolute"),s},_setPositionRelative:function(){/^(?:r|a|f)/.test(this.element.css("position"))||(this.element[0].style.position="relative")},_adjustOffsetFromHelper:function(e){"string"==typeof e&&(e=e.split(" ")),t.isArray(e)&&(e={left:+e[0],top:+e[1]||0}),"left"in e&&(this.offset.click.left=e.left+this.margins.left),"right"in e&&(this.offset.click.left=this.helperProportions.width-e.right+this.margins.left),"top"in e&&(this.offset.click.top=e.top+this.margins.top),"bottom"in e&&(this.offset.click.top=this.helperProportions.height-e.bottom+this.margins.top)},_isRootNode:function(t){return/(html|body)/i.test(t.tagName)||t===this.document[0]},_getParentOffset:function(){var e=this.offsetParent.offset(),i=this.document[0];return"absolute"===this.cssPosition&&this.scrollParent[0]!==i&&t.contains(this.scrollParent[0],this.offsetParent[0])&&(e.left+=this.scrollParent.scrollLeft(),e.top+=this.scrollParent.scrollTop()),this._isRootNode(this.offsetParent[0])&&(e={top:0,left:0}),{top:e.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:e.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"!==this.cssPosition)return{top:0,left:0};var t=this.element.position(),e=this._isRootNode(this.scrollParent[0]);return{top:t.top-(parseInt(this.helper.css("top"),10)||0)+(e?0:this.scrollParent.scrollTop()),left:t.left-(parseInt(this.helper.css("left"),10)||0)+(e?0:this.scrollParent.scrollLeft())}},_cacheMargins:function(){this.margins={left:parseInt(this.element.css("marginLeft"),10)||0,top:parseInt(this.element.css("marginTop"),10)||0,right:parseInt(this.element.css("marginRight"),10)||0,bottom:parseInt(this.element.css("marginBottom"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var e,i,n,s=this.options,o=this.document[0];this.relativeContainer=null,s.containment?"window"!==s.containment?"document"!==s.containment?s.containment.constructor!==Array?("parent"===s.containment&&(s.containment=this.helper[0].parentNode),(n=(i=t(s.containment))[0])&&(e=/(scroll|auto)/.test(i.css("overflow")),this.containment=[(parseInt(i.css("borderLeftWidth"),10)||0)+(parseInt(i.css("paddingLeft"),10)||0),(parseInt(i.css("borderTopWidth"),10)||0)+(parseInt(i.css("paddingTop"),10)||0),(e?Math.max(n.scrollWidth,n.offsetWidth):n.offsetWidth)-(parseInt(i.css("borderRightWidth"),10)||0)-(parseInt(i.css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left-this.margins.right,(e?Math.max(n.scrollHeight,n.offsetHeight):n.offsetHeight)-(parseInt(i.css("borderBottomWidth"),10)||0)-(parseInt(i.css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top-this.margins.bottom],this.relativeContainer=i)):this.containment=s.containment:this.containment=[0,0,t(o).width()-this.helperProportions.width-this.margins.left,(t(o).height()||o.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]:this.containment=[t(window).scrollLeft()-this.offset.relative.left-this.offset.parent.left,t(window).scrollTop()-this.offset.relative.top-this.offset.parent.top,t(window).scrollLeft()+t(window).width()-this.helperProportions.width-this.margins.left,t(window).scrollTop()+(t(window).height()||o.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]:this.containment=null},_convertPositionTo:function(t,e){e||(e=this.position);var i="absolute"===t?1:-1,n=this._isRootNode(this.scrollParent[0]);return{top:e.top+this.offset.relative.top*i+this.offset.parent.top*i-("fixed"===this.cssPosition?-this.offset.scroll.top:n?0:this.offset.scroll.top)*i,left:e.left+this.offset.relative.left*i+this.offset.parent.left*i-("fixed"===this.cssPosition?-this.offset.scroll.left:n?0:this.offset.scroll.left)*i}},_generatePosition:function(t,e){var i,n,s,o,r=this.options,a=this._isRootNode(this.scrollParent[0]),l=t.pageX,c=t.pageY;return a&&this.offset.scroll||(this.offset.scroll={top:this.scrollParent.scrollTop(),left:this.scrollParent.scrollLeft()}),e&&(this.containment&&(this.relativeContainer?(n=this.relativeContainer.offset(),i=[this.containment[0]+n.left,this.containment[1]+n.top,this.containment[2]+n.left,this.containment[3]+n.top]):i=this.containment,t.pageX-this.offset.click.left<i[0]&&(l=i[0]+this.offset.click.left),t.pageY-this.offset.click.top<i[1]&&(c=i[1]+this.offset.click.top),t.pageX-this.offset.click.left>i[2]&&(l=i[2]+this.offset.click.left),t.pageY-this.offset.click.top>i[3]&&(c=i[3]+this.offset.click.top)),r.grid&&(s=r.grid[1]?this.originalPageY+Math.round((c-this.originalPageY)/r.grid[1])*r.grid[1]:this.originalPageY,c=i?s-this.offset.click.top>=i[1]||s-this.offset.click.top>i[3]?s:s-this.offset.click.top>=i[1]?s-r.grid[1]:s+r.grid[1]:s,o=r.grid[0]?this.originalPageX+Math.round((l-this.originalPageX)/r.grid[0])*r.grid[0]:this.originalPageX,l=i?o-this.offset.click.left>=i[0]||o-this.offset.click.left>i[2]?o:o-this.offset.click.left>=i[0]?o-r.grid[0]:o+r.grid[0]:o),"y"===r.axis&&(l=this.originalPageX),"x"===r.axis&&(c=this.originalPageY)),{top:c-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.offset.scroll.top:a?0:this.offset.scroll.top),left:l-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.offset.scroll.left:a?0:this.offset.scroll.left)}},_clear:function(){this._removeClass(this.helper,"ui-draggable-dragging"),this.helper[0]===this.element[0]||this.cancelHelperRemoval||this.helper.remove(),this.helper=null,this.cancelHelperRemoval=!1,this.destroyOnClear&&this.destroy()},_trigger:function(e,i,n){return n=n||this._uiHash(),t.ui.plugin.call(this,e,[i,n,this],!0),/^(drag|start|stop)/.test(e)&&(this.positionAbs=this._convertPositionTo("absolute"),n.offset=this.positionAbs),t.Widget.prototype._trigger.call(this,e,i,n)},plugins:{},_uiHash:function(){return{helper:this.helper,position:this.position,originalPosition:this.originalPosition,offset:this.positionAbs}}}),t.ui.plugin.add("draggable","connectToSortable",{start:function(e,i,n){var s=t.extend({},i,{item:n.element});n.sortables=[],t(n.options.connectToSortable).each((function(){var i=t(this).sortable("instance");i&&!i.options.disabled&&(n.sortables.push(i),i.refreshPositions(),i._trigger("activate",e,s))}))},stop:function(e,i,n){var s=t.extend({},i,{item:n.element});n.cancelHelperRemoval=!1,t.each(n.sortables,(function(){var t=this;t.isOver?(t.isOver=0,n.cancelHelperRemoval=!0,t.cancelHelperRemoval=!1,t._storedCSS={position:t.placeholder.css("position"),top:t.placeholder.css("top"),left:t.placeholder.css("left")},t._mouseStop(e),t.options.helper=t.options._helper):(t.cancelHelperRemoval=!0,t._trigger("deactivate",e,s))}))},drag:function(e,i,n){t.each(n.sortables,(function(){var s=!1,o=this;o.positionAbs=n.positionAbs,o.helperProportions=n.helperProportions,o.offset.click=n.offset.click,o._intersectsWith(o.containerCache)&&(s=!0,t.each(n.sortables,(function(){return this.positionAbs=n.positionAbs,this.helperProportions=n.helperProportions,this.offset.click=n.offset.click,this!==o&&this._intersectsWith(this.containerCache)&&t.contains(o.element[0],this.element[0])&&(s=!1),s}))),s?(o.isOver||(o.isOver=1,n._parent=i.helper.parent(),o.currentItem=i.helper.appendTo(o.element).data("ui-sortable-item",!0),o.options._helper=o.options.helper,o.options.helper=function(){return i.helper[0]},e.target=o.currentItem[0],o._mouseCapture(e,!0),o._mouseStart(e,!0,!0),o.offset.click.top=n.offset.click.top,o.offset.click.left=n.offset.click.left,o.offset.parent.left-=n.offset.parent.left-o.offset.parent.left,o.offset.parent.top-=n.offset.parent.top-o.offset.parent.top,n._trigger("toSortable",e),n.dropped=o.element,t.each(n.sortables,(function(){this.refreshPositions()})),n.currentItem=n.element,o.fromOutside=n),o.currentItem&&(o._mouseDrag(e),i.position=o.position)):o.isOver&&(o.isOver=0,o.cancelHelperRemoval=!0,o.options._revert=o.options.revert,o.options.revert=!1,o._trigger("out",e,o._uiHash(o)),o._mouseStop(e,!0),o.options.revert=o.options._revert,o.options.helper=o.options._helper,o.placeholder&&o.placeholder.remove(),i.helper.appendTo(n._parent),n._refreshOffsets(e),i.position=n._generatePosition(e,!0),n._trigger("fromSortable",e),n.dropped=!1,t.each(n.sortables,(function(){this.refreshPositions()})))}))}}),t.ui.plugin.add("draggable","cursor",{start:function(e,i,n){var s=t("body"),o=n.options;s.css("cursor")&&(o._cursor=s.css("cursor")),s.css("cursor",o.cursor)},stop:function(e,i,n){var s=n.options;s._cursor&&t("body").css("cursor",s._cursor)}}),t.ui.plugin.add("draggable","opacity",{start:function(e,i,n){var s=t(i.helper),o=n.options;s.css("opacity")&&(o._opacity=s.css("opacity")),s.css("opacity",o.opacity)},stop:function(e,i,n){var s=n.options;s._opacity&&t(i.helper).css("opacity",s._opacity)}}),t.ui.plugin.add("draggable","scroll",{start:function(t,e,i){i.scrollParentNotHidden||(i.scrollParentNotHidden=i.helper.scrollParent(!1)),i.scrollParentNotHidden[0]!==i.document[0]&&"HTML"!==i.scrollParentNotHidden[0].tagName&&(i.overflowOffset=i.scrollParentNotHidden.offset())},drag:function(e,i,n){var s=n.options,o=!1,r=n.scrollParentNotHidden[0],a=n.document[0];r!==a&&"HTML"!==r.tagName?(s.axis&&"x"===s.axis||(n.overflowOffset.top+r.offsetHeight-e.pageY<s.scrollSensitivity?r.scrollTop=o=r.scrollTop+s.scrollSpeed:e.pageY-n.overflowOffset.top<s.scrollSensitivity&&(r.scrollTop=o=r.scrollTop-s.scrollSpeed)),s.axis&&"y"===s.axis||(n.overflowOffset.left+r.offsetWidth-e.pageX<s.scrollSensitivity?r.scrollLeft=o=r.scrollLeft+s.scrollSpeed:e.pageX-n.overflowOffset.left<s.scrollSensitivity&&(r.scrollLeft=o=r.scrollLeft-s.scrollSpeed))):(s.axis&&"x"===s.axis||(e.pageY-t(a).scrollTop()<s.scrollSensitivity?o=t(a).scrollTop(t(a).scrollTop()-s.scrollSpeed):t(window).height()-(e.pageY-t(a).scrollTop())<s.scrollSensitivity&&(o=t(a).scrollTop(t(a).scrollTop()+s.scrollSpeed))),s.axis&&"y"===s.axis||(e.pageX-t(a).scrollLeft()<s.scrollSensitivity?o=t(a).scrollLeft(t(a).scrollLeft()-s.scrollSpeed):t(window).width()-(e.pageX-t(a).scrollLeft())<s.scrollSensitivity&&(o=t(a).scrollLeft(t(a).scrollLeft()+s.scrollSpeed)))),!1!==o&&t.ui.ddmanager&&!s.dropBehaviour&&t.ui.ddmanager.prepareOffsets(n,e)}}),t.ui.plugin.add("draggable","snap",{start:function(e,i,n){var s=n.options;n.snapElements=[],t(s.snap.constructor!==String?s.snap.items||":data(ui-draggable)":s.snap).each((function(){var e=t(this),i=e.offset();this!==n.element[0]&&n.snapElements.push({item:this,width:e.outerWidth(),height:e.outerHeight(),top:i.top,left:i.left})}))},drag:function(e,i,n){var s,o,r,a,l,c,h,u,d,p,f=n.options,g=f.snapTolerance,m=i.offset.left,v=m+n.helperProportions.width,_=i.offset.top,y=_+n.helperProportions.height;for(d=n.snapElements.length-1;d>=0;d--)c=(l=n.snapElements[d].left-n.margins.left)+n.snapElements[d].width,u=(h=n.snapElements[d].top-n.margins.top)+n.snapElements[d].height,v<l-g||m>c+g||y<h-g||_>u+g||!t.contains(n.snapElements[d].item.ownerDocument,n.snapElements[d].item)?(n.snapElements[d].snapping&&n.options.snap.release&&n.options.snap.release.call(n.element,e,t.extend(n._uiHash(),{snapItem:n.snapElements[d].item})),n.snapElements[d].snapping=!1):("inner"!==f.snapMode&&(s=Math.abs(h-y)<=g,o=Math.abs(u-_)<=g,r=Math.abs(l-v)<=g,a=Math.abs(c-m)<=g,s&&(i.position.top=n._convertPositionTo("relative",{top:h-n.helperProportions.height,left:0}).top),o&&(i.position.top=n._convertPositionTo("relative",{top:u,left:0}).top),r&&(i.position.left=n._convertPositionTo("relative",{top:0,left:l-n.helperProportions.width}).left),a&&(i.position.left=n._convertPositionTo("relative",{top:0,left:c}).left)),p=s||o||r||a,"outer"!==f.snapMode&&(s=Math.abs(h-_)<=g,o=Math.abs(u-y)<=g,r=Math.abs(l-m)<=g,a=Math.abs(c-v)<=g,s&&(i.position.top=n._convertPositionTo("relative",{top:h,left:0}).top),o&&(i.position.top=n._convertPositionTo("relative",{top:u-n.helperProportions.height,left:0}).top),r&&(i.position.left=n._convertPositionTo("relative",{top:0,left:l}).left),a&&(i.position.left=n._convertPositionTo("relative",{top:0,left:c-n.helperProportions.width}).left)),!n.snapElements[d].snapping&&(s||o||r||a||p)&&n.options.snap.snap&&n.options.snap.snap.call(n.element,e,t.extend(n._uiHash(),{snapItem:n.snapElements[d].item})),n.snapElements[d].snapping=s||o||r||a||p)}}),t.ui.plugin.add("draggable","stack",{start:function(e,i,n){var s,o=n.options,r=t.makeArray(t(o.stack)).sort((function(e,i){return(parseInt(t(e).css("zIndex"),10)||0)-(parseInt(t(i).css("zIndex"),10)||0)}));r.length&&(s=parseInt(t(r[0]).css("zIndex"),10)||0,t(r).each((function(e){t(this).css("zIndex",s+e)})),this.css("zIndex",s+r.length))}}),t.ui.plugin.add("draggable","zIndex",{start:function(e,i,n){var s=t(i.helper),o=n.options;s.css("zIndex")&&(o._zIndex=s.css("zIndex")),s.css("zIndex",o.zIndex)},stop:function(e,i,n){var s=n.options;s._zIndex&&t(i.helper).css("zIndex",s._zIndex)}}),t.ui.draggable,t.widget("ui.droppable",{version:"1.12.1",widgetEventPrefix:"drop",options:{accept:"*",addClasses:!0,greedy:!1,scope:"default",tolerance:"intersect",activate:null,deactivate:null,drop:null,out:null,over:null},_create:function(){var e,i=this.options,n=i.accept;this.isover=!1,this.isout=!0,this.accept=t.isFunction(n)?n:function(t){return t.is(n)},this.proportions=function(){if(!arguments.length)return e||(e={width:this.element[0].offsetWidth,height:this.element[0].offsetHeight});e=arguments[0]},this._addToManager(i.scope),i.addClasses&&this._addClass("ui-droppable")},_addToManager:function(e){t.ui.ddmanager.droppables[e]=t.ui.ddmanager.droppables[e]||[],t.ui.ddmanager.droppables[e].push(this)},_splice:function(t){for(var e=0;e<t.length;e++)t[e]===this&&t.splice(e,1)},_destroy:function(){var e=t.ui.ddmanager.droppables[this.options.scope];this._splice(e)},_setOption:function(e,i){if("accept"===e)this.accept=t.isFunction(i)?i:function(t){return t.is(i)};else if("scope"===e){var n=t.ui.ddmanager.droppables[this.options.scope];this._splice(n),this._addToManager(i)}this._super(e,i)},_activate:function(e){var i=t.ui.ddmanager.current;this._addActiveClass(),i&&this._trigger("activate",e,this.ui(i))},_deactivate:function(e){var i=t.ui.ddmanager.current;this._removeActiveClass(),i&&this._trigger("deactivate",e,this.ui(i))},_over:function(e){var i=t.ui.ddmanager.current;i&&(i.currentItem||i.element)[0]!==this.element[0]&&this.accept.call(this.element[0],i.currentItem||i.element)&&(this._addHoverClass(),this._trigger("over",e,this.ui(i)))},_out:function(e){var i=t.ui.ddmanager.current;i&&(i.currentItem||i.element)[0]!==this.element[0]&&this.accept.call(this.element[0],i.currentItem||i.element)&&(this._removeHoverClass(),this._trigger("out",e,this.ui(i)))},_drop:function(e,i){var n=i||t.ui.ddmanager.current,s=!1;return!(!n||(n.currentItem||n.element)[0]===this.element[0])&&(this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each((function(){var i=t(this).droppable("instance");if(i.options.greedy&&!i.options.disabled&&i.options.scope===n.options.scope&&i.accept.call(i.element[0],n.currentItem||n.element)&&l(n,t.extend(i,{offset:i.element.offset()}),i.options.tolerance,e))return s=!0,!1})),!s&&!!this.accept.call(this.element[0],n.currentItem||n.element)&&(this._removeActiveClass(),this._removeHoverClass(),this._trigger("drop",e,this.ui(n)),this.element))},ui:function(t){return{draggable:t.currentItem||t.element,helper:t.helper,position:t.position,offset:t.positionAbs}},_addHoverClass:function(){this._addClass("ui-droppable-hover")},_removeHoverClass:function(){this._removeClass("ui-droppable-hover")},_addActiveClass:function(){this._addClass("ui-droppable-active")},_removeActiveClass:function(){this._removeClass("ui-droppable-active")}});var l=t.ui.intersect=function(){function t(t,e,i){return t>=e&&t<e+i}return function(e,i,n,s){if(!i.offset)return!1;var o=(e.positionAbs||e.position.absolute).left+e.margins.left,r=(e.positionAbs||e.position.absolute).top+e.margins.top,a=o+e.helperProportions.width,l=r+e.helperProportions.height,c=i.offset.left,h=i.offset.top,u=c+i.proportions().width,d=h+i.proportions().height;switch(n){case"fit":return c<=o&&a<=u&&h<=r&&l<=d;case"intersect":return c<o+e.helperProportions.width/2&&a-e.helperProportions.width/2<u&&h<r+e.helperProportions.height/2&&l-e.helperProportions.height/2<d;case"pointer":return t(s.pageY,h,i.proportions().height)&&t(s.pageX,c,i.proportions().width);case"touch":return(r>=h&&r<=d||l>=h&&l<=d||r<h&&l>d)&&(o>=c&&o<=u||a>=c&&a<=u||o<c&&a>u);default:return!1}}}();t.ui.ddmanager={current:null,droppables:{default:[]},prepareOffsets:function(e,i){var n,s,o=t.ui.ddmanager.droppables[e.options.scope]||[],r=i?i.type:null,a=(e.currentItem||e.element).find(":data(ui-droppable)").addBack();t:for(n=0;n<o.length;n++)if(!(o[n].options.disabled||e&&!o[n].accept.call(o[n].element[0],e.currentItem||e.element))){for(s=0;s<a.length;s++)if(a[s]===o[n].element[0]){o[n].proportions().height=0;continue t}o[n].visible="none"!==o[n].element.css("display"),o[n].visible&&("mousedown"===r&&o[n]._activate.call(o[n],i),o[n].offset=o[n].element.offset(),o[n].proportions({width:o[n].element[0].offsetWidth,height:o[n].element[0].offsetHeight}))}},drop:function(e,i){var n=!1;return t.each((t.ui.ddmanager.droppables[e.options.scope]||[]).slice(),(function(){this.options&&(!this.options.disabled&&this.visible&&l(e,this,this.options.tolerance,i)&&(n=this._drop.call(this,i)||n),!this.options.disabled&&this.visible&&this.accept.call(this.element[0],e.currentItem||e.element)&&(this.isout=!0,this.isover=!1,this._deactivate.call(this,i)))})),n},dragStart:function(e,i){e.element.parentsUntil("body").on("scroll.droppable",(function(){e.options.refreshPositions||t.ui.ddmanager.prepareOffsets(e,i)}))},drag:function(e,i){e.options.refreshPositions&&t.ui.ddmanager.prepareOffsets(e,i),t.each(t.ui.ddmanager.droppables[e.options.scope]||[],(function(){if(!this.options.disabled&&!this.greedyChild&&this.visible){var n,s,o,r=l(e,this,this.options.tolerance,i),a=!r&&this.isover?"isout":r&&!this.isover?"isover":null;a&&(this.options.greedy&&(s=this.options.scope,(o=this.element.parents(":data(ui-droppable)").filter((function(){return t(this).droppable("instance").options.scope===s}))).length&&((n=t(o[0]).droppable("instance")).greedyChild="isover"===a)),n&&"isover"===a&&(n.isover=!1,n.isout=!0,n._out.call(n,i)),this[a]=!0,this["isout"===a?"isover":"isout"]=!1,this["isover"===a?"_over":"_out"].call(this,i),n&&"isout"===a&&(n.isout=!1,n.isover=!0,n._over.call(n,i)))}}))},dragStop:function(e,i){e.element.parentsUntil("body").off("scroll.droppable"),e.options.refreshPositions||t.ui.ddmanager.prepareOffsets(e,i)}},!1!==t.uiBackCompat&&t.widget("ui.droppable",t.ui.droppable,{options:{hoverClass:!1,activeClass:!1},_addActiveClass:function(){this._super(),this.options.activeClass&&this.element.addClass(this.options.activeClass)},_removeActiveClass:function(){this._super(),this.options.activeClass&&this.element.removeClass(this.options.activeClass)},_addHoverClass:function(){this._super(),this.options.hoverClass&&this.element.addClass(this.options.hoverClass)},_removeHoverClass:function(){this._super(),this.options.hoverClass&&this.element.removeClass(this.options.hoverClass)}}),t.ui.droppable,t.widget("ui.resizable",t.ui.mouse,{version:"1.12.1",widgetEventPrefix:"resize",options:{alsoResize:!1,animate:!1,animateDuration:"slow",animateEasing:"swing",aspectRatio:!1,autoHide:!1,classes:{"ui-resizable-se":"ui-icon ui-icon-gripsmall-diagonal-se"},containment:!1,ghost:!1,grid:!1,handles:"e,s,se",helper:!1,maxHeight:null,maxWidth:null,minHeight:10,minWidth:10,zIndex:90,resize:null,start:null,stop:null},_num:function(t){return parseFloat(t)||0},_isNumber:function(t){return!isNaN(parseFloat(t))},_hasScroll:function(e,i){if("hidden"===t(e).css("overflow"))return!1;var n=i&&"left"===i?"scrollLeft":"scrollTop",s=!1;return e[n]>0||(e[n]=1,s=e[n]>0,e[n]=0,s)},_create:function(){var e,i=this.options,n=this;this._addClass("ui-resizable"),t.extend(this,{_aspectRatio:!!i.aspectRatio,aspectRatio:i.aspectRatio,originalElement:this.element,_proportionallyResizeElements:[],_helper:i.helper||i.ghost||i.animate?i.helper||"ui-resizable-helper":null}),this.element[0].nodeName.match(/^(canvas|textarea|input|select|button|img)$/i)&&(this.element.wrap(t("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({position:this.element.css("position"),width:this.element.outerWidth(),height:this.element.outerHeight(),top:this.element.css("top"),left:this.element.css("left")})),this.element=this.element.parent().data("ui-resizable",this.element.resizable("instance")),this.elementIsWrapper=!0,e={marginTop:this.originalElement.css("marginTop"),marginRight:this.originalElement.css("marginRight"),marginBottom:this.originalElement.css("marginBottom"),marginLeft:this.originalElement.css("marginLeft")},this.element.css(e),this.originalElement.css("margin",0),this.originalResizeStyle=this.originalElement.css("resize"),this.originalElement.css("resize","none"),this._proportionallyResizeElements.push(this.originalElement.css({position:"static",zoom:1,display:"block"})),this.originalElement.css(e),this._proportionallyResize()),this._setupHandles(),i.autoHide&&t(this.element).on("mouseenter",(function(){i.disabled||(n._removeClass("ui-resizable-autohide"),n._handles.show())})).on("mouseleave",(function(){i.disabled||n.resizing||(n._addClass("ui-resizable-autohide"),n._handles.hide())})),this._mouseInit()},_destroy:function(){this._mouseDestroy();var e,i=function(e){t(e).removeData("resizable").removeData("ui-resizable").off(".resizable").find(".ui-resizable-handle").remove()};return this.elementIsWrapper&&(i(this.element),e=this.element,this.originalElement.css({position:e.css("position"),width:e.outerWidth(),height:e.outerHeight(),top:e.css("top"),left:e.css("left")}).insertAfter(e),e.remove()),this.originalElement.css("resize",this.originalResizeStyle),i(this.originalElement),this},_setOption:function(t,e){this._super(t,e),"handles"===t&&(this._removeHandles(),this._setupHandles())},_setupHandles:function(){var e,i,n,s,o,r=this.options,a=this;if(this.handles=r.handles||(t(".ui-resizable-handle",this.element).length?{n:".ui-resizable-n",e:".ui-resizable-e",s:".ui-resizable-s",w:".ui-resizable-w",se:".ui-resizable-se",sw:".ui-resizable-sw",ne:".ui-resizable-ne",nw:".ui-resizable-nw"}:"e,s,se"),this._handles=t(),this.handles.constructor===String)for("all"===this.handles&&(this.handles="n,e,s,w,se,sw,ne,nw"),n=this.handles.split(","),this.handles={},i=0;i<n.length;i++)s="ui-resizable-"+(e=t.trim(n[i])),o=t("<div>"),this._addClass(o,"ui-resizable-handle "+s),o.css({zIndex:r.zIndex}),this.handles[e]=".ui-resizable-"+e,this.element.append(o);this._renderAxis=function(e){var i,n,s,o;for(i in e=e||this.element,this.handles)this.handles[i].constructor===String?this.handles[i]=this.element.children(this.handles[i]).first().show():(this.handles[i].jquery||this.handles[i].nodeType)&&(this.handles[i]=t(this.handles[i]),this._on(this.handles[i],{mousedown:a._mouseDown})),this.elementIsWrapper&&this.originalElement[0].nodeName.match(/^(textarea|input|select|button)$/i)&&(n=t(this.handles[i],this.element),o=/sw|ne|nw|se|n|s/.test(i)?n.outerHeight():n.outerWidth(),s=["padding",/ne|nw|n/.test(i)?"Top":/se|sw|s/.test(i)?"Bottom":/^e$/.test(i)?"Right":"Left"].join(""),e.css(s,o),this._proportionallyResize()),this._handles=this._handles.add(this.handles[i])},this._renderAxis(this.element),this._handles=this._handles.add(this.element.find(".ui-resizable-handle")),this._handles.disableSelection(),this._handles.on("mouseover",(function(){a.resizing||(this.className&&(o=this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i)),a.axis=o&&o[1]?o[1]:"se")})),r.autoHide&&(this._handles.hide(),this._addClass("ui-resizable-autohide"))},_removeHandles:function(){this._handles.remove()},_mouseCapture:function(e){var i,n,s=!1;for(i in this.handles)((n=t(this.handles[i])[0])===e.target||t.contains(n,e.target))&&(s=!0);return!this.options.disabled&&s},_mouseStart:function(e){var i,n,s,o=this.options,r=this.element;return this.resizing=!0,this._renderProxy(),i=this._num(this.helper.css("left")),n=this._num(this.helper.css("top")),o.containment&&(i+=t(o.containment).scrollLeft()||0,n+=t(o.containment).scrollTop()||0),this.offset=this.helper.offset(),this.position={left:i,top:n},this.size=this._helper?{width:this.helper.width(),height:this.helper.height()}:{width:r.width(),height:r.height()},this.originalSize=this._helper?{width:r.outerWidth(),height:r.outerHeight()}:{width:r.width(),height:r.height()},this.sizeDiff={width:r.outerWidth()-r.width(),height:r.outerHeight()-r.height()},this.originalPosition={left:i,top:n},this.originalMousePosition={left:e.pageX,top:e.pageY},this.aspectRatio="number"==typeof o.aspectRatio?o.aspectRatio:this.originalSize.width/this.originalSize.height||1,s=t(".ui-resizable-"+this.axis).css("cursor"),t("body").css("cursor","auto"===s?this.axis+"-resize":s),this._addClass("ui-resizable-resizing"),this._propagate("start",e),!0},_mouseDrag:function(e){var i,n,s=this.originalMousePosition,o=this.axis,r=e.pageX-s.left||0,a=e.pageY-s.top||0,l=this._change[o];return this._updatePrevProperties(),!!l&&(i=l.apply(this,[e,r,a]),this._updateVirtualBoundaries(e.shiftKey),(this._aspectRatio||e.shiftKey)&&(i=this._updateRatio(i,e)),i=this._respectSize(i,e),this._updateCache(i),this._propagate("resize",e),n=this._applyChanges(),!this._helper&&this._proportionallyResizeElements.length&&this._proportionallyResize(),t.isEmptyObject(n)||(this._updatePrevProperties(),this._trigger("resize",e,this.ui()),this._applyChanges()),!1)},_mouseStop:function(e){this.resizing=!1;var i,n,s,o,r,a,l,c=this.options,h=this;return this._helper&&(s=(n=(i=this._proportionallyResizeElements).length&&/textarea/i.test(i[0].nodeName))&&this._hasScroll(i[0],"left")?0:h.sizeDiff.height,o=n?0:h.sizeDiff.width,r={width:h.helper.width()-o,height:h.helper.height()-s},a=parseFloat(h.element.css("left"))+(h.position.left-h.originalPosition.left)||null,l=parseFloat(h.element.css("top"))+(h.position.top-h.originalPosition.top)||null,c.animate||this.element.css(t.extend(r,{top:l,left:a})),h.helper.height(h.size.height),h.helper.width(h.size.width),this._helper&&!c.animate&&this._proportionallyResize()),t("body").css("cursor","auto"),this._removeClass("ui-resizable-resizing"),this._propagate("stop",e),this._helper&&this.helper.remove(),!1},_updatePrevProperties:function(){this.prevPosition={top:this.position.top,left:this.position.left},this.prevSize={width:this.size.width,height:this.size.height}},_applyChanges:function(){var t={};return this.position.top!==this.prevPosition.top&&(t.top=this.position.top+"px"),this.position.left!==this.prevPosition.left&&(t.left=this.position.left+"px"),this.size.width!==this.prevSize.width&&(t.width=this.size.width+"px"),this.size.height!==this.prevSize.height&&(t.height=this.size.height+"px"),this.helper.css(t),t},_updateVirtualBoundaries:function(t){var e,i,n,s,o,r=this.options;o={minWidth:this._isNumber(r.minWidth)?r.minWidth:0,maxWidth:this._isNumber(r.maxWidth)?r.maxWidth:1/0,minHeight:this._isNumber(r.minHeight)?r.minHeight:0,maxHeight:this._isNumber(r.maxHeight)?r.maxHeight:1/0},(this._aspectRatio||t)&&(e=o.minHeight*this.aspectRatio,n=o.minWidth/this.aspectRatio,i=o.maxHeight*this.aspectRatio,s=o.maxWidth/this.aspectRatio,e>o.minWidth&&(o.minWidth=e),n>o.minHeight&&(o.minHeight=n),i<o.maxWidth&&(o.maxWidth=i),s<o.maxHeight&&(o.maxHeight=s)),this._vBoundaries=o},_updateCache:function(t){this.offset=this.helper.offset(),this._isNumber(t.left)&&(this.position.left=t.left),this._isNumber(t.top)&&(this.position.top=t.top),this._isNumber(t.height)&&(this.size.height=t.height),this._isNumber(t.width)&&(this.size.width=t.width)},_updateRatio:function(t){var e=this.position,i=this.size,n=this.axis;return this._isNumber(t.height)?t.width=t.height*this.aspectRatio:this._isNumber(t.width)&&(t.height=t.width/this.aspectRatio),"sw"===n&&(t.left=e.left+(i.width-t.width),t.top=null),"nw"===n&&(t.top=e.top+(i.height-t.height),t.left=e.left+(i.width-t.width)),t},_respectSize:function(t){var e=this._vBoundaries,i=this.axis,n=this._isNumber(t.width)&&e.maxWidth&&e.maxWidth<t.width,s=this._isNumber(t.height)&&e.maxHeight&&e.maxHeight<t.height,o=this._isNumber(t.width)&&e.minWidth&&e.minWidth>t.width,r=this._isNumber(t.height)&&e.minHeight&&e.minHeight>t.height,a=this.originalPosition.left+this.originalSize.width,l=this.originalPosition.top+this.originalSize.height,c=/sw|nw|w/.test(i),h=/nw|ne|n/.test(i);return o&&(t.width=e.minWidth),r&&(t.height=e.minHeight),n&&(t.width=e.maxWidth),s&&(t.height=e.maxHeight),o&&c&&(t.left=a-e.minWidth),n&&c&&(t.left=a-e.maxWidth),r&&h&&(t.top=l-e.minHeight),s&&h&&(t.top=l-e.maxHeight),t.width||t.height||t.left||!t.top?t.width||t.height||t.top||!t.left||(t.left=null):t.top=null,t},_getPaddingPlusBorderDimensions:function(t){for(var e=0,i=[],n=[t.css("borderTopWidth"),t.css("borderRightWidth"),t.css("borderBottomWidth"),t.css("borderLeftWidth")],s=[t.css("paddingTop"),t.css("paddingRight"),t.css("paddingBottom"),t.css("paddingLeft")];e<4;e++)i[e]=parseFloat(n[e])||0,i[e]+=parseFloat(s[e])||0;return{height:i[0]+i[2],width:i[1]+i[3]}},_proportionallyResize:function(){if(this._proportionallyResizeElements.length)for(var t,e=0,i=this.helper||this.element;e<this._proportionallyResizeElements.length;e++)t=this._proportionallyResizeElements[e],this.outerDimensions||(this.outerDimensions=this._getPaddingPlusBorderDimensions(t)),t.css({height:i.height()-this.outerDimensions.height||0,width:i.width()-this.outerDimensions.width||0})},_renderProxy:function(){var e=this.element,i=this.options;this.elementOffset=e.offset(),this._helper?(this.helper=this.helper||t("<div style='overflow:hidden;'></div>"),this._addClass(this.helper,this._helper),this.helper.css({width:this.element.outerWidth(),height:this.element.outerHeight(),position:"absolute",left:this.elementOffset.left+"px",top:this.elementOffset.top+"px",zIndex:++i.zIndex}),this.helper.appendTo("body").disableSelection()):this.helper=this.element},_change:{e:function(t,e){return{width:this.originalSize.width+e}},w:function(t,e){var i=this.originalSize;return{left:this.originalPosition.left+e,width:i.width-e}},n:function(t,e,i){var n=this.originalSize;return{top:this.originalPosition.top+i,height:n.height-i}},s:function(t,e,i){return{height:this.originalSize.height+i}},se:function(e,i,n){return t.extend(this._change.s.apply(this,arguments),this._change.e.apply(this,[e,i,n]))},sw:function(e,i,n){return t.extend(this._change.s.apply(this,arguments),this._change.w.apply(this,[e,i,n]))},ne:function(e,i,n){return t.extend(this._change.n.apply(this,arguments),this._change.e.apply(this,[e,i,n]))},nw:function(e,i,n){return t.extend(this._change.n.apply(this,arguments),this._change.w.apply(this,[e,i,n]))}},_propagate:function(e,i){t.ui.plugin.call(this,e,[i,this.ui()]),"resize"!==e&&this._trigger(e,i,this.ui())},plugins:{},ui:function(){return{originalElement:this.originalElement,element:this.element,helper:this.helper,position:this.position,size:this.size,originalSize:this.originalSize,originalPosition:this.originalPosition}}}),t.ui.plugin.add("resizable","animate",{stop:function(e){var i=t(this).resizable("instance"),n=i.options,s=i._proportionallyResizeElements,o=s.length&&/textarea/i.test(s[0].nodeName),r=o&&i._hasScroll(s[0],"left")?0:i.sizeDiff.height,a=o?0:i.sizeDiff.width,l={width:i.size.width-a,height:i.size.height-r},c=parseFloat(i.element.css("left"))+(i.position.left-i.originalPosition.left)||null,h=parseFloat(i.element.css("top"))+(i.position.top-i.originalPosition.top)||null;i.element.animate(t.extend(l,h&&c?{top:h,left:c}:{}),{duration:n.animateDuration,easing:n.animateEasing,step:function(){var n={width:parseFloat(i.element.css("width")),height:parseFloat(i.element.css("height")),top:parseFloat(i.element.css("top")),left:parseFloat(i.element.css("left"))};s&&s.length&&t(s[0]).css({width:n.width,height:n.height}),i._updateCache(n),i._propagate("resize",e)}})}}),t.ui.plugin.add("resizable","containment",{start:function(){var e,i,n,s,o,r,a,l=t(this).resizable("instance"),c=l.options,h=l.element,u=c.containment,d=u instanceof t?u.get(0):/parent/.test(u)?h.parent().get(0):u;d&&(l.containerElement=t(d),/document/.test(u)||u===document?(l.containerOffset={left:0,top:0},l.containerPosition={left:0,top:0},l.parentData={element:t(document),left:0,top:0,width:t(document).width(),height:t(document).height()||document.body.parentNode.scrollHeight}):(e=t(d),i=[],t(["Top","Right","Left","Bottom"]).each((function(t,n){i[t]=l._num(e.css("padding"+n))})),l.containerOffset=e.offset(),l.containerPosition=e.position(),l.containerSize={height:e.innerHeight()-i[3],width:e.innerWidth()-i[1]},n=l.containerOffset,s=l.containerSize.height,o=l.containerSize.width,r=l._hasScroll(d,"left")?d.scrollWidth:o,a=l._hasScroll(d)?d.scrollHeight:s,l.parentData={element:d,left:n.left,top:n.top,width:r,height:a}))},resize:function(e){var i,n,s,o,r=t(this).resizable("instance"),a=r.options,l=r.containerOffset,c=r.position,h=r._aspectRatio||e.shiftKey,u={top:0,left:0},d=r.containerElement,p=!0;d[0]!==document&&/static/.test(d.css("position"))&&(u=l),c.left<(r._helper?l.left:0)&&(r.size.width=r.size.width+(r._helper?r.position.left-l.left:r.position.left-u.left),h&&(r.size.height=r.size.width/r.aspectRatio,p=!1),r.position.left=a.helper?l.left:0),c.top<(r._helper?l.top:0)&&(r.size.height=r.size.height+(r._helper?r.position.top-l.top:r.position.top),h&&(r.size.width=r.size.height*r.aspectRatio,p=!1),r.position.top=r._helper?l.top:0),s=r.containerElement.get(0)===r.element.parent().get(0),o=/relative|absolute/.test(r.containerElement.css("position")),s&&o?(r.offset.left=r.parentData.left+r.position.left,r.offset.top=r.parentData.top+r.position.top):(r.offset.left=r.element.offset().left,r.offset.top=r.element.offset().top),i=Math.abs(r.sizeDiff.width+(r._helper?r.offset.left-u.left:r.offset.left-l.left)),n=Math.abs(r.sizeDiff.height+(r._helper?r.offset.top-u.top:r.offset.top-l.top)),i+r.size.width>=r.parentData.width&&(r.size.width=r.parentData.width-i,h&&(r.size.height=r.size.width/r.aspectRatio,p=!1)),n+r.size.height>=r.parentData.height&&(r.size.height=r.parentData.height-n,h&&(r.size.width=r.size.height*r.aspectRatio,p=!1)),p||(r.position.left=r.prevPosition.left,r.position.top=r.prevPosition.top,r.size.width=r.prevSize.width,r.size.height=r.prevSize.height)},stop:function(){var e=t(this).resizable("instance"),i=e.options,n=e.containerOffset,s=e.containerPosition,o=e.containerElement,r=t(e.helper),a=r.offset(),l=r.outerWidth()-e.sizeDiff.width,c=r.outerHeight()-e.sizeDiff.height;e._helper&&!i.animate&&/relative/.test(o.css("position"))&&t(this).css({left:a.left-s.left-n.left,width:l,height:c}),e._helper&&!i.animate&&/static/.test(o.css("position"))&&t(this).css({left:a.left-s.left-n.left,width:l,height:c})}}),t.ui.plugin.add("resizable","alsoResize",{start:function(){var e=t(this).resizable("instance").options;t(e.alsoResize).each((function(){var e=t(this);e.data("ui-resizable-alsoresize",{width:parseFloat(e.width()),height:parseFloat(e.height()),left:parseFloat(e.css("left")),top:parseFloat(e.css("top"))})}))},resize:function(e,i){var n=t(this).resizable("instance"),s=n.options,o=n.originalSize,r=n.originalPosition,a={height:n.size.height-o.height||0,width:n.size.width-o.width||0,top:n.position.top-r.top||0,left:n.position.left-r.left||0};t(s.alsoResize).each((function(){var e=t(this),n=t(this).data("ui-resizable-alsoresize"),s={},o=e.parents(i.originalElement[0]).length?["width","height"]:["width","height","top","left"];t.each(o,(function(t,e){var i=(n[e]||0)+(a[e]||0);i&&i>=0&&(s[e]=i||null)})),e.css(s)}))},stop:function(){t(this).removeData("ui-resizable-alsoresize")}}),t.ui.plugin.add("resizable","ghost",{start:function(){var e=t(this).resizable("instance"),i=e.size;e.ghost=e.originalElement.clone(),e.ghost.css({opacity:.25,display:"block",position:"relative",height:i.height,width:i.width,margin:0,left:0,top:0}),e._addClass(e.ghost,"ui-resizable-ghost"),!1!==t.uiBackCompat&&"string"==typeof e.options.ghost&&e.ghost.addClass(this.options.ghost),e.ghost.appendTo(e.helper)},resize:function(){var e=t(this).resizable("instance");e.ghost&&e.ghost.css({position:"relative",height:e.size.height,width:e.size.width})},stop:function(){var e=t(this).resizable("instance");e.ghost&&e.helper&&e.helper.get(0).removeChild(e.ghost.get(0))}}),t.ui.plugin.add("resizable","grid",{resize:function(){var e,i=t(this).resizable("instance"),n=i.options,s=i.size,o=i.originalSize,r=i.originalPosition,a=i.axis,l="number"==typeof n.grid?[n.grid,n.grid]:n.grid,c=l[0]||1,h=l[1]||1,u=Math.round((s.width-o.width)/c)*c,d=Math.round((s.height-o.height)/h)*h,p=o.width+u,f=o.height+d,g=n.maxWidth&&n.maxWidth<p,m=n.maxHeight&&n.maxHeight<f,v=n.minWidth&&n.minWidth>p,_=n.minHeight&&n.minHeight>f;n.grid=l,v&&(p+=c),_&&(f+=h),g&&(p-=c),m&&(f-=h),/^(se|s|e)$/.test(a)?(i.size.width=p,i.size.height=f):/^(ne)$/.test(a)?(i.size.width=p,i.size.height=f,i.position.top=r.top-d):/^(sw)$/.test(a)?(i.size.width=p,i.size.height=f,i.position.left=r.left-u):((f-h<=0||p-c<=0)&&(e=i._getPaddingPlusBorderDimensions(this)),f-h>0?(i.size.height=f,i.position.top=r.top-d):(f=h-e.height,i.size.height=f,i.position.top=r.top+o.height-f),p-c>0?(i.size.width=p,i.position.left=r.left-u):(p=c-e.width,i.size.width=p,i.position.left=r.left+o.width-p))}}),t.ui.resizable,t.widget("ui.selectable",t.ui.mouse,{version:"1.12.1",options:{appendTo:"body",autoRefresh:!0,distance:0,filter:"*",tolerance:"touch",selected:null,selecting:null,start:null,stop:null,unselected:null,unselecting:null},_create:function(){var e=this;this._addClass("ui-selectable"),this.dragged=!1,this.refresh=function(){e.elementPos=t(e.element[0]).offset(),e.selectees=t(e.options.filter,e.element[0]),e._addClass(e.selectees,"ui-selectee"),e.selectees.each((function(){var i=t(this),n=i.offset(),s={left:n.left-e.elementPos.left,top:n.top-e.elementPos.top};t.data(this,"selectable-item",{element:this,$element:i,left:s.left,top:s.top,right:s.left+i.outerWidth(),bottom:s.top+i.outerHeight(),startselected:!1,selected:i.hasClass("ui-selected"),selecting:i.hasClass("ui-selecting"),unselecting:i.hasClass("ui-unselecting")})}))},this.refresh(),this._mouseInit(),this.helper=t("<div>"),this._addClass(this.helper,"ui-selectable-helper")},_destroy:function(){this.selectees.removeData("selectable-item"),this._mouseDestroy()},_mouseStart:function(e){var i=this,n=this.options;this.opos=[e.pageX,e.pageY],this.elementPos=t(this.element[0]).offset(),this.options.disabled||(this.selectees=t(n.filter,this.element[0]),this._trigger("start",e),t(n.appendTo).append(this.helper),this.helper.css({left:e.pageX,top:e.pageY,width:0,height:0}),n.autoRefresh&&this.refresh(),this.selectees.filter(".ui-selected").each((function(){var n=t.data(this,"selectable-item");n.startselected=!0,e.metaKey||e.ctrlKey||(i._removeClass(n.$element,"ui-selected"),n.selected=!1,i._addClass(n.$element,"ui-unselecting"),n.unselecting=!0,i._trigger("unselecting",e,{unselecting:n.element}))})),t(e.target).parents().addBack().each((function(){var n,s=t.data(this,"selectable-item");if(s)return n=!e.metaKey&&!e.ctrlKey||!s.$element.hasClass("ui-selected"),i._removeClass(s.$element,n?"ui-unselecting":"ui-selected")._addClass(s.$element,n?"ui-selecting":"ui-unselecting"),s.unselecting=!n,s.selecting=n,s.selected=n,n?i._trigger("selecting",e,{selecting:s.element}):i._trigger("unselecting",e,{unselecting:s.element}),!1})))},_mouseDrag:function(e){if(this.dragged=!0,!this.options.disabled){var i,n=this,s=this.options,o=this.opos[0],r=this.opos[1],a=e.pageX,l=e.pageY;return o>a&&(i=a,a=o,o=i),r>l&&(i=l,l=r,r=i),this.helper.css({left:o,top:r,width:a-o,height:l-r}),this.selectees.each((function(){var i=t.data(this,"selectable-item"),c=!1,h={};i&&i.element!==n.element[0]&&(h.left=i.left+n.elementPos.left,h.right=i.right+n.elementPos.left,h.top=i.top+n.elementPos.top,h.bottom=i.bottom+n.elementPos.top,"touch"===s.tolerance?c=!(h.left>a||h.right<o||h.top>l||h.bottom<r):"fit"===s.tolerance&&(c=h.left>o&&h.right<a&&h.top>r&&h.bottom<l),c?(i.selected&&(n._removeClass(i.$element,"ui-selected"),i.selected=!1),i.unselecting&&(n._removeClass(i.$element,"ui-unselecting"),i.unselecting=!1),i.selecting||(n._addClass(i.$element,"ui-selecting"),i.selecting=!0,n._trigger("selecting",e,{selecting:i.element}))):(i.selecting&&((e.metaKey||e.ctrlKey)&&i.startselected?(n._removeClass(i.$element,"ui-selecting"),i.selecting=!1,n._addClass(i.$element,"ui-selected"),i.selected=!0):(n._removeClass(i.$element,"ui-selecting"),i.selecting=!1,i.startselected&&(n._addClass(i.$element,"ui-unselecting"),i.unselecting=!0),n._trigger("unselecting",e,{unselecting:i.element}))),i.selected&&(e.metaKey||e.ctrlKey||i.startselected||(n._removeClass(i.$element,"ui-selected"),i.selected=!1,n._addClass(i.$element,"ui-unselecting"),i.unselecting=!0,n._trigger("unselecting",e,{unselecting:i.element})))))})),!1}},_mouseStop:function(e){var i=this;return this.dragged=!1,t(".ui-unselecting",this.element[0]).each((function(){var n=t.data(this,"selectable-item");i._removeClass(n.$element,"ui-unselecting"),n.unselecting=!1,n.startselected=!1,i._trigger("unselected",e,{unselected:n.element})})),t(".ui-selecting",this.element[0]).each((function(){var n=t.data(this,"selectable-item");i._removeClass(n.$element,"ui-selecting")._addClass(n.$element,"ui-selected"),n.selecting=!1,n.selected=!0,n.startselected=!0,i._trigger("selected",e,{selected:n.element})})),this._trigger("stop",e),this.helper.remove(),!1}}),t.widget("ui.sortable",t.ui.mouse,{version:"1.12.1",widgetEventPrefix:"sort",ready:!1,options:{appendTo:"parent",axis:!1,connectWith:!1,containment:!1,cursor:"auto",cursorAt:!1,dropOnEmpty:!0,forcePlaceholderSize:!1,forceHelperSize:!1,grid:!1,handle:!1,helper:"original",items:"> *",opacity:!1,placeholder:!1,revert:!1,scroll:!0,scrollSensitivity:20,scrollSpeed:20,scope:"default",tolerance:"intersect",zIndex:1e3,activate:null,beforeStop:null,change:null,deactivate:null,out:null,over:null,receive:null,remove:null,sort:null,start:null,stop:null,update:null},_isOverAxis:function(t,e,i){return t>=e&&t<e+i},_isFloating:function(t){return/left|right/.test(t.css("float"))||/inline|table-cell/.test(t.css("display"))},_create:function(){this.containerCache={},this._addClass("ui-sortable"),this.refresh(),this.offset=this.element.offset(),this._mouseInit(),this._setHandleClassName(),this.ready=!0},_setOption:function(t,e){this._super(t,e),"handle"===t&&this._setHandleClassName()},_setHandleClassName:function(){var e=this;this._removeClass(this.element.find(".ui-sortable-handle"),"ui-sortable-handle"),t.each(this.items,(function(){e._addClass(this.instance.options.handle?this.item.find(this.instance.options.handle):this.item,"ui-sortable-handle")}))},_destroy:function(){this._mouseDestroy();for(var t=this.items.length-1;t>=0;t--)this.items[t].item.removeData(this.widgetName+"-item");return this},_mouseCapture:function(e,i){var n=null,s=!1,o=this;return!(this.reverting||this.options.disabled||"static"===this.options.type||(this._refreshItems(e),t(e.target).parents().each((function(){if(t.data(this,o.widgetName+"-item")===o)return n=t(this),!1})),t.data(e.target,o.widgetName+"-item")===o&&(n=t(e.target)),!n||this.options.handle&&!i&&(t(this.options.handle,n).find("*").addBack().each((function(){this===e.target&&(s=!0)})),!s)||(this.currentItem=n,this._removeCurrentsFromItems(),0)))},_mouseStart:function(e,i,n){var s,o,r=this.options;if(this.currentContainer=this,this.refreshPositions(),this.helper=this._createHelper(e),this._cacheHelperProportions(),this._cacheMargins(),this.scrollParent=this.helper.scrollParent(),this.offset=this.currentItem.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},t.extend(this.offset,{click:{left:e.pageX-this.offset.left,top:e.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()}),this.helper.css("position","absolute"),this.cssPosition=this.helper.css("position"),this.originalPosition=this._generatePosition(e),this.originalPageX=e.pageX,this.originalPageY=e.pageY,r.cursorAt&&this._adjustOffsetFromHelper(r.cursorAt),this.domPosition={prev:this.currentItem.prev()[0],parent:this.currentItem.parent()[0]},this.helper[0]!==this.currentItem[0]&&this.currentItem.hide(),this._createPlaceholder(),r.containment&&this._setContainment(),r.cursor&&"auto"!==r.cursor&&(o=this.document.find("body"),this.storedCursor=o.css("cursor"),o.css("cursor",r.cursor),this.storedStylesheet=t("<style>*{ cursor: "+r.cursor+" !important; }</style>").appendTo(o)),r.opacity&&(this.helper.css("opacity")&&(this._storedOpacity=this.helper.css("opacity")),this.helper.css("opacity",r.opacity)),r.zIndex&&(this.helper.css("zIndex")&&(this._storedZIndex=this.helper.css("zIndex")),this.helper.css("zIndex",r.zIndex)),this.scrollParent[0]!==this.document[0]&&"HTML"!==this.scrollParent[0].tagName&&(this.overflowOffset=this.scrollParent.offset()),this._trigger("start",e,this._uiHash()),this._preserveHelperProportions||this._cacheHelperProportions(),!n)for(s=this.containers.length-1;s>=0;s--)this.containers[s]._trigger("activate",e,this._uiHash(this));return t.ui.ddmanager&&(t.ui.ddmanager.current=this),t.ui.ddmanager&&!r.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e),this.dragging=!0,this._addClass(this.helper,"ui-sortable-helper"),this._mouseDrag(e),!0},_mouseDrag:function(e){var i,n,s,o,r=this.options,a=!1;for(this.position=this._generatePosition(e),this.positionAbs=this._convertPositionTo("absolute"),this.lastPositionAbs||(this.lastPositionAbs=this.positionAbs),this.options.scroll&&(this.scrollParent[0]!==this.document[0]&&"HTML"!==this.scrollParent[0].tagName?(this.overflowOffset.top+this.scrollParent[0].offsetHeight-e.pageY<r.scrollSensitivity?this.scrollParent[0].scrollTop=a=this.scrollParent[0].scrollTop+r.scrollSpeed:e.pageY-this.overflowOffset.top<r.scrollSensitivity&&(this.scrollParent[0].scrollTop=a=this.scrollParent[0].scrollTop-r.scrollSpeed),this.overflowOffset.left+this.scrollParent[0].offsetWidth-e.pageX<r.scrollSensitivity?this.scrollParent[0].scrollLeft=a=this.scrollParent[0].scrollLeft+r.scrollSpeed:e.pageX-this.overflowOffset.left<r.scrollSensitivity&&(this.scrollParent[0].scrollLeft=a=this.scrollParent[0].scrollLeft-r.scrollSpeed)):(e.pageY-this.document.scrollTop()<r.scrollSensitivity?a=this.document.scrollTop(this.document.scrollTop()-r.scrollSpeed):this.window.height()-(e.pageY-this.document.scrollTop())<r.scrollSensitivity&&(a=this.document.scrollTop(this.document.scrollTop()+r.scrollSpeed)),e.pageX-this.document.scrollLeft()<r.scrollSensitivity?a=this.document.scrollLeft(this.document.scrollLeft()-r.scrollSpeed):this.window.width()-(e.pageX-this.document.scrollLeft())<r.scrollSensitivity&&(a=this.document.scrollLeft(this.document.scrollLeft()+r.scrollSpeed))),!1!==a&&t.ui.ddmanager&&!r.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e)),this.positionAbs=this._convertPositionTo("absolute"),this.options.axis&&"y"===this.options.axis||(this.helper[0].style.left=this.position.left+"px"),this.options.axis&&"x"===this.options.axis||(this.helper[0].style.top=this.position.top+"px"),i=this.items.length-1;i>=0;i--)if(s=(n=this.items[i]).item[0],(o=this._intersectsWithPointer(n))&&n.instance===this.currentContainer&&!(s===this.currentItem[0]||this.placeholder[1===o?"next":"prev"]()[0]===s||t.contains(this.placeholder[0],s)||"semi-dynamic"===this.options.type&&t.contains(this.element[0],s))){if(this.direction=1===o?"down":"up","pointer"!==this.options.tolerance&&!this._intersectsWithSides(n))break;this._rearrange(e,n),this._trigger("change",e,this._uiHash());break}return this._contactContainers(e),t.ui.ddmanager&&t.ui.ddmanager.drag(this,e),this._trigger("sort",e,this._uiHash()),this.lastPositionAbs=this.positionAbs,!1},_mouseStop:function(e,i){if(e){if(t.ui.ddmanager&&!this.options.dropBehaviour&&t.ui.ddmanager.drop(this,e),this.options.revert){var n=this,s=this.placeholder.offset(),o=this.options.axis,r={};o&&"x"!==o||(r.left=s.left-this.offset.parent.left-this.margins.left+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollLeft)),o&&"y"!==o||(r.top=s.top-this.offset.parent.top-this.margins.top+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollTop)),this.reverting=!0,t(this.helper).animate(r,parseInt(this.options.revert,10)||500,(function(){n._clear(e)}))}else this._clear(e,i);return!1}},cancel:function(){if(this.dragging){this._mouseUp(new t.Event("mouseup",{target:null})),"original"===this.options.helper?(this.currentItem.css(this._storedCSS),this._removeClass(this.currentItem,"ui-sortable-helper")):this.currentItem.show();for(var e=this.containers.length-1;e>=0;e--)this.containers[e]._trigger("deactivate",null,this._uiHash(this)),this.containers[e].containerCache.over&&(this.containers[e]._trigger("out",null,this._uiHash(this)),this.containers[e].containerCache.over=0)}return this.placeholder&&(this.placeholder[0].parentNode&&this.placeholder[0].parentNode.removeChild(this.placeholder[0]),"original"!==this.options.helper&&this.helper&&this.helper[0].parentNode&&this.helper.remove(),t.extend(this,{helper:null,dragging:!1,reverting:!1,_noFinalSort:null}),this.domPosition.prev?t(this.domPosition.prev).after(this.currentItem):t(this.domPosition.parent).prepend(this.currentItem)),this},serialize:function(e){var i=this._getItemsAsjQuery(e&&e.connected),n=[];return e=e||{},t(i).each((function(){var i=(t(e.item||this).attr(e.attribute||"id")||"").match(e.expression||/(.+)[\-=_](.+)/);i&&n.push((e.key||i[1]+"[]")+"="+(e.key&&e.expression?i[1]:i[2]))})),!n.length&&e.key&&n.push(e.key+"="),n.join("&")},toArray:function(e){var i=this._getItemsAsjQuery(e&&e.connected),n=[];return e=e||{},i.each((function(){n.push(t(e.item||this).attr(e.attribute||"id")||"")})),n},_intersectsWith:function(t){var e=this.positionAbs.left,i=e+this.helperProportions.width,n=this.positionAbs.top,s=n+this.helperProportions.height,o=t.left,r=o+t.width,a=t.top,l=a+t.height,c=this.offset.click.top,h=this.offset.click.left,u="x"===this.options.axis||n+c>a&&n+c<l,d="y"===this.options.axis||e+h>o&&e+h<r,p=u&&d;return"pointer"===this.options.tolerance||this.options.forcePointerForContainers||"pointer"!==this.options.tolerance&&this.helperProportions[this.floating?"width":"height"]>t[this.floating?"width":"height"]?p:o<e+this.helperProportions.width/2&&i-this.helperProportions.width/2<r&&a<n+this.helperProportions.height/2&&s-this.helperProportions.height/2<l},_intersectsWithPointer:function(t){var e,i,n="x"===this.options.axis||this._isOverAxis(this.positionAbs.top+this.offset.click.top,t.top,t.height),s="y"===this.options.axis||this._isOverAxis(this.positionAbs.left+this.offset.click.left,t.left,t.width);return!(!n||!s)&&(e=this._getDragVerticalDirection(),i=this._getDragHorizontalDirection(),this.floating?"right"===i||"down"===e?2:1:e&&("down"===e?2:1))},_intersectsWithSides:function(t){var e=this._isOverAxis(this.positionAbs.top+this.offset.click.top,t.top+t.height/2,t.height),i=this._isOverAxis(this.positionAbs.left+this.offset.click.left,t.left+t.width/2,t.width),n=this._getDragVerticalDirection(),s=this._getDragHorizontalDirection();return this.floating&&s?"right"===s&&i||"left"===s&&!i:n&&("down"===n&&e||"up"===n&&!e)},_getDragVerticalDirection:function(){var t=this.positionAbs.top-this.lastPositionAbs.top;return 0!==t&&(t>0?"down":"up")},_getDragHorizontalDirection:function(){var t=this.positionAbs.left-this.lastPositionAbs.left;return 0!==t&&(t>0?"right":"left")},refresh:function(t){return this._refreshItems(t),this._setHandleClassName(),this.refreshPositions(),this},_connectWith:function(){var t=this.options;return t.connectWith.constructor===String?[t.connectWith]:t.connectWith},_getItemsAsjQuery:function(e){var i,n,s,o,r=[],a=[],l=this._connectWith();if(l&&e)for(i=l.length-1;i>=0;i--)for(n=(s=t(l[i],this.document[0])).length-1;n>=0;n--)(o=t.data(s[n],this.widgetFullName))&&o!==this&&!o.options.disabled&&a.push([t.isFunction(o.options.items)?o.options.items.call(o.element):t(o.options.items,o.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),o]);function c(){r.push(this)}for(a.push([t.isFunction(this.options.items)?this.options.items.call(this.element,null,{options:this.options,item:this.currentItem}):t(this.options.items,this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),this]),i=a.length-1;i>=0;i--)a[i][0].each(c);return t(r)},_removeCurrentsFromItems:function(){var e=this.currentItem.find(":data("+this.widgetName+"-item)");this.items=t.grep(this.items,(function(t){for(var i=0;i<e.length;i++)if(e[i]===t.item[0])return!1;return!0}))},_refreshItems:function(e){this.items=[],this.containers=[this];var i,n,s,o,r,a,l,c,h=this.items,u=[[t.isFunction(this.options.items)?this.options.items.call(this.element[0],e,{item:this.currentItem}):t(this.options.items,this.element),this]],d=this._connectWith();if(d&&this.ready)for(i=d.length-1;i>=0;i--)for(n=(s=t(d[i],this.document[0])).length-1;n>=0;n--)(o=t.data(s[n],this.widgetFullName))&&o!==this&&!o.options.disabled&&(u.push([t.isFunction(o.options.items)?o.options.items.call(o.element[0],e,{item:this.currentItem}):t(o.options.items,o.element),o]),this.containers.push(o));for(i=u.length-1;i>=0;i--)for(r=u[i][1],n=0,c=(a=u[i][0]).length;n<c;n++)(l=t(a[n])).data(this.widgetName+"-item",r),h.push({item:l,instance:r,width:0,height:0,left:0,top:0})},refreshPositions:function(e){var i,n,s,o;for(this.floating=!!this.items.length&&("x"===this.options.axis||this._isFloating(this.items[0].item)),this.offsetParent&&this.helper&&(this.offset.parent=this._getParentOffset()),i=this.items.length-1;i>=0;i--)(n=this.items[i]).instance!==this.currentContainer&&this.currentContainer&&n.item[0]!==this.currentItem[0]||(s=this.options.toleranceElement?t(this.options.toleranceElement,n.item):n.item,e||(n.width=s.outerWidth(),n.height=s.outerHeight()),o=s.offset(),n.left=o.left,n.top=o.top);if(this.options.custom&&this.options.custom.refreshContainers)this.options.custom.refreshContainers.call(this);else for(i=this.containers.length-1;i>=0;i--)o=this.containers[i].element.offset(),this.containers[i].containerCache.left=o.left,this.containers[i].containerCache.top=o.top,this.containers[i].containerCache.width=this.containers[i].element.outerWidth(),this.containers[i].containerCache.height=this.containers[i].element.outerHeight();return this},_createPlaceholder:function(e){var i,n=(e=e||this).options;n.placeholder&&n.placeholder.constructor!==String||(i=n.placeholder,n.placeholder={element:function(){var n=e.currentItem[0].nodeName.toLowerCase(),s=t("<"+n+">",e.document[0]);return e._addClass(s,"ui-sortable-placeholder",i||e.currentItem[0].className)._removeClass(s,"ui-sortable-helper"),"tbody"===n?e._createTrPlaceholder(e.currentItem.find("tr").eq(0),t("<tr>",e.document[0]).appendTo(s)):"tr"===n?e._createTrPlaceholder(e.currentItem,s):"img"===n&&s.attr("src",e.currentItem.attr("src")),i||s.css("visibility","hidden"),s},update:function(t,s){i&&!n.forcePlaceholderSize||(s.height()||s.height(e.currentItem.innerHeight()-parseInt(e.currentItem.css("paddingTop")||0,10)-parseInt(e.currentItem.css("paddingBottom")||0,10)),s.width()||s.width(e.currentItem.innerWidth()-parseInt(e.currentItem.css("paddingLeft")||0,10)-parseInt(e.currentItem.css("paddingRight")||0,10)))}}),e.placeholder=t(n.placeholder.element.call(e.element,e.currentItem)),e.currentItem.after(e.placeholder),n.placeholder.update(e,e.placeholder)},_createTrPlaceholder:function(e,i){var n=this;e.children().each((function(){t("<td>&#160;</td>",n.document[0]).attr("colspan",t(this).attr("colspan")||1).appendTo(i)}))},_contactContainers:function(e){var i,n,s,o,r,a,l,c,h,u,d=null,p=null;for(i=this.containers.length-1;i>=0;i--)if(!t.contains(this.currentItem[0],this.containers[i].element[0]))if(this._intersectsWith(this.containers[i].containerCache)){if(d&&t.contains(this.containers[i].element[0],d.element[0]))continue;d=this.containers[i],p=i}else this.containers[i].containerCache.over&&(this.containers[i]._trigger("out",e,this._uiHash(this)),this.containers[i].containerCache.over=0);if(d)if(1===this.containers.length)this.containers[p].containerCache.over||(this.containers[p]._trigger("over",e,this._uiHash(this)),this.containers[p].containerCache.over=1);else{for(s=1e4,o=null,r=(h=d.floating||this._isFloating(this.currentItem))?"left":"top",a=h?"width":"height",u=h?"pageX":"pageY",n=this.items.length-1;n>=0;n--)t.contains(this.containers[p].element[0],this.items[n].item[0])&&this.items[n].item[0]!==this.currentItem[0]&&(l=this.items[n].item.offset()[r],c=!1,e[u]-l>this.items[n][a]/2&&(c=!0),Math.abs(e[u]-l)<s&&(s=Math.abs(e[u]-l),o=this.items[n],this.direction=c?"up":"down"));if(!o&&!this.options.dropOnEmpty)return;if(this.currentContainer===this.containers[p])return void(this.currentContainer.containerCache.over||(this.containers[p]._trigger("over",e,this._uiHash()),this.currentContainer.containerCache.over=1));o?this._rearrange(e,o,null,!0):this._rearrange(e,null,this.containers[p].element,!0),this._trigger("change",e,this._uiHash()),this.containers[p]._trigger("change",e,this._uiHash(this)),this.currentContainer=this.containers[p],this.options.placeholder.update(this.currentContainer,this.placeholder),this.containers[p]._trigger("over",e,this._uiHash(this)),this.containers[p].containerCache.over=1}},_createHelper:function(e){var i=this.options,n=t.isFunction(i.helper)?t(i.helper.apply(this.element[0],[e,this.currentItem])):"clone"===i.helper?this.currentItem.clone():this.currentItem;return n.parents("body").length||t("parent"!==i.appendTo?i.appendTo:this.currentItem[0].parentNode)[0].appendChild(n[0]),n[0]===this.currentItem[0]&&(this._storedCSS={width:this.currentItem[0].style.width,height:this.currentItem[0].style.height,position:this.currentItem.css("position"),top:this.currentItem.css("top"),left:this.currentItem.css("left")}),n[0].style.width&&!i.forceHelperSize||n.width(this.currentItem.width()),n[0].style.height&&!i.forceHelperSize||n.height(this.currentItem.height()),n},_adjustOffsetFromHelper:function(e){"string"==typeof e&&(e=e.split(" ")),t.isArray(e)&&(e={left:+e[0],top:+e[1]||0}),"left"in e&&(this.offset.click.left=e.left+this.margins.left),"right"in e&&(this.offset.click.left=this.helperProportions.width-e.right+this.margins.left),"top"in e&&(this.offset.click.top=e.top+this.margins.top),"bottom"in e&&(this.offset.click.top=this.helperProportions.height-e.bottom+this.margins.top)},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var e=this.offsetParent.offset();return"absolute"===this.cssPosition&&this.scrollParent[0]!==this.document[0]&&t.contains(this.scrollParent[0],this.offsetParent[0])&&(e.left+=this.scrollParent.scrollLeft(),e.top+=this.scrollParent.scrollTop()),(this.offsetParent[0]===this.document[0].body||this.offsetParent[0].tagName&&"html"===this.offsetParent[0].tagName.toLowerCase()&&t.ui.ie)&&(e={top:0,left:0}),{top:e.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:e.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"===this.cssPosition){var t=this.currentItem.position();return{top:t.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:t.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.currentItem.css("marginLeft"),10)||0,top:parseInt(this.currentItem.css("marginTop"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var e,i,n,s=this.options;"parent"===s.containment&&(s.containment=this.helper[0].parentNode),"document"!==s.containment&&"window"!==s.containment||(this.containment=[0-this.offset.relative.left-this.offset.parent.left,0-this.offset.relative.top-this.offset.parent.top,"document"===s.containment?this.document.width():this.window.width()-this.helperProportions.width-this.margins.left,("document"===s.containment?this.document.height()||document.body.parentNode.scrollHeight:this.window.height()||this.document[0].body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]),/^(document|window|parent)$/.test(s.containment)||(e=t(s.containment)[0],i=t(s.containment).offset(),n="hidden"!==t(e).css("overflow"),this.containment=[i.left+(parseInt(t(e).css("borderLeftWidth"),10)||0)+(parseInt(t(e).css("paddingLeft"),10)||0)-this.margins.left,i.top+(parseInt(t(e).css("borderTopWidth"),10)||0)+(parseInt(t(e).css("paddingTop"),10)||0)-this.margins.top,i.left+(n?Math.max(e.scrollWidth,e.offsetWidth):e.offsetWidth)-(parseInt(t(e).css("borderLeftWidth"),10)||0)-(parseInt(t(e).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left,i.top+(n?Math.max(e.scrollHeight,e.offsetHeight):e.offsetHeight)-(parseInt(t(e).css("borderTopWidth"),10)||0)-(parseInt(t(e).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top])},_convertPositionTo:function(e,i){i||(i=this.position);var n="absolute"===e?1:-1,s="absolute"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&t.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,o=/(html|body)/i.test(s[0].tagName);return{top:i.top+this.offset.relative.top*n+this.offset.parent.top*n-("fixed"===this.cssPosition?-this.scrollParent.scrollTop():o?0:s.scrollTop())*n,left:i.left+this.offset.relative.left*n+this.offset.parent.left*n-("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():o?0:s.scrollLeft())*n}},_generatePosition:function(e){var i,n,s=this.options,o=e.pageX,r=e.pageY,a="absolute"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&t.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,l=/(html|body)/i.test(a[0].tagName);return"relative"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&this.scrollParent[0]!==this.offsetParent[0]||(this.offset.relative=this._getRelativeOffset()),this.originalPosition&&(this.containment&&(e.pageX-this.offset.click.left<this.containment[0]&&(o=this.containment[0]+this.offset.click.left),e.pageY-this.offset.click.top<this.containment[1]&&(r=this.containment[1]+this.offset.click.top),e.pageX-this.offset.click.left>this.containment[2]&&(o=this.containment[2]+this.offset.click.left),e.pageY-this.offset.click.top>this.containment[3]&&(r=this.containment[3]+this.offset.click.top)),s.grid&&(i=this.originalPageY+Math.round((r-this.originalPageY)/s.grid[1])*s.grid[1],r=this.containment?i-this.offset.click.top>=this.containment[1]&&i-this.offset.click.top<=this.containment[3]?i:i-this.offset.click.top>=this.containment[1]?i-s.grid[1]:i+s.grid[1]:i,n=this.originalPageX+Math.round((o-this.originalPageX)/s.grid[0])*s.grid[0],o=this.containment?n-this.offset.click.left>=this.containment[0]&&n-this.offset.click.left<=this.containment[2]?n:n-this.offset.click.left>=this.containment[0]?n-s.grid[0]:n+s.grid[0]:n)),{top:r-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.scrollParent.scrollTop():l?0:a.scrollTop()),left:o-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():l?0:a.scrollLeft())}},_rearrange:function(t,e,i,n){i?i[0].appendChild(this.placeholder[0]):e.item[0].parentNode.insertBefore(this.placeholder[0],"down"===this.direction?e.item[0]:e.item[0].nextSibling),this.counter=this.counter?++this.counter:1;var s=this.counter;this._delay((function(){s===this.counter&&this.refreshPositions(!n)}))},_clear:function(t,e){this.reverting=!1;var i,n=[];if(!this._noFinalSort&&this.currentItem.parent().length&&this.placeholder.before(this.currentItem),this._noFinalSort=null,this.helper[0]===this.currentItem[0]){for(i in this._storedCSS)"auto"!==this._storedCSS[i]&&"static"!==this._storedCSS[i]||(this._storedCSS[i]="");this.currentItem.css(this._storedCSS),this._removeClass(this.currentItem,"ui-sortable-helper")}else this.currentItem.show();function s(t,e,i){return function(n){i._trigger(t,n,e._uiHash(e))}}for(this.fromOutside&&!e&&n.push((function(t){this._trigger("receive",t,this._uiHash(this.fromOutside))})),!this.fromOutside&&this.domPosition.prev===this.currentItem.prev().not(".ui-sortable-helper")[0]&&this.domPosition.parent===this.currentItem.parent()[0]||e||n.push((function(t){this._trigger("update",t,this._uiHash())})),this!==this.currentContainer&&(e||(n.push((function(t){this._trigger("remove",t,this._uiHash())})),n.push(function(t){return function(e){t._trigger("receive",e,this._uiHash(this))}}.call(this,this.currentContainer)),n.push(function(t){return function(e){t._trigger("update",e,this._uiHash(this))}}.call(this,this.currentContainer)))),i=this.containers.length-1;i>=0;i--)e||n.push(s("deactivate",this,this.containers[i])),this.containers[i].containerCache.over&&(n.push(s("out",this,this.containers[i])),this.containers[i].containerCache.over=0);if(this.storedCursor&&(this.document.find("body").css("cursor",this.storedCursor),this.storedStylesheet.remove()),this._storedOpacity&&this.helper.css("opacity",this._storedOpacity),this._storedZIndex&&this.helper.css("zIndex","auto"===this._storedZIndex?"":this._storedZIndex),this.dragging=!1,e||this._trigger("beforeStop",t,this._uiHash()),this.placeholder[0].parentNode.removeChild(this.placeholder[0]),this.cancelHelperRemoval||(this.helper[0]!==this.currentItem[0]&&this.helper.remove(),this.helper=null),!e){for(i=0;i<n.length;i++)n[i].call(this,t);this._trigger("stop",t,this._uiHash())}return this.fromOutside=!1,!this.cancelHelperRemoval},_trigger:function(){!1===t.Widget.prototype._trigger.apply(this,arguments)&&this.cancel()},_uiHash:function(e){var i=e||this;return{helper:i.helper,placeholder:i.placeholder||t([]),position:i.position,originalPosition:i.originalPosition,offset:i.positionAbs,item:i.currentItem,sender:e?e.element:null}}}),t.widget("ui.accordion",{version:"1.12.1",options:{active:0,animate:{},classes:{"ui-accordion-header":"ui-corner-top","ui-accordion-header-collapsed":"ui-corner-all","ui-accordion-content":"ui-corner-bottom"},collapsible:!1,event:"click",header:"> li > :first-child, > :not(li):even",heightStyle:"auto",icons:{activeHeader:"ui-icon-triangle-1-s",header:"ui-icon-triangle-1-e"},activate:null,beforeActivate:null},hideProps:{borderTopWidth:"hide",borderBottomWidth:"hide",paddingTop:"hide",paddingBottom:"hide",height:"hide"},showProps:{borderTopWidth:"show",borderBottomWidth:"show",paddingTop:"show",paddingBottom:"show",height:"show"},_create:function(){var e=this.options;this.prevShow=this.prevHide=t(),this._addClass("ui-accordion","ui-widget ui-helper-reset"),this.element.attr("role","tablist"),e.collapsible||!1!==e.active&&null!=e.active||(e.active=0),this._processPanels(),e.active<0&&(e.active+=this.headers.length),this._refresh()},_getCreateEventData:function(){return{header:this.active,panel:this.active.length?this.active.next():t()}},_createIcons:function(){var e,i,n=this.options.icons;n&&(e=t("<span>"),this._addClass(e,"ui-accordion-header-icon","ui-icon "+n.header),e.prependTo(this.headers),i=this.active.children(".ui-accordion-header-icon"),this._removeClass(i,n.header)._addClass(i,null,n.activeHeader)._addClass(this.headers,"ui-accordion-icons"))},_destroyIcons:function(){this._removeClass(this.headers,"ui-accordion-icons"),this.headers.children(".ui-accordion-header-icon").remove()},_destroy:function(){var t;this.element.removeAttr("role"),this.headers.removeAttr("role aria-expanded aria-selected aria-controls tabIndex").removeUniqueId(),this._destroyIcons(),t=this.headers.next().css("display","").removeAttr("role aria-hidden aria-labelledby").removeUniqueId(),"content"!==this.options.heightStyle&&t.css("height","")},_setOption:function(t,e){"active"!==t?("event"===t&&(this.options.event&&this._off(this.headers,this.options.event),this._setupEvents(e)),this._super(t,e),"collapsible"!==t||e||!1!==this.options.active||this._activate(0),"icons"===t&&(this._destroyIcons(),e&&this._createIcons())):this._activate(e)},_setOptionDisabled:function(t){this._super(t),this.element.attr("aria-disabled",t),this._toggleClass(null,"ui-state-disabled",!!t),this._toggleClass(this.headers.add(this.headers.next()),null,"ui-state-disabled",!!t)},_keydown:function(e){if(!e.altKey&&!e.ctrlKey){var i=t.ui.keyCode,n=this.headers.length,s=this.headers.index(e.target),o=!1;switch(e.keyCode){case i.RIGHT:case i.DOWN:o=this.headers[(s+1)%n];break;case i.LEFT:case i.UP:o=this.headers[(s-1+n)%n];break;case i.SPACE:case i.ENTER:this._eventHandler(e);break;case i.HOME:o=this.headers[0];break;case i.END:o=this.headers[n-1]}o&&(t(e.target).attr("tabIndex",-1),t(o).attr("tabIndex",0),t(o).trigger("focus"),e.preventDefault())}},_panelKeyDown:function(e){e.keyCode===t.ui.keyCode.UP&&e.ctrlKey&&t(e.currentTarget).prev().trigger("focus")},refresh:function(){var e=this.options;this._processPanels(),!1===e.active&&!0===e.collapsible||!this.headers.length?(e.active=!1,this.active=t()):!1===e.active?this._activate(0):this.active.length&&!t.contains(this.element[0],this.active[0])?this.headers.length===this.headers.find(".ui-state-disabled").length?(e.active=!1,this.active=t()):this._activate(Math.max(0,e.active-1)):e.active=this.headers.index(this.active),this._destroyIcons(),this._refresh()},_processPanels:function(){var t=this.headers,e=this.panels;this.headers=this.element.find(this.options.header),this._addClass(this.headers,"ui-accordion-header ui-accordion-header-collapsed","ui-state-default"),this.panels=this.headers.next().filter(":not(.ui-accordion-content-active)").hide(),this._addClass(this.panels,"ui-accordion-content","ui-helper-reset ui-widget-content"),e&&(this._off(t.not(this.headers)),this._off(e.not(this.panels)))},_refresh:function(){var e,i=this.options,n=i.heightStyle,s=this.element.parent();this.active=this._findActive(i.active),this._addClass(this.active,"ui-accordion-header-active","ui-state-active")._removeClass(this.active,"ui-accordion-header-collapsed"),this._addClass(this.active.next(),"ui-accordion-content-active"),this.active.next().show(),this.headers.attr("role","tab").each((function(){var e=t(this),i=e.uniqueId().attr("id"),n=e.next(),s=n.uniqueId().attr("id");e.attr("aria-controls",s),n.attr("aria-labelledby",i)})).next().attr("role","tabpanel"),this.headers.not(this.active).attr({"aria-selected":"false","aria-expanded":"false",tabIndex:-1}).next().attr({"aria-hidden":"true"}).hide(),this.active.length?this.active.attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0}).next().attr({"aria-hidden":"false"}):this.headers.eq(0).attr("tabIndex",0),this._createIcons(),this._setupEvents(i.event),"fill"===n?(e=s.height(),this.element.siblings(":visible").each((function(){var i=t(this),n=i.css("position");"absolute"!==n&&"fixed"!==n&&(e-=i.outerHeight(!0))})),this.headers.each((function(){e-=t(this).outerHeight(!0)})),this.headers.next().each((function(){t(this).height(Math.max(0,e-t(this).innerHeight()+t(this).height()))})).css("overflow","auto")):"auto"===n&&(e=0,this.headers.next().each((function(){var i=t(this).is(":visible");i||t(this).show(),e=Math.max(e,t(this).css("height","").height()),i||t(this).hide()})).height(e))},_activate:function(e){var i=this._findActive(e)[0];i!==this.active[0]&&(i=i||this.active[0],this._eventHandler({target:i,currentTarget:i,preventDefault:t.noop}))},_findActive:function(e){return"number"==typeof e?this.headers.eq(e):t()},_setupEvents:function(e){var i={keydown:"_keydown"};e&&t.each(e.split(" "),(function(t,e){i[e]="_eventHandler"})),this._off(this.headers.add(this.headers.next())),this._on(this.headers,i),this._on(this.headers.next(),{keydown:"_panelKeyDown"}),this._hoverable(this.headers),this._focusable(this.headers)},_eventHandler:function(e){var i,n,s=this.options,o=this.active,r=t(e.currentTarget),a=r[0]===o[0],l=a&&s.collapsible,c=l?t():r.next(),h=o.next(),u={oldHeader:o,oldPanel:h,newHeader:l?t():r,newPanel:c};e.preventDefault(),a&&!s.collapsible||!1===this._trigger("beforeActivate",e,u)||(s.active=!l&&this.headers.index(r),this.active=a?t():r,this._toggle(u),this._removeClass(o,"ui-accordion-header-active","ui-state-active"),s.icons&&(i=o.children(".ui-accordion-header-icon"),this._removeClass(i,null,s.icons.activeHeader)._addClass(i,null,s.icons.header)),a||(this._removeClass(r,"ui-accordion-header-collapsed")._addClass(r,"ui-accordion-header-active","ui-state-active"),s.icons&&(n=r.children(".ui-accordion-header-icon"),this._removeClass(n,null,s.icons.header)._addClass(n,null,s.icons.activeHeader)),this._addClass(r.next(),"ui-accordion-content-active")))},_toggle:function(e){var i=e.newPanel,n=this.prevShow.length?this.prevShow:e.oldPanel;this.prevShow.add(this.prevHide).stop(!0,!0),this.prevShow=i,this.prevHide=n,this.options.animate?this._animate(i,n,e):(n.hide(),i.show(),this._toggleComplete(e)),n.attr({"aria-hidden":"true"}),n.prev().attr({"aria-selected":"false","aria-expanded":"false"}),i.length&&n.length?n.prev().attr({tabIndex:-1,"aria-expanded":"false"}):i.length&&this.headers.filter((function(){return 0===parseInt(t(this).attr("tabIndex"),10)})).attr("tabIndex",-1),i.attr("aria-hidden","false").prev().attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0})},_animate:function(t,e,i){var n,s,o,r=this,a=0,l=t.css("box-sizing"),c=t.length&&(!e.length||t.index()<e.index()),h=this.options.animate||{},u=c&&h.down||h,d=function(){r._toggleComplete(i)};return"number"==typeof u&&(o=u),"string"==typeof u&&(s=u),s=s||u.easing||h.easing,o=o||u.duration||h.duration,e.length?t.length?(n=t.show().outerHeight(),e.animate(this.hideProps,{duration:o,easing:s,step:function(t,e){e.now=Math.round(t)}}),void t.hide().animate(this.showProps,{duration:o,easing:s,complete:d,step:function(t,i){i.now=Math.round(t),"height"!==i.prop?"content-box"===l&&(a+=i.now):"content"!==r.options.heightStyle&&(i.now=Math.round(n-e.outerHeight()-a),a=0)}})):e.animate(this.hideProps,o,s,d):t.animate(this.showProps,o,s,d)},_toggleComplete:function(t){var e=t.oldPanel,i=e.prev();this._removeClass(e,"ui-accordion-content-active"),this._removeClass(i,"ui-accordion-header-active")._addClass(i,"ui-accordion-header-collapsed"),e.length&&(e.parent()[0].className=e.parent()[0].className),this._trigger("activate",null,t)}}),t.widget("ui.menu",{version:"1.12.1",defaultElement:"<ul>",delay:300,options:{icons:{submenu:"ui-icon-caret-1-e"},items:"> *",menus:"ul",position:{my:"left top",at:"right top"},role:"menu",blur:null,focus:null,select:null},_create:function(){this.activeMenu=this.element,this.mouseHandled=!1,this.element.uniqueId().attr({role:this.options.role,tabIndex:0}),this._addClass("ui-menu","ui-widget ui-widget-content"),this._on({"mousedown .ui-menu-item":function(t){t.preventDefault()},"click .ui-menu-item":function(e){var i=t(e.target),n=t(t.ui.safeActiveElement(this.document[0]));!this.mouseHandled&&i.not(".ui-state-disabled").length&&(this.select(e),e.isPropagationStopped()||(this.mouseHandled=!0),i.has(".ui-menu").length?this.expand(e):!this.element.is(":focus")&&n.closest(".ui-menu").length&&(this.element.trigger("focus",[!0]),this.active&&1===this.active.parents(".ui-menu").length&&clearTimeout(this.timer)))},"mouseenter .ui-menu-item":function(e){if(!this.previousFilter){var i=t(e.target).closest(".ui-menu-item"),n=t(e.currentTarget);i[0]===n[0]&&(this._removeClass(n.siblings().children(".ui-state-active"),null,"ui-state-active"),this.focus(e,n))}},mouseleave:"collapseAll","mouseleave .ui-menu":"collapseAll",focus:function(t,e){var i=this.active||this.element.find(this.options.items).eq(0);e||this.focus(t,i)},blur:function(e){this._delay((function(){!t.contains(this.element[0],t.ui.safeActiveElement(this.document[0]))&&this.collapseAll(e)}))},keydown:"_keydown"}),this.refresh(),this._on(this.document,{click:function(t){this._closeOnDocumentClick(t)&&this.collapseAll(t),this.mouseHandled=!1}})},_destroy:function(){var e=this.element.find(".ui-menu-item").removeAttr("role aria-disabled").children(".ui-menu-item-wrapper").removeUniqueId().removeAttr("tabIndex role aria-haspopup");this.element.removeAttr("aria-activedescendant").find(".ui-menu").addBack().removeAttr("role aria-labelledby aria-expanded aria-hidden aria-disabled tabIndex").removeUniqueId().show(),e.children().each((function(){var e=t(this);e.data("ui-menu-submenu-caret")&&e.remove()}))},_keydown:function(e){var i,n,s,o,r=!0;switch(e.keyCode){case t.ui.keyCode.PAGE_UP:this.previousPage(e);break;case t.ui.keyCode.PAGE_DOWN:this.nextPage(e);break;case t.ui.keyCode.HOME:this._move("first","first",e);break;case t.ui.keyCode.END:this._move("last","last",e);break;case t.ui.keyCode.UP:this.previous(e);break;case t.ui.keyCode.DOWN:this.next(e);break;case t.ui.keyCode.LEFT:this.collapse(e);break;case t.ui.keyCode.RIGHT:this.active&&!this.active.is(".ui-state-disabled")&&this.expand(e);break;case t.ui.keyCode.ENTER:case t.ui.keyCode.SPACE:this._activate(e);break;case t.ui.keyCode.ESCAPE:this.collapse(e);break;default:r=!1,n=this.previousFilter||"",o=!1,s=e.keyCode>=96&&e.keyCode<=105?(e.keyCode-96).toString():String.fromCharCode(e.keyCode),clearTimeout(this.filterTimer),s===n?o=!0:s=n+s,i=this._filterMenuItems(s),(i=o&&-1!==i.index(this.active.next())?this.active.nextAll(".ui-menu-item"):i).length||(s=String.fromCharCode(e.keyCode),i=this._filterMenuItems(s)),i.length?(this.focus(e,i),this.previousFilter=s,this.filterTimer=this._delay((function(){delete this.previousFilter}),1e3)):delete this.previousFilter}r&&e.preventDefault()},_activate:function(t){this.active&&!this.active.is(".ui-state-disabled")&&(this.active.children("[aria-haspopup='true']").length?this.expand(t):this.select(t))},refresh:function(){var e,i,n,s,o=this,r=this.options.icons.submenu,a=this.element.find(this.options.menus);this._toggleClass("ui-menu-icons",null,!!this.element.find(".ui-icon").length),i=a.filter(":not(.ui-menu)").hide().attr({role:this.options.role,"aria-hidden":"true","aria-expanded":"false"}).each((function(){var e=t(this),i=e.prev(),n=t("<span>").data("ui-menu-submenu-caret",!0);o._addClass(n,"ui-menu-icon","ui-icon "+r),i.attr("aria-haspopup","true").prepend(n),e.attr("aria-labelledby",i.attr("id"))})),this._addClass(i,"ui-menu","ui-widget ui-widget-content ui-front"),(e=a.add(this.element).find(this.options.items)).not(".ui-menu-item").each((function(){var e=t(this);o._isDivider(e)&&o._addClass(e,"ui-menu-divider","ui-widget-content")})),s=(n=e.not(".ui-menu-item, .ui-menu-divider")).children().not(".ui-menu").uniqueId().attr({tabIndex:-1,role:this._itemRole()}),this._addClass(n,"ui-menu-item")._addClass(s,"ui-menu-item-wrapper"),e.filter(".ui-state-disabled").attr("aria-disabled","true"),this.active&&!t.contains(this.element[0],this.active[0])&&this.blur()},_itemRole:function(){return{menu:"menuitem",listbox:"option"}[this.options.role]},_setOption:function(t,e){if("icons"===t){var i=this.element.find(".ui-menu-icon");this._removeClass(i,null,this.options.icons.submenu)._addClass(i,null,e.submenu)}this._super(t,e)},_setOptionDisabled:function(t){this._super(t),this.element.attr("aria-disabled",String(t)),this._toggleClass(null,"ui-state-disabled",!!t)},focus:function(t,e){var i,n,s;this.blur(t,t&&"focus"===t.type),this._scrollIntoView(e),this.active=e.first(),n=this.active.children(".ui-menu-item-wrapper"),this._addClass(n,null,"ui-state-active"),this.options.role&&this.element.attr("aria-activedescendant",n.attr("id")),s=this.active.parent().closest(".ui-menu-item").children(".ui-menu-item-wrapper"),this._addClass(s,null,"ui-state-active"),t&&"keydown"===t.type?this._close():this.timer=this._delay((function(){this._close()}),this.delay),(i=e.children(".ui-menu")).length&&t&&/^mouse/.test(t.type)&&this._startOpening(i),this.activeMenu=e.parent(),this._trigger("focus",t,{item:e})},_scrollIntoView:function(e){var i,n,s,o,r,a;this._hasScroll()&&(i=parseFloat(t.css(this.activeMenu[0],"borderTopWidth"))||0,n=parseFloat(t.css(this.activeMenu[0],"paddingTop"))||0,s=e.offset().top-this.activeMenu.offset().top-i-n,o=this.activeMenu.scrollTop(),r=this.activeMenu.height(),a=e.outerHeight(),s<0?this.activeMenu.scrollTop(o+s):s+a>r&&this.activeMenu.scrollTop(o+s-r+a))},blur:function(t,e){e||clearTimeout(this.timer),this.active&&(this._removeClass(this.active.children(".ui-menu-item-wrapper"),null,"ui-state-active"),this._trigger("blur",t,{item:this.active}),this.active=null)},_startOpening:function(t){clearTimeout(this.timer),"true"===t.attr("aria-hidden")&&(this.timer=this._delay((function(){this._close(),this._open(t)}),this.delay))},_open:function(e){var i=t.extend({of:this.active},this.options.position);clearTimeout(this.timer),this.element.find(".ui-menu").not(e.parents(".ui-menu")).hide().attr("aria-hidden","true"),e.show().removeAttr("aria-hidden").attr("aria-expanded","true").position(i)},collapseAll:function(e,i){clearTimeout(this.timer),this.timer=this._delay((function(){var n=i?this.element:t(e&&e.target).closest(this.element.find(".ui-menu"));n.length||(n=this.element),this._close(n),this.blur(e),this._removeClass(n.find(".ui-state-active"),null,"ui-state-active"),this.activeMenu=n}),this.delay)},_close:function(t){t||(t=this.active?this.active.parent():this.element),t.find(".ui-menu").hide().attr("aria-hidden","true").attr("aria-expanded","false")},_closeOnDocumentClick:function(e){return!t(e.target).closest(".ui-menu").length},_isDivider:function(t){return!/[^\-\u2014\u2013\s]/.test(t.text())},collapse:function(t){var e=this.active&&this.active.parent().closest(".ui-menu-item",this.element);e&&e.length&&(this._close(),this.focus(t,e))},expand:function(t){var e=this.active&&this.active.children(".ui-menu ").find(this.options.items).first();e&&e.length&&(this._open(e.parent()),this._delay((function(){this.focus(t,e)})))},next:function(t){this._move("next","first",t)},previous:function(t){this._move("prev","last",t)},isFirstItem:function(){return this.active&&!this.active.prevAll(".ui-menu-item").length},isLastItem:function(){return this.active&&!this.active.nextAll(".ui-menu-item").length},_move:function(t,e,i){var n;this.active&&(n="first"===t||"last"===t?this.active["first"===t?"prevAll":"nextAll"](".ui-menu-item").eq(-1):this.active[t+"All"](".ui-menu-item").eq(0)),n&&n.length&&this.active||(n=this.activeMenu.find(this.options.items)[e]()),this.focus(i,n)},nextPage:function(e){var i,n,s;this.active?this.isLastItem()||(this._hasScroll()?(n=this.active.offset().top,s=this.element.height(),this.active.nextAll(".ui-menu-item").each((function(){return(i=t(this)).offset().top-n-s<0})),this.focus(e,i)):this.focus(e,this.activeMenu.find(this.options.items)[this.active?"last":"first"]())):this.next(e)},previousPage:function(e){var i,n,s;this.active?this.isFirstItem()||(this._hasScroll()?(n=this.active.offset().top,s=this.element.height(),this.active.prevAll(".ui-menu-item").each((function(){return(i=t(this)).offset().top-n+s>0})),this.focus(e,i)):this.focus(e,this.activeMenu.find(this.options.items).first())):this.next(e)},_hasScroll:function(){return this.element.outerHeight()<this.element.prop("scrollHeight")},select:function(e){this.active=this.active||t(e.target).closest(".ui-menu-item");var i={item:this.active};this.active.has(".ui-menu").length||this.collapseAll(e,!0),this._trigger("select",e,i)},_filterMenuItems:function(e){var i=e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&"),n=new RegExp("^"+i,"i");return this.activeMenu.find(this.options.items).filter(".ui-menu-item").filter((function(){return n.test(t.trim(t(this).children(".ui-menu-item-wrapper").text()))}))}}),t.widget("ui.autocomplete",{version:"1.12.1",defaultElement:"<input>",options:{appendTo:null,autoFocus:!1,delay:300,minLength:1,position:{my:"left top",at:"left bottom",collision:"none"},source:null,change:null,close:null,focus:null,open:null,response:null,search:null,select:null},requestIndex:0,pending:0,_create:function(){var e,i,n,s=this.element[0].nodeName.toLowerCase(),o="textarea"===s,r="input"===s;this.isMultiLine=o||!r&&this._isContentEditable(this.element),this.valueMethod=this.element[o||r?"val":"text"],this.isNewMenu=!0,this._addClass("ui-autocomplete-input"),this.element.attr("autocomplete","off"),this._on(this.element,{keydown:function(s){if(this.element.prop("readOnly"))return e=!0,n=!0,void(i=!0);e=!1,n=!1,i=!1;var o=t.ui.keyCode;switch(s.keyCode){case o.PAGE_UP:e=!0,this._move("previousPage",s);break;case o.PAGE_DOWN:e=!0,this._move("nextPage",s);break;case o.UP:e=!0,this._keyEvent("previous",s);break;case o.DOWN:e=!0,this._keyEvent("next",s);break;case o.ENTER:this.menu.active&&(e=!0,s.preventDefault(),this.menu.select(s));break;case o.TAB:this.menu.active&&this.menu.select(s);break;case o.ESCAPE:this.menu.element.is(":visible")&&(this.isMultiLine||this._value(this.term),this.close(s),s.preventDefault());break;default:i=!0,this._searchTimeout(s)}},keypress:function(n){if(e)return e=!1,void(this.isMultiLine&&!this.menu.element.is(":visible")||n.preventDefault());if(!i){var s=t.ui.keyCode;switch(n.keyCode){case s.PAGE_UP:this._move("previousPage",n);break;case s.PAGE_DOWN:this._move("nextPage",n);break;case s.UP:this._keyEvent("previous",n);break;case s.DOWN:this._keyEvent("next",n)}}},input:function(t){if(n)return n=!1,void t.preventDefault();this._searchTimeout(t)},focus:function(){this.selectedItem=null,this.previous=this._value()},blur:function(t){this.cancelBlur?delete this.cancelBlur:(clearTimeout(this.searching),this.close(t),this._change(t))}}),this._initSource(),this.menu=t("<ul>").appendTo(this._appendTo()).menu({role:null}).hide().menu("instance"),this._addClass(this.menu.element,"ui-autocomplete","ui-front"),this._on(this.menu.element,{mousedown:function(e){e.preventDefault(),this.cancelBlur=!0,this._delay((function(){delete this.cancelBlur,this.element[0]!==t.ui.safeActiveElement(this.document[0])&&this.element.trigger("focus")}))},menufocus:function(e,i){var n,s;if(this.isNewMenu&&(this.isNewMenu=!1,e.originalEvent&&/^mouse/.test(e.originalEvent.type)))return this.menu.blur(),void this.document.one("mousemove",(function(){t(e.target).trigger(e.originalEvent)}));s=i.item.data("ui-autocomplete-item"),!1!==this._trigger("focus",e,{item:s})&&e.originalEvent&&/^key/.test(e.originalEvent.type)&&this._value(s.value),(n=i.item.attr("aria-label")||s.value)&&t.trim(n).length&&(this.liveRegion.children().hide(),t("<div>").text(n).appendTo(this.liveRegion))},menuselect:function(e,i){var n=i.item.data("ui-autocomplete-item"),s=this.previous;this.element[0]!==t.ui.safeActiveElement(this.document[0])&&(this.element.trigger("focus"),this.previous=s,this._delay((function(){this.previous=s,this.selectedItem=n}))),!1!==this._trigger("select",e,{item:n})&&this._value(n.value),this.term=this._value(),this.close(e),this.selectedItem=n}}),this.liveRegion=t("<div>",{role:"status","aria-live":"assertive","aria-relevant":"additions"}).appendTo(this.document[0].body),this._addClass(this.liveRegion,null,"ui-helper-hidden-accessible"),this._on(this.window,{beforeunload:function(){this.element.removeAttr("autocomplete")}})},_destroy:function(){clearTimeout(this.searching),this.element.removeAttr("autocomplete"),this.menu.element.remove(),this.liveRegion.remove()},_setOption:function(t,e){this._super(t,e),"source"===t&&this._initSource(),"appendTo"===t&&this.menu.element.appendTo(this._appendTo()),"disabled"===t&&e&&this.xhr&&this.xhr.abort()},_isEventTargetInWidget:function(e){var i=this.menu.element[0];return e.target===this.element[0]||e.target===i||t.contains(i,e.target)},_closeOnClickOutside:function(t){this._isEventTargetInWidget(t)||this.close()},_appendTo:function(){var e=this.options.appendTo;return e&&(e=e.jquery||e.nodeType?t(e):this.document.find(e).eq(0)),e&&e[0]||(e=this.element.closest(".ui-front, dialog")),e.length||(e=this.document[0].body),e},_initSource:function(){var e,i,n=this;t.isArray(this.options.source)?(e=this.options.source,this.source=function(i,n){n(t.ui.autocomplete.filter(e,i.term))}):"string"==typeof this.options.source?(i=this.options.source,this.source=function(e,s){n.xhr&&n.xhr.abort(),n.xhr=t.ajax({url:i,data:e,dataType:"json",success:function(t){s(t)},error:function(){s([])}})}):this.source=this.options.source},_searchTimeout:function(t){clearTimeout(this.searching),this.searching=this._delay((function(){var e=this.term===this._value(),i=this.menu.element.is(":visible"),n=t.altKey||t.ctrlKey||t.metaKey||t.shiftKey;e&&(!e||i||n)||(this.selectedItem=null,this.search(null,t))}),this.options.delay)},search:function(t,e){return t=null!=t?t:this._value(),this.term=this._value(),t.length<this.options.minLength?this.close(e):!1!==this._trigger("search",e)?this._search(t):void 0},_search:function(t){this.pending++,this._addClass("ui-autocomplete-loading"),this.cancelSearch=!1,this.source({term:t},this._response())},_response:function(){var e=++this.requestIndex;return t.proxy((function(t){e===this.requestIndex&&this.__response(t),this.pending--,this.pending||this._removeClass("ui-autocomplete-loading")}),this)},__response:function(t){t&&(t=this._normalize(t)),this._trigger("response",null,{content:t}),!this.options.disabled&&t&&t.length&&!this.cancelSearch?(this._suggest(t),this._trigger("open")):this._close()},close:function(t){this.cancelSearch=!0,this._close(t)},_close:function(t){this._off(this.document,"mousedown"),this.menu.element.is(":visible")&&(this.menu.element.hide(),this.menu.blur(),this.isNewMenu=!0,this._trigger("close",t))},_change:function(t){this.previous!==this._value()&&this._trigger("change",t,{item:this.selectedItem})},_normalize:function(e){return e.length&&e[0].label&&e[0].value?e:t.map(e,(function(e){return"string"==typeof e?{label:e,value:e}:t.extend({},e,{label:e.label||e.value,value:e.value||e.label})}))},_suggest:function(e){var i=this.menu.element.empty();this._renderMenu(i,e),this.isNewMenu=!0,this.menu.refresh(),i.show(),this._resizeMenu(),i.position(t.extend({of:this.element},this.options.position)),this.options.autoFocus&&this.menu.next(),this._on(this.document,{mousedown:"_closeOnClickOutside"})},_resizeMenu:function(){var t=this.menu.element;t.outerWidth(Math.max(t.width("").outerWidth()+1,this.element.outerWidth()))},_renderMenu:function(e,i){var n=this;t.each(i,(function(t,i){n._renderItemData(e,i)}))},_renderItemData:function(t,e){return this._renderItem(t,e).data("ui-autocomplete-item",e)},_renderItem:function(e,i){return t("<li>").append(t("<div>").text(i.label)).appendTo(e)},_move:function(t,e){if(this.menu.element.is(":visible"))return this.menu.isFirstItem()&&/^previous/.test(t)||this.menu.isLastItem()&&/^next/.test(t)?(this.isMultiLine||this._value(this.term),void this.menu.blur()):void this.menu[t](e);this.search(null,e)},widget:function(){return this.menu.element},_value:function(){return this.valueMethod.apply(this.element,arguments)},_keyEvent:function(t,e){this.isMultiLine&&!this.menu.element.is(":visible")||(this._move(t,e),e.preventDefault())},_isContentEditable:function(t){if(!t.length)return!1;var e=t.prop("contentEditable");return"inherit"===e?this._isContentEditable(t.parent()):"true"===e}}),t.extend(t.ui.autocomplete,{escapeRegex:function(t){return t.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")},filter:function(e,i){var n=new RegExp(t.ui.autocomplete.escapeRegex(i),"i");return t.grep(e,(function(t){return n.test(t.label||t.value||t)}))}}),t.widget("ui.autocomplete",t.ui.autocomplete,{options:{messages:{noResults:"No search results.",results:function(t){return t+(t>1?" results are":" result is")+" available, use up and down arrow keys to navigate."}}},__response:function(e){var i;this._superApply(arguments),this.options.disabled||this.cancelSearch||(i=e&&e.length?this.options.messages.results(e.length):this.options.messages.noResults,this.liveRegion.children().hide(),t("<div>").text(i).appendTo(this.liveRegion))}}),t.ui.autocomplete;var c,h,u=/ui-corner-([a-z]){2,6}/g;function d(){this._curInst=null,this._keyEvent=!1,this._disabledInputs=[],this._datepickerShowing=!1,this._inDialog=!1,this._mainDivId="ui-datepicker-div",this._inlineClass="ui-datepicker-inline",this._appendClass="ui-datepicker-append",this._triggerClass="ui-datepicker-trigger",this._dialogClass="ui-datepicker-dialog",this._disableClass="ui-datepicker-disabled",this._unselectableClass="ui-datepicker-unselectable",this._currentClass="ui-datepicker-current-day",this._dayOverClass="ui-datepicker-days-cell-over",this.regional=[],this.regional[""]={closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"mm/dd/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},this._defaults={showOn:"focus",showAnim:"fadeIn",showOptions:{},defaultDate:null,appendText:"",buttonText:"...",buttonImage:"",buttonImageOnly:!1,hideIfNoPrevNext:!1,navigationAsDateFormat:!1,gotoCurrent:!1,changeMonth:!1,changeYear:!1,yearRange:"c-10:c+10",showOtherMonths:!1,selectOtherMonths:!1,showWeek:!1,calculateWeek:this.iso8601Week,shortYearCutoff:"+10",minDate:null,maxDate:null,duration:"fast",beforeShowDay:null,beforeShow:null,onSelect:null,onChangeMonthYear:null,onClose:null,numberOfMonths:1,showCurrentAtPos:0,stepMonths:1,stepBigMonths:12,altField:"",altFormat:"",constrainInput:!0,showButtonPanel:!1,autoSize:!1,disabled:!1},t.extend(this._defaults,this.regional[""]),this.regional.en=t.extend(!0,{},this.regional[""]),this.regional["en-US"]=t.extend(!0,{},this.regional.en),this.dpDiv=p(t("<div id='"+this._mainDivId+"' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"))}function p(e){var i="button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";return e.on("mouseout",i,(function(){t(this).removeClass("ui-state-hover"),-1!==this.className.indexOf("ui-datepicker-prev")&&t(this).removeClass("ui-datepicker-prev-hover"),-1!==this.className.indexOf("ui-datepicker-next")&&t(this).removeClass("ui-datepicker-next-hover")})).on("mouseover",i,f)}function f(){t.datepicker._isDisabledDatepicker(c.inline?c.dpDiv.parent()[0]:c.input[0])||(t(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover"),t(this).addClass("ui-state-hover"),-1!==this.className.indexOf("ui-datepicker-prev")&&t(this).addClass("ui-datepicker-prev-hover"),-1!==this.className.indexOf("ui-datepicker-next")&&t(this).addClass("ui-datepicker-next-hover"))}function g(e,i){for(var n in t.extend(e,i),i)null==i[n]&&(e[n]=i[n]);return e}function m(t){return function(){var e=this.element.val();t.apply(this,arguments),this._refresh(),e!==this.element.val()&&this._trigger("change")}}t.widget("ui.controlgroup",{version:"1.12.1",defaultElement:"<div>",options:{direction:"horizontal",disabled:null,onlyVisible:!0,items:{button:"input[type=button], input[type=submit], input[type=reset], button, a",controlgroupLabel:".ui-controlgroup-label",checkboxradio:"input[type='checkbox'], input[type='radio']",selectmenu:"select",spinner:".ui-spinner-input"}},_create:function(){this._enhance()},_enhance:function(){this.element.attr("role","toolbar"),this.refresh()},_destroy:function(){this._callChildMethod("destroy"),this.childWidgets.removeData("ui-controlgroup-data"),this.element.removeAttr("role"),this.options.items.controlgroupLabel&&this.element.find(this.options.items.controlgroupLabel).find(".ui-controlgroup-label-contents").contents().unwrap()},_initWidgets:function(){var e=this,i=[];t.each(this.options.items,(function(n,s){var o,r={};if(s)return"controlgroupLabel"===n?((o=e.element.find(s)).each((function(){var e=t(this);e.children(".ui-controlgroup-label-contents").length||e.contents().wrapAll("<span class='ui-controlgroup-label-contents'></span>")})),e._addClass(o,null,"ui-widget ui-widget-content ui-state-default"),void(i=i.concat(o.get()))):void(t.fn[n]&&(r=e["_"+n+"Options"]?e["_"+n+"Options"]("middle"):{classes:{}},e.element.find(s).each((function(){var s=t(this),o=s[n]("instance"),a=t.widget.extend({},r);if("button"!==n||!s.parent(".ui-spinner").length){o||(o=s[n]()[n]("instance")),o&&(a.classes=e._resolveClassesValues(a.classes,o)),s[n](a);var l=s[n]("widget");t.data(l[0],"ui-controlgroup-data",o||s[n]("instance")),i.push(l[0])}}))))})),this.childWidgets=t(t.uniqueSort(i)),this._addClass(this.childWidgets,"ui-controlgroup-item")},_callChildMethod:function(e){this.childWidgets.each((function(){var i=t(this).data("ui-controlgroup-data");i&&i[e]&&i[e]()}))},_updateCornerClass:function(t,e){var i=this._buildSimpleOptions(e,"label").classes.label;this._removeClass(t,null,"ui-corner-top ui-corner-bottom ui-corner-left ui-corner-right ui-corner-all"),this._addClass(t,null,i)},_buildSimpleOptions:function(t,e){var i="vertical"===this.options.direction,n={classes:{}};return n.classes[e]={middle:"",first:"ui-corner-"+(i?"top":"left"),last:"ui-corner-"+(i?"bottom":"right"),only:"ui-corner-all"}[t],n},_spinnerOptions:function(t){var e=this._buildSimpleOptions(t,"ui-spinner");return e.classes["ui-spinner-up"]="",e.classes["ui-spinner-down"]="",e},_buttonOptions:function(t){return this._buildSimpleOptions(t,"ui-button")},_checkboxradioOptions:function(t){return this._buildSimpleOptions(t,"ui-checkboxradio-label")},_selectmenuOptions:function(t){var e="vertical"===this.options.direction;return{width:!!e&&"auto",classes:{middle:{"ui-selectmenu-button-open":"","ui-selectmenu-button-closed":""},first:{"ui-selectmenu-button-open":"ui-corner-"+(e?"top":"tl"),"ui-selectmenu-button-closed":"ui-corner-"+(e?"top":"left")},last:{"ui-selectmenu-button-open":e?"":"ui-corner-tr","ui-selectmenu-button-closed":"ui-corner-"+(e?"bottom":"right")},only:{"ui-selectmenu-button-open":"ui-corner-top","ui-selectmenu-button-closed":"ui-corner-all"}}[t]}},_resolveClassesValues:function(e,i){var n={};return t.each(e,(function(s){var o=i.options.classes[s]||"";o=t.trim(o.replace(u,"")),n[s]=(o+" "+e[s]).replace(/\s+/g," ")})),n},_setOption:function(t,e){"direction"===t&&this._removeClass("ui-controlgroup-"+this.options.direction),this._super(t,e),"disabled"!==t?this.refresh():this._callChildMethod(e?"disable":"enable")},refresh:function(){var e,i=this;this._addClass("ui-controlgroup ui-controlgroup-"+this.options.direction),"horizontal"===this.options.direction&&this._addClass(null,"ui-helper-clearfix"),this._initWidgets(),e=this.childWidgets,this.options.onlyVisible&&(e=e.filter(":visible")),e.length&&(t.each(["first","last"],(function(t,n){var s=e[n]().data("ui-controlgroup-data");if(s&&i["_"+s.widgetName+"Options"]){var o=i["_"+s.widgetName+"Options"](1===e.length?"only":n);o.classes=i._resolveClassesValues(o.classes,s),s.element[s.widgetName](o)}else i._updateCornerClass(e[n](),n)})),this._callChildMethod("refresh"))}}),t.widget("ui.checkboxradio",[t.ui.formResetMixin,{version:"1.12.1",options:{disabled:null,label:null,icon:!0,classes:{"ui-checkboxradio-label":"ui-corner-all","ui-checkboxradio-icon":"ui-corner-all"}},_getCreateOptions:function(){var e,i,n=this,s=this._super()||{};return this._readType(),i=this.element.labels(),this.label=t(i[i.length-1]),this.label.length||t.error("No label found for checkboxradio widget"),this.originalLabel="",this.label.contents().not(this.element[0]).each((function(){n.originalLabel+=3===this.nodeType?t(this).text():this.outerHTML})),this.originalLabel&&(s.label=this.originalLabel),null!=(e=this.element[0].disabled)&&(s.disabled=e),s},_create:function(){var t=this.element[0].checked;this._bindFormResetHandler(),null==this.options.disabled&&(this.options.disabled=this.element[0].disabled),this._setOption("disabled",this.options.disabled),this._addClass("ui-checkboxradio","ui-helper-hidden-accessible"),this._addClass(this.label,"ui-checkboxradio-label","ui-button ui-widget"),"radio"===this.type&&this._addClass(this.label,"ui-checkboxradio-radio-label"),this.options.label&&this.options.label!==this.originalLabel?this._updateLabel():this.originalLabel&&(this.options.label=this.originalLabel),this._enhance(),t&&(this._addClass(this.label,"ui-checkboxradio-checked","ui-state-active"),this.icon&&this._addClass(this.icon,null,"ui-state-hover")),this._on({change:"_toggleClasses",focus:function(){this._addClass(this.label,null,"ui-state-focus ui-visual-focus")},blur:function(){this._removeClass(this.label,null,"ui-state-focus ui-visual-focus")}})},_readType:function(){var e=this.element[0].nodeName.toLowerCase();this.type=this.element[0].type,"input"===e&&/radio|checkbox/.test(this.type)||t.error("Can't create checkboxradio on element.nodeName="+e+" and element.type="+this.type)},_enhance:function(){this._updateIcon(this.element[0].checked)},widget:function(){return this.label},_getRadioGroup:function(){var e=this.element[0].name,i="input[name='"+t.ui.escapeSelector(e)+"']";return e?(this.form.length?t(this.form[0].elements).filter(i):t(i).filter((function(){return 0===t(this).form().length}))).not(this.element):t([])},_toggleClasses:function(){var e=this.element[0].checked;this._toggleClass(this.label,"ui-checkboxradio-checked","ui-state-active",e),this.options.icon&&"checkbox"===this.type&&this._toggleClass(this.icon,null,"ui-icon-check ui-state-checked",e)._toggleClass(this.icon,null,"ui-icon-blank",!e),"radio"===this.type&&this._getRadioGroup().each((function(){var e=t(this).checkboxradio("instance");e&&e._removeClass(e.label,"ui-checkboxradio-checked","ui-state-active")}))},_destroy:function(){this._unbindFormResetHandler(),this.icon&&(this.icon.remove(),this.iconSpace.remove())},_setOption:function(t,e){if("label"!==t||e){if(this._super(t,e),"disabled"===t)return this._toggleClass(this.label,null,"ui-state-disabled",e),void(this.element[0].disabled=e);this.refresh()}},_updateIcon:function(e){var i="ui-icon ui-icon-background ";this.options.icon?(this.icon||(this.icon=t("<span>"),this.iconSpace=t("<span> </span>"),this._addClass(this.iconSpace,"ui-checkboxradio-icon-space")),"checkbox"===this.type?(i+=e?"ui-icon-check ui-state-checked":"ui-icon-blank",this._removeClass(this.icon,null,e?"ui-icon-blank":"ui-icon-check")):i+="ui-icon-blank",this._addClass(this.icon,"ui-checkboxradio-icon",i),e||this._removeClass(this.icon,null,"ui-icon-check ui-state-checked"),this.icon.prependTo(this.label).after(this.iconSpace)):void 0!==this.icon&&(this.icon.remove(),this.iconSpace.remove(),delete this.icon)},_updateLabel:function(){var t=this.label.contents().not(this.element[0]);this.icon&&(t=t.not(this.icon[0])),this.iconSpace&&(t=t.not(this.iconSpace[0])),t.remove(),this.label.append(this.options.label)},refresh:function(){var t=this.element[0].checked,e=this.element[0].disabled;this._updateIcon(t),this._toggleClass(this.label,"ui-checkboxradio-checked","ui-state-active",t),null!==this.options.label&&this._updateLabel(),e!==this.options.disabled&&this._setOptions({disabled:e})}}]),t.ui.checkboxradio,t.widget("ui.button",{version:"1.12.1",defaultElement:"<button>",options:{classes:{"ui-button":"ui-corner-all"},disabled:null,icon:null,iconPosition:"beginning",label:null,showLabel:!0},_getCreateOptions:function(){var t,e=this._super()||{};return this.isInput=this.element.is("input"),null!=(t=this.element[0].disabled)&&(e.disabled=t),this.originalLabel=this.isInput?this.element.val():this.element.html(),this.originalLabel&&(e.label=this.originalLabel),e},_create:function(){!this.option.showLabel&!this.options.icon&&(this.options.showLabel=!0),null==this.options.disabled&&(this.options.disabled=this.element[0].disabled||!1),this.hasTitle=!!this.element.attr("title"),this.options.label&&this.options.label!==this.originalLabel&&(this.isInput?this.element.val(this.options.label):this.element.html(this.options.label)),this._addClass("ui-button","ui-widget"),this._setOption("disabled",this.options.disabled),this._enhance(),this.element.is("a")&&this._on({keyup:function(e){e.keyCode===t.ui.keyCode.SPACE&&(e.preventDefault(),this.element[0].click?this.element[0].click():this.element.trigger("click"))}})},_enhance:function(){this.element.is("button")||this.element.attr("role","button"),this.options.icon&&(this._updateIcon("icon",this.options.icon),this._updateTooltip())},_updateTooltip:function(){this.title=this.element.attr("title"),this.options.showLabel||this.title||this.element.attr("title",this.options.label)},_updateIcon:function(e,i){var n="iconPosition"!==e,s=n?this.options.iconPosition:i,o="top"===s||"bottom"===s;this.icon?n&&this._removeClass(this.icon,null,this.options.icon):(this.icon=t("<span>"),this._addClass(this.icon,"ui-button-icon","ui-icon"),this.options.showLabel||this._addClass("ui-button-icon-only")),n&&this._addClass(this.icon,null,i),this._attachIcon(s),o?(this._addClass(this.icon,null,"ui-widget-icon-block"),this.iconSpace&&this.iconSpace.remove()):(this.iconSpace||(this.iconSpace=t("<span> </span>"),this._addClass(this.iconSpace,"ui-button-icon-space")),this._removeClass(this.icon,null,"ui-wiget-icon-block"),this._attachIconSpace(s))},_destroy:function(){this.element.removeAttr("role"),this.icon&&this.icon.remove(),this.iconSpace&&this.iconSpace.remove(),this.hasTitle||this.element.removeAttr("title")},_attachIconSpace:function(t){this.icon[/^(?:end|bottom)/.test(t)?"before":"after"](this.iconSpace)},_attachIcon:function(t){this.element[/^(?:end|bottom)/.test(t)?"append":"prepend"](this.icon)},_setOptions:function(t){var e=void 0===t.showLabel?this.options.showLabel:t.showLabel,i=void 0===t.icon?this.options.icon:t.icon;e||i||(t.showLabel=!0),this._super(t)},_setOption:function(t,e){"icon"===t&&(e?this._updateIcon(t,e):this.icon&&(this.icon.remove(),this.iconSpace&&this.iconSpace.remove())),"iconPosition"===t&&this._updateIcon(t,e),"showLabel"===t&&(this._toggleClass("ui-button-icon-only",null,!e),this._updateTooltip()),"label"===t&&(this.isInput?this.element.val(e):(this.element.html(e),this.icon&&(this._attachIcon(this.options.iconPosition),this._attachIconSpace(this.options.iconPosition)))),this._super(t,e),"disabled"===t&&(this._toggleClass(null,"ui-state-disabled",e),this.element[0].disabled=e,e&&this.element.blur())},refresh:function(){var t=this.element.is("input, button")?this.element[0].disabled:this.element.hasClass("ui-button-disabled");t!==this.options.disabled&&this._setOptions({disabled:t}),this._updateTooltip()}}),!1!==t.uiBackCompat&&(t.widget("ui.button",t.ui.button,{options:{text:!0,icons:{primary:null,secondary:null}},_create:function(){this.options.showLabel&&!this.options.text&&(this.options.showLabel=this.options.text),!this.options.showLabel&&this.options.text&&(this.options.text=this.options.showLabel),this.options.icon||!this.options.icons.primary&&!this.options.icons.secondary?this.options.icon&&(this.options.icons.primary=this.options.icon):this.options.icons.primary?this.options.icon=this.options.icons.primary:(this.options.icon=this.options.icons.secondary,this.options.iconPosition="end"),this._super()},_setOption:function(t,e){"text"!==t?("showLabel"===t&&(this.options.text=e),"icon"===t&&(this.options.icons.primary=e),"icons"===t&&(e.primary?(this._super("icon",e.primary),this._super("iconPosition","beginning")):e.secondary&&(this._super("icon",e.secondary),this._super("iconPosition","end"))),this._superApply(arguments)):this._super("showLabel",e)}}),t.fn.button=function(e){return function(){return!this.length||this.length&&"INPUT"!==this[0].tagName||this.length&&"INPUT"===this[0].tagName&&"checkbox"!==this.attr("type")&&"radio"!==this.attr("type")?e.apply(this,arguments):(t.ui.checkboxradio||t.error("Checkboxradio widget missing"),0===arguments.length?this.checkboxradio({icon:!1}):this.checkboxradio.apply(this,arguments))}}(t.fn.button),t.fn.buttonset=function(){return t.ui.controlgroup||t.error("Controlgroup widget missing"),"option"===arguments[0]&&"items"===arguments[1]&&arguments[2]?this.controlgroup.apply(this,[arguments[0],"items.button",arguments[2]]):"option"===arguments[0]&&"items"===arguments[1]?this.controlgroup.apply(this,[arguments[0],"items.button"]):("object"==typeof arguments[0]&&arguments[0].items&&(arguments[0].items={button:arguments[0].items}),this.controlgroup.apply(this,arguments))}),t.ui.button,t.extend(t.ui,{datepicker:{version:"1.12.1"}}),t.extend(d.prototype,{markerClassName:"hasDatepicker",maxRows:4,_widgetDatepicker:function(){return this.dpDiv},setDefaults:function(t){return g(this._defaults,t||{}),this},_attachDatepicker:function(e,i){var n,s,o;s="div"===(n=e.nodeName.toLowerCase())||"span"===n,e.id||(this.uuid+=1,e.id="dp"+this.uuid),(o=this._newInst(t(e),s)).settings=t.extend({},i||{}),"input"===n?this._connectDatepicker(e,o):s&&this._inlineDatepicker(e,o)},_newInst:function(e,i){return{id:e[0].id.replace(/([^A-Za-z0-9_\-])/g,"\\\\$1"),input:e,selectedDay:0,selectedMonth:0,selectedYear:0,drawMonth:0,drawYear:0,inline:i,dpDiv:i?p(t("<div class='"+this._inlineClass+" ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")):this.dpDiv}},_connectDatepicker:function(e,i){var n=t(e);i.append=t([]),i.trigger=t([]),n.hasClass(this.markerClassName)||(this._attachments(n,i),n.addClass(this.markerClassName).on("keydown",this._doKeyDown).on("keypress",this._doKeyPress).on("keyup",this._doKeyUp),this._autoSize(i),t.data(e,"datepicker",i),i.settings.disabled&&this._disableDatepicker(e))},_attachments:function(e,i){var n,s,o,r=this._get(i,"appendText"),a=this._get(i,"isRTL");i.append&&i.append.remove(),r&&(i.append=t("<span class='"+this._appendClass+"'>"+r+"</span>"),e[a?"before":"after"](i.append)),e.off("focus",this._showDatepicker),i.trigger&&i.trigger.remove(),"focus"!==(n=this._get(i,"showOn"))&&"both"!==n||e.on("focus",this._showDatepicker),"button"!==n&&"both"!==n||(s=this._get(i,"buttonText"),o=this._get(i,"buttonImage"),i.trigger=t(this._get(i,"buttonImageOnly")?t("<img/>").addClass(this._triggerClass).attr({src:o,alt:s,title:s}):t("<button type='button'></button>").addClass(this._triggerClass).html(o?t("<img/>").attr({src:o,alt:s,title:s}):s)),e[a?"before":"after"](i.trigger),i.trigger.on("click",(function(){return t.datepicker._datepickerShowing&&t.datepicker._lastInput===e[0]?t.datepicker._hideDatepicker():t.datepicker._datepickerShowing&&t.datepicker._lastInput!==e[0]?(t.datepicker._hideDatepicker(),t.datepicker._showDatepicker(e[0])):t.datepicker._showDatepicker(e[0]),!1})))},_autoSize:function(t){if(this._get(t,"autoSize")&&!t.inline){var e,i,n,s,o=new Date(2009,11,20),r=this._get(t,"dateFormat");r.match(/[DM]/)&&(e=function(t){for(i=0,n=0,s=0;s<t.length;s++)t[s].length>i&&(i=t[s].length,n=s);return n},o.setMonth(e(this._get(t,r.match(/MM/)?"monthNames":"monthNamesShort"))),o.setDate(e(this._get(t,r.match(/DD/)?"dayNames":"dayNamesShort"))+20-o.getDay())),t.input.attr("size",this._formatDate(t,o).length)}},_inlineDatepicker:function(e,i){var n=t(e);n.hasClass(this.markerClassName)||(n.addClass(this.markerClassName).append(i.dpDiv),t.data(e,"datepicker",i),this._setDate(i,this._getDefaultDate(i),!0),this._updateDatepicker(i),this._updateAlternate(i),i.settings.disabled&&this._disableDatepicker(e),i.dpDiv.css("display","block"))},_dialogDatepicker:function(e,i,n,s,o){var r,a,l,c,h,u=this._dialogInst;return u||(this.uuid+=1,r="dp"+this.uuid,this._dialogInput=t("<input type='text' id='"+r+"' style='position: absolute; top: -100px; width: 0px;'/>"),this._dialogInput.on("keydown",this._doKeyDown),t("body").append(this._dialogInput),(u=this._dialogInst=this._newInst(this._dialogInput,!1)).settings={},t.data(this._dialogInput[0],"datepicker",u)),g(u.settings,s||{}),i=i&&i.constructor===Date?this._formatDate(u,i):i,this._dialogInput.val(i),this._pos=o?o.length?o:[o.pageX,o.pageY]:null,this._pos||(a=document.documentElement.clientWidth,l=document.documentElement.clientHeight,c=document.documentElement.scrollLeft||document.body.scrollLeft,h=document.documentElement.scrollTop||document.body.scrollTop,this._pos=[a/2-100+c,l/2-150+h]),this._dialogInput.css("left",this._pos[0]+20+"px").css("top",this._pos[1]+"px"),u.settings.onSelect=n,this._inDialog=!0,this.dpDiv.addClass(this._dialogClass),this._showDatepicker(this._dialogInput[0]),t.blockUI&&t.blockUI(this.dpDiv),t.data(this._dialogInput[0],"datepicker",u),this},_destroyDatepicker:function(e){var i,n=t(e),s=t.data(e,"datepicker");n.hasClass(this.markerClassName)&&(i=e.nodeName.toLowerCase(),t.removeData(e,"datepicker"),"input"===i?(s.append.remove(),s.trigger.remove(),n.removeClass(this.markerClassName).off("focus",this._showDatepicker).off("keydown",this._doKeyDown).off("keypress",this._doKeyPress).off("keyup",this._doKeyUp)):"div"!==i&&"span"!==i||n.removeClass(this.markerClassName).empty(),c===s&&(c=null))},_enableDatepicker:function(e){var i,n,s=t(e),o=t.data(e,"datepicker");s.hasClass(this.markerClassName)&&("input"===(i=e.nodeName.toLowerCase())?(e.disabled=!1,o.trigger.filter("button").each((function(){this.disabled=!1})).end().filter("img").css({opacity:"1.0",cursor:""})):"div"!==i&&"span"!==i||((n=s.children("."+this._inlineClass)).children().removeClass("ui-state-disabled"),n.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled",!1)),this._disabledInputs=t.map(this._disabledInputs,(function(t){return t===e?null:t})))},_disableDatepicker:function(e){var i,n,s=t(e),o=t.data(e,"datepicker");s.hasClass(this.markerClassName)&&("input"===(i=e.nodeName.toLowerCase())?(e.disabled=!0,o.trigger.filter("button").each((function(){this.disabled=!0})).end().filter("img").css({opacity:"0.5",cursor:"default"})):"div"!==i&&"span"!==i||((n=s.children("."+this._inlineClass)).children().addClass("ui-state-disabled"),n.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled",!0)),this._disabledInputs=t.map(this._disabledInputs,(function(t){return t===e?null:t})),this._disabledInputs[this._disabledInputs.length]=e)},_isDisabledDatepicker:function(t){if(!t)return!1;for(var e=0;e<this._disabledInputs.length;e++)if(this._disabledInputs[e]===t)return!0;return!1},_getInst:function(e){try{return t.data(e,"datepicker")}catch(t){throw"Missing instance data for this datepicker"}},_optionDatepicker:function(e,i,n){var s,o,r,a,l=this._getInst(e);if(2===arguments.length&&"string"==typeof i)return"defaults"===i?t.extend({},t.datepicker._defaults):l?"all"===i?t.extend({},l.settings):this._get(l,i):null;s=i||{},"string"==typeof i&&((s={})[i]=n),l&&(this._curInst===l&&this._hideDatepicker(),o=this._getDateDatepicker(e,!0),r=this._getMinMaxDate(l,"min"),a=this._getMinMaxDate(l,"max"),g(l.settings,s),null!==r&&void 0!==s.dateFormat&&void 0===s.minDate&&(l.settings.minDate=this._formatDate(l,r)),null!==a&&void 0!==s.dateFormat&&void 0===s.maxDate&&(l.settings.maxDate=this._formatDate(l,a)),"disabled"in s&&(s.disabled?this._disableDatepicker(e):this._enableDatepicker(e)),this._attachments(t(e),l),this._autoSize(l),this._setDate(l,o),this._updateAlternate(l),this._updateDatepicker(l))},_changeDatepicker:function(t,e,i){this._optionDatepicker(t,e,i)},_refreshDatepicker:function(t){var e=this._getInst(t);e&&this._updateDatepicker(e)},_setDateDatepicker:function(t,e){var i=this._getInst(t);i&&(this._setDate(i,e),this._updateDatepicker(i),this._updateAlternate(i))},_getDateDatepicker:function(t,e){var i=this._getInst(t);return i&&!i.inline&&this._setDateFromField(i,e),i?this._getDate(i):null},_doKeyDown:function(e){var i,n,s,o=t.datepicker._getInst(e.target),r=!0,a=o.dpDiv.is(".ui-datepicker-rtl");if(o._keyEvent=!0,t.datepicker._datepickerShowing)switch(e.keyCode){case 9:t.datepicker._hideDatepicker(),r=!1;break;case 13:return(s=t("td."+t.datepicker._dayOverClass+":not(."+t.datepicker._currentClass+")",o.dpDiv))[0]&&t.datepicker._selectDay(e.target,o.selectedMonth,o.selectedYear,s[0]),(i=t.datepicker._get(o,"onSelect"))?(n=t.datepicker._formatDate(o),i.apply(o.input?o.input[0]:null,[n,o])):t.datepicker._hideDatepicker(),!1;case 27:t.datepicker._hideDatepicker();break;case 33:t.datepicker._adjustDate(e.target,e.ctrlKey?-t.datepicker._get(o,"stepBigMonths"):-t.datepicker._get(o,"stepMonths"),"M");break;case 34:t.datepicker._adjustDate(e.target,e.ctrlKey?+t.datepicker._get(o,"stepBigMonths"):+t.datepicker._get(o,"stepMonths"),"M");break;case 35:(e.ctrlKey||e.metaKey)&&t.datepicker._clearDate(e.target),r=e.ctrlKey||e.metaKey;break;case 36:(e.ctrlKey||e.metaKey)&&t.datepicker._gotoToday(e.target),r=e.ctrlKey||e.metaKey;break;case 37:(e.ctrlKey||e.metaKey)&&t.datepicker._adjustDate(e.target,a?1:-1,"D"),r=e.ctrlKey||e.metaKey,e.originalEvent.altKey&&t.datepicker._adjustDate(e.target,e.ctrlKey?-t.datepicker._get(o,"stepBigMonths"):-t.datepicker._get(o,"stepMonths"),"M");break;case 38:(e.ctrlKey||e.metaKey)&&t.datepicker._adjustDate(e.target,-7,"D"),r=e.ctrlKey||e.metaKey;break;case 39:(e.ctrlKey||e.metaKey)&&t.datepicker._adjustDate(e.target,a?-1:1,"D"),r=e.ctrlKey||e.metaKey,e.originalEvent.altKey&&t.datepicker._adjustDate(e.target,e.ctrlKey?+t.datepicker._get(o,"stepBigMonths"):+t.datepicker._get(o,"stepMonths"),"M");break;case 40:(e.ctrlKey||e.metaKey)&&t.datepicker._adjustDate(e.target,7,"D"),r=e.ctrlKey||e.metaKey;break;default:r=!1}else 36===e.keyCode&&e.ctrlKey?t.datepicker._showDatepicker(this):r=!1;r&&(e.preventDefault(),e.stopPropagation())},_doKeyPress:function(e){var i,n,s=t.datepicker._getInst(e.target);if(t.datepicker._get(s,"constrainInput"))return i=t.datepicker._possibleChars(t.datepicker._get(s,"dateFormat")),n=String.fromCharCode(null==e.charCode?e.keyCode:e.charCode),e.ctrlKey||e.metaKey||n<" "||!i||i.indexOf(n)>-1},_doKeyUp:function(e){var i=t.datepicker._getInst(e.target);if(i.input.val()!==i.lastVal)try{t.datepicker.parseDate(t.datepicker._get(i,"dateFormat"),i.input?i.input.val():null,t.datepicker._getFormatConfig(i))&&(t.datepicker._setDateFromField(i),t.datepicker._updateAlternate(i),t.datepicker._updateDatepicker(i))}catch(t){}return!0},_showDatepicker:function(e){var i,n,s,o,r,a,l;"input"!==(e=e.target||e).nodeName.toLowerCase()&&(e=t("input",e.parentNode)[0]),t.datepicker._isDisabledDatepicker(e)||t.datepicker._lastInput===e||(i=t.datepicker._getInst(e),t.datepicker._curInst&&t.datepicker._curInst!==i&&(t.datepicker._curInst.dpDiv.stop(!0,!0),i&&t.datepicker._datepickerShowing&&t.datepicker._hideDatepicker(t.datepicker._curInst.input[0])),!1!==(s=(n=t.datepicker._get(i,"beforeShow"))?n.apply(e,[e,i]):{})&&(g(i.settings,s),i.lastVal=null,t.datepicker._lastInput=e,t.datepicker._setDateFromField(i),t.datepicker._inDialog&&(e.value=""),t.datepicker._pos||(t.datepicker._pos=t.datepicker._findPos(e),t.datepicker._pos[1]+=e.offsetHeight),o=!1,t(e).parents().each((function(){return!(o|="fixed"===t(this).css("position"))})),r={left:t.datepicker._pos[0],top:t.datepicker._pos[1]},t.datepicker._pos=null,i.dpDiv.empty(),i.dpDiv.css({position:"absolute",display:"block",top:"-1000px"}),t.datepicker._updateDatepicker(i),r=t.datepicker._checkOffset(i,r,o),i.dpDiv.css({position:t.datepicker._inDialog&&t.blockUI?"static":o?"fixed":"absolute",display:"none",left:r.left+"px",top:r.top+"px"}),i.inline||(a=t.datepicker._get(i,"showAnim"),l=t.datepicker._get(i,"duration"),i.dpDiv.css("z-index",function(t){for(var e,i;t.length&&t[0]!==document;){if(("absolute"===(e=t.css("position"))||"relative"===e||"fixed"===e)&&(i=parseInt(t.css("zIndex"),10),!isNaN(i)&&0!==i))return i;t=t.parent()}return 0}(t(e))+1),t.datepicker._datepickerShowing=!0,t.effects&&t.effects.effect[a]?i.dpDiv.show(a,t.datepicker._get(i,"showOptions"),l):i.dpDiv[a||"show"](a?l:null),t.datepicker._shouldFocusInput(i)&&i.input.trigger("focus"),t.datepicker._curInst=i)))},_updateDatepicker:function(e){this.maxRows=4,c=e,e.dpDiv.empty().append(this._generateHTML(e)),this._attachHandlers(e);var i,n=this._getNumberOfMonths(e),s=n[1],o=e.dpDiv.find("."+this._dayOverClass+" a");o.length>0&&f.apply(o.get(0)),e.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width(""),s>1&&e.dpDiv.addClass("ui-datepicker-multi-"+s).css("width",17*s+"em"),e.dpDiv[(1!==n[0]||1!==n[1]?"add":"remove")+"Class"]("ui-datepicker-multi"),e.dpDiv[(this._get(e,"isRTL")?"add":"remove")+"Class"]("ui-datepicker-rtl"),e===t.datepicker._curInst&&t.datepicker._datepickerShowing&&t.datepicker._shouldFocusInput(e)&&e.input.trigger("focus"),e.yearshtml&&(i=e.yearshtml,setTimeout((function(){i===e.yearshtml&&e.yearshtml&&e.dpDiv.find("select.ui-datepicker-year:first").replaceWith(e.yearshtml),i=e.yearshtml=null}),0))},_shouldFocusInput:function(t){return t.input&&t.input.is(":visible")&&!t.input.is(":disabled")&&!t.input.is(":focus")},_checkOffset:function(e,i,n){var s=e.dpDiv.outerWidth(),o=e.dpDiv.outerHeight(),r=e.input?e.input.outerWidth():0,a=e.input?e.input.outerHeight():0,l=document.documentElement.clientWidth+(n?0:t(document).scrollLeft()),c=document.documentElement.clientHeight+(n?0:t(document).scrollTop());return i.left-=this._get(e,"isRTL")?s-r:0,i.left-=n&&i.left===e.input.offset().left?t(document).scrollLeft():0,i.top-=n&&i.top===e.input.offset().top+a?t(document).scrollTop():0,i.left-=Math.min(i.left,i.left+s>l&&l>s?Math.abs(i.left+s-l):0),i.top-=Math.min(i.top,i.top+o>c&&c>o?Math.abs(o+a):0),i},_findPos:function(e){for(var i,n=this._getInst(e),s=this._get(n,"isRTL");e&&("hidden"===e.type||1!==e.nodeType||t.expr.pseudos.hidden(e));)e=e[s?"previousSibling":"nextSibling"];return[(i=t(e).offset()).left,i.top]},_hideDatepicker:function(e){var i,n,s,o,r=this._curInst;!r||e&&r!==t.data(e,"datepicker")||this._datepickerShowing&&(i=this._get(r,"showAnim"),n=this._get(r,"duration"),s=function(){t.datepicker._tidyDialog(r)},t.effects&&(t.effects.effect[i]||t.effects[i])?r.dpDiv.hide(i,t.datepicker._get(r,"showOptions"),n,s):r.dpDiv["slideDown"===i?"slideUp":"fadeIn"===i?"fadeOut":"hide"](i?n:null,s),i||s(),this._datepickerShowing=!1,(o=this._get(r,"onClose"))&&o.apply(r.input?r.input[0]:null,[r.input?r.input.val():"",r]),this._lastInput=null,this._inDialog&&(this._dialogInput.css({position:"absolute",left:"0",top:"-100px"}),t.blockUI&&(t.unblockUI(),t("body").append(this.dpDiv))),this._inDialog=!1)},_tidyDialog:function(t){t.dpDiv.removeClass(this._dialogClass).off(".ui-datepicker-calendar")},_checkExternalClick:function(e){if(t.datepicker._curInst){var i=t(e.target),n=t.datepicker._getInst(i[0]);(i[0].id===t.datepicker._mainDivId||0!==i.parents("#"+t.datepicker._mainDivId).length||i.hasClass(t.datepicker.markerClassName)||i.closest("."+t.datepicker._triggerClass).length||!t.datepicker._datepickerShowing||t.datepicker._inDialog&&t.blockUI)&&(!i.hasClass(t.datepicker.markerClassName)||t.datepicker._curInst===n)||t.datepicker._hideDatepicker()}},_adjustDate:function(e,i,n){var s=t(e),o=this._getInst(s[0]);this._isDisabledDatepicker(s[0])||(this._adjustInstDate(o,i+("M"===n?this._get(o,"showCurrentAtPos"):0),n),this._updateDatepicker(o))},_gotoToday:function(e){var i,n=t(e),s=this._getInst(n[0]);this._get(s,"gotoCurrent")&&s.currentDay?(s.selectedDay=s.currentDay,s.drawMonth=s.selectedMonth=s.currentMonth,s.drawYear=s.selectedYear=s.currentYear):(i=new Date,s.selectedDay=i.getDate(),s.drawMonth=s.selectedMonth=i.getMonth(),s.drawYear=s.selectedYear=i.getFullYear()),this._notifyChange(s),this._adjustDate(n)},_selectMonthYear:function(e,i,n){var s=t(e),o=this._getInst(s[0]);o["selected"+("M"===n?"Month":"Year")]=o["draw"+("M"===n?"Month":"Year")]=parseInt(i.options[i.selectedIndex].value,10),this._notifyChange(o),this._adjustDate(s)},_selectDay:function(e,i,n,s){var o,r=t(e);t(s).hasClass(this._unselectableClass)||this._isDisabledDatepicker(r[0])||((o=this._getInst(r[0])).selectedDay=o.currentDay=t("a",s).html(),o.selectedMonth=o.currentMonth=i,o.selectedYear=o.currentYear=n,this._selectDate(e,this._formatDate(o,o.currentDay,o.currentMonth,o.currentYear)))},_clearDate:function(e){var i=t(e);this._selectDate(i,"")},_selectDate:function(e,i){var n,s=t(e),o=this._getInst(s[0]);i=null!=i?i:this._formatDate(o),o.input&&o.input.val(i),this._updateAlternate(o),(n=this._get(o,"onSelect"))?n.apply(o.input?o.input[0]:null,[i,o]):o.input&&o.input.trigger("change"),o.inline?this._updateDatepicker(o):(this._hideDatepicker(),this._lastInput=o.input[0],"object"!=typeof o.input[0]&&o.input.trigger("focus"),this._lastInput=null)},_updateAlternate:function(e){var i,n,s,o=this._get(e,"altField");o&&(i=this._get(e,"altFormat")||this._get(e,"dateFormat"),n=this._getDate(e),s=this.formatDate(i,n,this._getFormatConfig(e)),t(o).val(s))},noWeekends:function(t){var e=t.getDay();return[e>0&&e<6,""]},iso8601Week:function(t){var e,i=new Date(t.getTime());return i.setDate(i.getDate()+4-(i.getDay()||7)),e=i.getTime(),i.setMonth(0),i.setDate(1),Math.floor(Math.round((e-i)/864e5)/7)+1},parseDate:function(e,i,n){if(null==e||null==i)throw"Invalid arguments";if(""===(i="object"==typeof i?i.toString():i+""))return null;var s,o,r,a,l=0,c=(n?n.shortYearCutoff:null)||this._defaults.shortYearCutoff,h="string"!=typeof c?c:(new Date).getFullYear()%100+parseInt(c,10),u=(n?n.dayNamesShort:null)||this._defaults.dayNamesShort,d=(n?n.dayNames:null)||this._defaults.dayNames,p=(n?n.monthNamesShort:null)||this._defaults.monthNamesShort,f=(n?n.monthNames:null)||this._defaults.monthNames,g=-1,m=-1,v=-1,_=-1,y=!1,b=function(t){var i=s+1<e.length&&e.charAt(s+1)===t;return i&&s++,i},w=function(t){var e=b(t),n="@"===t?14:"!"===t?20:"y"===t&&e?4:"o"===t?3:2,s=new RegExp("^\\d{"+("y"===t?n:1)+","+n+"}"),o=i.substring(l).match(s);if(!o)throw"Missing number at position "+l;return l+=o[0].length,parseInt(o[0],10)},x=function(e,n,s){var o=-1,r=t.map(b(e)?s:n,(function(t,e){return[[e,t]]})).sort((function(t,e){return-(t[1].length-e[1].length)}));if(t.each(r,(function(t,e){var n=e[1];if(i.substr(l,n.length).toLowerCase()===n.toLowerCase())return o=e[0],l+=n.length,!1})),-1!==o)return o+1;throw"Unknown name at position "+l},k=function(){if(i.charAt(l)!==e.charAt(s))throw"Unexpected literal at position "+l;l++};for(s=0;s<e.length;s++)if(y)"'"!==e.charAt(s)||b("'")?k():y=!1;else switch(e.charAt(s)){case"d":v=w("d");break;case"D":x("D",u,d);break;case"o":_=w("o");break;case"m":m=w("m");break;case"M":m=x("M",p,f);break;case"y":g=w("y");break;case"@":g=(a=new Date(w("@"))).getFullYear(),m=a.getMonth()+1,v=a.getDate();break;case"!":g=(a=new Date((w("!")-this._ticksTo1970)/1e4)).getFullYear(),m=a.getMonth()+1,v=a.getDate();break;case"'":b("'")?k():y=!0;break;default:k()}if(l<i.length&&(r=i.substr(l),!/^\s+/.test(r)))throw"Extra/unparsed characters found in date: "+r;if(-1===g?g=(new Date).getFullYear():g<100&&(g+=(new Date).getFullYear()-(new Date).getFullYear()%100+(g<=h?0:-100)),_>-1)for(m=1,v=_;!(v<=(o=this._getDaysInMonth(g,m-1)));)m++,v-=o;if((a=this._daylightSavingAdjust(new Date(g,m-1,v))).getFullYear()!==g||a.getMonth()+1!==m||a.getDate()!==v)throw"Invalid date";return a},ATOM:"yy-mm-dd",COOKIE:"D, dd M yy",ISO_8601:"yy-mm-dd",RFC_822:"D, d M y",RFC_850:"DD, dd-M-y",RFC_1036:"D, d M y",RFC_1123:"D, d M yy",RFC_2822:"D, d M yy",RSS:"D, d M y",TICKS:"!",TIMESTAMP:"@",W3C:"yy-mm-dd",_ticksTo1970:24*(718685+Math.floor(492.5)-Math.floor(19.7)+Math.floor(4.925))*60*60*1e7,formatDate:function(t,e,i){if(!e)return"";var n,s=(i?i.dayNamesShort:null)||this._defaults.dayNamesShort,o=(i?i.dayNames:null)||this._defaults.dayNames,r=(i?i.monthNamesShort:null)||this._defaults.monthNamesShort,a=(i?i.monthNames:null)||this._defaults.monthNames,l=function(e){var i=n+1<t.length&&t.charAt(n+1)===e;return i&&n++,i},c=function(t,e,i){var n=""+e;if(l(t))for(;n.length<i;)n="0"+n;return n},h=function(t,e,i,n){return l(t)?n[e]:i[e]},u="",d=!1;if(e)for(n=0;n<t.length;n++)if(d)"'"!==t.charAt(n)||l("'")?u+=t.charAt(n):d=!1;else switch(t.charAt(n)){case"d":u+=c("d",e.getDate(),2);break;case"D":u+=h("D",e.getDay(),s,o);break;case"o":u+=c("o",Math.round((new Date(e.getFullYear(),e.getMonth(),e.getDate()).getTime()-new Date(e.getFullYear(),0,0).getTime())/864e5),3);break;case"m":u+=c("m",e.getMonth()+1,2);break;case"M":u+=h("M",e.getMonth(),r,a);break;case"y":u+=l("y")?e.getFullYear():(e.getFullYear()%100<10?"0":"")+e.getFullYear()%100;break;case"@":u+=e.getTime();break;case"!":u+=1e4*e.getTime()+this._ticksTo1970;break;case"'":l("'")?u+="'":d=!0;break;default:u+=t.charAt(n)}return u},_possibleChars:function(t){var e,i="",n=!1,s=function(i){var n=e+1<t.length&&t.charAt(e+1)===i;return n&&e++,n};for(e=0;e<t.length;e++)if(n)"'"!==t.charAt(e)||s("'")?i+=t.charAt(e):n=!1;else switch(t.charAt(e)){case"d":case"m":case"y":case"@":i+="0123456789";break;case"D":case"M":return null;case"'":s("'")?i+="'":n=!0;break;default:i+=t.charAt(e)}return i},_get:function(t,e){return void 0!==t.settings[e]?t.settings[e]:this._defaults[e]},_setDateFromField:function(t,e){if(t.input.val()!==t.lastVal){var i=this._get(t,"dateFormat"),n=t.lastVal=t.input?t.input.val():null,s=this._getDefaultDate(t),o=s,r=this._getFormatConfig(t);try{o=this.parseDate(i,n,r)||s}catch(t){n=e?"":n}t.selectedDay=o.getDate(),t.drawMonth=t.selectedMonth=o.getMonth(),t.drawYear=t.selectedYear=o.getFullYear(),t.currentDay=n?o.getDate():0,t.currentMonth=n?o.getMonth():0,t.currentYear=n?o.getFullYear():0,this._adjustInstDate(t)}},_getDefaultDate:function(t){return this._restrictMinMax(t,this._determineDate(t,this._get(t,"defaultDate"),new Date))},_determineDate:function(e,i,n){var s=null==i||""===i?n:"string"==typeof i?function(i){try{return t.datepicker.parseDate(t.datepicker._get(e,"dateFormat"),i,t.datepicker._getFormatConfig(e))}catch(t){}for(var n=(i.toLowerCase().match(/^c/)?t.datepicker._getDate(e):null)||new Date,s=n.getFullYear(),o=n.getMonth(),r=n.getDate(),a=/([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,l=a.exec(i);l;){switch(l[2]||"d"){case"d":case"D":r+=parseInt(l[1],10);break;case"w":case"W":r+=7*parseInt(l[1],10);break;case"m":case"M":o+=parseInt(l[1],10),r=Math.min(r,t.datepicker._getDaysInMonth(s,o));break;case"y":case"Y":s+=parseInt(l[1],10),r=Math.min(r,t.datepicker._getDaysInMonth(s,o))}l=a.exec(i)}return new Date(s,o,r)}(i):"number"==typeof i?isNaN(i)?n:function(t){var e=new Date;return e.setDate(e.getDate()+t),e}(i):new Date(i.getTime());return(s=s&&"Invalid Date"===s.toString()?n:s)&&(s.setHours(0),s.setMinutes(0),s.setSeconds(0),s.setMilliseconds(0)),this._daylightSavingAdjust(s)},_daylightSavingAdjust:function(t){return t?(t.setHours(t.getHours()>12?t.getHours()+2:0),t):null},_setDate:function(t,e,i){var n=!e,s=t.selectedMonth,o=t.selectedYear,r=this._restrictMinMax(t,this._determineDate(t,e,new Date));t.selectedDay=t.currentDay=r.getDate(),t.drawMonth=t.selectedMonth=t.currentMonth=r.getMonth(),t.drawYear=t.selectedYear=t.currentYear=r.getFullYear(),s===t.selectedMonth&&o===t.selectedYear||i||this._notifyChange(t),this._adjustInstDate(t),t.input&&t.input.val(n?"":this._formatDate(t))},_getDate:function(t){return!t.currentYear||t.input&&""===t.input.val()?null:this._daylightSavingAdjust(new Date(t.currentYear,t.currentMonth,t.currentDay))},_attachHandlers:function(e){var i=this._get(e,"stepMonths"),n="#"+e.id.replace(/\\\\/g,"\\");e.dpDiv.find("[data-handler]").map((function(){var e={prev:function(){t.datepicker._adjustDate(n,-i,"M")},next:function(){t.datepicker._adjustDate(n,+i,"M")},hide:function(){t.datepicker._hideDatepicker()},today:function(){t.datepicker._gotoToday(n)},selectDay:function(){return t.datepicker._selectDay(n,+this.getAttribute("data-month"),+this.getAttribute("data-year"),this),!1},selectMonth:function(){return t.datepicker._selectMonthYear(n,this,"M"),!1},selectYear:function(){return t.datepicker._selectMonthYear(n,this,"Y"),!1}};t(this).on(this.getAttribute("data-event"),e[this.getAttribute("data-handler")])}))},_generateHTML:function(t){var e,i,n,s,o,r,a,l,c,h,u,d,p,f,g,m,v,_,y,b,w,x,k,C,D,T,A,S,I,P,E,M,O,N,H,j,z,W,R,F=new Date,L=this._daylightSavingAdjust(new Date(F.getFullYear(),F.getMonth(),F.getDate())),q=this._get(t,"isRTL"),B=this._get(t,"showButtonPanel"),Y=this._get(t,"hideIfNoPrevNext"),U=this._get(t,"navigationAsDateFormat"),V=this._getNumberOfMonths(t),K=this._get(t,"showCurrentAtPos"),$=this._get(t,"stepMonths"),G=1!==V[0]||1!==V[1],X=this._daylightSavingAdjust(t.currentDay?new Date(t.currentYear,t.currentMonth,t.currentDay):new Date(9999,9,9)),Z=this._getMinMaxDate(t,"min"),J=this._getMinMaxDate(t,"max"),Q=t.drawMonth-K,tt=t.drawYear;if(Q<0&&(Q+=12,tt--),J)for(e=this._daylightSavingAdjust(new Date(J.getFullYear(),J.getMonth()-V[0]*V[1]+1,J.getDate())),e=Z&&e<Z?Z:e;this._daylightSavingAdjust(new Date(tt,Q,1))>e;)--Q<0&&(Q=11,tt--);for(t.drawMonth=Q,t.drawYear=tt,i=this._get(t,"prevText"),i=U?this.formatDate(i,this._daylightSavingAdjust(new Date(tt,Q-$,1)),this._getFormatConfig(t)):i,n=this._canAdjustMonth(t,-1,tt,Q)?"<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click' title='"+i+"'><span class='ui-icon ui-icon-circle-triangle-"+(q?"e":"w")+"'>"+i+"</span></a>":Y?"":"<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='"+i+"'><span class='ui-icon ui-icon-circle-triangle-"+(q?"e":"w")+"'>"+i+"</span></a>",s=this._get(t,"nextText"),s=U?this.formatDate(s,this._daylightSavingAdjust(new Date(tt,Q+$,1)),this._getFormatConfig(t)):s,o=this._canAdjustMonth(t,1,tt,Q)?"<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click' title='"+s+"'><span class='ui-icon ui-icon-circle-triangle-"+(q?"w":"e")+"'>"+s+"</span></a>":Y?"":"<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='"+s+"'><span class='ui-icon ui-icon-circle-triangle-"+(q?"w":"e")+"'>"+s+"</span></a>",r=this._get(t,"currentText"),a=this._get(t,"gotoCurrent")&&t.currentDay?X:L,r=U?this.formatDate(r,a,this._getFormatConfig(t)):r,l=t.inline?"":"<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>"+this._get(t,"closeText")+"</button>",c=B?"<div class='ui-datepicker-buttonpane ui-widget-content'>"+(q?l:"")+(this._isInRange(t,a)?"<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'>"+r+"</button>":"")+(q?"":l)+"</div>":"",h=parseInt(this._get(t,"firstDay"),10),h=isNaN(h)?0:h,u=this._get(t,"showWeek"),d=this._get(t,"dayNames"),p=this._get(t,"dayNamesMin"),f=this._get(t,"monthNames"),g=this._get(t,"monthNamesShort"),m=this._get(t,"beforeShowDay"),v=this._get(t,"showOtherMonths"),_=this._get(t,"selectOtherMonths"),y=this._getDefaultDate(t),b="",x=0;x<V[0];x++){for(k="",this.maxRows=4,C=0;C<V[1];C++){if(D=this._daylightSavingAdjust(new Date(tt,Q,t.selectedDay)),T=" ui-corner-all",A="",G){if(A+="<div class='ui-datepicker-group",V[1]>1)switch(C){case 0:A+=" ui-datepicker-group-first",T=" ui-corner-"+(q?"right":"left");break;case V[1]-1:A+=" ui-datepicker-group-last",T=" ui-corner-"+(q?"left":"right");break;default:A+=" ui-datepicker-group-middle",T=""}A+="'>"}for(A+="<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix"+T+"'>"+(/all|left/.test(T)&&0===x?q?o:n:"")+(/all|right/.test(T)&&0===x?q?n:o:"")+this._generateMonthYearHeader(t,Q,tt,Z,J,x>0||C>0,f,g)+"</div><table class='ui-datepicker-calendar'><thead><tr>",S=u?"<th class='ui-datepicker-week-col'>"+this._get(t,"weekHeader")+"</th>":"",w=0;w<7;w++)S+="<th scope='col'"+((w+h+6)%7>=5?" class='ui-datepicker-week-end'":"")+"><span title='"+d[I=(w+h)%7]+"'>"+p[I]+"</span></th>";for(A+=S+"</tr></thead><tbody>",P=this._getDaysInMonth(tt,Q),tt===t.selectedYear&&Q===t.selectedMonth&&(t.selectedDay=Math.min(t.selectedDay,P)),E=(this._getFirstDayOfMonth(tt,Q)-h+7)%7,M=Math.ceil((E+P)/7),O=G&&this.maxRows>M?this.maxRows:M,this.maxRows=O,N=this._daylightSavingAdjust(new Date(tt,Q,1-E)),H=0;H<O;H++){for(A+="<tr>",j=u?"<td class='ui-datepicker-week-col'>"+this._get(t,"calculateWeek")(N)+"</td>":"",w=0;w<7;w++)z=m?m.apply(t.input?t.input[0]:null,[N]):[!0,""],R=(W=N.getMonth()!==Q)&&!_||!z[0]||Z&&N<Z||J&&N>J,j+="<td class='"+((w+h+6)%7>=5?" ui-datepicker-week-end":"")+(W?" ui-datepicker-other-month":"")+(N.getTime()===D.getTime()&&Q===t.selectedMonth&&t._keyEvent||y.getTime()===N.getTime()&&y.getTime()===D.getTime()?" "+this._dayOverClass:"")+(R?" "+this._unselectableClass+" ui-state-disabled":"")+(W&&!v?"":" "+z[1]+(N.getTime()===X.getTime()?" "+this._currentClass:"")+(N.getTime()===L.getTime()?" ui-datepicker-today":""))+"'"+(W&&!v||!z[2]?"":" title='"+z[2].replace(/'/g,"&#39;")+"'")+(R?"":" data-handler='selectDay' data-event='click' data-month='"+N.getMonth()+"' data-year='"+N.getFullYear()+"'")+">"+(W&&!v?"&#xa0;":R?"<span class='ui-state-default'>"+N.getDate()+"</span>":"<a class='ui-state-default"+(N.getTime()===L.getTime()?" ui-state-highlight":"")+(N.getTime()===X.getTime()?" ui-state-active":"")+(W?" ui-priority-secondary":"")+"' href='#'>"+N.getDate()+"</a>")+"</td>",N.setDate(N.getDate()+1),N=this._daylightSavingAdjust(N);A+=j+"</tr>"}++Q>11&&(Q=0,tt++),k+=A+="</tbody></table>"+(G?"</div>"+(V[0]>0&&C===V[1]-1?"<div class='ui-datepicker-row-break'></div>":""):"")}b+=k}return b+=c,t._keyEvent=!1,b},_generateMonthYearHeader:function(t,e,i,n,s,o,r,a){var l,c,h,u,d,p,f,g,m=this._get(t,"changeMonth"),v=this._get(t,"changeYear"),_=this._get(t,"showMonthAfterYear"),y="<div class='ui-datepicker-title'>",b="";if(o||!m)b+="<span class='ui-datepicker-month'>"+r[e]+"</span>";else{for(l=n&&n.getFullYear()===i,c=s&&s.getFullYear()===i,b+="<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>",h=0;h<12;h++)(!l||h>=n.getMonth())&&(!c||h<=s.getMonth())&&(b+="<option value='"+h+"'"+(h===e?" selected='selected'":"")+">"+a[h]+"</option>");b+="</select>"}if(_||(y+=b+(!o&&m&&v?"":"&#xa0;")),!t.yearshtml)if(t.yearshtml="",o||!v)y+="<span class='ui-datepicker-year'>"+i+"</span>";else{for(u=this._get(t,"yearRange").split(":"),d=(new Date).getFullYear(),p=function(t){var e=t.match(/c[+\-].*/)?i+parseInt(t.substring(1),10):t.match(/[+\-].*/)?d+parseInt(t,10):parseInt(t,10);return isNaN(e)?d:e},f=p(u[0]),g=Math.max(f,p(u[1]||"")),f=n?Math.max(f,n.getFullYear()):f,g=s?Math.min(g,s.getFullYear()):g,t.yearshtml+="<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";f<=g;f++)t.yearshtml+="<option value='"+f+"'"+(f===i?" selected='selected'":"")+">"+f+"</option>";t.yearshtml+="</select>",y+=t.yearshtml,t.yearshtml=null}return y+=this._get(t,"yearSuffix"),_&&(y+=(!o&&m&&v?"":"&#xa0;")+b),y+"</div>"},_adjustInstDate:function(t,e,i){var n=t.selectedYear+("Y"===i?e:0),s=t.selectedMonth+("M"===i?e:0),o=Math.min(t.selectedDay,this._getDaysInMonth(n,s))+("D"===i?e:0),r=this._restrictMinMax(t,this._daylightSavingAdjust(new Date(n,s,o)));t.selectedDay=r.getDate(),t.drawMonth=t.selectedMonth=r.getMonth(),t.drawYear=t.selectedYear=r.getFullYear(),"M"!==i&&"Y"!==i||this._notifyChange(t)},_restrictMinMax:function(t,e){var i=this._getMinMaxDate(t,"min"),n=this._getMinMaxDate(t,"max"),s=i&&e<i?i:e;return n&&s>n?n:s},_notifyChange:function(t){var e=this._get(t,"onChangeMonthYear");e&&e.apply(t.input?t.input[0]:null,[t.selectedYear,t.selectedMonth+1,t])},_getNumberOfMonths:function(t){var e=this._get(t,"numberOfMonths");return null==e?[1,1]:"number"==typeof e?[1,e]:e},_getMinMaxDate:function(t,e){return this._determineDate(t,this._get(t,e+"Date"),null)},_getDaysInMonth:function(t,e){return 32-this._daylightSavingAdjust(new Date(t,e,32)).getDate()},_getFirstDayOfMonth:function(t,e){return new Date(t,e,1).getDay()},_canAdjustMonth:function(t,e,i,n){var s=this._getNumberOfMonths(t),o=this._daylightSavingAdjust(new Date(i,n+(e<0?e:s[0]*s[1]),1));return e<0&&o.setDate(this._getDaysInMonth(o.getFullYear(),o.getMonth())),this._isInRange(t,o)},_isInRange:function(t,e){var i,n,s=this._getMinMaxDate(t,"min"),o=this._getMinMaxDate(t,"max"),r=null,a=null,l=this._get(t,"yearRange");return l&&(i=l.split(":"),n=(new Date).getFullYear(),r=parseInt(i[0],10),a=parseInt(i[1],10),i[0].match(/[+\-].*/)&&(r+=n),i[1].match(/[+\-].*/)&&(a+=n)),(!s||e.getTime()>=s.getTime())&&(!o||e.getTime()<=o.getTime())&&(!r||e.getFullYear()>=r)&&(!a||e.getFullYear()<=a)},_getFormatConfig:function(t){var e=this._get(t,"shortYearCutoff");return{shortYearCutoff:e="string"!=typeof e?e:(new Date).getFullYear()%100+parseInt(e,10),dayNamesShort:this._get(t,"dayNamesShort"),dayNames:this._get(t,"dayNames"),monthNamesShort:this._get(t,"monthNamesShort"),monthNames:this._get(t,"monthNames")}},_formatDate:function(t,e,i,n){e||(t.currentDay=t.selectedDay,t.currentMonth=t.selectedMonth,t.currentYear=t.selectedYear);var s=e?"object"==typeof e?e:this._daylightSavingAdjust(new Date(n,i,e)):this._daylightSavingAdjust(new Date(t.currentYear,t.currentMonth,t.currentDay));return this.formatDate(this._get(t,"dateFormat"),s,this._getFormatConfig(t))}}),t.fn.datepicker=function(e){if(!this.length)return this;t.datepicker.initialized||(t(document).on("mousedown",t.datepicker._checkExternalClick),t.datepicker.initialized=!0),0===t("#"+t.datepicker._mainDivId).length&&t("body").append(t.datepicker.dpDiv);var i=Array.prototype.slice.call(arguments,1);return"string"!=typeof e||"isDisabled"!==e&&"getDate"!==e&&"widget"!==e?"option"===e&&2===arguments.length&&"string"==typeof arguments[1]?t.datepicker["_"+e+"Datepicker"].apply(t.datepicker,[this[0]].concat(i)):this.each((function(){"string"==typeof e?t.datepicker["_"+e+"Datepicker"].apply(t.datepicker,[this].concat(i)):t.datepicker._attachDatepicker(this,e)})):t.datepicker["_"+e+"Datepicker"].apply(t.datepicker,[this[0]].concat(i))},t.datepicker=new d,t.datepicker.initialized=!1,t.datepicker.uuid=(new Date).getTime(),t.datepicker.version="1.12.1",t.datepicker,t.widget("ui.dialog",{version:"1.12.1",options:{appendTo:"body",autoOpen:!0,buttons:[],classes:{"ui-dialog":"ui-corner-all","ui-dialog-titlebar":"ui-corner-all"},closeOnEscape:!0,closeText:"Close",draggable:!0,hide:null,height:"auto",maxHeight:null,maxWidth:null,minHeight:150,minWidth:150,modal:!1,position:{my:"center",at:"center",of:window,collision:"fit",using:function(e){var i=t(this).css(e).offset().top;i<0&&t(this).css("top",e.top-i)}},resizable:!0,show:null,title:null,width:300,beforeClose:null,close:null,drag:null,dragStart:null,dragStop:null,focus:null,open:null,resize:null,resizeStart:null,resizeStop:null},sizeRelatedOptions:{buttons:!0,height:!0,maxHeight:!0,maxWidth:!0,minHeight:!0,minWidth:!0,width:!0},resizableRelatedOptions:{maxHeight:!0,maxWidth:!0,minHeight:!0,minWidth:!0},_create:function(){this.originalCss={display:this.element[0].style.display,width:this.element[0].style.width,minHeight:this.element[0].style.minHeight,maxHeight:this.element[0].style.maxHeight,height:this.element[0].style.height},this.originalPosition={parent:this.element.parent(),index:this.element.parent().children().index(this.element)},this.originalTitle=this.element.attr("title"),null==this.options.title&&null!=this.originalTitle&&(this.options.title=this.originalTitle),this.options.disabled&&(this.options.disabled=!1),this._createWrapper(),this.element.show().removeAttr("title").appendTo(this.uiDialog),this._addClass("ui-dialog-content","ui-widget-content"),this._createTitlebar(),this._createButtonPane(),this.options.draggable&&t.fn.draggable&&this._makeDraggable(),this.options.resizable&&t.fn.resizable&&this._makeResizable(),this._isOpen=!1,this._trackFocus()},_init:function(){this.options.autoOpen&&this.open()},_appendTo:function(){var e=this.options.appendTo;return e&&(e.jquery||e.nodeType)?t(e):this.document.find(e||"body").eq(0)},_destroy:function(){var t,e=this.originalPosition;this._untrackInstance(),this._destroyOverlay(),this.element.removeUniqueId().css(this.originalCss).detach(),this.uiDialog.remove(),this.originalTitle&&this.element.attr("title",this.originalTitle),(t=e.parent.children().eq(e.index)).length&&t[0]!==this.element[0]?t.before(this.element):e.parent.append(this.element)},widget:function(){return this.uiDialog},disable:t.noop,enable:t.noop,close:function(e){var i=this;this._isOpen&&!1!==this._trigger("beforeClose",e)&&(this._isOpen=!1,this._focusedElement=null,this._destroyOverlay(),this._untrackInstance(),this.opener.filter(":focusable").trigger("focus").length||t.ui.safeBlur(t.ui.safeActiveElement(this.document[0])),this._hide(this.uiDialog,this.options.hide,(function(){i._trigger("close",e)})))},isOpen:function(){return this._isOpen},moveToTop:function(){this._moveToTop()},_moveToTop:function(e,i){var n=!1,s=this.uiDialog.siblings(".ui-front:visible").map((function(){return+t(this).css("z-index")})).get(),o=Math.max.apply(null,s);return o>=+this.uiDialog.css("z-index")&&(this.uiDialog.css("z-index",o+1),n=!0),n&&!i&&this._trigger("focus",e),n},open:function(){var e=this;this._isOpen?this._moveToTop()&&this._focusTabbable():(this._isOpen=!0,this.opener=t(t.ui.safeActiveElement(this.document[0])),this._size(),this._position(),this._createOverlay(),this._moveToTop(null,!0),this.overlay&&this.overlay.css("z-index",this.uiDialog.css("z-index")-1),this._show(this.uiDialog,this.options.show,(function(){e._focusTabbable(),e._trigger("focus")})),this._makeFocusTarget(),this._trigger("open"))},_focusTabbable:function(){var t=this._focusedElement;t||(t=this.element.find("[autofocus]")),t.length||(t=this.element.find(":tabbable")),t.length||(t=this.uiDialogButtonPane.find(":tabbable")),t.length||(t=this.uiDialogTitlebarClose.filter(":tabbable")),t.length||(t=this.uiDialog),t.eq(0).trigger("focus")},_keepFocus:function(e){function i(){var e=t.ui.safeActiveElement(this.document[0]);this.uiDialog[0]===e||t.contains(this.uiDialog[0],e)||this._focusTabbable()}e.preventDefault(),i.call(this),this._delay(i)},_createWrapper:function(){this.uiDialog=t("<div>").hide().attr({tabIndex:-1,role:"dialog"}).appendTo(this._appendTo()),this._addClass(this.uiDialog,"ui-dialog","ui-widget ui-widget-content ui-front"),this._on(this.uiDialog,{keydown:function(e){if(this.options.closeOnEscape&&!e.isDefaultPrevented()&&e.keyCode&&e.keyCode===t.ui.keyCode.ESCAPE)return e.preventDefault(),void this.close(e);if(e.keyCode===t.ui.keyCode.TAB&&!e.isDefaultPrevented()){var i=this.uiDialog.find(":tabbable"),n=i.filter(":first"),s=i.filter(":last");e.target!==s[0]&&e.target!==this.uiDialog[0]||e.shiftKey?e.target!==n[0]&&e.target!==this.uiDialog[0]||!e.shiftKey||(this._delay((function(){s.trigger("focus")})),e.preventDefault()):(this._delay((function(){n.trigger("focus")})),e.preventDefault())}},mousedown:function(t){this._moveToTop(t)&&this._focusTabbable()}}),this.element.find("[aria-describedby]").length||this.uiDialog.attr({"aria-describedby":this.element.uniqueId().attr("id")})},_createTitlebar:function(){var e;this.uiDialogTitlebar=t("<div>"),this._addClass(this.uiDialogTitlebar,"ui-dialog-titlebar","ui-widget-header ui-helper-clearfix"),this._on(this.uiDialogTitlebar,{mousedown:function(e){t(e.target).closest(".ui-dialog-titlebar-close")||this.uiDialog.trigger("focus")}}),this.uiDialogTitlebarClose=t("<button type='button'></button>").button({label:t("<a>").text(this.options.closeText).html(),icon:"ui-icon-closethick",showLabel:!1}).appendTo(this.uiDialogTitlebar),this._addClass(this.uiDialogTitlebarClose,"ui-dialog-titlebar-close"),this._on(this.uiDialogTitlebarClose,{click:function(t){t.preventDefault(),this.close(t)}}),e=t("<span>").uniqueId().prependTo(this.uiDialogTitlebar),this._addClass(e,"ui-dialog-title"),this._title(e),this.uiDialogTitlebar.prependTo(this.uiDialog),this.uiDialog.attr({"aria-labelledby":e.attr("id")})},_title:function(t){this.options.title?t.text(this.options.title):t.html("&#160;")},_createButtonPane:function(){this.uiDialogButtonPane=t("<div>"),this._addClass(this.uiDialogButtonPane,"ui-dialog-buttonpane","ui-widget-content ui-helper-clearfix"),this.uiButtonSet=t("<div>").appendTo(this.uiDialogButtonPane),this._addClass(this.uiButtonSet,"ui-dialog-buttonset"),this._createButtons()},_createButtons:function(){var e=this,i=this.options.buttons;this.uiDialogButtonPane.remove(),this.uiButtonSet.empty(),t.isEmptyObject(i)||t.isArray(i)&&!i.length?this._removeClass(this.uiDialog,"ui-dialog-buttons"):(t.each(i,(function(i,n){var s,o;n=t.isFunction(n)?{click:n,text:i}:n,n=t.extend({type:"button"},n),s=n.click,o={icon:n.icon,iconPosition:n.iconPosition,showLabel:n.showLabel,icons:n.icons,text:n.text},delete n.click,delete n.icon,delete n.iconPosition,delete n.showLabel,delete n.icons,"boolean"==typeof n.text&&delete n.text,t("<button></button>",n).button(o).appendTo(e.uiButtonSet).on("click",(function(){s.apply(e.element[0],arguments)}))})),this._addClass(this.uiDialog,"ui-dialog-buttons"),this.uiDialogButtonPane.appendTo(this.uiDialog))},_makeDraggable:function(){var e=this,i=this.options;function n(t){return{position:t.position,offset:t.offset}}this.uiDialog.draggable({cancel:".ui-dialog-content, .ui-dialog-titlebar-close",handle:".ui-dialog-titlebar",containment:"document",start:function(i,s){e._addClass(t(this),"ui-dialog-dragging"),e._blockFrames(),e._trigger("dragStart",i,n(s))},drag:function(t,i){e._trigger("drag",t,n(i))},stop:function(s,o){var r=o.offset.left-e.document.scrollLeft(),a=o.offset.top-e.document.scrollTop();i.position={my:"left top",at:"left"+(r>=0?"+":"")+r+" top"+(a>=0?"+":"")+a,of:e.window},e._removeClass(t(this),"ui-dialog-dragging"),e._unblockFrames(),e._trigger("dragStop",s,n(o))}})},_makeResizable:function(){var e=this,i=this.options,n=i.resizable,s=this.uiDialog.css("position"),o="string"==typeof n?n:"n,e,s,w,se,sw,ne,nw";function r(t){return{originalPosition:t.originalPosition,originalSize:t.originalSize,position:t.position,size:t.size}}this.uiDialog.resizable({cancel:".ui-dialog-content",containment:"document",alsoResize:this.element,maxWidth:i.maxWidth,maxHeight:i.maxHeight,minWidth:i.minWidth,minHeight:this._minHeight(),handles:o,start:function(i,n){e._addClass(t(this),"ui-dialog-resizing"),e._blockFrames(),e._trigger("resizeStart",i,r(n))},resize:function(t,i){e._trigger("resize",t,r(i))},stop:function(n,s){var o=e.uiDialog.offset(),a=o.left-e.document.scrollLeft(),l=o.top-e.document.scrollTop();i.height=e.uiDialog.height(),i.width=e.uiDialog.width(),i.position={my:"left top",at:"left"+(a>=0?"+":"")+a+" top"+(l>=0?"+":"")+l,of:e.window},e._removeClass(t(this),"ui-dialog-resizing"),e._unblockFrames(),e._trigger("resizeStop",n,r(s))}}).css("position",s)},_trackFocus:function(){this._on(this.widget(),{focusin:function(e){this._makeFocusTarget(),this._focusedElement=t(e.target)}})},_makeFocusTarget:function(){this._untrackInstance(),this._trackingInstances().unshift(this)},_untrackInstance:function(){var e=this._trackingInstances(),i=t.inArray(this,e);-1!==i&&e.splice(i,1)},_trackingInstances:function(){var t=this.document.data("ui-dialog-instances");return t||(t=[],this.document.data("ui-dialog-instances",t)),t},_minHeight:function(){var t=this.options;return"auto"===t.height?t.minHeight:Math.min(t.minHeight,t.height)},_position:function(){var t=this.uiDialog.is(":visible");t||this.uiDialog.show(),this.uiDialog.position(this.options.position),t||this.uiDialog.hide()},_setOptions:function(e){var i=this,n=!1,s={};t.each(e,(function(t,e){i._setOption(t,e),t in i.sizeRelatedOptions&&(n=!0),t in i.resizableRelatedOptions&&(s[t]=e)})),n&&(this._size(),this._position()),this.uiDialog.is(":data(ui-resizable)")&&this.uiDialog.resizable("option",s)},_setOption:function(e,i){var n,s,o=this.uiDialog;"disabled"!==e&&(this._super(e,i),"appendTo"===e&&this.uiDialog.appendTo(this._appendTo()),"buttons"===e&&this._createButtons(),"closeText"===e&&this.uiDialogTitlebarClose.button({label:t("<a>").text(""+this.options.closeText).html()}),"draggable"===e&&((n=o.is(":data(ui-draggable)"))&&!i&&o.draggable("destroy"),!n&&i&&this._makeDraggable()),"position"===e&&this._position(),"resizable"===e&&((s=o.is(":data(ui-resizable)"))&&!i&&o.resizable("destroy"),s&&"string"==typeof i&&o.resizable("option","handles",i),s||!1===i||this._makeResizable()),"title"===e&&this._title(this.uiDialogTitlebar.find(".ui-dialog-title")))},_size:function(){var t,e,i,n=this.options;this.element.show().css({width:"auto",minHeight:0,maxHeight:"none",height:0}),n.minWidth>n.width&&(n.width=n.minWidth),t=this.uiDialog.css({height:"auto",width:n.width}).outerHeight(),e=Math.max(0,n.minHeight-t),i="number"==typeof n.maxHeight?Math.max(0,n.maxHeight-t):"none","auto"===n.height?this.element.css({minHeight:e,maxHeight:i,height:"auto"}):this.element.height(Math.max(0,n.height-t)),this.uiDialog.is(":data(ui-resizable)")&&this.uiDialog.resizable("option","minHeight",this._minHeight())},_blockFrames:function(){this.iframeBlocks=this.document.find("iframe").map((function(){var e=t(this);return t("<div>").css({position:"absolute",width:e.outerWidth(),height:e.outerHeight()}).appendTo(e.parent()).offset(e.offset())[0]}))},_unblockFrames:function(){this.iframeBlocks&&(this.iframeBlocks.remove(),delete this.iframeBlocks)},_allowInteraction:function(e){return!!t(e.target).closest(".ui-dialog").length||!!t(e.target).closest(".ui-datepicker").length},_createOverlay:function(){if(this.options.modal){var e=!0;this._delay((function(){e=!1})),this.document.data("ui-dialog-overlays")||this._on(this.document,{focusin:function(t){e||this._allowInteraction(t)||(t.preventDefault(),this._trackingInstances()[0]._focusTabbable())}}),this.overlay=t("<div>").appendTo(this._appendTo()),this._addClass(this.overlay,null,"ui-widget-overlay ui-front"),this._on(this.overlay,{mousedown:"_keepFocus"}),this.document.data("ui-dialog-overlays",(this.document.data("ui-dialog-overlays")||0)+1)}},_destroyOverlay:function(){if(this.options.modal&&this.overlay){var t=this.document.data("ui-dialog-overlays")-1;t?this.document.data("ui-dialog-overlays",t):(this._off(this.document,"focusin"),this.document.removeData("ui-dialog-overlays")),this.overlay.remove(),this.overlay=null}}}),!1!==t.uiBackCompat&&t.widget("ui.dialog",t.ui.dialog,{options:{dialogClass:""},_createWrapper:function(){this._super(),this.uiDialog.addClass(this.options.dialogClass)},_setOption:function(t,e){"dialogClass"===t&&this.uiDialog.removeClass(this.options.dialogClass).addClass(e),this._superApply(arguments)}}),t.ui.dialog,t.widget("ui.progressbar",{version:"1.12.1",options:{classes:{"ui-progressbar":"ui-corner-all","ui-progressbar-value":"ui-corner-left","ui-progressbar-complete":"ui-corner-right"},max:100,value:0,change:null,complete:null},min:0,_create:function(){this.oldValue=this.options.value=this._constrainedValue(),this.element.attr({role:"progressbar","aria-valuemin":this.min}),this._addClass("ui-progressbar","ui-widget ui-widget-content"),this.valueDiv=t("<div>").appendTo(this.element),this._addClass(this.valueDiv,"ui-progressbar-value","ui-widget-header"),this._refreshValue()},_destroy:function(){this.element.removeAttr("role aria-valuemin aria-valuemax aria-valuenow"),this.valueDiv.remove()},value:function(t){if(void 0===t)return this.options.value;this.options.value=this._constrainedValue(t),this._refreshValue()},_constrainedValue:function(t){return void 0===t&&(t=this.options.value),this.indeterminate=!1===t,"number"!=typeof t&&(t=0),!this.indeterminate&&Math.min(this.options.max,Math.max(this.min,t))},_setOptions:function(t){var e=t.value;delete t.value,this._super(t),this.options.value=this._constrainedValue(e),this._refreshValue()},_setOption:function(t,e){"max"===t&&(e=Math.max(this.min,e)),this._super(t,e)},_setOptionDisabled:function(t){this._super(t),this.element.attr("aria-disabled",t),this._toggleClass(null,"ui-state-disabled",!!t)},_percentage:function(){return this.indeterminate?100:100*(this.options.value-this.min)/(this.options.max-this.min)},_refreshValue:function(){var e=this.options.value,i=this._percentage();this.valueDiv.toggle(this.indeterminate||e>this.min).width(i.toFixed(0)+"%"),this._toggleClass(this.valueDiv,"ui-progressbar-complete",null,e===this.options.max)._toggleClass("ui-progressbar-indeterminate",null,this.indeterminate),this.indeterminate?(this.element.removeAttr("aria-valuenow"),this.overlayDiv||(this.overlayDiv=t("<div>").appendTo(this.valueDiv),this._addClass(this.overlayDiv,"ui-progressbar-overlay"))):(this.element.attr({"aria-valuemax":this.options.max,"aria-valuenow":e}),this.overlayDiv&&(this.overlayDiv.remove(),this.overlayDiv=null)),this.oldValue!==e&&(this.oldValue=e,this._trigger("change")),e===this.options.max&&this._trigger("complete")}}),t.widget("ui.selectmenu",[t.ui.formResetMixin,{version:"1.12.1",defaultElement:"<select>",options:{appendTo:null,classes:{"ui-selectmenu-button-open":"ui-corner-top","ui-selectmenu-button-closed":"ui-corner-all"},disabled:null,icons:{button:"ui-icon-triangle-1-s"},position:{my:"left top",at:"left bottom",collision:"none"},width:!1,change:null,close:null,focus:null,open:null,select:null},_create:function(){var e=this.element.uniqueId().attr("id");this.ids={element:e,button:e+"-button",menu:e+"-menu"},this._drawButton(),this._drawMenu(),this._bindFormResetHandler(),this._rendered=!1,this.menuItems=t()},_drawButton:function(){var e,i=this,n=this._parseOption(this.element.find("option:selected"),this.element[0].selectedIndex);this.labels=this.element.labels().attr("for",this.ids.button),this._on(this.labels,{click:function(t){this.button.focus(),t.preventDefault()}}),this.element.hide(),this.button=t("<span>",{tabindex:this.options.disabled?-1:0,id:this.ids.button,role:"combobox","aria-expanded":"false","aria-autocomplete":"list","aria-owns":this.ids.menu,"aria-haspopup":"true",title:this.element.attr("title")}).insertAfter(this.element),this._addClass(this.button,"ui-selectmenu-button ui-selectmenu-button-closed","ui-button ui-widget"),e=t("<span>").appendTo(this.button),this._addClass(e,"ui-selectmenu-icon","ui-icon "+this.options.icons.button),this.buttonItem=this._renderButtonItem(n).appendTo(this.button),!1!==this.options.width&&this._resizeButton(),this._on(this.button,this._buttonEvents),this.button.one("focusin",(function(){i._rendered||i._refreshMenu()}))},_drawMenu:function(){var e=this;this.menu=t("<ul>",{"aria-hidden":"true","aria-labelledby":this.ids.button,id:this.ids.menu}),this.menuWrap=t("<div>").append(this.menu),this._addClass(this.menuWrap,"ui-selectmenu-menu","ui-front"),this.menuWrap.appendTo(this._appendTo()),this.menuInstance=this.menu.menu({classes:{"ui-menu":"ui-corner-bottom"},role:"listbox",select:function(t,i){t.preventDefault(),e._setSelection(),e._select(i.item.data("ui-selectmenu-item"),t)},focus:function(t,i){var n=i.item.data("ui-selectmenu-item");null!=e.focusIndex&&n.index!==e.focusIndex&&(e._trigger("focus",t,{item:n}),e.isOpen||e._select(n,t)),e.focusIndex=n.index,e.button.attr("aria-activedescendant",e.menuItems.eq(n.index).attr("id"))}}).menu("instance"),this.menuInstance._off(this.menu,"mouseleave"),this.menuInstance._closeOnDocumentClick=function(){return!1},this.menuInstance._isDivider=function(){return!1}},refresh:function(){this._refreshMenu(),this.buttonItem.replaceWith(this.buttonItem=this._renderButtonItem(this._getSelectedItem().data("ui-selectmenu-item")||{})),null===this.options.width&&this._resizeButton()},_refreshMenu:function(){var t,e=this.element.find("option");this.menu.empty(),this._parseOptions(e),this._renderMenu(this.menu,this.items),this.menuInstance.refresh(),this.menuItems=this.menu.find("li").not(".ui-selectmenu-optgroup").find(".ui-menu-item-wrapper"),this._rendered=!0,e.length&&(t=this._getSelectedItem(),this.menuInstance.focus(null,t),this._setAria(t.data("ui-selectmenu-item")),this._setOption("disabled",this.element.prop("disabled")))},open:function(t){this.options.disabled||(this._rendered?(this._removeClass(this.menu.find(".ui-state-active"),null,"ui-state-active"),this.menuInstance.focus(null,this._getSelectedItem())):this._refreshMenu(),this.menuItems.length&&(this.isOpen=!0,this._toggleAttr(),this._resizeMenu(),this._position(),this._on(this.document,this._documentClick),this._trigger("open",t)))},_position:function(){this.menuWrap.position(t.extend({of:this.button},this.options.position))},close:function(t){this.isOpen&&(this.isOpen=!1,this._toggleAttr(),this.range=null,this._off(this.document),this._trigger("close",t))},widget:function(){return this.button},menuWidget:function(){return this.menu},_renderButtonItem:function(e){var i=t("<span>");return this._setText(i,e.label),this._addClass(i,"ui-selectmenu-text"),i},_renderMenu:function(e,i){var n=this,s="";t.each(i,(function(i,o){var r;o.optgroup!==s&&(r=t("<li>",{text:o.optgroup}),n._addClass(r,"ui-selectmenu-optgroup","ui-menu-divider"+(o.element.parent("optgroup").prop("disabled")?" ui-state-disabled":"")),r.appendTo(e),s=o.optgroup),n._renderItemData(e,o)}))},_renderItemData:function(t,e){return this._renderItem(t,e).data("ui-selectmenu-item",e)},_renderItem:function(e,i){var n=t("<li>"),s=t("<div>",{title:i.element.attr("title")});return i.disabled&&this._addClass(n,null,"ui-state-disabled"),this._setText(s,i.label),n.append(s).appendTo(e)},_setText:function(t,e){e?t.text(e):t.html("&#160;")},_move:function(t,e){var i,n,s=".ui-menu-item";this.isOpen?i=this.menuItems.eq(this.focusIndex).parent("li"):(i=this.menuItems.eq(this.element[0].selectedIndex).parent("li"),s+=":not(.ui-state-disabled)"),(n="first"===t||"last"===t?i["first"===t?"prevAll":"nextAll"](s).eq(-1):i[t+"All"](s).eq(0)).length&&this.menuInstance.focus(e,n)},_getSelectedItem:function(){return this.menuItems.eq(this.element[0].selectedIndex).parent("li")},_toggle:function(t){this[this.isOpen?"close":"open"](t)},_setSelection:function(){var t;this.range&&(window.getSelection?((t=window.getSelection()).removeAllRanges(),t.addRange(this.range)):this.range.select(),this.button.focus())},_documentClick:{mousedown:function(e){this.isOpen&&(t(e.target).closest(".ui-selectmenu-menu, #"+t.ui.escapeSelector(this.ids.button)).length||this.close(e))}},_buttonEvents:{mousedown:function(){var t;window.getSelection?(t=window.getSelection()).rangeCount&&(this.range=t.getRangeAt(0)):this.range=document.selection.createRange()},click:function(t){this._setSelection(),this._toggle(t)},keydown:function(e){var i=!0;switch(e.keyCode){case t.ui.keyCode.TAB:case t.ui.keyCode.ESCAPE:this.close(e),i=!1;break;case t.ui.keyCode.ENTER:this.isOpen&&this._selectFocusedItem(e);break;case t.ui.keyCode.UP:e.altKey?this._toggle(e):this._move("prev",e);break;case t.ui.keyCode.DOWN:e.altKey?this._toggle(e):this._move("next",e);break;case t.ui.keyCode.SPACE:this.isOpen?this._selectFocusedItem(e):this._toggle(e);break;case t.ui.keyCode.LEFT:this._move("prev",e);break;case t.ui.keyCode.RIGHT:this._move("next",e);break;case t.ui.keyCode.HOME:case t.ui.keyCode.PAGE_UP:this._move("first",e);break;case t.ui.keyCode.END:case t.ui.keyCode.PAGE_DOWN:this._move("last",e);break;default:this.menu.trigger(e),i=!1}i&&e.preventDefault()}},_selectFocusedItem:function(t){var e=this.menuItems.eq(this.focusIndex).parent("li");e.hasClass("ui-state-disabled")||this._select(e.data("ui-selectmenu-item"),t)},_select:function(t,e){var i=this.element[0].selectedIndex;this.element[0].selectedIndex=t.index,this.buttonItem.replaceWith(this.buttonItem=this._renderButtonItem(t)),this._setAria(t),this._trigger("select",e,{item:t}),t.index!==i&&this._trigger("change",e,{item:t}),this.close(e)},_setAria:function(t){var e=this.menuItems.eq(t.index).attr("id");this.button.attr({"aria-labelledby":e,"aria-activedescendant":e}),this.menu.attr("aria-activedescendant",e)},_setOption:function(t,e){if("icons"===t){var i=this.button.find("span.ui-icon");this._removeClass(i,null,this.options.icons.button)._addClass(i,null,e.button)}this._super(t,e),"appendTo"===t&&this.menuWrap.appendTo(this._appendTo()),"width"===t&&this._resizeButton()},_setOptionDisabled:function(t){this._super(t),this.menuInstance.option("disabled",t),this.button.attr("aria-disabled",t),this._toggleClass(this.button,null,"ui-state-disabled",t),this.element.prop("disabled",t),t?(this.button.attr("tabindex",-1),this.close()):this.button.attr("tabindex",0)},_appendTo:function(){var e=this.options.appendTo;return e&&(e=e.jquery||e.nodeType?t(e):this.document.find(e).eq(0)),e&&e[0]||(e=this.element.closest(".ui-front, dialog")),e.length||(e=this.document[0].body),e},_toggleAttr:function(){this.button.attr("aria-expanded",this.isOpen),this._removeClass(this.button,"ui-selectmenu-button-"+(this.isOpen?"closed":"open"))._addClass(this.button,"ui-selectmenu-button-"+(this.isOpen?"open":"closed"))._toggleClass(this.menuWrap,"ui-selectmenu-open",null,this.isOpen),this.menu.attr("aria-hidden",!this.isOpen)},_resizeButton:function(){var t=this.options.width;!1!==t?(null===t&&(t=this.element.show().outerWidth(),this.element.hide()),this.button.outerWidth(t)):this.button.css("width","")},_resizeMenu:function(){this.menu.outerWidth(Math.max(this.button.outerWidth(),this.menu.width("").outerWidth()+1))},_getCreateOptions:function(){var t=this._super();return t.disabled=this.element.prop("disabled"),t},_parseOptions:function(e){var i=this,n=[];e.each((function(e,s){n.push(i._parseOption(t(s),e))})),this.items=n},_parseOption:function(t,e){var i=t.parent("optgroup");return{element:t,index:e,value:t.val(),label:t.text(),optgroup:i.attr("label")||"",disabled:i.prop("disabled")||t.prop("disabled")}},_destroy:function(){this._unbindFormResetHandler(),this.menuWrap.remove(),this.button.remove(),this.element.show(),this.element.removeUniqueId(),this.labels.attr("for",this.ids.element)}}]),t.widget("ui.slider",t.ui.mouse,{version:"1.12.1",widgetEventPrefix:"slide",options:{animate:!1,classes:{"ui-slider":"ui-corner-all","ui-slider-handle":"ui-corner-all","ui-slider-range":"ui-corner-all ui-widget-header"},distance:0,max:100,min:0,orientation:"horizontal",range:!1,step:1,value:0,values:null,change:null,slide:null,start:null,stop:null},numPages:5,_create:function(){this._keySliding=!1,this._mouseSliding=!1,this._animateOff=!0,this._handleIndex=null,this._detectOrientation(),this._mouseInit(),this._calculateNewMax(),this._addClass("ui-slider ui-slider-"+this.orientation,"ui-widget ui-widget-content"),this._refresh(),this._animateOff=!1},_refresh:function(){this._createRange(),this._createHandles(),this._setupEvents(),this._refreshValue()},_createHandles:function(){var e,i,n=this.options,s=this.element.find(".ui-slider-handle"),o=[];for(i=n.values&&n.values.length||1,s.length>i&&(s.slice(i).remove(),s=s.slice(0,i)),e=s.length;e<i;e++)o.push("<span tabindex='0'></span>");this.handles=s.add(t(o.join("")).appendTo(this.element)),this._addClass(this.handles,"ui-slider-handle","ui-state-default"),this.handle=this.handles.eq(0),this.handles.each((function(e){t(this).data("ui-slider-handle-index",e).attr("tabIndex",0)}))},_createRange:function(){var e=this.options;e.range?(!0===e.range&&(e.values?e.values.length&&2!==e.values.length?e.values=[e.values[0],e.values[0]]:t.isArray(e.values)&&(e.values=e.values.slice(0)):e.values=[this._valueMin(),this._valueMin()]),this.range&&this.range.length?(this._removeClass(this.range,"ui-slider-range-min ui-slider-range-max"),this.range.css({left:"",bottom:""})):(this.range=t("<div>").appendTo(this.element),this._addClass(this.range,"ui-slider-range")),"min"!==e.range&&"max"!==e.range||this._addClass(this.range,"ui-slider-range-"+e.range)):(this.range&&this.range.remove(),this.range=null)},_setupEvents:function(){this._off(this.handles),this._on(this.handles,this._handleEvents),this._hoverable(this.handles),this._focusable(this.handles)},_destroy:function(){this.handles.remove(),this.range&&this.range.remove(),this._mouseDestroy()},_mouseCapture:function(e){var i,n,s,o,r,a,l,c=this,h=this.options;return!h.disabled&&(this.elementSize={width:this.element.outerWidth(),height:this.element.outerHeight()},this.elementOffset=this.element.offset(),i={x:e.pageX,y:e.pageY},n=this._normValueFromMouse(i),s=this._valueMax()-this._valueMin()+1,this.handles.each((function(e){var i=Math.abs(n-c.values(e));(s>i||s===i&&(e===c._lastChangedValue||c.values(e)===h.min))&&(s=i,o=t(this),r=e)})),!1!==this._start(e,r)&&(this._mouseSliding=!0,this._handleIndex=r,this._addClass(o,null,"ui-state-active"),o.trigger("focus"),a=o.offset(),l=!t(e.target).parents().addBack().is(".ui-slider-handle"),this._clickOffset=l?{left:0,top:0}:{left:e.pageX-a.left-o.width()/2,top:e.pageY-a.top-o.height()/2-(parseInt(o.css("borderTopWidth"),10)||0)-(parseInt(o.css("borderBottomWidth"),10)||0)+(parseInt(o.css("marginTop"),10)||0)},this.handles.hasClass("ui-state-hover")||this._slide(e,r,n),this._animateOff=!0,!0))},_mouseStart:function(){return!0},_mouseDrag:function(t){var e={x:t.pageX,y:t.pageY},i=this._normValueFromMouse(e);return this._slide(t,this._handleIndex,i),!1},_mouseStop:function(t){return this._removeClass(this.handles,null,"ui-state-active"),this._mouseSliding=!1,this._stop(t,this._handleIndex),this._change(t,this._handleIndex),this._handleIndex=null,this._clickOffset=null,this._animateOff=!1,!1},_detectOrientation:function(){this.orientation="vertical"===this.options.orientation?"vertical":"horizontal"},_normValueFromMouse:function(t){var e,i,n,s,o;return"horizontal"===this.orientation?(e=this.elementSize.width,i=t.x-this.elementOffset.left-(this._clickOffset?this._clickOffset.left:0)):(e=this.elementSize.height,i=t.y-this.elementOffset.top-(this._clickOffset?this._clickOffset.top:0)),(n=i/e)>1&&(n=1),n<0&&(n=0),"vertical"===this.orientation&&(n=1-n),s=this._valueMax()-this._valueMin(),o=this._valueMin()+n*s,this._trimAlignValue(o)},_uiHash:function(t,e,i){var n={handle:this.handles[t],handleIndex:t,value:void 0!==e?e:this.value()};return this._hasMultipleValues()&&(n.value=void 0!==e?e:this.values(t),n.values=i||this.values()),n},_hasMultipleValues:function(){return this.options.values&&this.options.values.length},_start:function(t,e){return this._trigger("start",t,this._uiHash(e))},_slide:function(t,e,i){var n,s=this.value(),o=this.values();this._hasMultipleValues()&&(n=this.values(e?0:1),s=this.values(e),2===this.options.values.length&&!0===this.options.range&&(i=0===e?Math.min(n,i):Math.max(n,i)),o[e]=i),i!==s&&!1!==this._trigger("slide",t,this._uiHash(e,i,o))&&(this._hasMultipleValues()?this.values(e,i):this.value(i))},_stop:function(t,e){this._trigger("stop",t,this._uiHash(e))},_change:function(t,e){this._keySliding||this._mouseSliding||(this._lastChangedValue=e,this._trigger("change",t,this._uiHash(e)))},value:function(t){return arguments.length?(this.options.value=this._trimAlignValue(t),this._refreshValue(),void this._change(null,0)):this._value()},values:function(e,i){var n,s,o;if(arguments.length>1)return this.options.values[e]=this._trimAlignValue(i),this._refreshValue(),void this._change(null,e);if(!arguments.length)return this._values();if(!t.isArray(arguments[0]))return this._hasMultipleValues()?this._values(e):this.value();for(n=this.options.values,s=arguments[0],o=0;o<n.length;o+=1)n[o]=this._trimAlignValue(s[o]),this._change(null,o);this._refreshValue()},_setOption:function(e,i){var n,s=0;switch("range"===e&&!0===this.options.range&&("min"===i?(this.options.value=this._values(0),this.options.values=null):"max"===i&&(this.options.value=this._values(this.options.values.length-1),this.options.values=null)),t.isArray(this.options.values)&&(s=this.options.values.length),this._super(e,i),e){case"orientation":this._detectOrientation(),this._removeClass("ui-slider-horizontal ui-slider-vertical")._addClass("ui-slider-"+this.orientation),this._refreshValue(),this.options.range&&this._refreshRange(i),this.handles.css("horizontal"===i?"bottom":"left","");break;case"value":this._animateOff=!0,this._refreshValue(),this._change(null,0),this._animateOff=!1;break;case"values":for(this._animateOff=!0,this._refreshValue(),n=s-1;n>=0;n--)this._change(null,n);this._animateOff=!1;break;case"step":case"min":case"max":this._animateOff=!0,this._calculateNewMax(),this._refreshValue(),this._animateOff=!1;break;case"range":this._animateOff=!0,this._refresh(),this._animateOff=!1}},_setOptionDisabled:function(t){this._super(t),this._toggleClass(null,"ui-state-disabled",!!t)},_value:function(){var t=this.options.value;return this._trimAlignValue(t)},_values:function(t){var e,i,n;if(arguments.length)return e=this.options.values[t],this._trimAlignValue(e);if(this._hasMultipleValues()){for(i=this.options.values.slice(),n=0;n<i.length;n+=1)i[n]=this._trimAlignValue(i[n]);return i}return[]},_trimAlignValue:function(t){if(t<=this._valueMin())return this._valueMin();if(t>=this._valueMax())return this._valueMax();var e=this.options.step>0?this.options.step:1,i=(t-this._valueMin())%e,n=t-i;return 2*Math.abs(i)>=e&&(n+=i>0?e:-e),parseFloat(n.toFixed(5))},_calculateNewMax:function(){var t=this.options.max,e=this._valueMin(),i=this.options.step;(t=Math.round((t-e)/i)*i+e)>this.options.max&&(t-=i),this.max=parseFloat(t.toFixed(this._precision()))},_precision:function(){var t=this._precisionOf(this.options.step);return null!==this.options.min&&(t=Math.max(t,this._precisionOf(this.options.min))),t},_precisionOf:function(t){var e=t.toString(),i=e.indexOf(".");return-1===i?0:e.length-i-1},_valueMin:function(){return this.options.min},_valueMax:function(){return this.max},_refreshRange:function(t){"vertical"===t&&this.range.css({width:"",left:""}),"horizontal"===t&&this.range.css({height:"",bottom:""})},_refreshValue:function(){var e,i,n,s,o,r=this.options.range,a=this.options,l=this,c=!this._animateOff&&a.animate,h={};this._hasMultipleValues()?this.handles.each((function(n){i=(l.values(n)-l._valueMin())/(l._valueMax()-l._valueMin())*100,h["horizontal"===l.orientation?"left":"bottom"]=i+"%",t(this).stop(1,1)[c?"animate":"css"](h,a.animate),!0===l.options.range&&("horizontal"===l.orientation?(0===n&&l.range.stop(1,1)[c?"animate":"css"]({left:i+"%"},a.animate),1===n&&l.range[c?"animate":"css"]({width:i-e+"%"},{queue:!1,duration:a.animate})):(0===n&&l.range.stop(1,1)[c?"animate":"css"]({bottom:i+"%"},a.animate),1===n&&l.range[c?"animate":"css"]({height:i-e+"%"},{queue:!1,duration:a.animate}))),e=i})):(n=this.value(),s=this._valueMin(),o=this._valueMax(),i=o!==s?(n-s)/(o-s)*100:0,h["horizontal"===this.orientation?"left":"bottom"]=i+"%",this.handle.stop(1,1)[c?"animate":"css"](h,a.animate),"min"===r&&"horizontal"===this.orientation&&this.range.stop(1,1)[c?"animate":"css"]({width:i+"%"},a.animate),"max"===r&&"horizontal"===this.orientation&&this.range.stop(1,1)[c?"animate":"css"]({width:100-i+"%"},a.animate),"min"===r&&"vertical"===this.orientation&&this.range.stop(1,1)[c?"animate":"css"]({height:i+"%"},a.animate),"max"===r&&"vertical"===this.orientation&&this.range.stop(1,1)[c?"animate":"css"]({height:100-i+"%"},a.animate))},_handleEvents:{keydown:function(e){var i,n,s,o=t(e.target).data("ui-slider-handle-index");switch(e.keyCode){case t.ui.keyCode.HOME:case t.ui.keyCode.END:case t.ui.keyCode.PAGE_UP:case t.ui.keyCode.PAGE_DOWN:case t.ui.keyCode.UP:case t.ui.keyCode.RIGHT:case t.ui.keyCode.DOWN:case t.ui.keyCode.LEFT:if(e.preventDefault(),!this._keySliding&&(this._keySliding=!0,this._addClass(t(e.target),null,"ui-state-active"),!1===this._start(e,o)))return}switch(s=this.options.step,i=n=this._hasMultipleValues()?this.values(o):this.value(),e.keyCode){case t.ui.keyCode.HOME:n=this._valueMin();break;case t.ui.keyCode.END:n=this._valueMax();break;case t.ui.keyCode.PAGE_UP:n=this._trimAlignValue(i+(this._valueMax()-this._valueMin())/this.numPages);break;case t.ui.keyCode.PAGE_DOWN:n=this._trimAlignValue(i-(this._valueMax()-this._valueMin())/this.numPages);break;case t.ui.keyCode.UP:case t.ui.keyCode.RIGHT:if(i===this._valueMax())return;n=this._trimAlignValue(i+s);break;case t.ui.keyCode.DOWN:case t.ui.keyCode.LEFT:if(i===this._valueMin())return;n=this._trimAlignValue(i-s)}this._slide(e,o,n)},keyup:function(e){var i=t(e.target).data("ui-slider-handle-index");this._keySliding&&(this._keySliding=!1,this._stop(e,i),this._change(e,i),this._removeClass(t(e.target),null,"ui-state-active"))}}}),t.widget("ui.spinner",{version:"1.12.1",defaultElement:"<input>",widgetEventPrefix:"spin",options:{classes:{"ui-spinner":"ui-corner-all","ui-spinner-down":"ui-corner-br","ui-spinner-up":"ui-corner-tr"},culture:null,icons:{down:"ui-icon-triangle-1-s",up:"ui-icon-triangle-1-n"},incremental:!0,max:null,min:null,numberFormat:null,page:10,step:1,change:null,spin:null,start:null,stop:null},_create:function(){this._setOption("max",this.options.max),this._setOption("min",this.options.min),this._setOption("step",this.options.step),""!==this.value()&&this._value(this.element.val(),!0),this._draw(),this._on(this._events),this._refresh(),this._on(this.window,{beforeunload:function(){this.element.removeAttr("autocomplete")}})},_getCreateOptions:function(){var e=this._super(),i=this.element;return t.each(["min","max","step"],(function(t,n){var s=i.attr(n);null!=s&&s.length&&(e[n]=s)})),e},_events:{keydown:function(t){this._start(t)&&this._keydown(t)&&t.preventDefault()},keyup:"_stop",focus:function(){this.previous=this.element.val()},blur:function(t){this.cancelBlur?delete this.cancelBlur:(this._stop(),this._refresh(),this.previous!==this.element.val()&&this._trigger("change",t))},mousewheel:function(t,e){if(e){if(!this.spinning&&!this._start(t))return!1;this._spin((e>0?1:-1)*this.options.step,t),clearTimeout(this.mousewheelTimer),this.mousewheelTimer=this._delay((function(){this.spinning&&this._stop(t)}),100),t.preventDefault()}},"mousedown .ui-spinner-button":function(e){var i;function n(){this.element[0]===t.ui.safeActiveElement(this.document[0])||(this.element.trigger("focus"),this.previous=i,this._delay((function(){this.previous=i})))}i=this.element[0]===t.ui.safeActiveElement(this.document[0])?this.previous:this.element.val(),e.preventDefault(),n.call(this),this.cancelBlur=!0,this._delay((function(){delete this.cancelBlur,n.call(this)})),!1!==this._start(e)&&this._repeat(null,t(e.currentTarget).hasClass("ui-spinner-up")?1:-1,e)},"mouseup .ui-spinner-button":"_stop","mouseenter .ui-spinner-button":function(e){if(t(e.currentTarget).hasClass("ui-state-active"))return!1!==this._start(e)&&void this._repeat(null,t(e.currentTarget).hasClass("ui-spinner-up")?1:-1,e)},"mouseleave .ui-spinner-button":"_stop"},_enhance:function(){this.uiSpinner=this.element.attr("autocomplete","off").wrap("<span>").parent().append("<a></a><a></a>")},_draw:function(){this._enhance(),this._addClass(this.uiSpinner,"ui-spinner","ui-widget ui-widget-content"),this._addClass("ui-spinner-input"),this.element.attr("role","spinbutton"),this.buttons=this.uiSpinner.children("a").attr("tabIndex",-1).attr("aria-hidden",!0).button({classes:{"ui-button":""}}),this._removeClass(this.buttons,"ui-corner-all"),this._addClass(this.buttons.first(),"ui-spinner-button ui-spinner-up"),this._addClass(this.buttons.last(),"ui-spinner-button ui-spinner-down"),this.buttons.first().button({icon:this.options.icons.up,showLabel:!1}),this.buttons.last().button({icon:this.options.icons.down,showLabel:!1}),this.buttons.height()>Math.ceil(.5*this.uiSpinner.height())&&this.uiSpinner.height()>0&&this.uiSpinner.height(this.uiSpinner.height())},_keydown:function(e){var i=this.options,n=t.ui.keyCode;switch(e.keyCode){case n.UP:return this._repeat(null,1,e),!0;case n.DOWN:return this._repeat(null,-1,e),!0;case n.PAGE_UP:return this._repeat(null,i.page,e),!0;case n.PAGE_DOWN:return this._repeat(null,-i.page,e),!0}return!1},_start:function(t){return!(!this.spinning&&!1===this._trigger("start",t)||(this.counter||(this.counter=1),this.spinning=!0,0))},_repeat:function(t,e,i){t=t||500,clearTimeout(this.timer),this.timer=this._delay((function(){this._repeat(40,e,i)}),t),this._spin(e*this.options.step,i)},_spin:function(t,e){var i=this.value()||0;this.counter||(this.counter=1),i=this._adjustValue(i+t*this._increment(this.counter)),this.spinning&&!1===this._trigger("spin",e,{value:i})||(this._value(i),this.counter++)},_increment:function(e){var i=this.options.incremental;return i?t.isFunction(i)?i(e):Math.floor(e*e*e/5e4-e*e/500+17*e/200+1):1},_precision:function(){var t=this._precisionOf(this.options.step);return null!==this.options.min&&(t=Math.max(t,this._precisionOf(this.options.min))),t},_precisionOf:function(t){var e=t.toString(),i=e.indexOf(".");return-1===i?0:e.length-i-1},_adjustValue:function(t){var e,i,n=this.options;return i=t-(e=null!==n.min?n.min:0),t=e+(i=Math.round(i/n.step)*n.step),t=parseFloat(t.toFixed(this._precision())),null!==n.max&&t>n.max?n.max:null!==n.min&&t<n.min?n.min:t},_stop:function(t){this.spinning&&(clearTimeout(this.timer),clearTimeout(this.mousewheelTimer),this.counter=0,this.spinning=!1,this._trigger("stop",t))},_setOption:function(t,e){var i,n,s;if("culture"===t||"numberFormat"===t)return i=this._parse(this.element.val()),this.options[t]=e,void this.element.val(this._format(i));"max"!==t&&"min"!==t&&"step"!==t||"string"==typeof e&&(e=this._parse(e)),"icons"===t&&(n=this.buttons.first().find(".ui-icon"),this._removeClass(n,null,this.options.icons.up),this._addClass(n,null,e.up),s=this.buttons.last().find(".ui-icon"),this._removeClass(s,null,this.options.icons.down),this._addClass(s,null,e.down)),this._super(t,e)},_setOptionDisabled:function(t){this._super(t),this._toggleClass(this.uiSpinner,null,"ui-state-disabled",!!t),this.element.prop("disabled",!!t),this.buttons.button(t?"disable":"enable")},_setOptions:m((function(t){this._super(t)})),_parse:function(t){return"string"==typeof t&&""!==t&&(t=window.Globalize&&this.options.numberFormat?Globalize.parseFloat(t,10,this.options.culture):+t),""===t||isNaN(t)?null:t},_format:function(t){return""===t?"":window.Globalize&&this.options.numberFormat?Globalize.format(t,this.options.numberFormat,this.options.culture):t},_refresh:function(){this.element.attr({"aria-valuemin":this.options.min,"aria-valuemax":this.options.max,"aria-valuenow":this._parse(this.element.val())})},isValid:function(){var t=this.value();return null!==t&&t===this._adjustValue(t)},_value:function(t,e){var i;""!==t&&null!==(i=this._parse(t))&&(e||(i=this._adjustValue(i)),t=this._format(i)),this.element.val(t),this._refresh()},_destroy:function(){this.element.prop("disabled",!1).removeAttr("autocomplete role aria-valuemin aria-valuemax aria-valuenow"),this.uiSpinner.replaceWith(this.element)},stepUp:m((function(t){this._stepUp(t)})),_stepUp:function(t){this._start()&&(this._spin((t||1)*this.options.step),this._stop())},stepDown:m((function(t){this._stepDown(t)})),_stepDown:function(t){this._start()&&(this._spin((t||1)*-this.options.step),this._stop())},pageUp:m((function(t){this._stepUp((t||1)*this.options.page)})),pageDown:m((function(t){this._stepDown((t||1)*this.options.page)})),value:function(t){if(!arguments.length)return this._parse(this.element.val());m(this._value).call(this,t)},widget:function(){return this.uiSpinner}}),!1!==t.uiBackCompat&&t.widget("ui.spinner",t.ui.spinner,{_enhance:function(){this.uiSpinner=this.element.attr("autocomplete","off").wrap(this._uiSpinnerHtml()).parent().append(this._buttonHtml())},_uiSpinnerHtml:function(){return"<span>"},_buttonHtml:function(){return"<a></a><a></a>"}}),t.ui.spinner,t.widget("ui.tabs",{version:"1.12.1",delay:300,options:{active:null,classes:{"ui-tabs":"ui-corner-all","ui-tabs-nav":"ui-corner-all","ui-tabs-panel":"ui-corner-bottom","ui-tabs-tab":"ui-corner-top"},collapsible:!1,event:"click",heightStyle:"content",hide:null,show:null,activate:null,beforeActivate:null,beforeLoad:null,load:null},_isLocal:(h=/#.*$/,function(t){var e,i;e=t.href.replace(h,""),i=location.href.replace(h,"");try{e=decodeURIComponent(e)}catch(t){}try{i=decodeURIComponent(i)}catch(t){}return t.hash.length>1&&e===i}),_create:function(){var e=this,i=this.options;this.running=!1,this._addClass("ui-tabs","ui-widget ui-widget-content"),this._toggleClass("ui-tabs-collapsible",null,i.collapsible),this._processTabs(),i.active=this._initialActive(),t.isArray(i.disabled)&&(i.disabled=t.unique(i.disabled.concat(t.map(this.tabs.filter(".ui-state-disabled"),(function(t){return e.tabs.index(t)})))).sort()),!1!==this.options.active&&this.anchors.length?this.active=this._findActive(i.active):this.active=t(),this._refresh(),this.active.length&&this.load(i.active)},_initialActive:function(){var e=this.options.active,i=this.options.collapsible,n=location.hash.substring(1);return null===e&&(n&&this.tabs.each((function(i,s){if(t(s).attr("aria-controls")===n)return e=i,!1})),null===e&&(e=this.tabs.index(this.tabs.filter(".ui-tabs-active"))),null!==e&&-1!==e||(e=!!this.tabs.length&&0)),!1!==e&&-1===(e=this.tabs.index(this.tabs.eq(e)))&&(e=!i&&0),!i&&!1===e&&this.anchors.length&&(e=0),e},_getCreateEventData:function(){return{tab:this.active,panel:this.active.length?this._getPanelForTab(this.active):t()}},_tabKeydown:function(e){var i=t(t.ui.safeActiveElement(this.document[0])).closest("li"),n=this.tabs.index(i),s=!0;if(!this._handlePageNav(e)){switch(e.keyCode){case t.ui.keyCode.RIGHT:case t.ui.keyCode.DOWN:n++;break;case t.ui.keyCode.UP:case t.ui.keyCode.LEFT:s=!1,n--;break;case t.ui.keyCode.END:n=this.anchors.length-1;break;case t.ui.keyCode.HOME:n=0;break;case t.ui.keyCode.SPACE:return e.preventDefault(),clearTimeout(this.activating),void this._activate(n);case t.ui.keyCode.ENTER:return e.preventDefault(),clearTimeout(this.activating),void this._activate(n!==this.options.active&&n);default:return}e.preventDefault(),clearTimeout(this.activating),n=this._focusNextTab(n,s),e.ctrlKey||e.metaKey||(i.attr("aria-selected","false"),this.tabs.eq(n).attr("aria-selected","true"),this.activating=this._delay((function(){this.option("active",n)}),this.delay))}},_panelKeydown:function(e){this._handlePageNav(e)||e.ctrlKey&&e.keyCode===t.ui.keyCode.UP&&(e.preventDefault(),this.active.trigger("focus"))},_handlePageNav:function(e){return e.altKey&&e.keyCode===t.ui.keyCode.PAGE_UP?(this._activate(this._focusNextTab(this.options.active-1,!1)),!0):e.altKey&&e.keyCode===t.ui.keyCode.PAGE_DOWN?(this._activate(this._focusNextTab(this.options.active+1,!0)),!0):void 0},_findNextTab:function(e,i){var n=this.tabs.length-1;for(;-1!==t.inArray((e>n&&(e=0),e<0&&(e=n),e),this.options.disabled);)e=i?e+1:e-1;return e},_focusNextTab:function(t,e){return t=this._findNextTab(t,e),this.tabs.eq(t).trigger("focus"),t},_setOption:function(t,e){"active"!==t?(this._super(t,e),"collapsible"===t&&(this._toggleClass("ui-tabs-collapsible",null,e),e||!1!==this.options.active||this._activate(0)),"event"===t&&this._setupEvents(e),"heightStyle"===t&&this._setupHeightStyle(e)):this._activate(e)},_sanitizeSelector:function(t){return t?t.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g,"\\$&"):""},refresh:function(){var e=this.options,i=this.tablist.children(":has(a[href])");e.disabled=t.map(i.filter(".ui-state-disabled"),(function(t){return i.index(t)})),this._processTabs(),!1!==e.active&&this.anchors.length?this.active.length&&!t.contains(this.tablist[0],this.active[0])?this.tabs.length===e.disabled.length?(e.active=!1,this.active=t()):this._activate(this._findNextTab(Math.max(0,e.active-1),!1)):e.active=this.tabs.index(this.active):(e.active=!1,this.active=t()),this._refresh()},_refresh:function(){this._setOptionDisabled(this.options.disabled),this._setupEvents(this.options.event),this._setupHeightStyle(this.options.heightStyle),this.tabs.not(this.active).attr({"aria-selected":"false","aria-expanded":"false",tabIndex:-1}),this.panels.not(this._getPanelForTab(this.active)).hide().attr({"aria-hidden":"true"}),this.active.length?(this.active.attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0}),this._addClass(this.active,"ui-tabs-active","ui-state-active"),this._getPanelForTab(this.active).show().attr({"aria-hidden":"false"})):this.tabs.eq(0).attr("tabIndex",0)},_processTabs:function(){var e=this,i=this.tabs,n=this.anchors,s=this.panels;this.tablist=this._getList().attr("role","tablist"),this._addClass(this.tablist,"ui-tabs-nav","ui-helper-reset ui-helper-clearfix ui-widget-header"),this.tablist.on("mousedown"+this.eventNamespace,"> li",(function(e){t(this).is(".ui-state-disabled")&&e.preventDefault()})).on("focus"+this.eventNamespace,".ui-tabs-anchor",(function(){t(this).closest("li").is(".ui-state-disabled")&&this.blur()})),this.tabs=this.tablist.find("> li:has(a[href])").attr({role:"tab",tabIndex:-1}),this._addClass(this.tabs,"ui-tabs-tab","ui-state-default"),this.anchors=this.tabs.map((function(){return t("a",this)[0]})).attr({role:"presentation",tabIndex:-1}),this._addClass(this.anchors,"ui-tabs-anchor"),this.panels=t(),this.anchors.each((function(i,n){var s,o,r,a=t(n).uniqueId().attr("id"),l=t(n).closest("li"),c=l.attr("aria-controls");e._isLocal(n)?(r=(s=n.hash).substring(1),o=e.element.find(e._sanitizeSelector(s))):(s="#"+(r=l.attr("aria-controls")||t({}).uniqueId()[0].id),(o=e.element.find(s)).length||(o=e._createPanel(r)).insertAfter(e.panels[i-1]||e.tablist),o.attr("aria-live","polite")),o.length&&(e.panels=e.panels.add(o)),c&&l.data("ui-tabs-aria-controls",c),l.attr({"aria-controls":r,"aria-labelledby":a}),o.attr("aria-labelledby",a)})),this.panels.attr("role","tabpanel"),this._addClass(this.panels,"ui-tabs-panel","ui-widget-content"),i&&(this._off(i.not(this.tabs)),this._off(n.not(this.anchors)),this._off(s.not(this.panels)))},_getList:function(){return this.tablist||this.element.find("ol, ul").eq(0)},_createPanel:function(e){return t("<div>").attr("id",e).data("ui-tabs-destroy",!0)},_setOptionDisabled:function(e){var i,n,s;for(t.isArray(e)&&(e.length?e.length===this.anchors.length&&(e=!0):e=!1),s=0;n=this.tabs[s];s++)i=t(n),!0===e||-1!==t.inArray(s,e)?(i.attr("aria-disabled","true"),this._addClass(i,null,"ui-state-disabled")):(i.removeAttr("aria-disabled"),this._removeClass(i,null,"ui-state-disabled"));this.options.disabled=e,this._toggleClass(this.widget(),this.widgetFullName+"-disabled",null,!0===e)},_setupEvents:function(e){var i={};e&&t.each(e.split(" "),(function(t,e){i[e]="_eventHandler"})),this._off(this.anchors.add(this.tabs).add(this.panels)),this._on(!0,this.anchors,{click:function(t){t.preventDefault()}}),this._on(this.anchors,i),this._on(this.tabs,{keydown:"_tabKeydown"}),this._on(this.panels,{keydown:"_panelKeydown"}),this._focusable(this.tabs),this._hoverable(this.tabs)},_setupHeightStyle:function(e){var i,n=this.element.parent();"fill"===e?(i=n.height(),i-=this.element.outerHeight()-this.element.height(),this.element.siblings(":visible").each((function(){var e=t(this),n=e.css("position");"absolute"!==n&&"fixed"!==n&&(i-=e.outerHeight(!0))})),this.element.children().not(this.panels).each((function(){i-=t(this).outerHeight(!0)})),this.panels.each((function(){t(this).height(Math.max(0,i-t(this).innerHeight()+t(this).height()))})).css("overflow","auto")):"auto"===e&&(i=0,this.panels.each((function(){i=Math.max(i,t(this).height("").height())})).height(i))},_eventHandler:function(e){var i=this.options,n=this.active,s=t(e.currentTarget).closest("li"),o=s[0]===n[0],r=o&&i.collapsible,a=r?t():this._getPanelForTab(s),l=n.length?this._getPanelForTab(n):t(),c={oldTab:n,oldPanel:l,newTab:r?t():s,newPanel:a};e.preventDefault(),s.hasClass("ui-state-disabled")||s.hasClass("ui-tabs-loading")||this.running||o&&!i.collapsible||!1===this._trigger("beforeActivate",e,c)||(i.active=!r&&this.tabs.index(s),this.active=o?t():s,this.xhr&&this.xhr.abort(),l.length||a.length||t.error("jQuery UI Tabs: Mismatching fragment identifier."),a.length&&this.load(this.tabs.index(s),e),this._toggle(e,c))},_toggle:function(e,i){var n=this,s=i.newPanel,o=i.oldPanel;function r(){n.running=!1,n._trigger("activate",e,i)}function a(){n._addClass(i.newTab.closest("li"),"ui-tabs-active","ui-state-active"),s.length&&n.options.show?n._show(s,n.options.show,r):(s.show(),r())}this.running=!0,o.length&&this.options.hide?this._hide(o,this.options.hide,(function(){n._removeClass(i.oldTab.closest("li"),"ui-tabs-active","ui-state-active"),a()})):(this._removeClass(i.oldTab.closest("li"),"ui-tabs-active","ui-state-active"),o.hide(),a()),o.attr("aria-hidden","true"),i.oldTab.attr({"aria-selected":"false","aria-expanded":"false"}),s.length&&o.length?i.oldTab.attr("tabIndex",-1):s.length&&this.tabs.filter((function(){return 0===t(this).attr("tabIndex")})).attr("tabIndex",-1),s.attr("aria-hidden","false"),i.newTab.attr({"aria-selected":"true","aria-expanded":"true",tabIndex:0})},_activate:function(e){var i,n=this._findActive(e);n[0]!==this.active[0]&&(n.length||(n=this.active),i=n.find(".ui-tabs-anchor")[0],this._eventHandler({target:i,currentTarget:i,preventDefault:t.noop}))},_findActive:function(e){return!1===e?t():this.tabs.eq(e)},_getIndex:function(e){return"string"==typeof e&&(e=this.anchors.index(this.anchors.filter("[href$='"+t.ui.escapeSelector(e)+"']"))),e},_destroy:function(){this.xhr&&this.xhr.abort(),this.tablist.removeAttr("role").off(this.eventNamespace),this.anchors.removeAttr("role tabIndex").removeUniqueId(),this.tabs.add(this.panels).each((function(){t.data(this,"ui-tabs-destroy")?t(this).remove():t(this).removeAttr("role tabIndex aria-live aria-busy aria-selected aria-labelledby aria-hidden aria-expanded")})),this.tabs.each((function(){var e=t(this),i=e.data("ui-tabs-aria-controls");i?e.attr("aria-controls",i).removeData("ui-tabs-aria-controls"):e.removeAttr("aria-controls")})),this.panels.show(),"content"!==this.options.heightStyle&&this.panels.css("height","")},enable:function(e){var i=this.options.disabled;!1!==i&&(void 0===e?i=!1:(e=this._getIndex(e),i=t.isArray(i)?t.map(i,(function(t){return t!==e?t:null})):t.map(this.tabs,(function(t,i){return i!==e?i:null}))),this._setOptionDisabled(i))},disable:function(e){var i=this.options.disabled;if(!0!==i){if(void 0===e)i=!0;else{if(e=this._getIndex(e),-1!==t.inArray(e,i))return;i=t.isArray(i)?t.merge([e],i).sort():[e]}this._setOptionDisabled(i)}},load:function(e,i){e=this._getIndex(e);var n=this,s=this.tabs.eq(e),o=s.find(".ui-tabs-anchor"),r=this._getPanelForTab(s),a={tab:s,panel:r},l=function(t,e){"abort"===e&&n.panels.stop(!1,!0),n._removeClass(s,"ui-tabs-loading"),r.removeAttr("aria-busy"),t===n.xhr&&delete n.xhr};this._isLocal(o[0])||(this.xhr=t.ajax(this._ajaxSettings(o,i,a)),this.xhr&&"canceled"!==this.xhr.statusText&&(this._addClass(s,"ui-tabs-loading"),r.attr("aria-busy","true"),this.xhr.done((function(t,e,s){setTimeout((function(){r.html(t),n._trigger("load",i,a),l(s,e)}),1)})).fail((function(t,e){setTimeout((function(){l(t,e)}),1)}))))},_ajaxSettings:function(e,i,n){var s=this;return{url:e.attr("href").replace(/#.*$/,""),beforeSend:function(e,o){return s._trigger("beforeLoad",i,t.extend({jqXHR:e,ajaxSettings:o},n))}}},_getPanelForTab:function(e){var i=t(e).attr("aria-controls");return this.element.find(this._sanitizeSelector("#"+i))}}),!1!==t.uiBackCompat&&t.widget("ui.tabs",t.ui.tabs,{_processTabs:function(){this._superApply(arguments),this._addClass(this.tabs,"ui-tab")}}),t.ui.tabs,t.widget("ui.tooltip",{version:"1.12.1",options:{classes:{"ui-tooltip":"ui-corner-all ui-widget-shadow"},content:function(){var e=t(this).attr("title")||"";return t("<a>").text(e).html()},hide:!0,items:"[title]:not([disabled])",position:{my:"left top+15",at:"left bottom",collision:"flipfit flip"},show:!0,track:!1,close:null,open:null},_addDescribedBy:function(e,i){var n=(e.attr("aria-describedby")||"").split(/\s+/);n.push(i),e.data("ui-tooltip-id",i).attr("aria-describedby",t.trim(n.join(" ")))},_removeDescribedBy:function(e){var i=e.data("ui-tooltip-id"),n=(e.attr("aria-describedby")||"").split(/\s+/),s=t.inArray(i,n);-1!==s&&n.splice(s,1),e.removeData("ui-tooltip-id"),(n=t.trim(n.join(" ")))?e.attr("aria-describedby",n):e.removeAttr("aria-describedby")},_create:function(){this._on({mouseover:"open",focusin:"open"}),this.tooltips={},this.parents={},this.liveRegion=t("<div>").attr({role:"log","aria-live":"assertive","aria-relevant":"additions"}).appendTo(this.document[0].body),this._addClass(this.liveRegion,null,"ui-helper-hidden-accessible"),this.disabledTitles=t([])},_setOption:function(e,i){var n=this;this._super(e,i),"content"===e&&t.each(this.tooltips,(function(t,e){n._updateContent(e.element)}))},_setOptionDisabled:function(t){this[t?"_disable":"_enable"]()},_disable:function(){var e=this;t.each(this.tooltips,(function(i,n){var s=t.Event("blur");s.target=s.currentTarget=n.element[0],e.close(s,!0)})),this.disabledTitles=this.disabledTitles.add(this.element.find(this.options.items).addBack().filter((function(){var e=t(this);if(e.is("[title]"))return e.data("ui-tooltip-title",e.attr("title")).removeAttr("title")})))},_enable:function(){this.disabledTitles.each((function(){var e=t(this);e.data("ui-tooltip-title")&&e.attr("title",e.data("ui-tooltip-title"))})),this.disabledTitles=t([])},open:function(e){var i=this,n=t(e?e.target:this.element).closest(this.options.items);n.length&&!n.data("ui-tooltip-id")&&(n.attr("title")&&n.data("ui-tooltip-title",n.attr("title")),n.data("ui-tooltip-open",!0),e&&"mouseover"===e.type&&n.parents().each((function(){var e,n=t(this);n.data("ui-tooltip-open")&&((e=t.Event("blur")).target=e.currentTarget=this,i.close(e,!0)),n.attr("title")&&(n.uniqueId(),i.parents[this.id]={element:this,title:n.attr("title")},n.attr("title",""))})),this._registerCloseHandlers(e,n),this._updateContent(n,e))},_updateContent:function(t,e){var i,n=this.options.content,s=this,o=e?e.type:null;if("string"==typeof n||n.nodeType||n.jquery)return this._open(e,t,n);(i=n.call(t[0],(function(i){s._delay((function(){t.data("ui-tooltip-open")&&(e&&(e.type=o),this._open(e,t,i))}))})))&&this._open(e,t,i)},_open:function(e,i,n){var s,o,r,a,l=t.extend({},this.options.position);function c(t){l.of=t,o.is(":hidden")||o.position(l)}n&&((s=this._find(i))?s.tooltip.find(".ui-tooltip-content").html(n):(i.is("[title]")&&(e&&"mouseover"===e.type?i.attr("title",""):i.removeAttr("title")),s=this._tooltip(i),o=s.tooltip,this._addDescribedBy(i,o.attr("id")),o.find(".ui-tooltip-content").html(n),this.liveRegion.children().hide(),(a=t("<div>").html(o.find(".ui-tooltip-content").html())).removeAttr("name").find("[name]").removeAttr("name"),a.removeAttr("id").find("[id]").removeAttr("id"),a.appendTo(this.liveRegion),this.options.track&&e&&/^mouse/.test(e.type)?(this._on(this.document,{mousemove:c}),c(e)):o.position(t.extend({of:i},this.options.position)),o.hide(),this._show(o,this.options.show),this.options.track&&this.options.show&&this.options.show.delay&&(r=this.delayedShow=setInterval((function(){o.is(":visible")&&(c(l.of),clearInterval(r))}),t.fx.interval)),this._trigger("open",e,{tooltip:o})))},_registerCloseHandlers:function(e,i){var n={keyup:function(e){if(e.keyCode===t.ui.keyCode.ESCAPE){var n=t.Event(e);n.currentTarget=i[0],this.close(n,!0)}}};i[0]!==this.element[0]&&(n.remove=function(){this._removeTooltip(this._find(i).tooltip)}),e&&"mouseover"!==e.type||(n.mouseleave="close"),e&&"focusin"!==e.type||(n.focusout="close"),this._on(!0,i,n)},close:function(e){var i,n=this,s=t(e?e.currentTarget:this.element),o=this._find(s);o?(i=o.tooltip,o.closing||(clearInterval(this.delayedShow),s.data("ui-tooltip-title")&&!s.attr("title")&&s.attr("title",s.data("ui-tooltip-title")),this._removeDescribedBy(s),o.hiding=!0,i.stop(!0),this._hide(i,this.options.hide,(function(){n._removeTooltip(t(this))})),s.removeData("ui-tooltip-open"),this._off(s,"mouseleave focusout keyup"),s[0]!==this.element[0]&&this._off(s,"remove"),this._off(this.document,"mousemove"),e&&"mouseleave"===e.type&&t.each(this.parents,(function(e,i){t(i.element).attr("title",i.title),delete n.parents[e]})),o.closing=!0,this._trigger("close",e,{tooltip:i}),o.hiding||(o.closing=!1))):s.removeData("ui-tooltip-open")},_tooltip:function(e){var i=t("<div>").attr("role","tooltip"),n=t("<div>").appendTo(i),s=i.uniqueId().attr("id");return this._addClass(n,"ui-tooltip-content"),this._addClass(i,"ui-tooltip","ui-widget ui-widget-content"),i.appendTo(this._appendTo(e)),this.tooltips[s]={element:e,tooltip:i}},_find:function(t){var e=t.data("ui-tooltip-id");return e?this.tooltips[e]:null},_removeTooltip:function(t){t.remove(),delete this.tooltips[t.attr("id")]},_appendTo:function(t){var e=t.closest(".ui-front, dialog");return e.length||(e=this.document[0].body),e},_destroy:function(){var e=this;t.each(this.tooltips,(function(i,n){var s=t.Event("blur"),o=n.element;s.target=s.currentTarget=o[0],e.close(s,!0),t("#"+i).remove(),o.data("ui-tooltip-title")&&(o.attr("title")||o.attr("title",o.data("ui-tooltip-title")),o.removeData("ui-tooltip-title"))})),this.liveRegion.remove()}}),!1!==t.uiBackCompat&&t.widget("ui.tooltip",t.ui.tooltip,{options:{tooltipClass:null},_tooltip:function(){var t=this._superApply(arguments);return this.options.tooltipClass&&t.tooltip.addClass(this.options.tooltipClass),t}}),t.ui.tooltip;var v,_="ui-effects-",y="ui-effects-style",b="ui-effects-animated",w=t;t.effects={effect:{}},function(t,e){var i,n=/^([\-+])=\s*(\d+\.?\d*)/,s=[{re:/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(t){return[t[1],t[2],t[3],t[4]]}},{re:/rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(t){return[2.55*t[1],2.55*t[2],2.55*t[3],t[4]]}},{re:/#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,parse:function(t){return[parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16)]}},{re:/#([a-f0-9])([a-f0-9])([a-f0-9])/,parse:function(t){return[parseInt(t[1]+t[1],16),parseInt(t[2]+t[2],16),parseInt(t[3]+t[3],16)]}},{re:/hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,space:"hsla",parse:function(t){return[t[1],t[2]/100,t[3]/100,t[4]]}}],o=t.Color=function(e,i,n,s){return new t.Color.fn.parse(e,i,n,s)},r={rgba:{props:{red:{idx:0,type:"byte"},green:{idx:1,type:"byte"},blue:{idx:2,type:"byte"}}},hsla:{props:{hue:{idx:0,type:"degrees"},saturation:{idx:1,type:"percent"},lightness:{idx:2,type:"percent"}}}},a={byte:{floor:!0,max:255},percent:{max:1},degrees:{mod:360,floor:!0}},l=o.support={},c=t("<p>")[0],h=t.each;function u(t,e,i){var n=a[e.type]||{};return null==t?i||!e.def?null:e.def:(t=n.floor?~~t:parseFloat(t),isNaN(t)?e.def:n.mod?(t+n.mod)%n.mod:0>t?0:n.max<t?n.max:t)}function d(e){var n=o(),a=n._rgba=[];return e=e.toLowerCase(),h(s,(function(t,i){var s,o=i.re.exec(e),l=o&&i.parse(o),c=i.space||"rgba";if(l)return s=n[c](l),n[r[c].cache]=s[r[c].cache],a=n._rgba=s._rgba,!1})),a.length?("0,0,0,0"===a.join()&&t.extend(a,i.transparent),n):i[e]}function p(t,e,i){return 6*(i=(i+1)%1)<1?t+(e-t)*i*6:2*i<1?e:3*i<2?t+(e-t)*(2/3-i)*6:t}c.style.cssText="background-color:rgba(1,1,1,.5)",l.rgba=c.style.backgroundColor.indexOf("rgba")>-1,h(r,(function(t,e){e.cache="_"+t,e.props.alpha={idx:3,type:"percent",def:1}})),o.fn=t.extend(o.prototype,{parse:function(n,s,a,l){if(n===e)return this._rgba=[null,null,null,null],this;(n.jquery||n.nodeType)&&(n=t(n).css(s),s=e);var c=this,p=t.type(n),f=this._rgba=[];return s!==e&&(n=[n,s,a,l],p="array"),"string"===p?this.parse(d(n)||i._default):"array"===p?(h(r.rgba.props,(function(t,e){f[e.idx]=u(n[e.idx],e)})),this):"object"===p?(h(r,n instanceof o?function(t,e){n[e.cache]&&(c[e.cache]=n[e.cache].slice())}:function(e,i){var s=i.cache;h(i.props,(function(t,e){if(!c[s]&&i.to){if("alpha"===t||null==n[t])return;c[s]=i.to(c._rgba)}c[s][e.idx]=u(n[t],e,!0)})),c[s]&&t.inArray(null,c[s].slice(0,3))<0&&(c[s][3]=1,i.from&&(c._rgba=i.from(c[s])))}),this):void 0},is:function(t){var e=o(t),i=!0,n=this;return h(r,(function(t,s){var o,r=e[s.cache];return r&&(o=n[s.cache]||s.to&&s.to(n._rgba)||[],h(s.props,(function(t,e){if(null!=r[e.idx])return i=r[e.idx]===o[e.idx]}))),i})),i},_space:function(){var t=[],e=this;return h(r,(function(i,n){e[n.cache]&&t.push(i)})),t.pop()},transition:function(t,e){var i=o(t),n=i._space(),s=r[n],l=0===this.alpha()?o("transparent"):this,c=l[s.cache]||s.to(l._rgba),d=c.slice();return i=i[s.cache],h(s.props,(function(t,n){var s=n.idx,o=c[s],r=i[s],l=a[n.type]||{};null!==r&&(null===o?d[s]=r:(l.mod&&(r-o>l.mod/2?o+=l.mod:o-r>l.mod/2&&(o-=l.mod)),d[s]=u((r-o)*e+o,n)))})),this[n](d)},blend:function(e){if(1===this._rgba[3])return this;var i=this._rgba.slice(),n=i.pop(),s=o(e)._rgba;return o(t.map(i,(function(t,e){return(1-n)*s[e]+n*t})))},toRgbaString:function(){var e="rgba(",i=t.map(this._rgba,(function(t,e){return null==t?e>2?1:0:t}));return 1===i[3]&&(i.pop(),e="rgb("),e+i.join()+")"},toHslaString:function(){var e="hsla(",i=t.map(this.hsla(),(function(t,e){return null==t&&(t=e>2?1:0),e&&e<3&&(t=Math.round(100*t)+"%"),t}));return 1===i[3]&&(i.pop(),e="hsl("),e+i.join()+")"},toHexString:function(e){var i=this._rgba.slice(),n=i.pop();return e&&i.push(~~(255*n)),"#"+t.map(i,(function(t){return 1===(t=(t||0).toString(16)).length?"0"+t:t})).join("")},toString:function(){return 0===this._rgba[3]?"transparent":this.toRgbaString()}}),o.fn.parse.prototype=o.fn,r.hsla.to=function(t){if(null==t[0]||null==t[1]||null==t[2])return[null,null,null,t[3]];var e,i,n=t[0]/255,s=t[1]/255,o=t[2]/255,r=t[3],a=Math.max(n,s,o),l=Math.min(n,s,o),c=a-l,h=a+l,u=.5*h;return e=l===a?0:n===a?60*(s-o)/c+360:s===a?60*(o-n)/c+120:60*(n-s)/c+240,i=0===c?0:u<=.5?c/h:c/(2-h),[Math.round(e)%360,i,u,null==r?1:r]},r.hsla.from=function(t){if(null==t[0]||null==t[1]||null==t[2])return[null,null,null,t[3]];var e=t[0]/360,i=t[1],n=t[2],s=t[3],o=n<=.5?n*(1+i):n+i-n*i,r=2*n-o;return[Math.round(255*p(r,o,e+1/3)),Math.round(255*p(r,o,e)),Math.round(255*p(r,o,e-1/3)),s]},h(r,(function(i,s){var r=s.props,a=s.cache,l=s.to,c=s.from;o.fn[i]=function(i){if(l&&!this[a]&&(this[a]=l(this._rgba)),i===e)return this[a].slice();var n,s=t.type(i),d="array"===s||"object"===s?i:arguments,p=this[a].slice();return h(r,(function(t,e){var i=d["object"===s?t:e.idx];null==i&&(i=p[e.idx]),p[e.idx]=u(i,e)})),c?((n=o(c(p)))[a]=p,n):o(p)},h(r,(function(e,s){o.fn[e]||(o.fn[e]=function(o){var r,a=t.type(o),l="alpha"===e?this._hsla?"hsla":"rgba":i,c=this[l](),h=c[s.idx];return"undefined"===a?h:("function"===a&&(o=o.call(this,h),a=t.type(o)),null==o&&s.empty?this:("string"===a&&(r=n.exec(o))&&(o=h+parseFloat(r[2])*("+"===r[1]?1:-1)),c[s.idx]=o,this[l](c)))})}))})),o.hook=function(e){var i=e.split(" ");h(i,(function(e,i){t.cssHooks[i]={set:function(e,n){var s,r,a="";if("transparent"!==n&&("string"!==t.type(n)||(s=d(n)))){if(n=o(s||n),!l.rgba&&1!==n._rgba[3]){for(r="backgroundColor"===i?e.parentNode:e;(""===a||"transparent"===a)&&r&&r.style;)try{a=t.css(r,"backgroundColor"),r=r.parentNode}catch(t){}n=n.blend(a&&"transparent"!==a?a:"_default")}n=n.toRgbaString()}try{e.style[i]=n}catch(t){}}},t.fx.step[i]=function(e){e.colorInit||(e.start=o(e.elem,i),e.end=o(e.end),e.colorInit=!0),t.cssHooks[i].set(e.elem,e.start.transition(e.end,e.pos))}}))},o.hook("backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor"),t.cssHooks.borderColor={expand:function(t){var e={};return h(["Top","Right","Bottom","Left"],(function(i,n){e["border"+n+"Color"]=t})),e}},i=t.Color.names={aqua:"#00ffff",black:"#000000",blue:"#0000ff",fuchsia:"#ff00ff",gray:"#808080",green:"#008000",lime:"#00ff00",maroon:"#800000",navy:"#000080",olive:"#808000",purple:"#800080",red:"#ff0000",silver:"#c0c0c0",teal:"#008080",white:"#ffffff",yellow:"#ffff00",transparent:[null,null,null,0],_default:"#ffffff"}}(w),function(){var e=["add","remove","toggle"],i={border:1,borderBottom:1,borderColor:1,borderLeft:1,borderRight:1,borderTop:1,borderWidth:1,margin:1,padding:1};function n(e){var i,n,s=e.ownerDocument.defaultView?e.ownerDocument.defaultView.getComputedStyle(e,null):e.currentStyle,o={};if(s&&s.length&&s[0]&&s[s[0]])for(n=s.length;n--;)"string"==typeof s[i=s[n]]&&(o[t.camelCase(i)]=s[i]);else for(i in s)"string"==typeof s[i]&&(o[i]=s[i]);return o}t.each(["borderLeftStyle","borderRightStyle","borderBottomStyle","borderTopStyle"],(function(e,i){t.fx.step[i]=function(t){("none"!==t.end&&!t.setAttr||1===t.pos&&!t.setAttr)&&(w.style(t.elem,i,t.end),t.setAttr=!0)}})),t.fn.addBack||(t.fn.addBack=function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}),t.effects.animateClass=function(s,o,r,a){var l=t.speed(o,r,a);return this.queue((function(){var o,r=t(this),a=r.attr("class")||"",c=l.children?r.find("*").addBack():r;c=c.map((function(){return{el:t(this),start:n(this)}})),(o=function(){t.each(e,(function(t,e){s[e]&&r[e+"Class"](s[e])}))})(),c=c.map((function(){return this.end=n(this.el[0]),this.diff=function(e,n){var s,o,r={};for(s in n)o=n[s],e[s]!==o&&(i[s]||!t.fx.step[s]&&isNaN(parseFloat(o))||(r[s]=o));return r}(this.start,this.end),this})),r.attr("class",a),c=c.map((function(){var e=this,i=t.Deferred(),n=t.extend({},l,{queue:!1,complete:function(){i.resolve(e)}});return this.el.animate(this.diff,n),i.promise()})),t.when.apply(t,c.get()).done((function(){o(),t.each(arguments,(function(){var e=this.el;t.each(this.diff,(function(t){e.css(t,"")}))})),l.complete.call(r[0])}))}))},t.fn.extend({addClass:function(e){return function(i,n,s,o){return n?t.effects.animateClass.call(this,{add:i},n,s,o):e.apply(this,arguments)}}(t.fn.addClass),removeClass:function(e){return function(i,n,s,o){return arguments.length>1?t.effects.animateClass.call(this,{remove:i},n,s,o):e.apply(this,arguments)}}(t.fn.removeClass),toggleClass:function(e){return function(i,n,s,o,r){return"boolean"==typeof n||void 0===n?s?t.effects.animateClass.call(this,n?{add:i}:{remove:i},s,o,r):e.apply(this,arguments):t.effects.animateClass.call(this,{toggle:i},n,s,o)}}(t.fn.toggleClass),switchClass:function(e,i,n,s,o){return t.effects.animateClass.call(this,{add:i,remove:e},n,s,o)}})}(),function(){function e(e,i,n,s){return t.isPlainObject(e)&&(i=e,e=e.effect),e={effect:e},null==i&&(i={}),t.isFunction(i)&&(s=i,n=null,i={}),("number"==typeof i||t.fx.speeds[i])&&(s=n,n=i,i={}),t.isFunction(n)&&(s=n,n=null),i&&t.extend(e,i),n=n||i.duration,e.duration=t.fx.off?0:"number"==typeof n?n:n in t.fx.speeds?t.fx.speeds[n]:t.fx.speeds._default,e.complete=s||i.complete,e}function i(e){return!(e&&"number"!=typeof e&&!t.fx.speeds[e])||"string"==typeof e&&!t.effects.effect[e]||!!t.isFunction(e)||"object"==typeof e&&!e.effect}function n(t,e){var i=e.outerWidth(),n=e.outerHeight(),s=/^rect\((-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto)\)$/.exec(t)||["",0,i,n,0];return{top:parseFloat(s[1])||0,right:"auto"===s[2]?i:parseFloat(s[2]),bottom:"auto"===s[3]?n:parseFloat(s[3]),left:parseFloat(s[4])||0}}t.expr&&t.expr.pseudos&&t.expr.pseudos.animated&&(t.expr.pseudos.animated=function(e){return function(i){return!!t(i).data(b)||e(i)}}(t.expr.pseudos.animated)),!1!==t.uiBackCompat&&t.extend(t.effects,{save:function(t,e){for(var i=0,n=e.length;i<n;i++)null!==e[i]&&t.data(_+e[i],t[0].style[e[i]])},restore:function(t,e){for(var i,n=0,s=e.length;n<s;n++)null!==e[n]&&(i=t.data(_+e[n]),t.css(e[n],i))},setMode:function(t,e){return"toggle"===e&&(e=t.is(":hidden")?"show":"hide"),e},createWrapper:function(e){if(e.parent().is(".ui-effects-wrapper"))return e.parent();var i={width:e.outerWidth(!0),height:e.outerHeight(!0),float:e.css("float")},n=t("<div></div>").addClass("ui-effects-wrapper").css({fontSize:"100%",background:"transparent",border:"none",margin:0,padding:0}),s={width:e.width(),height:e.height()},o=document.activeElement;try{o.id}catch(t){o=document.body}return e.wrap(n),(e[0]===o||t.contains(e[0],o))&&t(o).trigger("focus"),n=e.parent(),"static"===e.css("position")?(n.css({position:"relative"}),e.css({position:"relative"})):(t.extend(i,{position:e.css("position"),zIndex:e.css("z-index")}),t.each(["top","left","bottom","right"],(function(t,n){i[n]=e.css(n),isNaN(parseInt(i[n],10))&&(i[n]="auto")})),e.css({position:"relative",top:0,left:0,right:"auto",bottom:"auto"})),e.css(s),n.css(i).show()},removeWrapper:function(e){var i=document.activeElement;return e.parent().is(".ui-effects-wrapper")&&(e.parent().replaceWith(e),(e[0]===i||t.contains(e[0],i))&&t(i).trigger("focus")),e}}),t.extend(t.effects,{version:"1.12.1",define:function(e,i,n){return n||(n=i,i="effect"),t.effects.effect[e]=n,t.effects.effect[e].mode=i,n},scaledDimensions:function(t,e,i){if(0===e)return{height:0,width:0,outerHeight:0,outerWidth:0};var n="horizontal"!==i?(e||100)/100:1,s="vertical"!==i?(e||100)/100:1;return{height:t.height()*s,width:t.width()*n,outerHeight:t.outerHeight()*s,outerWidth:t.outerWidth()*n}},clipToBox:function(t){return{width:t.clip.right-t.clip.left,height:t.clip.bottom-t.clip.top,left:t.clip.left,top:t.clip.top}},unshift:function(t,e,i){var n=t.queue();e>1&&n.splice.apply(n,[1,0].concat(n.splice(e,i))),t.dequeue()},saveStyle:function(t){t.data(y,t[0].style.cssText)},restoreStyle:function(t){t[0].style.cssText=t.data(y)||"",t.removeData(y)},mode:function(t,e){var i=t.is(":hidden");return"toggle"===e&&(e=i?"show":"hide"),(i?"hide"===e:"show"===e)&&(e="none"),e},getBaseline:function(t,e){var i,n;switch(t[0]){case"top":i=0;break;case"middle":i=.5;break;case"bottom":i=1;break;default:i=t[0]/e.height}switch(t[1]){case"left":n=0;break;case"center":n=.5;break;case"right":n=1;break;default:n=t[1]/e.width}return{x:n,y:i}},createPlaceholder:function(e){var i,n=e.css("position"),s=e.position();return e.css({marginTop:e.css("marginTop"),marginBottom:e.css("marginBottom"),marginLeft:e.css("marginLeft"),marginRight:e.css("marginRight")}).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()),/^(static|relative)/.test(n)&&(n="absolute",i=t("<"+e[0].nodeName+">").insertAfter(e).css({display:/^(inline|ruby)/.test(e.css("display"))?"inline-block":"block",visibility:"hidden",marginTop:e.css("marginTop"),marginBottom:e.css("marginBottom"),marginLeft:e.css("marginLeft"),marginRight:e.css("marginRight"),float:e.css("float")}).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()).addClass("ui-effects-placeholder"),e.data(_+"placeholder",i)),e.css({position:n,left:s.left,top:s.top}),i},removePlaceholder:function(t){var e=_+"placeholder",i=t.data(e);i&&(i.remove(),t.removeData(e))},cleanUp:function(e){t.effects.restoreStyle(e),t.effects.removePlaceholder(e)},setTransition:function(e,i,n,s){return s=s||{},t.each(i,(function(t,i){var o=e.cssUnit(i);o[0]>0&&(s[i]=o[0]*n+o[1])})),s}}),t.fn.extend({effect:function(){var i=e.apply(this,arguments),n=t.effects.effect[i.effect],s=n.mode,o=i.queue,r=o||"fx",a=i.complete,l=i.mode,c=[],h=function(e){var i=t(this),n=t.effects.mode(i,l)||s;i.data(b,!0),c.push(n),s&&("show"===n||n===s&&"hide"===n)&&i.show(),s&&"none"===n||t.effects.saveStyle(i),t.isFunction(e)&&e()};if(t.fx.off||!n)return l?this[l](i.duration,a):this.each((function(){a&&a.call(this)}));function u(e){var o=t(this);function r(){t.isFunction(a)&&a.call(o[0]),t.isFunction(e)&&e()}i.mode=c.shift(),!1===t.uiBackCompat||s?"none"===i.mode?(o[l](),r()):n.call(o[0],i,(function(){o.removeData(b),t.effects.cleanUp(o),"hide"===i.mode&&o.hide(),r()})):(o.is(":hidden")?"hide"===l:"show"===l)?(o[l](),r()):n.call(o[0],i,r)}return!1===o?this.each(h).each(u):this.queue(r,h).queue(r,u)},show:function(t){return function(n){if(i(n))return t.apply(this,arguments);var s=e.apply(this,arguments);return s.mode="show",this.effect.call(this,s)}}(t.fn.show),hide:function(t){return function(n){if(i(n))return t.apply(this,arguments);var s=e.apply(this,arguments);return s.mode="hide",this.effect.call(this,s)}}(t.fn.hide),toggle:function(t){return function(n){if(i(n)||"boolean"==typeof n)return t.apply(this,arguments);var s=e.apply(this,arguments);return s.mode="toggle",this.effect.call(this,s)}}(t.fn.toggle),cssUnit:function(e){var i=this.css(e),n=[];return t.each(["em","px","%","pt"],(function(t,e){i.indexOf(e)>0&&(n=[parseFloat(i),e])})),n},cssClip:function(t){return t?this.css("clip","rect("+t.top+"px "+t.right+"px "+t.bottom+"px "+t.left+"px)"):n(this.css("clip"),this)},transfer:function(e,i){var n=t(this),s=t(e.to),o="fixed"===s.css("position"),r=t("body"),a=o?r.scrollTop():0,l=o?r.scrollLeft():0,c=s.offset(),h={top:c.top-a,left:c.left-l,height:s.innerHeight(),width:s.innerWidth()},u=n.offset(),d=t("<div class='ui-effects-transfer'></div>").appendTo("body").addClass(e.className).css({top:u.top-a,left:u.left-l,height:n.innerHeight(),width:n.innerWidth(),position:o?"fixed":"absolute"}).animate(h,e.duration,e.easing,(function(){d.remove(),t.isFunction(i)&&i()}))}}),t.fx.step.clip=function(e){e.clipInit||(e.start=t(e.elem).cssClip(),"string"==typeof e.end&&(e.end=n(e.end,e.elem)),e.clipInit=!0),t(e.elem).cssClip({top:e.pos*(e.end.top-e.start.top)+e.start.top,right:e.pos*(e.end.right-e.start.right)+e.start.right,bottom:e.pos*(e.end.bottom-e.start.bottom)+e.start.bottom,left:e.pos*(e.end.left-e.start.left)+e.start.left})}}(),v={},t.each(["Quad","Cubic","Quart","Quint","Expo"],(function(t,e){v[e]=function(e){return Math.pow(e,t+2)}})),t.extend(v,{Sine:function(t){return 1-Math.cos(t*Math.PI/2)},Circ:function(t){return 1-Math.sqrt(1-t*t)},Elastic:function(t){return 0===t||1===t?t:-Math.pow(2,8*(t-1))*Math.sin((80*(t-1)-7.5)*Math.PI/15)},Back:function(t){return t*t*(3*t-2)},Bounce:function(t){for(var e,i=4;t<((e=Math.pow(2,--i))-1)/11;);return 1/Math.pow(4,3-i)-7.5625*Math.pow((3*e-2)/22-t,2)}}),t.each(v,(function(e,i){t.easing["easeIn"+e]=i,t.easing["easeOut"+e]=function(t){return 1-i(1-t)},t.easing["easeInOut"+e]=function(t){return t<.5?i(2*t)/2:1-i(-2*t+2)/2}})),t.effects,t.effects.define("blind","hide",(function(e,i){var n={up:["bottom","top"],vertical:["bottom","top"],down:["top","bottom"],left:["right","left"],horizontal:["right","left"],right:["left","right"]},s=t(this),o=e.direction||"up",r=s.cssClip(),a={clip:t.extend({},r)},l=t.effects.createPlaceholder(s);a.clip[n[o][0]]=a.clip[n[o][1]],"show"===e.mode&&(s.cssClip(a.clip),l&&l.css(t.effects.clipToBox(a)),a.clip=r),l&&l.animate(t.effects.clipToBox(a),e.duration,e.easing),s.animate(a,{queue:!1,duration:e.duration,easing:e.easing,complete:i})})),t.effects.define("bounce",(function(e,i){var n,s,o,r=t(this),a=e.mode,l="hide"===a,c="show"===a,h=e.direction||"up",u=e.distance,d=e.times||5,p=2*d+(c||l?1:0),f=e.duration/p,g=e.easing,m="up"===h||"down"===h?"top":"left",v="up"===h||"left"===h,_=0,y=r.queue().length;for(t.effects.createPlaceholder(r),o=r.css(m),u||(u=r["top"===m?"outerHeight":"outerWidth"]()/3),c&&((s={opacity:1})[m]=o,r.css("opacity",0).css(m,v?2*-u:2*u).animate(s,f,g)),l&&(u/=Math.pow(2,d-1)),(s={})[m]=o;_<d;_++)(n={})[m]=(v?"-=":"+=")+u,r.animate(n,f,g).animate(s,f,g),u=l?2*u:u/2;l&&((n={opacity:0})[m]=(v?"-=":"+=")+u,r.animate(n,f,g)),r.queue(i),t.effects.unshift(r,y,p+1)})),t.effects.define("clip","hide",(function(e,i){var n,s={},o=t(this),r=e.direction||"vertical",a="both"===r,l=a||"horizontal"===r,c=a||"vertical"===r;n=o.cssClip(),s.clip={top:c?(n.bottom-n.top)/2:n.top,right:l?(n.right-n.left)/2:n.right,bottom:c?(n.bottom-n.top)/2:n.bottom,left:l?(n.right-n.left)/2:n.left},t.effects.createPlaceholder(o),"show"===e.mode&&(o.cssClip(s.clip),s.clip=n),o.animate(s,{queue:!1,duration:e.duration,easing:e.easing,complete:i})})),t.effects.define("drop","hide",(function(e,i){var n,s=t(this),o="show"===e.mode,r=e.direction||"left",a="up"===r||"down"===r?"top":"left",l="up"===r||"left"===r?"-=":"+=",c="+="===l?"-=":"+=",h={opacity:0};t.effects.createPlaceholder(s),n=e.distance||s["top"===a?"outerHeight":"outerWidth"](!0)/2,h[a]=l+n,o&&(s.css(h),h[a]=c+n,h.opacity=1),s.animate(h,{queue:!1,duration:e.duration,easing:e.easing,complete:i})})),t.effects.define("explode","hide",(function(e,i){var n,s,o,r,a,l,c=e.pieces?Math.round(Math.sqrt(e.pieces)):3,h=c,u=t(this),d="show"===e.mode,p=u.show().css("visibility","hidden").offset(),f=Math.ceil(u.outerWidth()/h),g=Math.ceil(u.outerHeight()/c),m=[];function v(){m.push(this),m.length===c*h&&(u.css({visibility:"visible"}),t(m).remove(),i())}for(n=0;n<c;n++)for(r=p.top+n*g,l=n-(c-1)/2,s=0;s<h;s++)o=p.left+s*f,a=s-(h-1)/2,u.clone().appendTo("body").wrap("<div></div>").css({position:"absolute",visibility:"visible",left:-s*f,top:-n*g}).parent().addClass("ui-effects-explode").css({position:"absolute",overflow:"hidden",width:f,height:g,left:o+(d?a*f:0),top:r+(d?l*g:0),opacity:d?0:1}).animate({left:o+(d?0:a*f),top:r+(d?0:l*g),opacity:d?1:0},e.duration||500,e.easing,v)})),t.effects.define("fade","toggle",(function(e,i){var n="show"===e.mode;t(this).css("opacity",n?0:1).animate({opacity:n?1:0},{queue:!1,duration:e.duration,easing:e.easing,complete:i})})),t.effects.define("fold","hide",(function(e,i){var n=t(this),s=e.mode,o="show"===s,r="hide"===s,a=e.size||15,l=/([0-9]+)%/.exec(a),c=e.horizFirst?["right","bottom"]:["bottom","right"],h=e.duration/2,u=t.effects.createPlaceholder(n),d=n.cssClip(),p={clip:t.extend({},d)},f={clip:t.extend({},d)},g=[d[c[0]],d[c[1]]],m=n.queue().length;l&&(a=parseInt(l[1],10)/100*g[r?0:1]),p.clip[c[0]]=a,f.clip[c[0]]=a,f.clip[c[1]]=0,o&&(n.cssClip(f.clip),u&&u.css(t.effects.clipToBox(f)),f.clip=d),n.queue((function(i){u&&u.animate(t.effects.clipToBox(p),h,e.easing).animate(t.effects.clipToBox(f),h,e.easing),i()})).animate(p,h,e.easing).animate(f,h,e.easing).queue(i),t.effects.unshift(n,m,4)})),t.effects.define("highlight","show",(function(e,i){var n=t(this),s={backgroundColor:n.css("backgroundColor")};"hide"===e.mode&&(s.opacity=0),t.effects.saveStyle(n),n.css({backgroundImage:"none",backgroundColor:e.color||"#ffff99"}).animate(s,{queue:!1,duration:e.duration,easing:e.easing,complete:i})})),t.effects.define("size",(function(e,i){var n,s,o,r=t(this),a=["fontSize"],l=["borderTopWidth","borderBottomWidth","paddingTop","paddingBottom"],c=["borderLeftWidth","borderRightWidth","paddingLeft","paddingRight"],h=e.mode,u="effect"!==h,d=e.scale||"both",p=e.origin||["middle","center"],f=r.css("position"),g=r.position(),m=t.effects.scaledDimensions(r),v=e.from||m,_=e.to||t.effects.scaledDimensions(r,0);t.effects.createPlaceholder(r),"show"===h&&(o=v,v=_,_=o),s={from:{y:v.height/m.height,x:v.width/m.width},to:{y:_.height/m.height,x:_.width/m.width}},"box"!==d&&"both"!==d||(s.from.y!==s.to.y&&(v=t.effects.setTransition(r,l,s.from.y,v),_=t.effects.setTransition(r,l,s.to.y,_)),s.from.x!==s.to.x&&(v=t.effects.setTransition(r,c,s.from.x,v),_=t.effects.setTransition(r,c,s.to.x,_))),"content"!==d&&"both"!==d||s.from.y!==s.to.y&&(v=t.effects.setTransition(r,a,s.from.y,v),_=t.effects.setTransition(r,a,s.to.y,_)),p&&(n=t.effects.getBaseline(p,m),v.top=(m.outerHeight-v.outerHeight)*n.y+g.top,v.left=(m.outerWidth-v.outerWidth)*n.x+g.left,_.top=(m.outerHeight-_.outerHeight)*n.y+g.top,_.left=(m.outerWidth-_.outerWidth)*n.x+g.left),r.css(v),"content"!==d&&"both"!==d||(l=l.concat(["marginTop","marginBottom"]).concat(a),c=c.concat(["marginLeft","marginRight"]),r.find("*[width]").each((function(){var i=t(this),n=t.effects.scaledDimensions(i),o={height:n.height*s.from.y,width:n.width*s.from.x,outerHeight:n.outerHeight*s.from.y,outerWidth:n.outerWidth*s.from.x},r={height:n.height*s.to.y,width:n.width*s.to.x,outerHeight:n.height*s.to.y,outerWidth:n.width*s.to.x};s.from.y!==s.to.y&&(o=t.effects.setTransition(i,l,s.from.y,o),r=t.effects.setTransition(i,l,s.to.y,r)),s.from.x!==s.to.x&&(o=t.effects.setTransition(i,c,s.from.x,o),r=t.effects.setTransition(i,c,s.to.x,r)),u&&t.effects.saveStyle(i),i.css(o),i.animate(r,e.duration,e.easing,(function(){u&&t.effects.restoreStyle(i)}))}))),r.animate(_,{queue:!1,duration:e.duration,easing:e.easing,complete:function(){var e=r.offset();0===_.opacity&&r.css("opacity",v.opacity),u||(r.css("position","static"===f?"relative":f).offset(e),t.effects.saveStyle(r)),i()}})})),t.effects.define("scale",(function(e,i){var n=t(this),s=e.mode,o=parseInt(e.percent,10)||(0===parseInt(e.percent,10)||"effect"!==s?0:100),r=t.extend(!0,{from:t.effects.scaledDimensions(n),to:t.effects.scaledDimensions(n,o,e.direction||"both"),origin:e.origin||["middle","center"]},e);e.fade&&(r.from.opacity=1,r.to.opacity=0),t.effects.effect.size.call(this,r,i)})),t.effects.define("puff","hide",(function(e,i){var n=t.extend(!0,{},e,{fade:!0,percent:parseInt(e.percent,10)||150});t.effects.effect.scale.call(this,n,i)})),t.effects.define("pulsate","show",(function(e,i){var n=t(this),s=e.mode,o="show"===s,r=o||"hide"===s,a=2*(e.times||5)+(r?1:0),l=e.duration/a,c=0,h=1,u=n.queue().length;for(!o&&n.is(":visible")||(n.css("opacity",0).show(),c=1);h<a;h++)n.animate({opacity:c},l,e.easing),c=1-c;n.animate({opacity:c},l,e.easing),n.queue(i),t.effects.unshift(n,u,a+1)})),t.effects.define("shake",(function(e,i){var n=1,s=t(this),o=e.direction||"left",r=e.distance||20,a=e.times||3,l=2*a+1,c=Math.round(e.duration/l),h="up"===o||"down"===o?"top":"left",u="up"===o||"left"===o,d={},p={},f={},g=s.queue().length;for(t.effects.createPlaceholder(s),d[h]=(u?"-=":"+=")+r,p[h]=(u?"+=":"-=")+2*r,f[h]=(u?"-=":"+=")+2*r,s.animate(d,c,e.easing);n<a;n++)s.animate(p,c,e.easing).animate(f,c,e.easing);s.animate(p,c,e.easing).animate(d,c/2,e.easing).queue(i),t.effects.unshift(s,g,l+1)})),t.effects.define("slide","show",(function(e,i){var n,s,o=t(this),r={up:["bottom","top"],down:["top","bottom"],left:["right","left"],right:["left","right"]},a=e.mode,l=e.direction||"left",c="up"===l||"down"===l?"top":"left",h="up"===l||"left"===l,u=e.distance||o["top"===c?"outerHeight":"outerWidth"](!0),d={};t.effects.createPlaceholder(o),n=o.cssClip(),s=o.position()[c],d[c]=(h?-1:1)*u+s,d.clip=o.cssClip(),d.clip[r[l][1]]=d.clip[r[l][0]],"show"===a&&(o.cssClip(d.clip),o.css(c,d[c]),d.clip=n,d[c]=s),o.animate(d,{queue:!1,duration:e.duration,easing:e.easing,complete:i})})),!1!==t.uiBackCompat&&t.effects.define("transfer",(function(e,i){t(this).transfer(e,i)}))},void 0===(o=n.apply(e,s))||(t.exports=o)},755:function(t,e){var i;!function(e,i){"use strict";"object"==typeof t.exports?t.exports=e.document?i(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return i(t)}:i(e)}("undefined"!=typeof window?window:this,(function(n,s){"use strict";var o=[],r=Object.getPrototypeOf,a=o.slice,l=o.flat?function(t){return o.flat.call(t)}:function(t){return o.concat.apply([],t)},c=o.push,h=o.indexOf,u={},d=u.toString,p=u.hasOwnProperty,f=p.toString,g=f.call(Object),m={},v=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType&&"function"!=typeof t.item},_=function(t){return null!=t&&t===t.window},y=n.document,b={type:!0,src:!0,nonce:!0,noModule:!0};function w(t,e,i){var n,s,o=(i=i||y).createElement("script");if(o.text=t,e)for(n in b)(s=e[n]||e.getAttribute&&e.getAttribute(n))&&o.setAttribute(n,s);i.head.appendChild(o).parentNode.removeChild(o)}function x(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?u[d.call(t)]||"object":typeof t}var k="3.7.1",C=/HTML$/i,D=function(t,e){return new D.fn.init(t,e)};function T(t){var e=!!t&&"length"in t&&t.length,i=x(t);return!v(t)&&!_(t)&&("array"===i||0===e||"number"==typeof e&&e>0&&e-1 in t)}function A(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}D.fn=D.prototype={jquery:k,constructor:D,length:0,toArray:function(){return a.call(this)},get:function(t){return null==t?a.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=D.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return D.each(this,t)},map:function(t){return this.pushStack(D.map(this,(function(e,i){return t.call(e,i,e)})))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(D.grep(this,(function(t,e){return(e+1)%2})))},odd:function(){return this.pushStack(D.grep(this,(function(t,e){return e%2})))},eq:function(t){var e=this.length,i=+t+(t<0?e:0);return this.pushStack(i>=0&&i<e?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:o.sort,splice:o.splice},D.extend=D.fn.extend=function(){var t,e,i,n,s,o,r=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof r&&(c=r,r=arguments[a]||{},a++),"object"==typeof r||v(r)||(r={}),a===l&&(r=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)n=t[e],"__proto__"!==e&&r!==n&&(c&&n&&(D.isPlainObject(n)||(s=Array.isArray(n)))?(i=r[e],o=s&&!Array.isArray(i)?[]:s||D.isPlainObject(i)?i:{},s=!1,r[e]=D.extend(c,o,n)):void 0!==n&&(r[e]=n));return r},D.extend({expando:"jQuery"+(k+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,i;return!(!t||"[object Object]"!==d.call(t)||(e=r(t))&&("function"!=typeof(i=p.call(e,"constructor")&&e.constructor)||f.call(i)!==g))},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e,i){w(t,{nonce:e&&e.nonce},i)},each:function(t,e){var i,n=0;if(T(t))for(i=t.length;n<i&&!1!==e.call(t[n],n,t[n]);n++);else for(n in t)if(!1===e.call(t[n],n,t[n]))break;return t},text:function(t){var e,i="",n=0,s=t.nodeType;if(!s)for(;e=t[n++];)i+=D.text(e);return 1===s||11===s?t.textContent:9===s?t.documentElement.textContent:3===s||4===s?t.nodeValue:i},makeArray:function(t,e){var i=e||[];return null!=t&&(T(Object(t))?D.merge(i,"string"==typeof t?[t]:t):c.call(i,t)),i},inArray:function(t,e,i){return null==e?-1:h.call(e,t,i)},isXMLDoc:function(t){var e=t&&t.namespaceURI,i=t&&(t.ownerDocument||t).documentElement;return!C.test(e||i&&i.nodeName||"HTML")},merge:function(t,e){for(var i=+e.length,n=0,s=t.length;n<i;n++)t[s++]=e[n];return t.length=s,t},grep:function(t,e,i){for(var n=[],s=0,o=t.length,r=!i;s<o;s++)!e(t[s],s)!==r&&n.push(t[s]);return n},map:function(t,e,i){var n,s,o=0,r=[];if(T(t))for(n=t.length;o<n;o++)null!=(s=e(t[o],o,i))&&r.push(s);else for(o in t)null!=(s=e(t[o],o,i))&&r.push(s);return l(r)},guid:1,support:m}),"function"==typeof Symbol&&(D.fn[Symbol.iterator]=o[Symbol.iterator]),D.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(t,e){u["[object "+e+"]"]=e.toLowerCase()}));var S=o.pop,I=o.sort,P=o.splice,E="[\\x20\\t\\r\\n\\f]",M=new RegExp("^"+E+"+|((?:^|[^\\\\])(?:\\\\.)*)"+E+"+$","g");D.contains=function(t,e){var i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(t.contains?t.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))};var O=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;function N(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t}D.escapeSelector=function(t){return(t+"").replace(O,N)};var H=y,j=c;!function(){var t,e,i,s,r,l,c,u,d,f,g=j,v=D.expando,_=0,y=0,b=tt(),w=tt(),x=tt(),k=tt(),C=function(t,e){return t===e&&(r=!0),0},T="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",O="(?:\\\\[\\da-fA-F]{1,6}"+E+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",N="\\["+E+"*("+O+")(?:"+E+"*([*^$|!~]?=)"+E+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+O+"))|)"+E+"*\\]",z=":("+O+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+N+")*)|.*)\\)|)",W=new RegExp(E+"+","g"),R=new RegExp("^"+E+"*,"+E+"*"),F=new RegExp("^"+E+"*([>+~]|"+E+")"+E+"*"),L=new RegExp(E+"|>"),q=new RegExp(z),B=new RegExp("^"+O+"$"),Y={ID:new RegExp("^#("+O+")"),CLASS:new RegExp("^\\.("+O+")"),TAG:new RegExp("^("+O+"|[*])"),ATTR:new RegExp("^"+N),PSEUDO:new RegExp("^"+z),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+E+"*(even|odd|(([+-]|)(\\d*)n|)"+E+"*(?:([+-]|)"+E+"*(\\d+)|))"+E+"*\\)|)","i"),bool:new RegExp("^(?:"+T+")$","i"),needsContext:new RegExp("^"+E+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+E+"*((?:-\\d)?\\d*)"+E+"*\\)|)(?=[^-]|$)","i")},U=/^(?:input|select|textarea|button)$/i,V=/^h\d$/i,K=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,$=/[+~]/,G=new RegExp("\\\\[\\da-fA-F]{1,6}"+E+"?|\\\\([^\\r\\n\\f])","g"),X=function(t,e){var i="0x"+t.slice(1)-65536;return e||(i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320))},Z=function(){lt()},J=dt((function(t){return!0===t.disabled&&A(t,"fieldset")}),{dir:"parentNode",next:"legend"});try{g.apply(o=a.call(H.childNodes),H.childNodes),o[H.childNodes.length].nodeType}catch(t){g={apply:function(t,e){j.apply(t,a.call(e))},call:function(t){j.apply(t,a.call(arguments,1))}}}function Q(t,e,i,n){var s,o,r,a,c,h,p,f=e&&e.ownerDocument,_=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==_&&9!==_&&11!==_)return i;if(!n&&(lt(e),e=e||l,u)){if(11!==_&&(c=K.exec(t)))if(s=c[1]){if(9===_){if(!(r=e.getElementById(s)))return i;if(r.id===s)return g.call(i,r),i}else if(f&&(r=f.getElementById(s))&&Q.contains(e,r)&&r.id===s)return g.call(i,r),i}else{if(c[2])return g.apply(i,e.getElementsByTagName(t)),i;if((s=c[3])&&e.getElementsByClassName)return g.apply(i,e.getElementsByClassName(s)),i}if(!(k[t+" "]||d&&d.test(t))){if(p=t,f=e,1===_&&(L.test(t)||F.test(t))){for((f=$.test(t)&&at(e.parentNode)||e)==e&&m.scope||((a=e.getAttribute("id"))?a=D.escapeSelector(a):e.setAttribute("id",a=v)),o=(h=ht(t)).length;o--;)h[o]=(a?"#"+a:":scope")+" "+ut(h[o]);p=h.join(",")}try{return g.apply(i,f.querySelectorAll(p)),i}catch(e){k(t,!0)}finally{a===v&&e.removeAttribute("id")}}}return _t(t.replace(M,"$1"),e,i,n)}function tt(){var t=[];return function i(n,s){return t.push(n+" ")>e.cacheLength&&delete i[t.shift()],i[n+" "]=s}}function et(t){return t[v]=!0,t}function it(t){var e=l.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function nt(t){return function(e){return A(e,"input")&&e.type===t}}function st(t){return function(e){return(A(e,"input")||A(e,"button"))&&e.type===t}}function ot(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&J(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function rt(t){return et((function(e){return e=+e,et((function(i,n){for(var s,o=t([],i.length,e),r=o.length;r--;)i[s=o[r]]&&(i[s]=!(n[s]=i[s]))}))}))}function at(t){return t&&void 0!==t.getElementsByTagName&&t}function lt(t){var i,n=t?t.ownerDocument||t:H;return n!=l&&9===n.nodeType&&n.documentElement?(c=(l=n).documentElement,u=!D.isXMLDoc(l),f=c.matches||c.webkitMatchesSelector||c.msMatchesSelector,c.msMatchesSelector&&H!=l&&(i=l.defaultView)&&i.top!==i&&i.addEventListener("unload",Z),m.getById=it((function(t){return c.appendChild(t).id=D.expando,!l.getElementsByName||!l.getElementsByName(D.expando).length})),m.disconnectedMatch=it((function(t){return f.call(t,"*")})),m.scope=it((function(){return l.querySelectorAll(":scope")})),m.cssHas=it((function(){try{return l.querySelector(":has(*,:jqfake)"),!1}catch(t){return!0}})),m.getById?(e.filter.ID=function(t){var e=t.replace(G,X);return function(t){return t.getAttribute("id")===e}},e.find.ID=function(t,e){if(void 0!==e.getElementById&&u){var i=e.getElementById(t);return i?[i]:[]}}):(e.filter.ID=function(t){var e=t.replace(G,X);return function(t){var i=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return i&&i.value===e}},e.find.ID=function(t,e){if(void 0!==e.getElementById&&u){var i,n,s,o=e.getElementById(t);if(o){if((i=o.getAttributeNode("id"))&&i.value===t)return[o];for(s=e.getElementsByName(t),n=0;o=s[n++];)if((i=o.getAttributeNode("id"))&&i.value===t)return[o]}return[]}}),e.find.TAG=function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):e.querySelectorAll(t)},e.find.CLASS=function(t,e){if(void 0!==e.getElementsByClassName&&u)return e.getElementsByClassName(t)},d=[],it((function(t){var e;c.appendChild(t).innerHTML="<a id='"+v+"' href='' disabled='disabled'></a><select id='"+v+"-\r\\' disabled='disabled'><option selected=''></option></select>",t.querySelectorAll("[selected]").length||d.push("\\["+E+"*(?:value|"+T+")"),t.querySelectorAll("[id~="+v+"-]").length||d.push("~="),t.querySelectorAll("a#"+v+"+*").length||d.push(".#.+[+~]"),t.querySelectorAll(":checked").length||d.push(":checked"),(e=l.createElement("input")).setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),c.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&d.push(":enabled",":disabled"),(e=l.createElement("input")).setAttribute("name",""),t.appendChild(e),t.querySelectorAll("[name='']").length||d.push("\\["+E+"*name"+E+"*="+E+"*(?:''|\"\")")})),m.cssHas||d.push(":has"),d=d.length&&new RegExp(d.join("|")),C=function(t,e){if(t===e)return r=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i||(1&(i=(t.ownerDocument||t)==(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!m.sortDetached&&e.compareDocumentPosition(t)===i?t===l||t.ownerDocument==H&&Q.contains(H,t)?-1:e===l||e.ownerDocument==H&&Q.contains(H,e)?1:s?h.call(s,t)-h.call(s,e):0:4&i?-1:1)},l):l}for(t in Q.matches=function(t,e){return Q(t,null,null,e)},Q.matchesSelector=function(t,e){if(lt(t),u&&!k[e+" "]&&(!d||!d.test(e)))try{var i=f.call(t,e);if(i||m.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){k(e,!0)}return Q(e,l,null,[t]).length>0},Q.contains=function(t,e){return(t.ownerDocument||t)!=l&&lt(t),D.contains(t,e)},Q.attr=function(t,i){(t.ownerDocument||t)!=l&&lt(t);var n=e.attrHandle[i.toLowerCase()],s=n&&p.call(e.attrHandle,i.toLowerCase())?n(t,i,!u):void 0;return void 0!==s?s:t.getAttribute(i)},Q.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},D.uniqueSort=function(t){var e,i=[],n=0,o=0;if(r=!m.sortStable,s=!m.sortStable&&a.call(t,0),I.call(t,C),r){for(;e=t[o++];)e===t[o]&&(n=i.push(o));for(;n--;)P.call(t,i[n],1)}return s=null,t},D.fn.uniqueSort=function(){return this.pushStack(D.uniqueSort(a.apply(this)))},e=D.expr={cacheLength:50,createPseudo:et,match:Y,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(G,X),t[3]=(t[3]||t[4]||t[5]||"").replace(G,X),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||Q.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&Q.error(t[0]),t},PSEUDO:function(t){var e,i=!t[6]&&t[2];return Y.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":i&&q.test(i)&&(e=ht(i,!0))&&(e=i.indexOf(")",i.length-e)-i.length)&&(t[0]=t[0].slice(0,e),t[2]=i.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(G,X).toLowerCase();return"*"===t?function(){return!0}:function(t){return A(t,e)}},CLASS:function(t){var e=b[t+" "];return e||(e=new RegExp("(^|"+E+")"+t+"("+E+"|$)"))&&b(t,(function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")}))},ATTR:function(t,e,i){return function(n){var s=Q.attr(n,t);return null==s?"!="===e:!e||(s+="","="===e?s===i:"!="===e?s!==i:"^="===e?i&&0===s.indexOf(i):"*="===e?i&&s.indexOf(i)>-1:"$="===e?i&&s.slice(-i.length)===i:"~="===e?(" "+s.replace(W," ")+" ").indexOf(i)>-1:"|="===e&&(s===i||s.slice(0,i.length+1)===i+"-"))}},CHILD:function(t,e,i,n,s){var o="nth"!==t.slice(0,3),r="last"!==t.slice(-4),a="of-type"===e;return 1===n&&0===s?function(t){return!!t.parentNode}:function(e,i,l){var c,h,u,d,p,f=o!==r?"nextSibling":"previousSibling",g=e.parentNode,m=a&&e.nodeName.toLowerCase(),y=!l&&!a,b=!1;if(g){if(o){for(;f;){for(u=e;u=u[f];)if(a?A(u,m):1===u.nodeType)return!1;p=f="only"===t&&!p&&"nextSibling"}return!0}if(p=[r?g.firstChild:g.lastChild],r&&y){for(b=(d=(c=(h=g[v]||(g[v]={}))[t]||[])[0]===_&&c[1])&&c[2],u=d&&g.childNodes[d];u=++d&&u&&u[f]||(b=d=0)||p.pop();)if(1===u.nodeType&&++b&&u===e){h[t]=[_,d,b];break}}else if(y&&(b=d=(c=(h=e[v]||(e[v]={}))[t]||[])[0]===_&&c[1]),!1===b)for(;(u=++d&&u&&u[f]||(b=d=0)||p.pop())&&(!(a?A(u,m):1===u.nodeType)||!++b||(y&&((h=u[v]||(u[v]={}))[t]=[_,b]),u!==e)););return(b-=s)===n||b%n==0&&b/n>=0}}},PSEUDO:function(t,i){var n,s=e.pseudos[t]||e.setFilters[t.toLowerCase()]||Q.error("unsupported pseudo: "+t);return s[v]?s(i):s.length>1?(n=[t,t,"",i],e.setFilters.hasOwnProperty(t.toLowerCase())?et((function(t,e){for(var n,o=s(t,i),r=o.length;r--;)t[n=h.call(t,o[r])]=!(e[n]=o[r])})):function(t){return s(t,0,n)}):s}},pseudos:{not:et((function(t){var e=[],i=[],n=vt(t.replace(M,"$1"));return n[v]?et((function(t,e,i,s){for(var o,r=n(t,null,s,[]),a=t.length;a--;)(o=r[a])&&(t[a]=!(e[a]=o))})):function(t,s,o){return e[0]=t,n(e,null,o,i),e[0]=null,!i.pop()}})),has:et((function(t){return function(e){return Q(t,e).length>0}})),contains:et((function(t){return t=t.replace(G,X),function(e){return(e.textContent||D.text(e)).indexOf(t)>-1}})),lang:et((function(t){return B.test(t||"")||Q.error("unsupported lang: "+t),t=t.replace(G,X).toLowerCase(),function(e){var i;do{if(i=u?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(i=i.toLowerCase())===t||0===i.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}})),target:function(t){var e=n.location&&n.location.hash;return e&&e.slice(1)===t.id},root:function(t){return t===c},focus:function(t){return t===function(){try{return l.activeElement}catch(t){}}()&&l.hasFocus()&&!!(t.type||t.href||~t.tabIndex)},enabled:ot(!1),disabled:ot(!0),checked:function(t){return A(t,"input")&&!!t.checked||A(t,"option")&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!e.pseudos.empty(t)},header:function(t){return V.test(t.nodeName)},input:function(t){return U.test(t.nodeName)},button:function(t){return A(t,"input")&&"button"===t.type||A(t,"button")},text:function(t){var e;return A(t,"input")&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:rt((function(){return[0]})),last:rt((function(t,e){return[e-1]})),eq:rt((function(t,e,i){return[i<0?i+e:i]})),even:rt((function(t,e){for(var i=0;i<e;i+=2)t.push(i);return t})),odd:rt((function(t,e){for(var i=1;i<e;i+=2)t.push(i);return t})),lt:rt((function(t,e,i){var n;for(n=i<0?i+e:i>e?e:i;--n>=0;)t.push(n);return t})),gt:rt((function(t,e,i){for(var n=i<0?i+e:i;++n<e;)t.push(n);return t}))}},e.pseudos.nth=e.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})e.pseudos[t]=nt(t);for(t in{submit:!0,reset:!0})e.pseudos[t]=st(t);function ct(){}function ht(t,i){var n,s,o,r,a,l,c,h=w[t+" "];if(h)return i?0:h.slice(0);for(a=t,l=[],c=e.preFilter;a;){for(r in n&&!(s=R.exec(a))||(s&&(a=a.slice(s[0].length)||a),l.push(o=[])),n=!1,(s=F.exec(a))&&(n=s.shift(),o.push({value:n,type:s[0].replace(M," ")}),a=a.slice(n.length)),e.filter)!(s=Y[r].exec(a))||c[r]&&!(s=c[r](s))||(n=s.shift(),o.push({value:n,type:r,matches:s}),a=a.slice(n.length));if(!n)break}return i?a.length:a?Q.error(t):w(t,l).slice(0)}function ut(t){for(var e=0,i=t.length,n="";e<i;e++)n+=t[e].value;return n}function dt(t,e,i){var n=e.dir,s=e.next,o=s||n,r=i&&"parentNode"===o,a=y++;return e.first?function(e,i,s){for(;e=e[n];)if(1===e.nodeType||r)return t(e,i,s);return!1}:function(e,i,l){var c,h,u=[_,a];if(l){for(;e=e[n];)if((1===e.nodeType||r)&&t(e,i,l))return!0}else for(;e=e[n];)if(1===e.nodeType||r)if(h=e[v]||(e[v]={}),s&&A(e,s))e=e[n]||e;else{if((c=h[o])&&c[0]===_&&c[1]===a)return u[2]=c[2];if(h[o]=u,u[2]=t(e,i,l))return!0}return!1}}function pt(t){return t.length>1?function(e,i,n){for(var s=t.length;s--;)if(!t[s](e,i,n))return!1;return!0}:t[0]}function ft(t,e,i,n,s){for(var o,r=[],a=0,l=t.length,c=null!=e;a<l;a++)(o=t[a])&&(i&&!i(o,n,s)||(r.push(o),c&&e.push(a)));return r}function gt(t,e,i,n,s,o){return n&&!n[v]&&(n=gt(n)),s&&!s[v]&&(s=gt(s,o)),et((function(o,r,a,l){var c,u,d,p,f=[],m=[],v=r.length,_=o||function(t,e,i){for(var n=0,s=e.length;n<s;n++)Q(t,e[n],i);return i}(e||"*",a.nodeType?[a]:a,[]),y=!t||!o&&e?_:ft(_,f,t,a,l);if(i?i(y,p=s||(o?t:v||n)?[]:r,a,l):p=y,n)for(c=ft(p,m),n(c,[],a,l),u=c.length;u--;)(d=c[u])&&(p[m[u]]=!(y[m[u]]=d));if(o){if(s||t){if(s){for(c=[],u=p.length;u--;)(d=p[u])&&c.push(y[u]=d);s(null,p=[],c,l)}for(u=p.length;u--;)(d=p[u])&&(c=s?h.call(o,d):f[u])>-1&&(o[c]=!(r[c]=d))}}else p=ft(p===r?p.splice(v,p.length):p),s?s(null,r,p,l):g.apply(r,p)}))}function mt(t){for(var n,s,o,r=t.length,a=e.relative[t[0].type],l=a||e.relative[" "],c=a?1:0,u=dt((function(t){return t===n}),l,!0),d=dt((function(t){return h.call(n,t)>-1}),l,!0),p=[function(t,e,s){var o=!a&&(s||e!=i)||((n=e).nodeType?u(t,e,s):d(t,e,s));return n=null,o}];c<r;c++)if(s=e.relative[t[c].type])p=[dt(pt(p),s)];else{if((s=e.filter[t[c].type].apply(null,t[c].matches))[v]){for(o=++c;o<r&&!e.relative[t[o].type];o++);return gt(c>1&&pt(p),c>1&&ut(t.slice(0,c-1).concat({value:" "===t[c-2].type?"*":""})).replace(M,"$1"),s,c<o&&mt(t.slice(c,o)),o<r&&mt(t=t.slice(o)),o<r&&ut(t))}p.push(s)}return pt(p)}function vt(t,n){var s,o=[],r=[],a=x[t+" "];if(!a){for(n||(n=ht(t)),s=n.length;s--;)(a=mt(n[s]))[v]?o.push(a):r.push(a);a=x(t,function(t,n){var s=n.length>0,o=t.length>0,r=function(r,a,c,h,d){var p,f,m,v=0,y="0",b=r&&[],w=[],x=i,k=r||o&&e.find.TAG("*",d),C=_+=null==x?1:Math.random()||.1,T=k.length;for(d&&(i=a==l||a||d);y!==T&&null!=(p=k[y]);y++){if(o&&p){for(f=0,a||p.ownerDocument==l||(lt(p),c=!u);m=t[f++];)if(m(p,a||l,c)){g.call(h,p);break}d&&(_=C)}s&&((p=!m&&p)&&v--,r&&b.push(p))}if(v+=y,s&&y!==v){for(f=0;m=n[f++];)m(b,w,a,c);if(r){if(v>0)for(;y--;)b[y]||w[y]||(w[y]=S.call(h));w=ft(w)}g.apply(h,w),d&&!r&&w.length>0&&v+n.length>1&&D.uniqueSort(h)}return d&&(_=C,i=x),b};return s?et(r):r}(r,o)),a.selector=t}return a}function _t(t,i,n,s){var o,r,a,l,c,h="function"==typeof t&&t,d=!s&&ht(t=h.selector||t);if(n=n||[],1===d.length){if((r=d[0]=d[0].slice(0)).length>2&&"ID"===(a=r[0]).type&&9===i.nodeType&&u&&e.relative[r[1].type]){if(!(i=(e.find.ID(a.matches[0].replace(G,X),i)||[])[0]))return n;h&&(i=i.parentNode),t=t.slice(r.shift().value.length)}for(o=Y.needsContext.test(t)?0:r.length;o--&&(a=r[o],!e.relative[l=a.type]);)if((c=e.find[l])&&(s=c(a.matches[0].replace(G,X),$.test(r[0].type)&&at(i.parentNode)||i))){if(r.splice(o,1),!(t=s.length&&ut(r)))return g.apply(n,s),n;break}}return(h||vt(t,d))(s,i,!u,n,!i||$.test(t)&&at(i.parentNode)||i),n}ct.prototype=e.filters=e.pseudos,e.setFilters=new ct,m.sortStable=v.split("").sort(C).join("")===v,lt(),m.sortDetached=it((function(t){return 1&t.compareDocumentPosition(l.createElement("fieldset"))})),D.find=Q,D.expr[":"]=D.expr.pseudos,D.unique=D.uniqueSort,Q.compile=vt,Q.select=_t,Q.setDocument=lt,Q.tokenize=ht,Q.escape=D.escapeSelector,Q.getText=D.text,Q.isXML=D.isXMLDoc,Q.selectors=D.expr,Q.support=D.support,Q.uniqueSort=D.uniqueSort}();var z=function(t,e,i){for(var n=[],s=void 0!==i;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(s&&D(t).is(i))break;n.push(t)}return n},W=function(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i},R=D.expr.match.needsContext,F=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function L(t,e,i){return v(e)?D.grep(t,(function(t,n){return!!e.call(t,n,t)!==i})):e.nodeType?D.grep(t,(function(t){return t===e!==i})):"string"!=typeof e?D.grep(t,(function(t){return h.call(e,t)>-1!==i})):D.filter(e,t,i)}D.filter=function(t,e,i){var n=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===n.nodeType?D.find.matchesSelector(n,t)?[n]:[]:D.find.matches(t,D.grep(e,(function(t){return 1===t.nodeType})))},D.fn.extend({find:function(t){var e,i,n=this.length,s=this;if("string"!=typeof t)return this.pushStack(D(t).filter((function(){for(e=0;e<n;e++)if(D.contains(s[e],this))return!0})));for(i=this.pushStack([]),e=0;e<n;e++)D.find(t,s[e],i);return n>1?D.uniqueSort(i):i},filter:function(t){return this.pushStack(L(this,t||[],!1))},not:function(t){return this.pushStack(L(this,t||[],!0))},is:function(t){return!!L(this,"string"==typeof t&&R.test(t)?D(t):t||[],!1).length}});var q,B=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(D.fn.init=function(t,e,i){var n,s;if(!t)return this;if(i=i||q,"string"==typeof t){if(!(n="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:B.exec(t))||!n[1]&&e)return!e||e.jquery?(e||i).find(t):this.constructor(e).find(t);if(n[1]){if(e=e instanceof D?e[0]:e,D.merge(this,D.parseHTML(n[1],e&&e.nodeType?e.ownerDocument||e:y,!0)),F.test(n[1])&&D.isPlainObject(e))for(n in e)v(this[n])?this[n](e[n]):this.attr(n,e[n]);return this}return(s=y.getElementById(n[2]))&&(this[0]=s,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):v(t)?void 0!==i.ready?i.ready(t):t(D):D.makeArray(t,this)}).prototype=D.fn,q=D(y);var Y=/^(?:parents|prev(?:Until|All))/,U={children:!0,contents:!0,next:!0,prev:!0};function V(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}D.fn.extend({has:function(t){var e=D(t,this),i=e.length;return this.filter((function(){for(var t=0;t<i;t++)if(D.contains(this,e[t]))return!0}))},closest:function(t,e){var i,n=0,s=this.length,o=[],r="string"!=typeof t&&D(t);if(!R.test(t))for(;n<s;n++)for(i=this[n];i&&i!==e;i=i.parentNode)if(i.nodeType<11&&(r?r.index(i)>-1:1===i.nodeType&&D.find.matchesSelector(i,t))){o.push(i);break}return this.pushStack(o.length>1?D.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?h.call(D(t),this[0]):h.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(D.uniqueSort(D.merge(this.get(),D(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),D.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return z(t,"parentNode")},parentsUntil:function(t,e,i){return z(t,"parentNode",i)},next:function(t){return V(t,"nextSibling")},prev:function(t){return V(t,"previousSibling")},nextAll:function(t){return z(t,"nextSibling")},prevAll:function(t){return z(t,"previousSibling")},nextUntil:function(t,e,i){return z(t,"nextSibling",i)},prevUntil:function(t,e,i){return z(t,"previousSibling",i)},siblings:function(t){return W((t.parentNode||{}).firstChild,t)},children:function(t){return W(t.firstChild)},contents:function(t){return null!=t.contentDocument&&r(t.contentDocument)?t.contentDocument:(A(t,"template")&&(t=t.content||t),D.merge([],t.childNodes))}},(function(t,e){D.fn[t]=function(i,n){var s=D.map(this,e,i);return"Until"!==t.slice(-5)&&(n=i),n&&"string"==typeof n&&(s=D.filter(n,s)),this.length>1&&(U[t]||D.uniqueSort(s),Y.test(t)&&s.reverse()),this.pushStack(s)}}));var K=/[^\x20\t\r\n\f]+/g;function $(t){return t}function G(t){throw t}function X(t,e,i,n){var s;try{t&&v(s=t.promise)?s.call(t).done(e).fail(i):t&&v(s=t.then)?s.call(t,e,i):e.apply(void 0,[t].slice(n))}catch(t){i.apply(void 0,[t])}}D.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return D.each(t.match(K)||[],(function(t,i){e[i]=!0})),e}(t):D.extend({},t);var e,i,n,s,o=[],r=[],a=-1,l=function(){for(s=s||t.once,n=e=!0;r.length;a=-1)for(i=r.shift();++a<o.length;)!1===o[a].apply(i[0],i[1])&&t.stopOnFalse&&(a=o.length,i=!1);t.memory||(i=!1),e=!1,s&&(o=i?[]:"")},c={add:function(){return o&&(i&&!e&&(a=o.length-1,r.push(i)),function e(i){D.each(i,(function(i,n){v(n)?t.unique&&c.has(n)||o.push(n):n&&n.length&&"string"!==x(n)&&e(n)}))}(arguments),i&&!e&&l()),this},remove:function(){return D.each(arguments,(function(t,e){for(var i;(i=D.inArray(e,o,i))>-1;)o.splice(i,1),i<=a&&a--})),this},has:function(t){return t?D.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return s=r=[],o=i="",this},disabled:function(){return!o},lock:function(){return s=r=[],i||e||(o=i=""),this},locked:function(){return!!s},fireWith:function(t,i){return s||(i=[t,(i=i||[]).slice?i.slice():i],r.push(i),e||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!n}};return c},D.extend({Deferred:function(t){var e=[["notify","progress",D.Callbacks("memory"),D.Callbacks("memory"),2],["resolve","done",D.Callbacks("once memory"),D.Callbacks("once memory"),0,"resolved"],["reject","fail",D.Callbacks("once memory"),D.Callbacks("once memory"),1,"rejected"]],i="pending",s={state:function(){return i},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return s.then(null,t)},pipe:function(){var t=arguments;return D.Deferred((function(i){D.each(e,(function(e,n){var s=v(t[n[4]])&&t[n[4]];o[n[1]]((function(){var t=s&&s.apply(this,arguments);t&&v(t.promise)?t.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[n[0]+"With"](this,s?[t]:arguments)}))})),t=null})).promise()},then:function(t,i,s){var o=0;function r(t,e,i,s){return function(){var a=this,l=arguments,c=function(){var n,c;if(!(t<o)){if((n=i.apply(a,l))===e.promise())throw new TypeError("Thenable self-resolution");c=n&&("object"==typeof n||"function"==typeof n)&&n.then,v(c)?s?c.call(n,r(o,e,$,s),r(o,e,G,s)):(o++,c.call(n,r(o,e,$,s),r(o,e,G,s),r(o,e,$,e.notifyWith))):(i!==$&&(a=void 0,l=[n]),(s||e.resolveWith)(a,l))}},h=s?c:function(){try{c()}catch(n){D.Deferred.exceptionHook&&D.Deferred.exceptionHook(n,h.error),t+1>=o&&(i!==G&&(a=void 0,l=[n]),e.rejectWith(a,l))}};t?h():(D.Deferred.getErrorHook?h.error=D.Deferred.getErrorHook():D.Deferred.getStackHook&&(h.error=D.Deferred.getStackHook()),n.setTimeout(h))}}return D.Deferred((function(n){e[0][3].add(r(0,n,v(s)?s:$,n.notifyWith)),e[1][3].add(r(0,n,v(t)?t:$)),e[2][3].add(r(0,n,v(i)?i:G))})).promise()},promise:function(t){return null!=t?D.extend(t,s):s}},o={};return D.each(e,(function(t,n){var r=n[2],a=n[5];s[n[1]]=r.add,a&&r.add((function(){i=a}),e[3-t][2].disable,e[3-t][3].disable,e[0][2].lock,e[0][3].lock),r.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=r.fireWith})),s.promise(o),t&&t.call(o,o),o},when:function(t){var e=arguments.length,i=e,n=Array(i),s=a.call(arguments),o=D.Deferred(),r=function(t){return function(i){n[t]=this,s[t]=arguments.length>1?a.call(arguments):i,--e||o.resolveWith(n,s)}};if(e<=1&&(X(t,o.done(r(i)).resolve,o.reject,!e),"pending"===o.state()||v(s[i]&&s[i].then)))return o.then();for(;i--;)X(s[i],r(i),o.reject);return o.promise()}});var Z=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;D.Deferred.exceptionHook=function(t,e){n.console&&n.console.warn&&t&&Z.test(t.name)&&n.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},D.readyException=function(t){n.setTimeout((function(){throw t}))};var J=D.Deferred();function Q(){y.removeEventListener("DOMContentLoaded",Q),n.removeEventListener("load",Q),D.ready()}D.fn.ready=function(t){return J.then(t).catch((function(t){D.readyException(t)})),this},D.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--D.readyWait:D.isReady)||(D.isReady=!0,!0!==t&&--D.readyWait>0||J.resolveWith(y,[D]))}}),D.ready.then=J.then,"complete"===y.readyState||"loading"!==y.readyState&&!y.documentElement.doScroll?n.setTimeout(D.ready):(y.addEventListener("DOMContentLoaded",Q),n.addEventListener("load",Q));var tt=function(t,e,i,n,s,o,r){var a=0,l=t.length,c=null==i;if("object"===x(i))for(a in s=!0,i)tt(t,e,a,i[a],!0,o,r);else if(void 0!==n&&(s=!0,v(n)||(r=!0),c&&(r?(e.call(t,n),e=null):(c=e,e=function(t,e,i){return c.call(D(t),i)})),e))for(;a<l;a++)e(t[a],i,r?n:n.call(t[a],a,e(t[a],i)));return s?t:c?e.call(t):l?e(t[0],i):o},et=/^-ms-/,it=/-([a-z])/g;function nt(t,e){return e.toUpperCase()}function st(t){return t.replace(et,"ms-").replace(it,nt)}var ot=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function rt(){this.expando=D.expando+rt.uid++}rt.uid=1,rt.prototype={cache:function(t){var e=t[this.expando];return e||(e={},ot(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,i){var n,s=this.cache(t);if("string"==typeof e)s[st(e)]=i;else for(n in e)s[st(n)]=e[n];return s},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][st(e)]},access:function(t,e,i){return void 0===e||e&&"string"==typeof e&&void 0===i?this.get(t,e):(this.set(t,e,i),void 0!==i?i:e)},remove:function(t,e){var i,n=t[this.expando];if(void 0!==n){if(void 0!==e){i=(e=Array.isArray(e)?e.map(st):(e=st(e))in n?[e]:e.match(K)||[]).length;for(;i--;)delete n[e[i]]}(void 0===e||D.isEmptyObject(n))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!D.isEmptyObject(e)}};var at=new rt,lt=new rt,ct=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ht=/[A-Z]/g;function ut(t,e,i){var n;if(void 0===i&&1===t.nodeType)if(n="data-"+e.replace(ht,"-$&").toLowerCase(),"string"==typeof(i=t.getAttribute(n))){try{i=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:ct.test(t)?JSON.parse(t):t)}(i)}catch(t){}lt.set(t,e,i)}else i=void 0;return i}D.extend({hasData:function(t){return lt.hasData(t)||at.hasData(t)},data:function(t,e,i){return lt.access(t,e,i)},removeData:function(t,e){lt.remove(t,e)},_data:function(t,e,i){return at.access(t,e,i)},_removeData:function(t,e){at.remove(t,e)}}),D.fn.extend({data:function(t,e){var i,n,s,o=this[0],r=o&&o.attributes;if(void 0===t){if(this.length&&(s=lt.get(o),1===o.nodeType&&!at.get(o,"hasDataAttrs"))){for(i=r.length;i--;)r[i]&&0===(n=r[i].name).indexOf("data-")&&(n=st(n.slice(5)),ut(o,n,s[n]));at.set(o,"hasDataAttrs",!0)}return s}return"object"==typeof t?this.each((function(){lt.set(this,t)})):tt(this,(function(e){var i;if(o&&void 0===e)return void 0!==(i=lt.get(o,t))||void 0!==(i=ut(o,t))?i:void 0;this.each((function(){lt.set(this,t,e)}))}),null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each((function(){lt.remove(this,t)}))}}),D.extend({queue:function(t,e,i){var n;if(t)return e=(e||"fx")+"queue",n=at.get(t,e),i&&(!n||Array.isArray(i)?n=at.access(t,e,D.makeArray(i)):n.push(i)),n||[]},dequeue:function(t,e){e=e||"fx";var i=D.queue(t,e),n=i.length,s=i.shift(),o=D._queueHooks(t,e);"inprogress"===s&&(s=i.shift(),n--),s&&("fx"===e&&i.unshift("inprogress"),delete o.stop,s.call(t,(function(){D.dequeue(t,e)}),o)),!n&&o&&o.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return at.get(t,i)||at.access(t,i,{empty:D.Callbacks("once memory").add((function(){at.remove(t,[e+"queue",i])}))})}}),D.fn.extend({queue:function(t,e){var i=2;return"string"!=typeof t&&(e=t,t="fx",i--),arguments.length<i?D.queue(this[0],t):void 0===e?this:this.each((function(){var i=D.queue(this,t,e);D._queueHooks(this,t),"fx"===t&&"inprogress"!==i[0]&&D.dequeue(this,t)}))},dequeue:function(t){return this.each((function(){D.dequeue(this,t)}))},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var i,n=1,s=D.Deferred(),o=this,r=this.length,a=function(){--n||s.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";r--;)(i=at.get(o[r],t+"queueHooks"))&&i.empty&&(n++,i.empty.add(a));return a(),s.promise(e)}});var dt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,pt=new RegExp("^(?:([+-])=|)("+dt+")([a-z%]*)$","i"),ft=["Top","Right","Bottom","Left"],gt=y.documentElement,mt=function(t){return D.contains(t.ownerDocument,t)},vt={composed:!0};gt.getRootNode&&(mt=function(t){return D.contains(t.ownerDocument,t)||t.getRootNode(vt)===t.ownerDocument});var _t=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&mt(t)&&"none"===D.css(t,"display")};function yt(t,e,i,n){var s,o,r=20,a=n?function(){return n.cur()}:function(){return D.css(t,e,"")},l=a(),c=i&&i[3]||(D.cssNumber[e]?"":"px"),h=t.nodeType&&(D.cssNumber[e]||"px"!==c&&+l)&&pt.exec(D.css(t,e));if(h&&h[3]!==c){for(l/=2,c=c||h[3],h=+l||1;r--;)D.style(t,e,h+c),(1-o)*(1-(o=a()/l||.5))<=0&&(r=0),h/=o;h*=2,D.style(t,e,h+c),i=i||[]}return i&&(h=+h||+l||0,s=i[1]?h+(i[1]+1)*i[2]:+i[2],n&&(n.unit=c,n.start=h,n.end=s)),s}var bt={};function wt(t){var e,i=t.ownerDocument,n=t.nodeName,s=bt[n];return s||(e=i.body.appendChild(i.createElement(n)),s=D.css(e,"display"),e.parentNode.removeChild(e),"none"===s&&(s="block"),bt[n]=s,s)}function xt(t,e){for(var i,n,s=[],o=0,r=t.length;o<r;o++)(n=t[o]).style&&(i=n.style.display,e?("none"===i&&(s[o]=at.get(n,"display")||null,s[o]||(n.style.display="")),""===n.style.display&&_t(n)&&(s[o]=wt(n))):"none"!==i&&(s[o]="none",at.set(n,"display",i)));for(o=0;o<r;o++)null!=s[o]&&(t[o].style.display=s[o]);return t}D.fn.extend({show:function(){return xt(this,!0)},hide:function(){return xt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each((function(){_t(this)?D(this).show():D(this).hide()}))}});var kt,Ct,Dt=/^(?:checkbox|radio)$/i,Tt=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,At=/^$|^module$|\/(?:java|ecma)script/i;kt=y.createDocumentFragment().appendChild(y.createElement("div")),(Ct=y.createElement("input")).setAttribute("type","radio"),Ct.setAttribute("checked","checked"),Ct.setAttribute("name","t"),kt.appendChild(Ct),m.checkClone=kt.cloneNode(!0).cloneNode(!0).lastChild.checked,kt.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!kt.cloneNode(!0).lastChild.defaultValue,kt.innerHTML="<option></option>",m.option=!!kt.lastChild;var St={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function It(t,e){var i;return i=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&A(t,e)?D.merge([t],i):i}function Pt(t,e){for(var i=0,n=t.length;i<n;i++)at.set(t[i],"globalEval",!e||at.get(e[i],"globalEval"))}St.tbody=St.tfoot=St.colgroup=St.caption=St.thead,St.th=St.td,m.option||(St.optgroup=St.option=[1,"<select multiple='multiple'>","</select>"]);var Et=/<|&#?\w+;/;function Mt(t,e,i,n,s){for(var o,r,a,l,c,h,u=e.createDocumentFragment(),d=[],p=0,f=t.length;p<f;p++)if((o=t[p])||0===o)if("object"===x(o))D.merge(d,o.nodeType?[o]:o);else if(Et.test(o)){for(r=r||u.appendChild(e.createElement("div")),a=(Tt.exec(o)||["",""])[1].toLowerCase(),l=St[a]||St._default,r.innerHTML=l[1]+D.htmlPrefilter(o)+l[2],h=l[0];h--;)r=r.lastChild;D.merge(d,r.childNodes),(r=u.firstChild).textContent=""}else d.push(e.createTextNode(o));for(u.textContent="",p=0;o=d[p++];)if(n&&D.inArray(o,n)>-1)s&&s.push(o);else if(c=mt(o),r=It(u.appendChild(o),"script"),c&&Pt(r),i)for(h=0;o=r[h++];)At.test(o.type||"")&&i.push(o);return u}var Ot=/^([^.]*)(?:\.(.+)|)/;function Nt(){return!0}function Ht(){return!1}function jt(t,e,i,n,s,o){var r,a;if("object"==typeof e){for(a in"string"!=typeof i&&(n=n||i,i=void 0),e)jt(t,a,i,n,e[a],o);return t}if(null==n&&null==s?(s=i,n=i=void 0):null==s&&("string"==typeof i?(s=n,n=void 0):(s=n,n=i,i=void 0)),!1===s)s=Ht;else if(!s)return t;return 1===o&&(r=s,s=function(t){return D().off(t),r.apply(this,arguments)},s.guid=r.guid||(r.guid=D.guid++)),t.each((function(){D.event.add(this,e,s,n,i)}))}function zt(t,e,i){i?(at.set(t,e,!1),D.event.add(t,e,{namespace:!1,handler:function(t){var i,n=at.get(this,e);if(1&t.isTrigger&&this[e]){if(n)(D.event.special[e]||{}).delegateType&&t.stopPropagation();else if(n=a.call(arguments),at.set(this,e,n),this[e](),i=at.get(this,e),at.set(this,e,!1),n!==i)return t.stopImmediatePropagation(),t.preventDefault(),i}else n&&(at.set(this,e,D.event.trigger(n[0],n.slice(1),this)),t.stopPropagation(),t.isImmediatePropagationStopped=Nt)}})):void 0===at.get(t,e)&&D.event.add(t,e,Nt)}D.event={global:{},add:function(t,e,i,n,s){var o,r,a,l,c,h,u,d,p,f,g,m=at.get(t);if(ot(t))for(i.handler&&(i=(o=i).handler,s=o.selector),s&&D.find.matchesSelector(gt,s),i.guid||(i.guid=D.guid++),(l=m.events)||(l=m.events=Object.create(null)),(r=m.handle)||(r=m.handle=function(e){return void 0!==D&&D.event.triggered!==e.type?D.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(K)||[""]).length;c--;)p=g=(a=Ot.exec(e[c])||[])[1],f=(a[2]||"").split(".").sort(),p&&(u=D.event.special[p]||{},p=(s?u.delegateType:u.bindType)||p,u=D.event.special[p]||{},h=D.extend({type:p,origType:g,data:n,handler:i,guid:i.guid,selector:s,needsContext:s&&D.expr.match.needsContext.test(s),namespace:f.join(".")},o),(d=l[p])||((d=l[p]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(t,n,f,r)||t.addEventListener&&t.addEventListener(p,r)),u.add&&(u.add.call(t,h),h.handler.guid||(h.handler.guid=i.guid)),s?d.splice(d.delegateCount++,0,h):d.push(h),D.event.global[p]=!0)},remove:function(t,e,i,n,s){var o,r,a,l,c,h,u,d,p,f,g,m=at.hasData(t)&&at.get(t);if(m&&(l=m.events)){for(c=(e=(e||"").match(K)||[""]).length;c--;)if(p=g=(a=Ot.exec(e[c])||[])[1],f=(a[2]||"").split(".").sort(),p){for(u=D.event.special[p]||{},d=l[p=(n?u.delegateType:u.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),r=o=d.length;o--;)h=d[o],!s&&g!==h.origType||i&&i.guid!==h.guid||a&&!a.test(h.namespace)||n&&n!==h.selector&&("**"!==n||!h.selector)||(d.splice(o,1),h.selector&&d.delegateCount--,u.remove&&u.remove.call(t,h));r&&!d.length&&(u.teardown&&!1!==u.teardown.call(t,f,m.handle)||D.removeEvent(t,p,m.handle),delete l[p])}else for(p in l)D.event.remove(t,p+e[c],i,n,!0);D.isEmptyObject(l)&&at.remove(t,"handle events")}},dispatch:function(t){var e,i,n,s,o,r,a=new Array(arguments.length),l=D.event.fix(t),c=(at.get(this,"events")||Object.create(null))[l.type]||[],h=D.event.special[l.type]||{};for(a[0]=l,e=1;e<arguments.length;e++)a[e]=arguments[e];if(l.delegateTarget=this,!h.preDispatch||!1!==h.preDispatch.call(this,l)){for(r=D.event.handlers.call(this,l,c),e=0;(s=r[e++])&&!l.isPropagationStopped();)for(l.currentTarget=s.elem,i=0;(o=s.handlers[i++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==o.namespace&&!l.rnamespace.test(o.namespace)||(l.handleObj=o,l.data=o.data,void 0!==(n=((D.event.special[o.origType]||{}).handle||o.handler).apply(s.elem,a))&&!1===(l.result=n)&&(l.preventDefault(),l.stopPropagation()));return h.postDispatch&&h.postDispatch.call(this,l),l.result}},handlers:function(t,e){var i,n,s,o,r,a=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&t.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(o=[],r={},i=0;i<l;i++)void 0===r[s=(n=e[i]).selector+" "]&&(r[s]=n.needsContext?D(s,this).index(c)>-1:D.find(s,this,null,[c]).length),r[s]&&o.push(n);o.length&&a.push({elem:c,handlers:o})}return c=this,l<e.length&&a.push({elem:c,handlers:e.slice(l)}),a},addProp:function(t,e){Object.defineProperty(D.Event.prototype,t,{enumerable:!0,configurable:!0,get:v(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[D.expando]?t:new D.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return Dt.test(e.type)&&e.click&&A(e,"input")&&zt(e,"click",!0),!1},trigger:function(t){var e=this||t;return Dt.test(e.type)&&e.click&&A(e,"input")&&zt(e,"click"),!0},_default:function(t){var e=t.target;return Dt.test(e.type)&&e.click&&A(e,"input")&&at.get(e,"click")||A(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},D.removeEvent=function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i)},D.Event=function(t,e){if(!(this instanceof D.Event))return new D.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?Nt:Ht,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&D.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[D.expando]=!0},D.Event.prototype={constructor:D.Event,isDefaultPrevented:Ht,isPropagationStopped:Ht,isImmediatePropagationStopped:Ht,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=Nt,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=Nt,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=Nt,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},D.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},D.event.addProp),D.each({focus:"focusin",blur:"focusout"},(function(t,e){function i(t){if(y.documentMode){var i=at.get(this,"handle"),n=D.event.fix(t);n.type="focusin"===t.type?"focus":"blur",n.isSimulated=!0,i(t),n.target===n.currentTarget&&i(n)}else D.event.simulate(e,t.target,D.event.fix(t))}D.event.special[t]={setup:function(){var n;if(zt(this,t,!0),!y.documentMode)return!1;(n=at.get(this,e))||this.addEventListener(e,i),at.set(this,e,(n||0)+1)},trigger:function(){return zt(this,t),!0},teardown:function(){var t;if(!y.documentMode)return!1;(t=at.get(this,e)-1)?at.set(this,e,t):(this.removeEventListener(e,i),at.remove(this,e))},_default:function(e){return at.get(e.target,t)},delegateType:e},D.event.special[e]={setup:function(){var n=this.ownerDocument||this.document||this,s=y.documentMode?this:n,o=at.get(s,e);o||(y.documentMode?this.addEventListener(e,i):n.addEventListener(t,i,!0)),at.set(s,e,(o||0)+1)},teardown:function(){var n=this.ownerDocument||this.document||this,s=y.documentMode?this:n,o=at.get(s,e)-1;o?at.set(s,e,o):(y.documentMode?this.removeEventListener(e,i):n.removeEventListener(t,i,!0),at.remove(s,e))}}})),D.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(t,e){D.event.special[t]={delegateType:e,bindType:e,handle:function(t){var i,n=t.relatedTarget,s=t.handleObj;return n&&(n===this||D.contains(this,n))||(t.type=s.origType,i=s.handler.apply(this,arguments),t.type=e),i}}})),D.fn.extend({on:function(t,e,i,n){return jt(this,t,e,i,n)},one:function(t,e,i,n){return jt(this,t,e,i,n,1)},off:function(t,e,i){var n,s;if(t&&t.preventDefault&&t.handleObj)return n=t.handleObj,D(t.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof t){for(s in t)this.off(s,e,t[s]);return this}return!1!==e&&"function"!=typeof e||(i=e,e=void 0),!1===i&&(i=Ht),this.each((function(){D.event.remove(this,t,i,e)}))}});var Wt=/<script|<style|<link/i,Rt=/checked\s*(?:[^=]|=\s*.checked.)/i,Ft=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function Lt(t,e){return A(t,"table")&&A(11!==e.nodeType?e:e.firstChild,"tr")&&D(t).children("tbody")[0]||t}function qt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Bt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Yt(t,e){var i,n,s,o,r,a;if(1===e.nodeType){if(at.hasData(t)&&(a=at.get(t).events))for(s in at.remove(e,"handle events"),a)for(i=0,n=a[s].length;i<n;i++)D.event.add(e,s,a[s][i]);lt.hasData(t)&&(o=lt.access(t),r=D.extend({},o),lt.set(e,r))}}function Ut(t,e){var i=e.nodeName.toLowerCase();"input"===i&&Dt.test(t.type)?e.checked=t.checked:"input"!==i&&"textarea"!==i||(e.defaultValue=t.defaultValue)}function Vt(t,e,i,n){e=l(e);var s,o,r,a,c,h,u=0,d=t.length,p=d-1,f=e[0],g=v(f);if(g||d>1&&"string"==typeof f&&!m.checkClone&&Rt.test(f))return t.each((function(s){var o=t.eq(s);g&&(e[0]=f.call(this,s,o.html())),Vt(o,e,i,n)}));if(d&&(o=(s=Mt(e,t[0].ownerDocument,!1,t,n)).firstChild,1===s.childNodes.length&&(s=o),o||n)){for(a=(r=D.map(It(s,"script"),qt)).length;u<d;u++)c=s,u!==p&&(c=D.clone(c,!0,!0),a&&D.merge(r,It(c,"script"))),i.call(t[u],c,u);if(a)for(h=r[r.length-1].ownerDocument,D.map(r,Bt),u=0;u<a;u++)c=r[u],At.test(c.type||"")&&!at.access(c,"globalEval")&&D.contains(h,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?D._evalUrl&&!c.noModule&&D._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},h):w(c.textContent.replace(Ft,""),c,h))}return t}function Kt(t,e,i){for(var n,s=e?D.filter(e,t):t,o=0;null!=(n=s[o]);o++)i||1!==n.nodeType||D.cleanData(It(n)),n.parentNode&&(i&&mt(n)&&Pt(It(n,"script")),n.parentNode.removeChild(n));return t}D.extend({htmlPrefilter:function(t){return t},clone:function(t,e,i){var n,s,o,r,a=t.cloneNode(!0),l=mt(t);if(!(m.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||D.isXMLDoc(t)))for(r=It(a),n=0,s=(o=It(t)).length;n<s;n++)Ut(o[n],r[n]);if(e)if(i)for(o=o||It(t),r=r||It(a),n=0,s=o.length;n<s;n++)Yt(o[n],r[n]);else Yt(t,a);return(r=It(a,"script")).length>0&&Pt(r,!l&&It(t,"script")),a},cleanData:function(t){for(var e,i,n,s=D.event.special,o=0;void 0!==(i=t[o]);o++)if(ot(i)){if(e=i[at.expando]){if(e.events)for(n in e.events)s[n]?D.event.remove(i,n):D.removeEvent(i,n,e.handle);i[at.expando]=void 0}i[lt.expando]&&(i[lt.expando]=void 0)}}}),D.fn.extend({detach:function(t){return Kt(this,t,!0)},remove:function(t){return Kt(this,t)},text:function(t){return tt(this,(function(t){return void 0===t?D.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)}))}),null,t,arguments.length)},append:function(){return Vt(this,arguments,(function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Lt(this,t).appendChild(t)}))},prepend:function(){return Vt(this,arguments,(function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=Lt(this,t);e.insertBefore(t,e.firstChild)}}))},before:function(){return Vt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this)}))},after:function(){return Vt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)}))},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(D.cleanData(It(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map((function(){return D.clone(this,t,e)}))},html:function(t){return tt(this,(function(t){var e=this[0]||{},i=0,n=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Wt.test(t)&&!St[(Tt.exec(t)||["",""])[1].toLowerCase()]){t=D.htmlPrefilter(t);try{for(;i<n;i++)1===(e=this[i]||{}).nodeType&&(D.cleanData(It(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)}),null,t,arguments.length)},replaceWith:function(){var t=[];return Vt(this,arguments,(function(e){var i=this.parentNode;D.inArray(this,t)<0&&(D.cleanData(It(this)),i&&i.replaceChild(e,this))}),t)}}),D.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(t,e){D.fn[t]=function(t){for(var i,n=[],s=D(t),o=s.length-1,r=0;r<=o;r++)i=r===o?this:this.clone(!0),D(s[r])[e](i),c.apply(n,i.get());return this.pushStack(n)}}));var $t=new RegExp("^("+dt+")(?!px)[a-z%]+$","i"),Gt=/^--/,Xt=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=n),e.getComputedStyle(t)},Zt=function(t,e,i){var n,s,o={};for(s in e)o[s]=t.style[s],t.style[s]=e[s];for(s in n=i.call(t),e)t.style[s]=o[s];return n},Jt=new RegExp(ft.join("|"),"i");function Qt(t,e,i){var n,s,o,r,a=Gt.test(e),l=t.style;return(i=i||Xt(t))&&(r=i.getPropertyValue(e)||i[e],a&&r&&(r=r.replace(M,"$1")||void 0),""!==r||mt(t)||(r=D.style(t,e)),!m.pixelBoxStyles()&&$t.test(r)&&Jt.test(e)&&(n=l.width,s=l.minWidth,o=l.maxWidth,l.minWidth=l.maxWidth=l.width=r,r=i.width,l.width=n,l.minWidth=s,l.maxWidth=o)),void 0!==r?r+"":r}function te(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(h){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",h.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",gt.appendChild(c).appendChild(h);var t=n.getComputedStyle(h);i="1%"!==t.top,l=12===e(t.marginLeft),h.style.right="60%",r=36===e(t.right),s=36===e(t.width),h.style.position="absolute",o=12===e(h.offsetWidth/3),gt.removeChild(c),h=null}}function e(t){return Math.round(parseFloat(t))}var i,s,o,r,a,l,c=y.createElement("div"),h=y.createElement("div");h.style&&(h.style.backgroundClip="content-box",h.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===h.style.backgroundClip,D.extend(m,{boxSizingReliable:function(){return t(),s},pixelBoxStyles:function(){return t(),r},pixelPosition:function(){return t(),i},reliableMarginLeft:function(){return t(),l},scrollboxSize:function(){return t(),o},reliableTrDimensions:function(){var t,e,i,s;return null==a&&(t=y.createElement("table"),e=y.createElement("tr"),i=y.createElement("div"),t.style.cssText="position:absolute;left:-11111px;border-collapse:separate",e.style.cssText="box-sizing:content-box;border:1px solid",e.style.height="1px",i.style.height="9px",i.style.display="block",gt.appendChild(t).appendChild(e).appendChild(i),s=n.getComputedStyle(e),a=parseInt(s.height,10)+parseInt(s.borderTopWidth,10)+parseInt(s.borderBottomWidth,10)===e.offsetHeight,gt.removeChild(t)),a}}))}();var ee=["Webkit","Moz","ms"],ie=y.createElement("div").style,ne={};function se(t){return D.cssProps[t]||ne[t]||(t in ie?t:ne[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),i=ee.length;i--;)if((t=ee[i]+e)in ie)return t}(t)||t)}var oe=/^(none|table(?!-c[ea]).+)/,re={position:"absolute",visibility:"hidden",display:"block"},ae={letterSpacing:"0",fontWeight:"400"};function le(t,e,i){var n=pt.exec(e);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):e}function ce(t,e,i,n,s,o){var r="width"===e?1:0,a=0,l=0,c=0;if(i===(n?"border":"content"))return 0;for(;r<4;r+=2)"margin"===i&&(c+=D.css(t,i+ft[r],!0,s)),n?("content"===i&&(l-=D.css(t,"padding"+ft[r],!0,s)),"margin"!==i&&(l-=D.css(t,"border"+ft[r]+"Width",!0,s))):(l+=D.css(t,"padding"+ft[r],!0,s),"padding"!==i?l+=D.css(t,"border"+ft[r]+"Width",!0,s):a+=D.css(t,"border"+ft[r]+"Width",!0,s));return!n&&o>=0&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-o-l-a-.5))||0),l+c}function he(t,e,i){var n=Xt(t),s=(!m.boxSizingReliable()||i)&&"border-box"===D.css(t,"boxSizing",!1,n),o=s,r=Qt(t,e,n),a="offset"+e[0].toUpperCase()+e.slice(1);if($t.test(r)){if(!i)return r;r="auto"}return(!m.boxSizingReliable()&&s||!m.reliableTrDimensions()&&A(t,"tr")||"auto"===r||!parseFloat(r)&&"inline"===D.css(t,"display",!1,n))&&t.getClientRects().length&&(s="border-box"===D.css(t,"boxSizing",!1,n),(o=a in t)&&(r=t[a])),(r=parseFloat(r)||0)+ce(t,e,i||(s?"border":"content"),o,n,r)+"px"}function ue(t,e,i,n,s){return new ue.prototype.init(t,e,i,n,s)}D.extend({cssHooks:{opacity:{get:function(t,e){if(e){var i=Qt(t,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,aspectRatio:!0,borderImageSlice:!0,columnCount:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,scale:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeMiterlimit:!0,strokeOpacity:!0},cssProps:{},style:function(t,e,i,n){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var s,o,r,a=st(e),l=Gt.test(e),c=t.style;if(l||(e=se(a)),r=D.cssHooks[e]||D.cssHooks[a],void 0===i)return r&&"get"in r&&void 0!==(s=r.get(t,!1,n))?s:c[e];"string"==(o=typeof i)&&(s=pt.exec(i))&&s[1]&&(i=yt(t,e,s),o="number"),null!=i&&i==i&&("number"!==o||l||(i+=s&&s[3]||(D.cssNumber[a]?"":"px")),m.clearCloneStyle||""!==i||0!==e.indexOf("background")||(c[e]="inherit"),r&&"set"in r&&void 0===(i=r.set(t,i,n))||(l?c.setProperty(e,i):c[e]=i))}},css:function(t,e,i,n){var s,o,r,a=st(e);return Gt.test(e)||(e=se(a)),(r=D.cssHooks[e]||D.cssHooks[a])&&"get"in r&&(s=r.get(t,!0,i)),void 0===s&&(s=Qt(t,e,n)),"normal"===s&&e in ae&&(s=ae[e]),""===i||i?(o=parseFloat(s),!0===i||isFinite(o)?o||0:s):s}}),D.each(["height","width"],(function(t,e){D.cssHooks[e]={get:function(t,i,n){if(i)return!oe.test(D.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?he(t,e,n):Zt(t,re,(function(){return he(t,e,n)}))},set:function(t,i,n){var s,o=Xt(t),r=!m.scrollboxSize()&&"absolute"===o.position,a=(r||n)&&"border-box"===D.css(t,"boxSizing",!1,o),l=n?ce(t,e,n,a,o):0;return a&&r&&(l-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(o[e])-ce(t,e,"border",!1,o)-.5)),l&&(s=pt.exec(i))&&"px"!==(s[3]||"px")&&(t.style[e]=i,i=D.css(t,e)),le(0,i,l)}}})),D.cssHooks.marginLeft=te(m.reliableMarginLeft,(function(t,e){if(e)return(parseFloat(Qt(t,"marginLeft"))||t.getBoundingClientRect().left-Zt(t,{marginLeft:0},(function(){return t.getBoundingClientRect().left})))+"px"})),D.each({margin:"",padding:"",border:"Width"},(function(t,e){D.cssHooks[t+e]={expand:function(i){for(var n=0,s={},o="string"==typeof i?i.split(" "):[i];n<4;n++)s[t+ft[n]+e]=o[n]||o[n-2]||o[0];return s}},"margin"!==t&&(D.cssHooks[t+e].set=le)})),D.fn.extend({css:function(t,e){return tt(this,(function(t,e,i){var n,s,o={},r=0;if(Array.isArray(e)){for(n=Xt(t),s=e.length;r<s;r++)o[e[r]]=D.css(t,e[r],!1,n);return o}return void 0!==i?D.style(t,e,i):D.css(t,e)}),t,e,arguments.length>1)}}),D.Tween=ue,ue.prototype={constructor:ue,init:function(t,e,i,n,s,o){this.elem=t,this.prop=i,this.easing=s||D.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=n,this.unit=o||(D.cssNumber[i]?"":"px")},cur:function(){var t=ue.propHooks[this.prop];return t&&t.get?t.get(this):ue.propHooks._default.get(this)},run:function(t){var e,i=ue.propHooks[this.prop];return this.options.duration?this.pos=e=D.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):ue.propHooks._default.set(this),this}},ue.prototype.init.prototype=ue.prototype,ue.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=D.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){D.fx.step[t.prop]?D.fx.step[t.prop](t):1!==t.elem.nodeType||!D.cssHooks[t.prop]&&null==t.elem.style[se(t.prop)]?t.elem[t.prop]=t.now:D.style(t.elem,t.prop,t.now+t.unit)}}},ue.propHooks.scrollTop=ue.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},D.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},D.fx=ue.prototype.init,D.fx.step={};var de,pe,fe=/^(?:toggle|show|hide)$/,ge=/queueHooks$/;function me(){pe&&(!1===y.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(me):n.setTimeout(me,D.fx.interval),D.fx.tick())}function ve(){return n.setTimeout((function(){de=void 0})),de=Date.now()}function _e(t,e){var i,n=0,s={height:t};for(e=e?1:0;n<4;n+=2-e)s["margin"+(i=ft[n])]=s["padding"+i]=t;return e&&(s.opacity=s.width=t),s}function ye(t,e,i){for(var n,s=(be.tweeners[e]||[]).concat(be.tweeners["*"]),o=0,r=s.length;o<r;o++)if(n=s[o].call(i,e,t))return n}function be(t,e,i){var n,s,o=0,r=be.prefilters.length,a=D.Deferred().always((function(){delete l.elem})),l=function(){if(s)return!1;for(var e=de||ve(),i=Math.max(0,c.startTime+c.duration-e),n=1-(i/c.duration||0),o=0,r=c.tweens.length;o<r;o++)c.tweens[o].run(n);return a.notifyWith(t,[c,n,i]),n<1&&r?i:(r||a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c]),!1)},c=a.promise({elem:t,props:D.extend({},e),opts:D.extend(!0,{specialEasing:{},easing:D.easing._default},i),originalProperties:e,originalOptions:i,startTime:de||ve(),duration:i.duration,tweens:[],createTween:function(e,i){var n=D.Tween(t,c.opts,e,i,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(n),n},stop:function(e){var i=0,n=e?c.tweens.length:0;if(s)return this;for(s=!0;i<n;i++)c.tweens[i].run(1);return e?(a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c,e])):a.rejectWith(t,[c,e]),this}}),h=c.props;for(function(t,e){var i,n,s,o,r;for(i in t)if(s=e[n=st(i)],o=t[i],Array.isArray(o)&&(s=o[1],o=t[i]=o[0]),i!==n&&(t[n]=o,delete t[i]),(r=D.cssHooks[n])&&"expand"in r)for(i in o=r.expand(o),delete t[n],o)i in t||(t[i]=o[i],e[i]=s);else e[n]=s}(h,c.opts.specialEasing);o<r;o++)if(n=be.prefilters[o].call(c,t,h,c.opts))return v(n.stop)&&(D._queueHooks(c.elem,c.opts.queue).stop=n.stop.bind(n)),n;return D.map(h,ye,c),v(c.opts.start)&&c.opts.start.call(t,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),D.fx.timer(D.extend(l,{elem:t,anim:c,queue:c.opts.queue})),c}D.Animation=D.extend(be,{tweeners:{"*":[function(t,e){var i=this.createTween(t,e);return yt(i.elem,t,pt.exec(e),i),i}]},tweener:function(t,e){v(t)?(e=t,t=["*"]):t=t.match(K);for(var i,n=0,s=t.length;n<s;n++)i=t[n],be.tweeners[i]=be.tweeners[i]||[],be.tweeners[i].unshift(e)},prefilters:[function(t,e,i){var n,s,o,r,a,l,c,h,u="width"in e||"height"in e,d=this,p={},f=t.style,g=t.nodeType&&_t(t),m=at.get(t,"fxshow");for(n in i.queue||(null==(r=D._queueHooks(t,"fx")).unqueued&&(r.unqueued=0,a=r.empty.fire,r.empty.fire=function(){r.unqueued||a()}),r.unqueued++,d.always((function(){d.always((function(){r.unqueued--,D.queue(t,"fx").length||r.empty.fire()}))}))),e)if(s=e[n],fe.test(s)){if(delete e[n],o=o||"toggle"===s,s===(g?"hide":"show")){if("show"!==s||!m||void 0===m[n])continue;g=!0}p[n]=m&&m[n]||D.style(t,n)}if((l=!D.isEmptyObject(e))||!D.isEmptyObject(p))for(n in u&&1===t.nodeType&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],null==(c=m&&m.display)&&(c=at.get(t,"display")),"none"===(h=D.css(t,"display"))&&(c?h=c:(xt([t],!0),c=t.style.display||c,h=D.css(t,"display"),xt([t]))),("inline"===h||"inline-block"===h&&null!=c)&&"none"===D.css(t,"float")&&(l||(d.done((function(){f.display=c})),null==c&&(h=f.display,c="none"===h?"":h)),f.display="inline-block")),i.overflow&&(f.overflow="hidden",d.always((function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]}))),l=!1,p)l||(m?"hidden"in m&&(g=m.hidden):m=at.access(t,"fxshow",{display:c}),o&&(m.hidden=!g),g&&xt([t],!0),d.done((function(){for(n in g||xt([t]),at.remove(t,"fxshow"),p)D.style(t,n,p[n])}))),l=ye(g?m[n]:0,n,d),n in m||(m[n]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?be.prefilters.unshift(t):be.prefilters.push(t)}}),D.speed=function(t,e,i){var n=t&&"object"==typeof t?D.extend({},t):{complete:i||!i&&e||v(t)&&t,duration:t,easing:i&&e||e&&!v(e)&&e};return D.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in D.fx.speeds?n.duration=D.fx.speeds[n.duration]:n.duration=D.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){v(n.old)&&n.old.call(this),n.queue&&D.dequeue(this,n.queue)},n},D.fn.extend({fadeTo:function(t,e,i,n){return this.filter(_t).css("opacity",0).show().end().animate({opacity:e},t,i,n)},animate:function(t,e,i,n){var s=D.isEmptyObject(t),o=D.speed(e,i,n),r=function(){var e=be(this,D.extend({},t),o);(s||at.get(this,"finish"))&&e.stop(!0)};return r.finish=r,s||!1===o.queue?this.each(r):this.queue(o.queue,r)},stop:function(t,e,i){var n=function(t){var e=t.stop;delete t.stop,e(i)};return"string"!=typeof t&&(i=e,e=t,t=void 0),e&&this.queue(t||"fx",[]),this.each((function(){var e=!0,s=null!=t&&t+"queueHooks",o=D.timers,r=at.get(this);if(s)r[s]&&r[s].stop&&n(r[s]);else for(s in r)r[s]&&r[s].stop&&ge.test(s)&&n(r[s]);for(s=o.length;s--;)o[s].elem!==this||null!=t&&o[s].queue!==t||(o[s].anim.stop(i),e=!1,o.splice(s,1));!e&&i||D.dequeue(this,t)}))},finish:function(t){return!1!==t&&(t=t||"fx"),this.each((function(){var e,i=at.get(this),n=i[t+"queue"],s=i[t+"queueHooks"],o=D.timers,r=n?n.length:0;for(i.finish=!0,D.queue(this,t,[]),s&&s.stop&&s.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<r;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete i.finish}))}}),D.each(["toggle","show","hide"],(function(t,e){var i=D.fn[e];D.fn[e]=function(t,n,s){return null==t||"boolean"==typeof t?i.apply(this,arguments):this.animate(_e(e,!0),t,n,s)}})),D.each({slideDown:_e("show"),slideUp:_e("hide"),slideToggle:_e("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(t,e){D.fn[t]=function(t,i,n){return this.animate(e,t,i,n)}})),D.timers=[],D.fx.tick=function(){var t,e=0,i=D.timers;for(de=Date.now();e<i.length;e++)(t=i[e])()||i[e]!==t||i.splice(e--,1);i.length||D.fx.stop(),de=void 0},D.fx.timer=function(t){D.timers.push(t),D.fx.start()},D.fx.interval=13,D.fx.start=function(){pe||(pe=!0,me())},D.fx.stop=function(){pe=null},D.fx.speeds={slow:600,fast:200,_default:400},D.fn.delay=function(t,e){return t=D.fx&&D.fx.speeds[t]||t,e=e||"fx",this.queue(e,(function(e,i){var s=n.setTimeout(e,t);i.stop=function(){n.clearTimeout(s)}}))},function(){var t=y.createElement("input"),e=y.createElement("select").appendChild(y.createElement("option"));t.type="checkbox",m.checkOn=""!==t.value,m.optSelected=e.selected,(t=y.createElement("input")).value="t",t.type="radio",m.radioValue="t"===t.value}();var we,xe=D.expr.attrHandle;D.fn.extend({attr:function(t,e){return tt(this,D.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each((function(){D.removeAttr(this,t)}))}}),D.extend({attr:function(t,e,i){var n,s,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?D.prop(t,e,i):(1===o&&D.isXMLDoc(t)||(s=D.attrHooks[e.toLowerCase()]||(D.expr.match.bool.test(e)?we:void 0)),void 0!==i?null===i?void D.removeAttr(t,e):s&&"set"in s&&void 0!==(n=s.set(t,i,e))?n:(t.setAttribute(e,i+""),i):s&&"get"in s&&null!==(n=s.get(t,e))?n:null==(n=D.find.attr(t,e))?void 0:n)},attrHooks:{type:{set:function(t,e){if(!m.radioValue&&"radio"===e&&A(t,"input")){var i=t.value;return t.setAttribute("type",e),i&&(t.value=i),e}}}},removeAttr:function(t,e){var i,n=0,s=e&&e.match(K);if(s&&1===t.nodeType)for(;i=s[n++];)t.removeAttribute(i)}}),we={set:function(t,e,i){return!1===e?D.removeAttr(t,i):t.setAttribute(i,i),i}},D.each(D.expr.match.bool.source.match(/\w+/g),(function(t,e){var i=xe[e]||D.find.attr;xe[e]=function(t,e,n){var s,o,r=e.toLowerCase();return n||(o=xe[r],xe[r]=s,s=null!=i(t,e,n)?r:null,xe[r]=o),s}}));var ke=/^(?:input|select|textarea|button)$/i,Ce=/^(?:a|area)$/i;function De(t){return(t.match(K)||[]).join(" ")}function Te(t){return t.getAttribute&&t.getAttribute("class")||""}function Ae(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(K)||[]}D.fn.extend({prop:function(t,e){return tt(this,D.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each((function(){delete this[D.propFix[t]||t]}))}}),D.extend({prop:function(t,e,i){var n,s,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&D.isXMLDoc(t)||(e=D.propFix[e]||e,s=D.propHooks[e]),void 0!==i?s&&"set"in s&&void 0!==(n=s.set(t,i,e))?n:t[e]=i:s&&"get"in s&&null!==(n=s.get(t,e))?n:t[e]},propHooks:{tabIndex:{get:function(t){var e=D.find.attr(t,"tabindex");return e?parseInt(e,10):ke.test(t.nodeName)||Ce.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(D.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),D.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){D.propFix[this.toLowerCase()]=this})),D.fn.extend({addClass:function(t){var e,i,n,s,o,r;return v(t)?this.each((function(e){D(this).addClass(t.call(this,e,Te(this)))})):(e=Ae(t)).length?this.each((function(){if(n=Te(this),i=1===this.nodeType&&" "+De(n)+" "){for(o=0;o<e.length;o++)s=e[o],i.indexOf(" "+s+" ")<0&&(i+=s+" ");r=De(i),n!==r&&this.setAttribute("class",r)}})):this},removeClass:function(t){var e,i,n,s,o,r;return v(t)?this.each((function(e){D(this).removeClass(t.call(this,e,Te(this)))})):arguments.length?(e=Ae(t)).length?this.each((function(){if(n=Te(this),i=1===this.nodeType&&" "+De(n)+" "){for(o=0;o<e.length;o++)for(s=e[o];i.indexOf(" "+s+" ")>-1;)i=i.replace(" "+s+" "," ");r=De(i),n!==r&&this.setAttribute("class",r)}})):this:this.attr("class","")},toggleClass:function(t,e){var i,n,s,o,r=typeof t,a="string"===r||Array.isArray(t);return v(t)?this.each((function(i){D(this).toggleClass(t.call(this,i,Te(this),e),e)})):"boolean"==typeof e&&a?e?this.addClass(t):this.removeClass(t):(i=Ae(t),this.each((function(){if(a)for(o=D(this),s=0;s<i.length;s++)n=i[s],o.hasClass(n)?o.removeClass(n):o.addClass(n);else void 0!==t&&"boolean"!==r||((n=Te(this))&&at.set(this,"__className__",n),this.setAttribute&&this.setAttribute("class",n||!1===t?"":at.get(this,"__className__")||""))})))},hasClass:function(t){var e,i,n=0;for(e=" "+t+" ";i=this[n++];)if(1===i.nodeType&&(" "+De(Te(i))+" ").indexOf(e)>-1)return!0;return!1}});var Se=/\r/g;D.fn.extend({val:function(t){var e,i,n,s=this[0];return arguments.length?(n=v(t),this.each((function(i){var s;1===this.nodeType&&(null==(s=n?t.call(this,i,D(this).val()):t)?s="":"number"==typeof s?s+="":Array.isArray(s)&&(s=D.map(s,(function(t){return null==t?"":t+""}))),(e=D.valHooks[this.type]||D.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,s,"value")||(this.value=s))}))):s?(e=D.valHooks[s.type]||D.valHooks[s.nodeName.toLowerCase()])&&"get"in e&&void 0!==(i=e.get(s,"value"))?i:"string"==typeof(i=s.value)?i.replace(Se,""):null==i?"":i:void 0}}),D.extend({valHooks:{option:{get:function(t){var e=D.find.attr(t,"value");return null!=e?e:De(D.text(t))}},select:{get:function(t){var e,i,n,s=t.options,o=t.selectedIndex,r="select-one"===t.type,a=r?null:[],l=r?o+1:s.length;for(n=o<0?l:r?o:0;n<l;n++)if(((i=s[n]).selected||n===o)&&!i.disabled&&(!i.parentNode.disabled||!A(i.parentNode,"optgroup"))){if(e=D(i).val(),r)return e;a.push(e)}return a},set:function(t,e){for(var i,n,s=t.options,o=D.makeArray(e),r=s.length;r--;)((n=s[r]).selected=D.inArray(D.valHooks.option.get(n),o)>-1)&&(i=!0);return i||(t.selectedIndex=-1),o}}}}),D.each(["radio","checkbox"],(function(){D.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=D.inArray(D(t).val(),e)>-1}},m.checkOn||(D.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}));var Ie=n.location,Pe={guid:Date.now()},Ee=/\?/;D.parseXML=function(t){var e,i;if(!t||"string"!=typeof t)return null;try{e=(new n.DOMParser).parseFromString(t,"text/xml")}catch(t){}return i=e&&e.getElementsByTagName("parsererror")[0],e&&!i||D.error("Invalid XML: "+(i?D.map(i.childNodes,(function(t){return t.textContent})).join("\n"):t)),e};var Me=/^(?:focusinfocus|focusoutblur)$/,Oe=function(t){t.stopPropagation()};D.extend(D.event,{trigger:function(t,e,i,s){var o,r,a,l,c,h,u,d,f=[i||y],g=p.call(t,"type")?t.type:t,m=p.call(t,"namespace")?t.namespace.split("."):[];if(r=d=a=i=i||y,3!==i.nodeType&&8!==i.nodeType&&!Me.test(g+D.event.triggered)&&(g.indexOf(".")>-1&&(m=g.split("."),g=m.shift(),m.sort()),c=g.indexOf(":")<0&&"on"+g,(t=t[D.expando]?t:new D.Event(g,"object"==typeof t&&t)).isTrigger=s?2:3,t.namespace=m.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),e=null==e?[t]:D.makeArray(e,[t]),u=D.event.special[g]||{},s||!u.trigger||!1!==u.trigger.apply(i,e))){if(!s&&!u.noBubble&&!_(i)){for(l=u.delegateType||g,Me.test(l+g)||(r=r.parentNode);r;r=r.parentNode)f.push(r),a=r;a===(i.ownerDocument||y)&&f.push(a.defaultView||a.parentWindow||n)}for(o=0;(r=f[o++])&&!t.isPropagationStopped();)d=r,t.type=o>1?l:u.bindType||g,(h=(at.get(r,"events")||Object.create(null))[t.type]&&at.get(r,"handle"))&&h.apply(r,e),(h=c&&r[c])&&h.apply&&ot(r)&&(t.result=h.apply(r,e),!1===t.result&&t.preventDefault());return t.type=g,s||t.isDefaultPrevented()||u._default&&!1!==u._default.apply(f.pop(),e)||!ot(i)||c&&v(i[g])&&!_(i)&&((a=i[c])&&(i[c]=null),D.event.triggered=g,t.isPropagationStopped()&&d.addEventListener(g,Oe),i[g](),t.isPropagationStopped()&&d.removeEventListener(g,Oe),D.event.triggered=void 0,a&&(i[c]=a)),t.result}},simulate:function(t,e,i){var n=D.extend(new D.Event,i,{type:t,isSimulated:!0});D.event.trigger(n,null,e)}}),D.fn.extend({trigger:function(t,e){return this.each((function(){D.event.trigger(t,e,this)}))},triggerHandler:function(t,e){var i=this[0];if(i)return D.event.trigger(t,e,i,!0)}});var Ne=/\[\]$/,He=/\r?\n/g,je=/^(?:submit|button|image|reset|file)$/i,ze=/^(?:input|select|textarea|keygen)/i;function We(t,e,i,n){var s;if(Array.isArray(e))D.each(e,(function(e,s){i||Ne.test(t)?n(t,s):We(t+"["+("object"==typeof s&&null!=s?e:"")+"]",s,i,n)}));else if(i||"object"!==x(e))n(t,e);else for(s in e)We(t+"["+s+"]",e[s],i,n)}D.param=function(t,e){var i,n=[],s=function(t,e){var i=v(e)?e():e;n[n.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==i?"":i)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!D.isPlainObject(t))D.each(t,(function(){s(this.name,this.value)}));else for(i in t)We(i,t[i],e,s);return n.join("&")},D.fn.extend({serialize:function(){return D.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var t=D.prop(this,"elements");return t?D.makeArray(t):this})).filter((function(){var t=this.type;return this.name&&!D(this).is(":disabled")&&ze.test(this.nodeName)&&!je.test(t)&&(this.checked||!Dt.test(t))})).map((function(t,e){var i=D(this).val();return null==i?null:Array.isArray(i)?D.map(i,(function(t){return{name:e.name,value:t.replace(He,"\r\n")}})):{name:e.name,value:i.replace(He,"\r\n")}})).get()}});var Re=/%20/g,Fe=/#.*$/,Le=/([?&])_=[^&]*/,qe=/^(.*?):[ \t]*([^\r\n]*)$/gm,Be=/^(?:GET|HEAD)$/,Ye=/^\/\//,Ue={},Ve={},Ke="*/".concat("*"),$e=y.createElement("a");function Ge(t){return function(e,i){"string"!=typeof e&&(i=e,e="*");var n,s=0,o=e.toLowerCase().match(K)||[];if(v(i))for(;n=o[s++];)"+"===n[0]?(n=n.slice(1)||"*",(t[n]=t[n]||[]).unshift(i)):(t[n]=t[n]||[]).push(i)}}function Xe(t,e,i,n){var s={},o=t===Ve;function r(a){var l;return s[a]=!0,D.each(t[a]||[],(function(t,a){var c=a(e,i,n);return"string"!=typeof c||o||s[c]?o?!(l=c):void 0:(e.dataTypes.unshift(c),r(c),!1)})),l}return r(e.dataTypes[0])||!s["*"]&&r("*")}function Ze(t,e){var i,n,s=D.ajaxSettings.flatOptions||{};for(i in e)void 0!==e[i]&&((s[i]?t:n||(n={}))[i]=e[i]);return n&&D.extend(!0,t,n),t}$e.href=Ie.href,D.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ie.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ie.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ke,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":D.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Ze(Ze(t,D.ajaxSettings),e):Ze(D.ajaxSettings,t)},ajaxPrefilter:Ge(Ue),ajaxTransport:Ge(Ve),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var i,s,o,r,a,l,c,h,u,d,p=D.ajaxSetup({},e),f=p.context||p,g=p.context&&(f.nodeType||f.jquery)?D(f):D.event,m=D.Deferred(),v=D.Callbacks("once memory"),_=p.statusCode||{},b={},w={},x="canceled",k={readyState:0,getResponseHeader:function(t){var e;if(c){if(!r)for(r={};e=qe.exec(o);)r[e[1].toLowerCase()+" "]=(r[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=r[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return c?o:null},setRequestHeader:function(t,e){return null==c&&(t=w[t.toLowerCase()]=w[t.toLowerCase()]||t,b[t]=e),this},overrideMimeType:function(t){return null==c&&(p.mimeType=t),this},statusCode:function(t){var e;if(t)if(c)k.always(t[k.status]);else for(e in t)_[e]=[_[e],t[e]];return this},abort:function(t){var e=t||x;return i&&i.abort(e),C(0,e),this}};if(m.promise(k),p.url=((t||p.url||Ie.href)+"").replace(Ye,Ie.protocol+"//"),p.type=e.method||e.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(K)||[""],null==p.crossDomain){l=y.createElement("a");try{l.href=p.url,l.href=l.href,p.crossDomain=$e.protocol+"//"+$e.host!=l.protocol+"//"+l.host}catch(t){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=D.param(p.data,p.traditional)),Xe(Ue,p,e,k),c)return k;for(u in(h=D.event&&p.global)&&0==D.active++&&D.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Be.test(p.type),s=p.url.replace(Fe,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(Re,"+")):(d=p.url.slice(s.length),p.data&&(p.processData||"string"==typeof p.data)&&(s+=(Ee.test(s)?"&":"?")+p.data,delete p.data),!1===p.cache&&(s=s.replace(Le,"$1"),d=(Ee.test(s)?"&":"?")+"_="+Pe.guid+++d),p.url=s+d),p.ifModified&&(D.lastModified[s]&&k.setRequestHeader("If-Modified-Since",D.lastModified[s]),D.etag[s]&&k.setRequestHeader("If-None-Match",D.etag[s])),(p.data&&p.hasContent&&!1!==p.contentType||e.contentType)&&k.setRequestHeader("Content-Type",p.contentType),k.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Ke+"; q=0.01":""):p.accepts["*"]),p.headers)k.setRequestHeader(u,p.headers[u]);if(p.beforeSend&&(!1===p.beforeSend.call(f,k,p)||c))return k.abort();if(x="abort",v.add(p.complete),k.done(p.success),k.fail(p.error),i=Xe(Ve,p,e,k)){if(k.readyState=1,h&&g.trigger("ajaxSend",[k,p]),c)return k;p.async&&p.timeout>0&&(a=n.setTimeout((function(){k.abort("timeout")}),p.timeout));try{c=!1,i.send(b,C)}catch(t){if(c)throw t;C(-1,t)}}else C(-1,"No Transport");function C(t,e,r,l){var u,d,y,b,w,x=e;c||(c=!0,a&&n.clearTimeout(a),i=void 0,o=l||"",k.readyState=t>0?4:0,u=t>=200&&t<300||304===t,r&&(b=function(t,e,i){for(var n,s,o,r,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=t.mimeType||e.getResponseHeader("Content-Type"));if(n)for(s in a)if(a[s]&&a[s].test(n)){l.unshift(s);break}if(l[0]in i)o=l[0];else{for(s in i){if(!l[0]||t.converters[s+" "+l[0]]){o=s;break}r||(r=s)}o=o||r}if(o)return o!==l[0]&&l.unshift(o),i[o]}(p,k,r)),!u&&D.inArray("script",p.dataTypes)>-1&&D.inArray("json",p.dataTypes)<0&&(p.converters["text script"]=function(){}),b=function(t,e,i,n){var s,o,r,a,l,c={},h=t.dataTypes.slice();if(h[1])for(r in t.converters)c[r.toLowerCase()]=t.converters[r];for(o=h.shift();o;)if(t.responseFields[o]&&(i[t.responseFields[o]]=e),!l&&n&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=o,o=h.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(r=c[l+" "+o]||c["* "+o]))for(s in c)if((a=s.split(" "))[1]===o&&(r=c[l+" "+a[0]]||c["* "+a[0]])){!0===r?r=c[s]:!0!==c[s]&&(o=a[0],h.unshift(a[1]));break}if(!0!==r)if(r&&t.throws)e=r(e);else try{e=r(e)}catch(t){return{state:"parsererror",error:r?t:"No conversion from "+l+" to "+o}}}return{state:"success",data:e}}(p,b,k,u),u?(p.ifModified&&((w=k.getResponseHeader("Last-Modified"))&&(D.lastModified[s]=w),(w=k.getResponseHeader("etag"))&&(D.etag[s]=w)),204===t||"HEAD"===p.type?x="nocontent":304===t?x="notmodified":(x=b.state,d=b.data,u=!(y=b.error))):(y=x,!t&&x||(x="error",t<0&&(t=0))),k.status=t,k.statusText=(e||x)+"",u?m.resolveWith(f,[d,x,k]):m.rejectWith(f,[k,x,y]),k.statusCode(_),_=void 0,h&&g.trigger(u?"ajaxSuccess":"ajaxError",[k,p,u?d:y]),v.fireWith(f,[k,x]),h&&(g.trigger("ajaxComplete",[k,p]),--D.active||D.event.trigger("ajaxStop")))}return k},getJSON:function(t,e,i){return D.get(t,e,i,"json")},getScript:function(t,e){return D.get(t,void 0,e,"script")}}),D.each(["get","post"],(function(t,e){D[e]=function(t,i,n,s){return v(i)&&(s=s||n,n=i,i=void 0),D.ajax(D.extend({url:t,type:e,dataType:s,data:i,success:n},D.isPlainObject(t)&&t))}})),D.ajaxPrefilter((function(t){var e;for(e in t.headers)"content-type"===e.toLowerCase()&&(t.contentType=t.headers[e]||"")})),D._evalUrl=function(t,e,i){return D.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){D.globalEval(t,e,i)}})},D.fn.extend({wrapAll:function(t){var e;return this[0]&&(v(t)&&(t=t.call(this[0])),e=D(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map((function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t})).append(this)),this},wrapInner:function(t){return v(t)?this.each((function(e){D(this).wrapInner(t.call(this,e))})):this.each((function(){var e=D(this),i=e.contents();i.length?i.wrapAll(t):e.append(t)}))},wrap:function(t){var e=v(t);return this.each((function(i){D(this).wrapAll(e?t.call(this,i):t)}))},unwrap:function(t){return this.parent(t).not("body").each((function(){D(this).replaceWith(this.childNodes)})),this}}),D.expr.pseudos.hidden=function(t){return!D.expr.pseudos.visible(t)},D.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},D.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(t){}};var Je={0:200,1223:204},Qe=D.ajaxSettings.xhr();m.cors=!!Qe&&"withCredentials"in Qe,m.ajax=Qe=!!Qe,D.ajaxTransport((function(t){var e,i;if(m.cors||Qe&&!t.crossDomain)return{send:function(s,o){var r,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(r in t.xhrFields)a[r]=t.xhrFields[r];for(r in t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||s["X-Requested-With"]||(s["X-Requested-With"]="XMLHttpRequest"),s)a.setRequestHeader(r,s[r]);e=function(t){return function(){e&&(e=i=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Je[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=e(),i=a.onerror=a.ontimeout=e("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&n.setTimeout((function(){e&&i()}))},e=e("abort");try{a.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}})),D.ajaxPrefilter((function(t){t.crossDomain&&(t.contents.script=!1)})),D.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return D.globalEval(t),t}}}),D.ajaxPrefilter("script",(function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")})),D.ajaxTransport("script",(function(t){var e,i;if(t.crossDomain||t.scriptAttrs)return{send:function(n,s){e=D("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",i=function(t){e.remove(),i=null,t&&s("error"===t.type?404:200,t.type)}),y.head.appendChild(e[0])},abort:function(){i&&i()}}}));var ti,ei=[],ii=/(=)\?(?=&|$)|\?\?/;D.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=ei.pop()||D.expando+"_"+Pe.guid++;return this[t]=!0,t}}),D.ajaxPrefilter("json jsonp",(function(t,e,i){var s,o,r,a=!1!==t.jsonp&&(ii.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&ii.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return s=t.jsonpCallback=v(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(ii,"$1"+s):!1!==t.jsonp&&(t.url+=(Ee.test(t.url)?"&":"?")+t.jsonp+"="+s),t.converters["script json"]=function(){return r||D.error(s+" was not called"),r[0]},t.dataTypes[0]="json",o=n[s],n[s]=function(){r=arguments},i.always((function(){void 0===o?D(n).removeProp(s):n[s]=o,t[s]&&(t.jsonpCallback=e.jsonpCallback,ei.push(s)),r&&v(o)&&o(r[0]),r=o=void 0})),"script"})),m.createHTMLDocument=((ti=y.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===ti.childNodes.length),D.parseHTML=function(t,e,i){return"string"!=typeof t?[]:("boolean"==typeof e&&(i=e,e=!1),e||(m.createHTMLDocument?((n=(e=y.implementation.createHTMLDocument("")).createElement("base")).href=y.location.href,e.head.appendChild(n)):e=y),o=!i&&[],(s=F.exec(t))?[e.createElement(s[1])]:(s=Mt([t],e,o),o&&o.length&&D(o).remove(),D.merge([],s.childNodes)));var n,s,o},D.fn.load=function(t,e,i){var n,s,o,r=this,a=t.indexOf(" ");return a>-1&&(n=De(t.slice(a)),t=t.slice(0,a)),v(e)?(i=e,e=void 0):e&&"object"==typeof e&&(s="POST"),r.length>0&&D.ajax({url:t,type:s||"GET",dataType:"html",data:e}).done((function(t){o=arguments,r.html(n?D("<div>").append(D.parseHTML(t)).find(n):t)})).always(i&&function(t,e){r.each((function(){i.apply(this,o||[t.responseText,e,t])}))}),this},D.expr.pseudos.animated=function(t){return D.grep(D.timers,(function(e){return t===e.elem})).length},D.offset={setOffset:function(t,e,i){var n,s,o,r,a,l,c=D.css(t,"position"),h=D(t),u={};"static"===c&&(t.style.position="relative"),a=h.offset(),o=D.css(t,"top"),l=D.css(t,"left"),("absolute"===c||"fixed"===c)&&(o+l).indexOf("auto")>-1?(r=(n=h.position()).top,s=n.left):(r=parseFloat(o)||0,s=parseFloat(l)||0),v(e)&&(e=e.call(t,i,D.extend({},a))),null!=e.top&&(u.top=e.top-a.top+r),null!=e.left&&(u.left=e.left-a.left+s),"using"in e?e.using.call(t,u):h.css(u)}},D.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each((function(e){D.offset.setOffset(this,t,e)}));var e,i,n=this[0];return n?n.getClientRects().length?(e=n.getBoundingClientRect(),i=n.ownerDocument.defaultView,{top:e.top+i.pageYOffset,left:e.left+i.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,i,n=this[0],s={top:0,left:0};if("fixed"===D.css(n,"position"))e=n.getBoundingClientRect();else{for(e=this.offset(),i=n.ownerDocument,t=n.offsetParent||i.documentElement;t&&(t===i.body||t===i.documentElement)&&"static"===D.css(t,"position");)t=t.parentNode;t&&t!==n&&1===t.nodeType&&((s=D(t).offset()).top+=D.css(t,"borderTopWidth",!0),s.left+=D.css(t,"borderLeftWidth",!0))}return{top:e.top-s.top-D.css(n,"marginTop",!0),left:e.left-s.left-D.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var t=this.offsetParent;t&&"static"===D.css(t,"position");)t=t.offsetParent;return t||gt}))}}),D.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(t,e){var i="pageYOffset"===e;D.fn[t]=function(n){return tt(this,(function(t,n,s){var o;if(_(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===s)return o?o[e]:t[n];o?o.scrollTo(i?o.pageXOffset:s,i?s:o.pageYOffset):t[n]=s}),t,n,arguments.length)}})),D.each(["top","left"],(function(t,e){D.cssHooks[e]=te(m.pixelPosition,(function(t,i){if(i)return i=Qt(t,e),$t.test(i)?D(t).position()[e]+"px":i}))})),D.each({Height:"height",Width:"width"},(function(t,e){D.each({padding:"inner"+t,content:e,"":"outer"+t},(function(i,n){D.fn[n]=function(s,o){var r=arguments.length&&(i||"boolean"!=typeof s),a=i||(!0===s||!0===o?"margin":"border");return tt(this,(function(e,i,s){var o;return _(e)?0===n.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===s?D.css(e,i,a):D.style(e,i,s,a)}),e,r?s:void 0,r)}}))})),D.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(t,e){D.fn[e]=function(t){return this.on(e,t)}})),D.fn.extend({bind:function(t,e,i){return this.on(t,null,e,i)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,i,n){return this.on(e,t,i,n)},undelegate:function(t,e,i){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",i)},hover:function(t,e){return this.on("mouseenter",t).on("mouseleave",e||t)}}),D.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(t,e){D.fn[e]=function(t,i){return arguments.length>0?this.on(e,null,t,i):this.trigger(e)}}));var ni=/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;D.proxy=function(t,e){var i,n,s;if("string"==typeof e&&(i=t[e],e=t,t=i),v(t))return n=a.call(arguments,2),s=function(){return t.apply(e||this,n.concat(a.call(arguments)))},s.guid=t.guid=t.guid||D.guid++,s},D.holdReady=function(t){t?D.readyWait++:D.ready(!0)},D.isArray=Array.isArray,D.parseJSON=JSON.parse,D.nodeName=A,D.isFunction=v,D.isWindow=_,D.camelCase=st,D.type=x,D.now=Date.now,D.isNumeric=function(t){var e=D.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},D.trim=function(t){return null==t?"":(t+"").replace(ni,"$1")},void 0===(i=function(){return D}.apply(e,[]))||(t.exports=i);var si=n.jQuery,oi=n.$;return D.noConflict=function(t){return n.$===D&&(n.$=oi),t&&n.jQuery===D&&(n.jQuery=si),D},void 0===s&&(n.jQuery=n.$=D),D}))},660:(t,e,i)=>{var n;!function(t){!function(e){var n="object"==typeof i.g?i.g:"object"==typeof self?self:"object"==typeof this?this:Function("return this;")(),s=o(t);function o(t,e){return function(i,n){"function"!=typeof t[i]&&Object.defineProperty(t,i,{configurable:!0,writable:!0,value:n}),e&&e(i,n)}}void 0===n.Reflect?n.Reflect=t:s=o(n.Reflect,s),function(t){var e=Object.prototype.hasOwnProperty,i="function"==typeof Symbol,n=i&&void 0!==Symbol.toPrimitive?Symbol.toPrimitive:"@@toPrimitive",s=i&&void 0!==Symbol.iterator?Symbol.iterator:"@@iterator",o="function"==typeof Object.create,r={__proto__:[]}instanceof Array,a=!o&&!r,l={create:o?function(){return H(Object.create(null))}:r?function(){return H({__proto__:null})}:function(){return H({})},has:a?function(t,i){return e.call(t,i)}:function(t,e){return e in t},get:a?function(t,i){return e.call(t,i)?t[i]:void 0}:function(t,e){return t[e]}},c=Object.getPrototypeOf(Function),h="object"==typeof process&&process.env&&"true"===process.env.REFLECT_METADATA_USE_MAP_POLYFILL,u=h||"function"!=typeof Map||"function"!=typeof Map.prototype.entries?function(){var t={},e=[],i=function(){function t(t,e,i){this._index=0,this._keys=t,this._values=e,this._selector=i}return t.prototype["@@iterator"]=function(){return this},t.prototype[s]=function(){return this},t.prototype.next=function(){var t=this._index;if(t>=0&&t<this._keys.length){var i=this._selector(this._keys[t],this._values[t]);return t+1>=this._keys.length?(this._index=-1,this._keys=e,this._values=e):this._index++,{value:i,done:!1}}return{value:void 0,done:!0}},t.prototype.throw=function(t){throw this._index>=0&&(this._index=-1,this._keys=e,this._values=e),t},t.prototype.return=function(t){return this._index>=0&&(this._index=-1,this._keys=e,this._values=e),{value:t,done:!0}},t}();return function(){function e(){this._keys=[],this._values=[],this._cacheKey=t,this._cacheIndex=-2}return Object.defineProperty(e.prototype,"size",{get:function(){return this._keys.length},enumerable:!0,configurable:!0}),e.prototype.has=function(t){return this._find(t,!1)>=0},e.prototype.get=function(t){var e=this._find(t,!1);return e>=0?this._values[e]:void 0},e.prototype.set=function(t,e){var i=this._find(t,!0);return this._values[i]=e,this},e.prototype.delete=function(e){var i=this._find(e,!1);if(i>=0){for(var n=this._keys.length,s=i+1;s<n;s++)this._keys[s-1]=this._keys[s],this._values[s-1]=this._values[s];return this._keys.length--,this._values.length--,e===this._cacheKey&&(this._cacheKey=t,this._cacheIndex=-2),!0}return!1},e.prototype.clear=function(){this._keys.length=0,this._values.length=0,this._cacheKey=t,this._cacheIndex=-2},e.prototype.keys=function(){return new i(this._keys,this._values,n)},e.prototype.values=function(){return new i(this._keys,this._values,o)},e.prototype.entries=function(){return new i(this._keys,this._values,r)},e.prototype["@@iterator"]=function(){return this.entries()},e.prototype[s]=function(){return this.entries()},e.prototype._find=function(t,e){return this._cacheKey!==t&&(this._cacheIndex=this._keys.indexOf(this._cacheKey=t)),this._cacheIndex<0&&e&&(this._cacheIndex=this._keys.length,this._keys.push(t),this._values.push(void 0)),this._cacheIndex},e}();function n(t,e){return t}function o(t,e){return e}function r(t,e){return[t,e]}}():Map,d=h||"function"!=typeof Set||"function"!=typeof Set.prototype.entries?function(){function t(){this._map=new u}return Object.defineProperty(t.prototype,"size",{get:function(){return this._map.size},enumerable:!0,configurable:!0}),t.prototype.has=function(t){return this._map.has(t)},t.prototype.add=function(t){return this._map.set(t,t),this},t.prototype.delete=function(t){return this._map.delete(t)},t.prototype.clear=function(){this._map.clear()},t.prototype.keys=function(){return this._map.keys()},t.prototype.values=function(){return this._map.values()},t.prototype.entries=function(){return this._map.entries()},t.prototype["@@iterator"]=function(){return this.keys()},t.prototype[s]=function(){return this.keys()},t}():Set,p=new(h||"function"!=typeof WeakMap?function(){var t=16,i=l.create(),n=s();return function(){function t(){this._key=s()}return t.prototype.has=function(t){var e=o(t,!1);return void 0!==e&&l.has(e,this._key)},t.prototype.get=function(t){var e=o(t,!1);return void 0!==e?l.get(e,this._key):void 0},t.prototype.set=function(t,e){return o(t,!0)[this._key]=e,this},t.prototype.delete=function(t){var e=o(t,!1);return void 0!==e&&delete e[this._key]},t.prototype.clear=function(){this._key=s()},t}();function s(){var t;do{t="@@WeakMap@@"+a()}while(l.has(i,t));return i[t]=!0,t}function o(t,i){if(!e.call(t,n)){if(!i)return;Object.defineProperty(t,n,{value:l.create()})}return t[n]}function r(t,e){for(var i=0;i<e;++i)t[i]=255*Math.random()|0;return t}function a(){var e,i=(e=t,"function"==typeof Uint8Array?"undefined"!=typeof crypto?crypto.getRandomValues(new Uint8Array(e)):"undefined"!=typeof msCrypto?msCrypto.getRandomValues(new Uint8Array(e)):r(new Uint8Array(e),e):r(new Array(e),e));i[6]=79&i[6]|64,i[8]=191&i[8]|128;for(var n="",s=0;s<t;++s){var o=i[s];4!==s&&6!==s&&8!==s||(n+="-"),o<16&&(n+="0"),n+=o.toString(16).toLowerCase()}return n}}():WeakMap);function f(t,e,i){var n=p.get(t);if(k(n)){if(!i)return;n=new u,p.set(t,n)}var s=n.get(e);if(k(s)){if(!i)return;s=new u,n.set(e,s)}return s}function g(t,e,i){if(m(t,e,i))return!0;var n=N(e);return!C(n)&&g(t,n,i)}function m(t,e,i){var n=f(e,i,!1);return!k(n)&&!!n.has(t)}function v(t,e,i){if(m(t,e,i))return _(t,e,i);var n=N(e);return C(n)?void 0:v(t,n,i)}function _(t,e,i){var n=f(e,i,!1);if(!k(n))return n.get(t)}function y(t,e,i,n){f(i,n,!0).set(t,e)}function b(t,e){var i=w(t,e),n=N(t);if(null===n)return i;var s=b(n,e);if(s.length<=0)return i;if(i.length<=0)return s;for(var o=new d,r=[],a=0,l=i;a<l.length;a++){var c=l[a];o.has(c)||(o.add(c),r.push(c))}for(var h=0,u=s;h<u.length;h++)c=u[h],o.has(c)||(o.add(c),r.push(c));return r}function w(t,e){var i=[],n=f(t,e,!1);if(k(n))return i;for(var o=function(t){var e=E(t,s);if(!I(e))throw new TypeError;var i=e.call(t);if(!D(i))throw new TypeError;return i}(n.keys()),r=0;;){var a=M(o);if(!a)return i.length=r,i;var l=a.value;try{i[r]=l}catch(t){try{O(o)}finally{throw t}}r++}}function x(t){if(null===t)return 1;switch(typeof t){case"undefined":return 0;case"boolean":return 2;case"string":return 3;case"symbol":return 4;case"number":return 5;case"object":return null===t?1:6;default:return 6}}function k(t){return void 0===t}function C(t){return null===t}function D(t){return"object"==typeof t?null!==t:"function"==typeof t}function T(t,e){switch(x(t)){case 0:case 1:case 2:case 3:case 4:case 5:return t}var i=3===e?"string":5===e?"number":"default",s=E(t,n);if(void 0!==s){var o=s.call(t,i);if(D(o))throw new TypeError;return o}return function(t,e){if("string"===e){var i=t.toString;if(I(i)&&!D(s=i.call(t)))return s;if(I(n=t.valueOf)&&!D(s=n.call(t)))return s}else{var n;if(I(n=t.valueOf)&&!D(s=n.call(t)))return s;var s,o=t.toString;if(I(o)&&!D(s=o.call(t)))return s}throw new TypeError}(t,"default"===i?"number":i)}function A(t){var e=T(t,3);return"symbol"==typeof e?e:function(t){return""+t}(e)}function S(t){return Array.isArray?Array.isArray(t):t instanceof Object?t instanceof Array:"[object Array]"===Object.prototype.toString.call(t)}function I(t){return"function"==typeof t}function P(t){return"function"==typeof t}function E(t,e){var i=t[e];if(null!=i){if(!I(i))throw new TypeError;return i}}function M(t){var e=t.next();return!e.done&&e}function O(t){var e=t.return;e&&e.call(t)}function N(t){var e=Object.getPrototypeOf(t);if("function"!=typeof t||t===c)return e;if(e!==c)return e;var i=t.prototype,n=i&&Object.getPrototypeOf(i);if(null==n||n===Object.prototype)return e;var s=n.constructor;return"function"!=typeof s||s===t?e:s}function H(t){return t.__=void 0,delete t.__,t}t("decorate",(function(t,e,i,n){if(k(i)){if(!S(t))throw new TypeError;if(!P(e))throw new TypeError;return function(t,e){for(var i=t.length-1;i>=0;--i){var n=(0,t[i])(e);if(!k(n)&&!C(n)){if(!P(n))throw new TypeError;e=n}}return e}(t,e)}if(!S(t))throw new TypeError;if(!D(e))throw new TypeError;if(!D(n)&&!k(n)&&!C(n))throw new TypeError;return C(n)&&(n=void 0),function(t,e,i,n){for(var s=t.length-1;s>=0;--s){var o=(0,t[s])(e,i,n);if(!k(o)&&!C(o)){if(!D(o))throw new TypeError;n=o}}return n}(t,e,i=A(i),n)})),t("metadata",(function(t,e){return function(i,n){if(!D(i))throw new TypeError;if(!k(n)&&!function(t){switch(x(t)){case 3:case 4:return!0;default:return!1}}(n))throw new TypeError;y(t,e,i,n)}})),t("defineMetadata",(function(t,e,i,n){if(!D(i))throw new TypeError;return k(n)||(n=A(n)),y(t,e,i,n)})),t("hasMetadata",(function(t,e,i){if(!D(e))throw new TypeError;return k(i)||(i=A(i)),g(t,e,i)})),t("hasOwnMetadata",(function(t,e,i){if(!D(e))throw new TypeError;return k(i)||(i=A(i)),m(t,e,i)})),t("getMetadata",(function(t,e,i){if(!D(e))throw new TypeError;return k(i)||(i=A(i)),v(t,e,i)})),t("getOwnMetadata",(function(t,e,i){if(!D(e))throw new TypeError;return k(i)||(i=A(i)),_(t,e,i)})),t("getMetadataKeys",(function(t,e){if(!D(t))throw new TypeError;return k(e)||(e=A(e)),b(t,e)})),t("getOwnMetadataKeys",(function(t,e){if(!D(t))throw new TypeError;return k(e)||(e=A(e)),w(t,e)})),t("deleteMetadata",(function(t,e,i){if(!D(e))throw new TypeError;k(i)||(i=A(i));var n=f(e,i,!1);if(k(n))return!1;if(!n.delete(t))return!1;if(n.size>0)return!0;var s=p.get(e);return s.delete(i),s.size>0||p.delete(e),!0}))}(s)}()}(n||(n={}))},379:t=>{"use strict";var e=[];function i(t){for(var i=-1,n=0;n<e.length;n++)if(e[n].identifier===t){i=n;break}return i}function n(t,n){for(var o={},r=[],a=0;a<t.length;a++){var l=t[a],c=n.base?l[0]+n.base:l[0],h=o[c]||0,u="".concat(c," ").concat(h);o[c]=h+1;var d=i(u),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==d)e[d].references++,e[d].updater(p);else{var f=s(p,n);n.byIndex=a,e.splice(a,0,{identifier:u,updater:f,references:1})}r.push(u)}return r}function s(t,e){var i=e.domAPI(e);return i.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;i.update(t=e)}else i.remove()}}t.exports=function(t,s){var o=n(t=t||[],s=s||{});return function(t){t=t||[];for(var r=0;r<o.length;r++){var a=i(o[r]);e[a].references--}for(var l=n(t,s),c=0;c<o.length;c++){var h=i(o[c]);0===e[h].references&&(e[h].updater(),e.splice(h,1))}o=l}}},569:t=>{"use strict";var e={};t.exports=function(t,i){var n=function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}e[t]=i}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(i)}},216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,i)=>{"use strict";t.exports=function(t){var e=i.nc;e&&t.setAttribute("nonce",e)}},795:t=>{"use strict";t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(i){!function(t,e,i){var n="";i.supports&&(n+="@supports (".concat(i.supports,") {")),i.media&&(n+="@media ".concat(i.media," {"));var s=void 0!==i.layer;s&&(n+="@layer".concat(i.layer.length>0?" ".concat(i.layer):""," {")),n+=i.css,s&&(n+="}"),i.media&&(n+="}"),i.supports&&(n+="}");var o=i.sourceMap;o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,i)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},913:(t,e,i)=>{"use strict";function n(){let t=new Date;return String(t.getFullYear())+String(t.getMonth())+String(t.getDate())+String(t.getHours())+String(t.getMinutes())+String(t.getSeconds())}i.d(e,{_i:()=>s,W2:()=>de,Rz:()=>ze,EX:()=>Fe,Wi:()=>Ne,Tk:()=>Ae,vK:()=>C,qf:()=>b,Iv:()=>Se,mi:()=>Ie,CX:()=>Pe.C,pB:()=>a,b2:()=>K,hx:()=>o,HG:()=>l,vj:()=>c,hF:()=>d,u7:()=>Le,z4:()=>x,Sl:()=>k,Nm:()=>r,Jo:()=>n}),i(555),i(660);var s=[];function o(t,e,i=void 0){return i&&(e.param=i),new t(e)}function r(t,e,i=!1){for(var n in e)try{if(0==i&&(i="event"==n),e[n].constructor==Object)t[n]=r(t[n],e[n],i);else if(Array.isArray(t[n])){if(i||"classes"==n)t[n]=t[n].concat(e[n]);else if(Object.keys(t[n]).forEach((function(s){t[n][s]=r(t[n][s],e[n][s],i)})),t[n].length<e[n].length)for(var s=t[n].length;s<e[n].length;s++)t[n].push(e[n][s])}else"string"==typeof t[n]&&"classes"==n?t[n]=[t[n],e[n]]:t[n]=e[n]}catch(i){t[n]=e[n]}return t}const a=new class{constructor(){this.hostname=document.location.href,this.f=[],this.z=1002}};function l(t){let e=t[0],i=t[1],n=t[2];return Array.isArray(n)?(Object.keys(n).forEach((function(t){a.f[n[t]].data(i,e)}),n),"array"):"function"==typeof n?n(i,e):a.f[n].data(i,e)}function c(t,e=void 0){null==e&&(e={});let i=t;if("object"!=typeof t){if(!Array.isArray(t))return;Object.keys(t).forEach((function(n){i=r(i,c(t[n],e))}))}return o(b,i,e)}var h=i(755),u=i(755);function d(t,e,i,n=void 0){var s;s=i,("contextmenu"!=e||(u(t).contextmenu((t=>Ne.Instance.main({fun:s,ev:t}))),0))&&(t.addEventListener?t.addEventListener(e,i,n||!1):t.attachEvent?t.attachEvent("on"+e,i):alert("Add handler is not supported"))}var p=i(755);function f(t,e,i=void 0){if("number"==typeof i)return p(t).insertBefore(p(e.children().eq(i)));switch(i){case"children":default:return p(t).appendTo(e);case"children0":return p(t).prependTo(e);case"next":return p(t).insertAfter(e);case"children0.next":return p(t).insertAfter(p(e.children().eq(0)))}}function g(t,e,i){i.EX&&(e.EX=i.EX),e.f&&(e=c(e.f,e.P)),null==e.body&&(e.body=i.ex),new b(e)}var m=i(755);function v(t,e,i){return 0!=Array.isArray(e)&&(Object.keys(e).forEach((function(n){if(1!=v(t,e[n],i))switch(typeof e[n]){case"string":m(t.p.ex).html(m(i.ex).html()+e[n]);break;case"number":!function(t,e,i){g(0,e=c(e,i?i.p:t.p.p),i)}(t,e[n],i);break;default:if(void 0===e[n])return;null==e[n].body&&i.ex&&(e[n].body=i.ex),g(0,e[n],i)}}),e),!0)}function _(t,e){null!=t&&("number"==typeof t?l([void 0,e,t]):t(e))}function y(t,e){if("string"==typeof e&&(e={teg:e}),e.modif){let t=Object.assign({},e.modif);delete e.modif,e=r(e,t)}e.body=function(t){if(0==h("body").length);else{let e=t.body;if(null!=e)switch(typeof t.body){case"number":return h("."+t.body);case"string":if(e=h(t.body),0==e.length&&(e=h("#"+t.body)),0==e.length&&(e=h("."+t.body)),0==e.length&&(e=h(".class"+t.body)),0!=e.length)return e;default:return t.body}}return h("body")}(e),null==e.teg&&(e.teg="div");let o=function(t){if(null==t.data)return"";let e="",i=Object.assign({},t.data);return Object.keys(i).forEach((function(n){"object"!=typeof i[n]&&(e+=" data-"+n+'="'+i[n]+'"',delete t.data[n])}),i),e}(e);return null==e.attr&&(e.attr={}),null==e.attr.id&&(e.attr.id=n()),e.ex="<"+e.teg+(e.code?" "+e.code:"")+o+"></"+e.teg+">",e.ex=f(e.ex,e.body,e.add),e.data&&Object.keys(e.data).forEach((function(t){e.ex.data(t,e.data[t])}),e.data),null==e.html&&(e.html=""),e.ex.data("ex",this),e.ex.data("EX",e.EX),function(t){"a"==t.teg&&(null==t.attr&&(t.attr={}),null==t.attr.href&&(t.attr.href="#")),null!=t.attr&&Object.keys(t.attr).forEach((function(e){let n=this[e];"src"==e&&"img"==t.teg&&(n=i(513)("./"+n+".png")),t.ex.attr(e.replace("_","-"),n)}),t.attr)}(e),function(t,e){if(null==t.event)return"";Object.keys(t.event).forEach((function(e){let i=t.event[e];Array.isArray(i)?Object.keys(i).forEach((function(e){d(t.ex[0],e,i)}),i):d(t.ex[0],e,i)}),t.event)}(e),function(t){if("img"==t.teg&&null==t.css&&(t.css={}),null!=t.css)if(Array.isArray(t.css))Array.from(t.css,(e=>{let i="css"+String(e);"string"==typeof e&&(i=e),t.ex.addClass(e)}));else switch(typeof t.css){case"string":t.ex.addClass(t.css);break;case"object":Object.keys(t.css).forEach((function(e){t.ex.css(e.replace("_","-"),t.css[e])}),t.css)}}(e),function(t){if(null!=t.CSS)if(Array.isArray(t.CSS))Array.from(t.CSS,(e=>{let i=String(e);t.ex.addClass("css"+i)}));else{let e=String(t.CSS);t.ex.addClass("css"+e)}}(e),function(t){if(null!=t.classes)switch(typeof t.classes){case"string":let i=t.classes;"number"==typeof i&&(i=String(i)),t.ex.addClass(i);break;case"number":t.ex.addClass(String(t.classes));break;default:for(var e=0;e<t.classes.length;e++){let i=t.classes[e],n=String(i);t.ex.addClass(n)}}}(e),function(t){if(null!=t.prop)if("string"==typeof t.prop){if(""==t.prop)return;t.ex.prop(t.prop)}else Object.keys(t.prop).forEach((function(e){t.ex.prop(e.replace("_","-"),t.prop[e])}),t.prop)}(e),function(t,e){if(null==e.html)return;if(1==v(t,e.html,e))return;let i;switch(typeof e.html){case"string":e.ex.html(e.html);break;case"number":let t=i(e.html,e);i=new s.teg(t),f(i.data,e.ex);break;case"function":let n=e.html;Object.keys(n).forEach((function(t){"string"==typeof e.html[t]?e.html[t].ex=e.html[t]:(null!=e.EX&&(e.html[t].EX=e.EX),e.html[t]=new b(e.html[t]));let i=e.html[t],n=e.ex;f(i.ex,n,i.add)}),n);break;default:null!=e.EX&&(e.html.EX=e.EX),e.html.f&&(e.html=i(e.html.f,e.html.P),e.html.body=e.ex),i=new b(e.html);let o=i.p,r=e.ex;f(o.ex,r,o.add)}}(t,e),function(t,e){if(null!=t.fun)if(1==Array.isArray(t.fun)){if(0==t.fun.length)return;Object.keys(t.fun).forEach((function(i){_(t.fun[i],e)}))}else _(t.fun,e)}(e,e.ex),e.ex}class b{get Data(){return this.data}set Data(t){this.data=t}constructor(t){this.p=t,this.Data=this.create_arr(t)}create_arr(t){let e={};return 1==Array.isArray(t)&&t.length>0?Object.keys(t).forEach((function(i){"param"!=i&&(e[i]=y(this,t[i]))}),t):e=y(this,t),e}}var w=i(755);class x{static Обновить(){w(document).mousemove((function(t){x.x=t.pageX,x.y=t.pageY,console.log("X: "+x.x+" Y: "+x.y)}))}}function k(t){t.show(),t.css("top",x.y+5+"px"),t.css("left",x.x+"px"),a.z+=1,t.css("zIndex",a.z)}x.x=0,x.y=0,x.Обновить();var C={ITEG_Custom:Symbol.for("ITEG_Custom"),ITeg_min:Symbol.for("ITeg_min"),ITeg_obj:Symbol.for("ITeg_obj"),ITeg_show:Symbol.for("ITeg_show"),IFm_abs:Symbol.for("IFm_abs"),IMenu_2206161052:Symbol.for("IMenu_2206161052"),Fm_body:Symbol.for("Fm_body")},D="Cannot apply @injectable decorator multiple times.",T="NULL argument",A="Key Not Found",S="Ambiguous match found for serviceIdentifier:",I="No matching bindings found for serviceIdentifier:",P="Missing required @injectable annotation in:",E="Missing required @inject or @multiInject annotation in:",M="Circular dependency found:",O=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return"The number of constructor arguments in the derived class "+t[0]+" must be >= than the number of constructor arguments of its base class."},N=function(t,e){return"onDeactivation() error in class "+t+": "+e},H="Maximum call stack size exceeded",j="named",z="name",W="unmanaged",R="optional",F="inject",L="multi_inject",q="inversify:paramtypes",B="design:paramtypes",Y="post_construct",U="pre_destroy",V=[F,L,z,W,j,R];function K(){return function(t){if(Reflect.hasOwnMetadata(q,t))throw new Error(D);var e=Reflect.getMetadata(B,t)||[];return Reflect.defineMetadata(q,e,t),t}}var $="Request",G="Singleton",X="Transient",Z={ConstantValue:"ConstantValue",Constructor:"Constructor",DynamicValue:"DynamicValue",Factory:"Factory",Function:"Function",Instance:"Instance",Invalid:"Invalid",Provider:"Provider"},J={ClassProperty:"ClassProperty",ConstructorArgument:"ConstructorArgument",Variable:"Variable"},Q=0;function tt(){return Q++}var et=function(){function t(t,e){this.id=tt(),this.activated=!1,this.serviceIdentifier=t,this.scope=e,this.type=Z.Invalid,this.constraint=function(t){return!0},this.implementationType=null,this.cache=null,this.factory=null,this.provider=null,this.onActivation=null,this.onDeactivation=null,this.dynamicValue=null}return t.prototype.clone=function(){var e=new t(this.serviceIdentifier,this.scope);return e.activated=e.scope===G&&this.activated,e.implementationType=this.implementationType,e.dynamicValue=this.dynamicValue,e.scope=this.scope,e.type=this.type,e.factory=this.factory,e.provider=this.provider,e.constraint=this.constraint,e.onActivation=this.onActivation,e.onDeactivation=this.onDeactivation,e.cache=this.cache,e},t}(),it=function(){function t(){}return t.prototype.getConstructorMetadata=function(t){return{compilerGeneratedMetadata:Reflect.getMetadata(q,t),userGeneratedMetadata:Reflect.getMetadata("inversify:tagged",t)||{}}},t.prototype.getPropertiesMetadata=function(t){return Reflect.getMetadata("inversify:tagged_props",t)||[]},t}(),nt={MultipleBindingsAvailable:2,NoBindingsAvailable:0,OnlyOneBindingAvailable:1};function st(t){return t instanceof RangeError||t.message===H}function ot(t){return"function"==typeof t?t.name:"symbol"==typeof t?t.toString():t}function rt(t,e,i){var n="",s=i(t,e);return 0!==s.length&&(n="\nRegistered bindings:",s.forEach((function(t){var e="Object";null!==t.implementationType&&(e=ct(t.implementationType)),n=n+"\n "+e,t.constraint.metaData&&(n=n+" - "+t.constraint.metaData)}))),n}function at(t,e){return null!==t.parentRequest&&(t.parentRequest.serviceIdentifier===e||at(t.parentRequest,e))}function lt(t){t.childRequests.forEach((function(t){if(at(t,t.serviceIdentifier)){var e=function(t){return function t(e,i){void 0===i&&(i=[]);var n=ot(e.serviceIdentifier);return i.push(n),null!==e.parentRequest?t(e.parentRequest,i):i}(t).reverse().join(" --\x3e ")}(t);throw new Error(M+" "+e)}lt(t)}))}function ct(t){if(t.name)return t.name;var e=t.toString(),i=e.match(/^function\s*([^\s(]+)/);return i?i[1]:"Anonymous function: "+e}var ht=function(){function t(t){this.id=tt(),this.container=t}return t.prototype.addPlan=function(t){this.plan=t},t.prototype.setCurrentRequest=function(t){this.currentRequest=t},t}(),ut=function(){function t(t,e){this.key=t,this.value=e}return t.prototype.toString=function(){return this.key===j?"named: "+String(this.value).toString()+" ":"tagged: { key:"+this.key.toString()+", value: "+String(this.value)+" }"},t}(),dt=function(t,e){this.parentContext=t,this.rootRequest=e},pt=function(){function t(t){this._cb=t}return t.prototype.unwrap=function(){return this._cb()},t}(),ft=function(){function t(t){this.str=t}return t.prototype.startsWith=function(t){return 0===this.str.indexOf(t)},t.prototype.endsWith=function(t){var e,i=t.split("").reverse().join("");return e=this.str.split("").reverse().join(""),this.startsWith.call({str:e},i)},t.prototype.contains=function(t){return-1!==this.str.indexOf(t)},t.prototype.equals=function(t){return this.str===t},t.prototype.value=function(){return this.str},t}(),gt=function(){function t(t,e,i,n){this.id=tt(),this.type=t,this.serviceIdentifier=i;var s="symbol"==typeof e?e.toString().slice(7,-1):e;this.name=new ft(s||""),this.identifier=e,this.metadata=new Array;var o=null;"string"==typeof n?o=new ut(j,n):n instanceof ut&&(o=n),null!==o&&this.metadata.push(o)}return t.prototype.hasTag=function(t){for(var e=0,i=this.metadata;e<i.length;e++)if(i[e].key===t)return!0;return!1},t.prototype.isArray=function(){return this.hasTag(L)},t.prototype.matchesArray=function(t){return this.matchesTag(L)(t)},t.prototype.isNamed=function(){return this.hasTag(j)},t.prototype.isTagged=function(){return this.metadata.some((function(t){return V.every((function(e){return t.key!==e}))}))},t.prototype.isOptional=function(){return this.matchesTag(R)(!0)},t.prototype.getNamedTag=function(){return this.isNamed()?this.metadata.filter((function(t){return t.key===j}))[0]:null},t.prototype.getCustomTags=function(){return this.isTagged()?this.metadata.filter((function(t){return V.every((function(e){return t.key!==e}))})):null},t.prototype.matchesNamedTag=function(t){return this.matchesTag(j)(t)},t.prototype.matchesTag=function(t){var e=this;return function(i){for(var n=0,s=e.metadata;n<s.length;n++){var o=s[n];if(o.key===t&&o.value===i)return!0}return!1}},t}(),mt=function(t,e,i){if(i||2===arguments.length)for(var n,s=0,o=e.length;s<o;s++)!n&&s in e||(n||(n=Array.prototype.slice.call(e,0,s)),n[s]=e[s]);return t.concat(n||Array.prototype.slice.call(e))};function vt(t,e,i,n){var s=t.getConstructorMetadata(i),o=s.compilerGeneratedMetadata;if(void 0===o)throw new Error(P+" "+e+".");var r=s.userGeneratedMetadata,a=Object.keys(r),l=0===i.length&&a.length>0,c=a.length>i.length,h=function(t,e,i,n,s){for(var o=[],r=0;r<s;r++){var a=_t(r,t,e,i,n);null!==a&&o.push(a)}return o}(n,e,o,r,l||c?a.length:i.length),u=bt(t,i,e);return mt(mt([],h,!0),u,!0)}function _t(t,e,i,n,s){var o=s[t.toString()]||[],r=xt(o),a=!0!==r.unmanaged,l=n[t];if((l=r.inject||r.multiInject||l)instanceof pt&&(l=l.unwrap()),a){if(!e&&(l===Object||l===Function||void 0===l))throw new Error(E+" argument "+t+" in class "+i+".");var c=new gt(J.ConstructorArgument,r.targetName,l);return c.metadata=o,c}return null}function yt(t,e,i,n){var s=t||e;if(void 0===s){var o=P+" for property "+String(i)+" in class "+n+".";throw new Error(o)}return s}function bt(t,e,i){for(var n=t.getPropertiesMetadata(e),s=[],o=Object.getOwnPropertySymbols(n),r=0,a=Object.keys(n).concat(o);r<a.length;r++){var l=a[r],c=n[l],h=xt(c),u=h.targetName||l,d=yt(h.inject,h.multiInject,l,i),p=new gt(J.ClassProperty,u,d);p.metadata=c,s.push(p)}var f=Object.getPrototypeOf(e.prototype).constructor;if(f!==Object){var g=bt(t,f,i);s=mt(mt([],s,!0),g,!0)}return s}function wt(t,e){var i=Object.getPrototypeOf(e.prototype).constructor;if(i!==Object){var n=vt(t,ct(i),i,!0),s=n.map((function(t){return t.metadata.filter((function(t){return t.key===W}))})),o=[].concat.apply([],s).length,r=n.length-o;return r>0?r:wt(t,i)}return 0}function xt(t){var e={};return t.forEach((function(t){e[t.key.toString()]=t.value})),{inject:e[F],multiInject:e[L],targetName:e[z],unmanaged:e[W]}}var kt=function(){function t(t,e,i,n,s){this.id=tt(),this.serviceIdentifier=t,this.parentContext=e,this.parentRequest=i,this.target=s,this.childRequests=[],this.bindings=Array.isArray(n)?n:[n],this.requestScope=null===i?new Map:null}return t.prototype.addChildRequest=function(e,i,n){var s=new t(e,this.parentContext,this,i,n);return this.childRequests.push(s),s},t}();function Ct(t){return t._bindingDictionary}function Dt(t,e,i,n,s){var o,r=At(i.container,s.serviceIdentifier);return r.length===nt.NoBindingsAvailable&&i.container.options.autoBindInjectable&&"function"==typeof s.serviceIdentifier&&t.getConstructorMetadata(s.serviceIdentifier).compilerGeneratedMetadata&&(i.container.bind(s.serviceIdentifier).toSelf(),r=At(i.container,s.serviceIdentifier)),o=e?r:r.filter((function(t){var e=new kt(t.serviceIdentifier,i,n,t,s);return t.constraint(e)})),function(t,e,i,n){switch(e.length){case nt.NoBindingsAvailable:if(i.isOptional())return e;var s=ot(t),o=I;throw o+=function(t,e){if(e.isTagged()||e.isNamed()){var i="",n=e.getNamedTag(),s=e.getCustomTags();return null!==n&&(i+=n.toString()+"\n"),null!==s&&s.forEach((function(t){i+=t.toString()+"\n"}))," "+t+"\n "+t+" - "+i}return" "+t}(s,i),o+=rt(n,s,At),new Error(o);case nt.OnlyOneBindingAvailable:return e;case nt.MultipleBindingsAvailable:default:if(i.isArray())return e;throw s=ot(t),o=S+" "+s,o+=rt(n,s,At),new Error(o)}}(s.serviceIdentifier,o,s,i.container),o}function Tt(t,e,i,n,s,o){var r,a;if(null===s){r=Dt(t,e,n,null,o),a=new kt(i,n,null,r,o);var l=new dt(n,a);n.addPlan(l)}else r=Dt(t,e,n,s,o),a=s.addChildRequest(o.serviceIdentifier,r,o);r.forEach((function(e){var i=null;if(o.isArray())i=a.addChildRequest(e.serviceIdentifier,e,o);else{if(e.cache)return;i=a}if(e.type===Z.Instance&&null!==e.implementationType){var s=function(t,e){return vt(t,ct(e),e,!1)}(t,e.implementationType);if(!n.container.options.skipBaseClassChecks){var r=wt(t,e.implementationType);if(s.length<r){var l=O(ct(e.implementationType));throw new Error(l)}}s.forEach((function(e){Tt(t,!1,e.serviceIdentifier,n,i,e)}))}}))}function At(t,e){var i=[],n=Ct(t);return n.hasKey(e)?i=n.get(e):null!==t.parent&&(i=At(t.parent,e)),i}function St(t){return("object"==typeof t&&null!==t||"function"==typeof t)&&"function"==typeof t.then}function It(t){return!!St(t)||Array.isArray(t)&&t.some(St)}var Pt,Et=function(t,e){return i=void 0,n=void 0,o=function(){var i,n;return function(t,e){var i,n,s,o,r={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(i)throw new TypeError("Generator is already executing.");for(;r;)try{if(i=1,n&&(s=2&o[0]?n.return:o[0]?n.throw||((s=n.return)&&s.call(n),0):n.next)&&!(s=s.call(n,o[1])).done)return s;switch(n=0,s&&(o=[2&o[0],s.value]),o[0]){case 0:case 1:s=o;break;case 4:return r.label++,{value:o[1],done:!1};case 5:r.label++,n=o[1],o=[0];continue;case 7:o=r.ops.pop(),r.trys.pop();continue;default:if(!((s=(s=r.trys).length>0&&s[s.length-1])||6!==o[0]&&2!==o[0])){r=0;continue}if(3===o[0]&&(!s||o[1]>s[0]&&o[1]<s[3])){r.label=o[1];break}if(6===o[0]&&r.label<s[1]){r.label=s[1],s=o;break}if(s&&r.label<s[2]){r.label=s[2],r.ops.push(o);break}s[2]&&r.ops.pop(),r.trys.pop();continue}o=e.call(t,r)}catch(t){o=[6,t],n=0}finally{i=s=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}}(this,(function(s){switch(s.label){case 0:return s.trys.push([0,2,,3]),[4,e];case 1:return i=s.sent(),t.cache=i,[3,3];case 2:throw n=s.sent(),t.cache=null,t.activated=!1,n;case 3:return[2]}}))},new((s=void 0)||(s=Promise))((function(t,e){function r(t){try{l(o.next(t))}catch(t){e(t)}}function a(t){try{l(o.throw(t))}catch(t){e(t)}}function l(e){var i;e.done?t(e.value):(i=e.value,i instanceof s?i:new s((function(t){t(i)}))).then(r,a)}l((o=o.apply(i,n||[])).next())}));var i,n,s,o};!function(t){t.DynamicValue="toDynamicValue",t.Factory="toFactory",t.Provider="toProvider"}(Pt||(Pt={}));var Mt=function(){return Mt=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var s in e=arguments[i])Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s]);return t},Mt.apply(this,arguments)},Ot=function(t,e,i,n){return new(i||(i=Promise))((function(s,o){function r(t){try{l(n.next(t))}catch(t){o(t)}}function a(t){try{l(n.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,a)}l((n=n.apply(t,e||[])).next())}))},Nt=function(t,e){var i,n,s,o,r={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(i)throw new TypeError("Generator is already executing.");for(;r;)try{if(i=1,n&&(s=2&o[0]?n.return:o[0]?n.throw||((s=n.return)&&s.call(n),0):n.next)&&!(s=s.call(n,o[1])).done)return s;switch(n=0,s&&(o=[2&o[0],s.value]),o[0]){case 0:case 1:s=o;break;case 4:return r.label++,{value:o[1],done:!1};case 5:r.label++,n=o[1],o=[0];continue;case 7:o=r.ops.pop(),r.trys.pop();continue;default:if(!((s=(s=r.trys).length>0&&s[s.length-1])||6!==o[0]&&2!==o[0])){r=0;continue}if(3===o[0]&&(!s||o[1]>s[0]&&o[1]<s[3])){r.label=o[1];break}if(6===o[0]&&r.label<s[1]){r.label=s[1],s=o;break}if(s&&r.label<s[2]){r.label=s[2],r.ops.push(o);break}s[2]&&r.ops.pop(),r.trys.pop();continue}o=e.call(t,r)}catch(t){o=[6,t],n=0}finally{i=s=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},Ht=function(t,e,i){if(i||2===arguments.length)for(var n,s=0,o=e.length;s<o;s++)!n&&s in e||(n||(n=Array.prototype.slice.call(e,0,s)),n[s]=e[s]);return t.concat(n||Array.prototype.slice.call(e))};function jt(t){var e,i=new((e=t.constr).bind.apply(e,Ht([void 0],t.constructorInjections,!1)));return t.propertyRequests.forEach((function(e,n){var s=e.target.identifier,o=t.propertyInjections[n];i[s]=o})),i}function zt(t){return Ot(this,void 0,void 0,(function(){var e,i,n,s;return Nt(this,(function(o){for(e=[],i=0,n=t;i<n.length;i++)s=n[i],Array.isArray(s)?e.push(Promise.all(s)):e.push(s);return[2,Promise.all(e)]}))}))}function Wt(t,e){var i=function(t,e){var i,n,s,o;if(Reflect.hasMetadata(Y,t)){var r=Reflect.getMetadata(Y,t);try{return null===(n=(i=e)[r.value])||void 0===n?void 0:n.call(i)}catch(e){throw new Error((s=t.name,o=e.message,"@postConstruct error in class "+s+": "+o))}}}(t,e);return St(i)?i.then((function(){return e})):e}var Rt=function(t){return function(e){e.parentContext.setCurrentRequest(e);var i=e.bindings,n=e.childRequests,s=e.target&&e.target.isArray(),o=!(e.parentRequest&&e.parentRequest.target&&e.target&&e.parentRequest.target.matchesArray(e.target.serviceIdentifier));if(s&&o)return n.map((function(e){return Rt(t)(e)}));if(!e.target.isOptional()||0!==i.length){var r=i[0];return Bt(t,e,r)}}},Ft=function(t,e){var i=function(t){switch(t.type){case Z.Factory:return{factory:t.factory,factoryType:Pt.Factory};case Z.Provider:return{factory:t.provider,factoryType:Pt.Provider};case Z.DynamicValue:return{factory:t.dynamicValue,factoryType:Pt.DynamicValue};default:throw new Error("Unexpected factory type "+t.type)}}(t);return function(n,s){try{return i.factory.bind(t)(e)}catch(t){throw st(t)&&(t=new Error((o=i.factoryType,r=e.currentRequest.serviceIdentifier.toString(),"It looks like there is a circular dependency in one of the '"+o+"' bindings. Please investigate bindings withservice identifier '"+r+"'."))),t}var o,r}()},Lt=function(t,e,i){var n,s=e.childRequests;switch(function(t){var e=null;switch(t.type){case Z.ConstantValue:case Z.Function:e=t.cache;break;case Z.Constructor:case Z.Instance:e=t.implementationType;break;case Z.DynamicValue:e=t.dynamicValue;break;case Z.Provider:e=t.provider;break;case Z.Factory:e=t.factory}if(null===e){var i=ot(t.serviceIdentifier);throw new Error("Invalid binding type: "+i)}}(i),i.type){case Z.ConstantValue:case Z.Function:n=i.cache;break;case Z.Constructor:n=i.implementationType;break;case Z.Instance:n=function(t,e,i,n){!function(t,e){t.scope!==G&&function(t,e){var i="Class cannot be instantiated in "+(t.scope===$?"request":"transient")+" scope.";if("function"==typeof t.onDeactivation)throw new Error(N(e.name,i));if(Reflect.hasMetadata(U,e))throw new Error("@preDestroy error in class "+e.name+": "+i)}(t,e)}(t,e);var s=function(t,e,i){var n;if(e.length>0){var s=function(t,e){return t.reduce((function(t,i){var n=e(i);return i.target.type===J.ConstructorArgument?t.constructorInjections.push(n):(t.propertyRequests.push(i),t.propertyInjections.push(n)),t.isAsync||(t.isAsync=It(n)),t}),{constructorInjections:[],propertyInjections:[],propertyRequests:[],isAsync:!1})}(e,i),o=Mt(Mt({},s),{constr:t});n=s.isAsync?function(t){return Ot(this,void 0,void 0,(function(){var e,i;return Nt(this,(function(n){switch(n.label){case 0:return[4,zt(t.constructorInjections)];case 1:return e=n.sent(),[4,zt(t.propertyInjections)];case 2:return i=n.sent(),[2,jt(Mt(Mt({},t),{constructorInjections:e,propertyInjections:i}))]}}))}))}(o):jt(o)}else n=new t;return n}(e,i,n);return St(s)?s.then((function(t){return Wt(e,t)})):Wt(e,s)}(i,i.implementationType,s,Rt(t));break;default:n=Ft(i,e.parentContext)}return n},qt=function(t,e,i){var n=function(t,e){return e.scope===G&&e.activated?e.cache:e.scope===$&&t.has(e.id)?t.get(e.id):null}(t,e);return null!==n||function(t,e,i){e.scope===G&&function(t,e){t.cache=e,t.activated=!0,St(e)&&Et(t,e)}(e,i),e.scope===$&&function(t,e,i){t.has(e.id)||t.set(e.id,i)}(t,e,i)}(t,e,n=i()),n},Bt=function(t,e,i){return qt(t,i,(function(){var n=Lt(t,e,i);return St(n)?n.then((function(t){return Yt(e,i,t)})):Yt(e,i,n)}))};function Yt(t,e,i){var n,s=Ut(t.parentContext,e,i),o=Gt(t.parentContext.container),r=o.next();do{n=r.value;var a=t.parentContext,l=t.serviceIdentifier,c=$t(n,l);s=St(s)?Kt(c,a,s):Vt(c,a,s),r=o.next()}while(!0!==r.done&&!Ct(n).hasKey(t.serviceIdentifier));return s}var Ut=function(t,e,i){return"function"==typeof e.onActivation?e.onActivation(t,i):i},Vt=function(t,e,i){for(var n=t.next();!n.done;){if(St(i=n.value(e,i)))return Kt(t,e,i);n=t.next()}return i},Kt=function(t,e,i){return n=void 0,s=void 0,r=function(){var n,s;return function(t,e){var i,n,s,o,r={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(i)throw new TypeError("Generator is already executing.");for(;r;)try{if(i=1,n&&(s=2&o[0]?n.return:o[0]?n.throw||((s=n.return)&&s.call(n),0):n.next)&&!(s=s.call(n,o[1])).done)return s;switch(n=0,s&&(o=[2&o[0],s.value]),o[0]){case 0:case 1:s=o;break;case 4:return r.label++,{value:o[1],done:!1};case 5:r.label++,n=o[1],o=[0];continue;case 7:o=r.ops.pop(),r.trys.pop();continue;default:if(!((s=(s=r.trys).length>0&&s[s.length-1])||6!==o[0]&&2!==o[0])){r=0;continue}if(3===o[0]&&(!s||o[1]>s[0]&&o[1]<s[3])){r.label=o[1];break}if(6===o[0]&&r.label<s[1]){r.label=s[1],s=o;break}if(s&&r.label<s[2]){r.label=s[2],r.ops.push(o);break}s[2]&&r.ops.pop(),r.trys.pop();continue}o=e.call(t,r)}catch(t){o=[6,t],n=0}finally{i=s=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}}(this,(function(o){switch(o.label){case 0:return[4,i];case 1:n=o.sent(),s=t.next(),o.label=2;case 2:return s.done?[3,4]:[4,s.value(e,n)];case 3:return n=o.sent(),s=t.next(),[3,2];case 4:return[2,n]}}))},new((o=void 0)||(o=Promise))((function(t,e){function i(t){try{l(r.next(t))}catch(t){e(t)}}function a(t){try{l(r.throw(t))}catch(t){e(t)}}function l(e){var n;e.done?t(e.value):(n=e.value,n instanceof o?n:new o((function(t){t(n)}))).then(i,a)}l((r=r.apply(n,s||[])).next())}));var n,s,o,r},$t=function(t,e){var i=t._activations;return i.hasKey(e)?i.get(e).values():[].values()},Gt=function(t){for(var e=[t],i=t.parent;null!==i;)e.push(i),i=i.parent;return{next:function(){var t=e.pop();return void 0!==t?{done:!1,value:t}:{done:!0,value:void 0}}}},Xt=function(t,e){var i=t.parentRequest;return null!==i&&(!!e(i)||Xt(i,e))},Zt=function(t){return function(e){var i=function(i){return null!==i&&null!==i.target&&i.target.matchesTag(t)(e)};return i.metaData=new ut(t,e),i}},Jt=Zt(j),Qt=function(t){return function(e){var i=null;if(null!==e){if(i=e.bindings[0],"string"==typeof t)return i.serviceIdentifier===t;var n=e.bindings[0].implementationType;return t===n}return!1}},te=function(){function t(t){this._binding=t}return t.prototype.when=function(t){return this._binding.constraint=t,new ee(this._binding)},t.prototype.whenTargetNamed=function(t){return this._binding.constraint=Jt(t),new ee(this._binding)},t.prototype.whenTargetIsDefault=function(){return this._binding.constraint=function(t){return null!==t&&null!==t.target&&!t.target.isNamed()&&!t.target.isTagged()},new ee(this._binding)},t.prototype.whenTargetTagged=function(t,e){return this._binding.constraint=Zt(t)(e),new ee(this._binding)},t.prototype.whenInjectedInto=function(t){return this._binding.constraint=function(e){return null!==e&&Qt(t)(e.parentRequest)},new ee(this._binding)},t.prototype.whenParentNamed=function(t){return this._binding.constraint=function(e){return null!==e&&Jt(t)(e.parentRequest)},new ee(this._binding)},t.prototype.whenParentTagged=function(t,e){return this._binding.constraint=function(i){return null!==i&&Zt(t)(e)(i.parentRequest)},new ee(this._binding)},t.prototype.whenAnyAncestorIs=function(t){return this._binding.constraint=function(e){return null!==e&&Xt(e,Qt(t))},new ee(this._binding)},t.prototype.whenNoAncestorIs=function(t){return this._binding.constraint=function(e){return null!==e&&!Xt(e,Qt(t))},new ee(this._binding)},t.prototype.whenAnyAncestorNamed=function(t){return this._binding.constraint=function(e){return null!==e&&Xt(e,Jt(t))},new ee(this._binding)},t.prototype.whenNoAncestorNamed=function(t){return this._binding.constraint=function(e){return null!==e&&!Xt(e,Jt(t))},new ee(this._binding)},t.prototype.whenAnyAncestorTagged=function(t,e){return this._binding.constraint=function(i){return null!==i&&Xt(i,Zt(t)(e))},new ee(this._binding)},t.prototype.whenNoAncestorTagged=function(t,e){return this._binding.constraint=function(i){return null!==i&&!Xt(i,Zt(t)(e))},new ee(this._binding)},t.prototype.whenAnyAncestorMatches=function(t){return this._binding.constraint=function(e){return null!==e&&Xt(e,t)},new ee(this._binding)},t.prototype.whenNoAncestorMatches=function(t){return this._binding.constraint=function(e){return null!==e&&!Xt(e,t)},new ee(this._binding)},t}(),ee=function(){function t(t){this._binding=t}return t.prototype.onActivation=function(t){return this._binding.onActivation=t,new te(this._binding)},t.prototype.onDeactivation=function(t){return this._binding.onDeactivation=t,new te(this._binding)},t}(),ie=function(){function t(t){this._binding=t,this._bindingWhenSyntax=new te(this._binding),this._bindingOnSyntax=new ee(this._binding)}return t.prototype.when=function(t){return this._bindingWhenSyntax.when(t)},t.prototype.whenTargetNamed=function(t){return this._bindingWhenSyntax.whenTargetNamed(t)},t.prototype.whenTargetIsDefault=function(){return this._bindingWhenSyntax.whenTargetIsDefault()},t.prototype.whenTargetTagged=function(t,e){return this._bindingWhenSyntax.whenTargetTagged(t,e)},t.prototype.whenInjectedInto=function(t){return this._bindingWhenSyntax.whenInjectedInto(t)},t.prototype.whenParentNamed=function(t){return this._bindingWhenSyntax.whenParentNamed(t)},t.prototype.whenParentTagged=function(t,e){return this._bindingWhenSyntax.whenParentTagged(t,e)},t.prototype.whenAnyAncestorIs=function(t){return this._bindingWhenSyntax.whenAnyAncestorIs(t)},t.prototype.whenNoAncestorIs=function(t){return this._bindingWhenSyntax.whenNoAncestorIs(t)},t.prototype.whenAnyAncestorNamed=function(t){return this._bindingWhenSyntax.whenAnyAncestorNamed(t)},t.prototype.whenAnyAncestorTagged=function(t,e){return this._bindingWhenSyntax.whenAnyAncestorTagged(t,e)},t.prototype.whenNoAncestorNamed=function(t){return this._bindingWhenSyntax.whenNoAncestorNamed(t)},t.prototype.whenNoAncestorTagged=function(t,e){return this._bindingWhenSyntax.whenNoAncestorTagged(t,e)},t.prototype.whenAnyAncestorMatches=function(t){return this._bindingWhenSyntax.whenAnyAncestorMatches(t)},t.prototype.whenNoAncestorMatches=function(t){return this._bindingWhenSyntax.whenNoAncestorMatches(t)},t.prototype.onActivation=function(t){return this._bindingOnSyntax.onActivation(t)},t.prototype.onDeactivation=function(t){return this._bindingOnSyntax.onDeactivation(t)},t}(),ne=function(){function t(t){this._binding=t}return t.prototype.inRequestScope=function(){return this._binding.scope=$,new ie(this._binding)},t.prototype.inSingletonScope=function(){return this._binding.scope=G,new ie(this._binding)},t.prototype.inTransientScope=function(){return this._binding.scope=X,new ie(this._binding)},t}(),se=function(){function t(t){this._binding=t,this._bindingWhenSyntax=new te(this._binding),this._bindingOnSyntax=new ee(this._binding),this._bindingInSyntax=new ne(t)}return t.prototype.inRequestScope=function(){return this._bindingInSyntax.inRequestScope()},t.prototype.inSingletonScope=function(){return this._bindingInSyntax.inSingletonScope()},t.prototype.inTransientScope=function(){return this._bindingInSyntax.inTransientScope()},t.prototype.when=function(t){return this._bindingWhenSyntax.when(t)},t.prototype.whenTargetNamed=function(t){return this._bindingWhenSyntax.whenTargetNamed(t)},t.prototype.whenTargetIsDefault=function(){return this._bindingWhenSyntax.whenTargetIsDefault()},t.prototype.whenTargetTagged=function(t,e){return this._bindingWhenSyntax.whenTargetTagged(t,e)},t.prototype.whenInjectedInto=function(t){return this._bindingWhenSyntax.whenInjectedInto(t)},t.prototype.whenParentNamed=function(t){return this._bindingWhenSyntax.whenParentNamed(t)},t.prototype.whenParentTagged=function(t,e){return this._bindingWhenSyntax.whenParentTagged(t,e)},t.prototype.whenAnyAncestorIs=function(t){return this._bindingWhenSyntax.whenAnyAncestorIs(t)},t.prototype.whenNoAncestorIs=function(t){return this._bindingWhenSyntax.whenNoAncestorIs(t)},t.prototype.whenAnyAncestorNamed=function(t){return this._bindingWhenSyntax.whenAnyAncestorNamed(t)},t.prototype.whenAnyAncestorTagged=function(t,e){return this._bindingWhenSyntax.whenAnyAncestorTagged(t,e)},t.prototype.whenNoAncestorNamed=function(t){return this._bindingWhenSyntax.whenNoAncestorNamed(t)},t.prototype.whenNoAncestorTagged=function(t,e){return this._bindingWhenSyntax.whenNoAncestorTagged(t,e)},t.prototype.whenAnyAncestorMatches=function(t){return this._bindingWhenSyntax.whenAnyAncestorMatches(t)},t.prototype.whenNoAncestorMatches=function(t){return this._bindingWhenSyntax.whenNoAncestorMatches(t)},t.prototype.onActivation=function(t){return this._bindingOnSyntax.onActivation(t)},t.prototype.onDeactivation=function(t){return this._bindingOnSyntax.onDeactivation(t)},t}(),oe=function(){function t(t){this._binding=t}return t.prototype.to=function(t){return this._binding.type=Z.Instance,this._binding.implementationType=t,new se(this._binding)},t.prototype.toSelf=function(){if("function"!=typeof this._binding.serviceIdentifier)throw new Error("The toSelf function can only be applied when a constructor is used as service identifier");var t=this._binding.serviceIdentifier;return this.to(t)},t.prototype.toConstantValue=function(t){return this._binding.type=Z.ConstantValue,this._binding.cache=t,this._binding.dynamicValue=null,this._binding.implementationType=null,this._binding.scope=G,new ie(this._binding)},t.prototype.toDynamicValue=function(t){return this._binding.type=Z.DynamicValue,this._binding.cache=null,this._binding.dynamicValue=t,this._binding.implementationType=null,new se(this._binding)},t.prototype.toConstructor=function(t){return this._binding.type=Z.Constructor,this._binding.implementationType=t,this._binding.scope=G,new ie(this._binding)},t.prototype.toFactory=function(t){return this._binding.type=Z.Factory,this._binding.factory=t,this._binding.scope=G,new ie(this._binding)},t.prototype.toFunction=function(t){if("function"!=typeof t)throw new Error("Value provided to function binding must be a function!");var e=this.toConstantValue(t);return this._binding.type=Z.Function,this._binding.scope=G,e},t.prototype.toAutoFactory=function(t){return this._binding.type=Z.Factory,this._binding.factory=function(e){return function(){return e.container.get(t)}},this._binding.scope=G,new ie(this._binding)},t.prototype.toAutoNamedFactory=function(t){return this._binding.type=Z.Factory,this._binding.factory=function(e){return function(i){return e.container.getNamed(t,i)}},new ie(this._binding)},t.prototype.toProvider=function(t){return this._binding.type=Z.Provider,this._binding.provider=t,this._binding.scope=G,new ie(this._binding)},t.prototype.toService=function(t){this.toDynamicValue((function(e){return e.container.get(t)}))},t}(),re=function(){function t(){}return t.of=function(e,i,n,s,o){var r=new t;return r.bindings=e,r.middleware=i,r.deactivations=s,r.activations=n,r.moduleActivationStore=o,r},t}(),ae=function(){function t(){this._map=new Map}return t.prototype.getMap=function(){return this._map},t.prototype.add=function(t,e){if(null==t)throw new Error(T);if(null==e)throw new Error(T);var i=this._map.get(t);void 0!==i?i.push(e):this._map.set(t,[e])},t.prototype.get=function(t){if(null==t)throw new Error(T);var e=this._map.get(t);if(void 0!==e)return e;throw new Error(A)},t.prototype.remove=function(t){if(null==t)throw new Error(T);if(!this._map.delete(t))throw new Error(A)},t.prototype.removeIntersection=function(t){var e=this;this.traverse((function(i,n){var s=t.hasKey(i)?t.get(i):void 0;if(void 0!==s){var o=n.filter((function(t){return!s.some((function(e){return t===e}))}));e._setValue(i,o)}}))},t.prototype.removeByCondition=function(t){var e=this,i=[];return this._map.forEach((function(n,s){for(var o=[],r=0,a=n;r<a.length;r++){var l=a[r];t(l)?i.push(l):o.push(l)}e._setValue(s,o)})),i},t.prototype.hasKey=function(t){if(null==t)throw new Error(T);return this._map.has(t)},t.prototype.clone=function(){var e=new t;return this._map.forEach((function(t,i){t.forEach((function(t){return e.add(i,"object"==typeof(n=t)&&null!==n&&"clone"in n&&"function"==typeof n.clone?t.clone():t);var n}))})),e},t.prototype.traverse=function(t){this._map.forEach((function(e,i){t(i,e)}))},t.prototype._setValue=function(t,e){e.length>0?this._map.set(t,e):this._map.delete(t)},t}(),le=function(){function t(){this._map=new Map}return t.prototype.remove=function(t){if(this._map.has(t)){var e=this._map.get(t);return this._map.delete(t),e}return this._getEmptyHandlersStore()},t.prototype.addDeactivation=function(t,e,i){this._getModuleActivationHandlers(t).onDeactivations.add(e,i)},t.prototype.addActivation=function(t,e,i){this._getModuleActivationHandlers(t).onActivations.add(e,i)},t.prototype.clone=function(){var e=new t;return this._map.forEach((function(t,i){e._map.set(i,{onActivations:t.onActivations.clone(),onDeactivations:t.onDeactivations.clone()})})),e},t.prototype._getModuleActivationHandlers=function(t){var e=this._map.get(t);return void 0===e&&(e=this._getEmptyHandlersStore(),this._map.set(t,e)),e},t.prototype._getEmptyHandlersStore=function(){return{onActivations:new ae,onDeactivations:new ae}},t}(),ce=function(){return ce=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var s in e=arguments[i])Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s]);return t},ce.apply(this,arguments)},he=function(t,e,i,n){return new(i||(i=Promise))((function(s,o){function r(t){try{l(n.next(t))}catch(t){o(t)}}function a(t){try{l(n.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,a)}l((n=n.apply(t,e||[])).next())}))},ue=function(t,e){var i,n,s,o,r={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(i)throw new TypeError("Generator is already executing.");for(;r;)try{if(i=1,n&&(s=2&o[0]?n.return:o[0]?n.throw||((s=n.return)&&s.call(n),0):n.next)&&!(s=s.call(n,o[1])).done)return s;switch(n=0,s&&(o=[2&o[0],s.value]),o[0]){case 0:case 1:s=o;break;case 4:return r.label++,{value:o[1],done:!1};case 5:r.label++,n=o[1],o=[0];continue;case 7:o=r.ops.pop(),r.trys.pop();continue;default:if(!((s=(s=r.trys).length>0&&s[s.length-1])||6!==o[0]&&2!==o[0])){r=0;continue}if(3===o[0]&&(!s||o[1]>s[0]&&o[1]<s[3])){r.label=o[1];break}if(6===o[0]&&r.label<s[1]){r.label=s[1],s=o;break}if(s&&r.label<s[2]){r.label=s[2],r.ops.push(o);break}s[2]&&r.ops.pop(),r.trys.pop();continue}o=e.call(t,r)}catch(t){o=[6,t],n=0}finally{i=s=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},de=function(){function t(t){var e=t||{};if("object"!=typeof e)throw new Error("Invalid Container constructor argument. Container options must be an object.");if(void 0===e.defaultScope)e.defaultScope=X;else if(e.defaultScope!==G&&e.defaultScope!==X&&e.defaultScope!==$)throw new Error("Invalid Container option. Default scope must be a string ('singleton' or 'transient').");if(void 0===e.autoBindInjectable)e.autoBindInjectable=!1;else if("boolean"!=typeof e.autoBindInjectable)throw new Error("Invalid Container option. Auto bind injectable must be a boolean");if(void 0===e.skipBaseClassChecks)e.skipBaseClassChecks=!1;else if("boolean"!=typeof e.skipBaseClassChecks)throw new Error("Invalid Container option. Skip base check must be a boolean");this.options={autoBindInjectable:e.autoBindInjectable,defaultScope:e.defaultScope,skipBaseClassChecks:e.skipBaseClassChecks},this.id=tt(),this._bindingDictionary=new ae,this._snapshots=[],this._middleware=null,this._activations=new ae,this._deactivations=new ae,this.parent=null,this._metadataReader=new it,this._moduleActivationStore=new le}return t.merge=function(e,i){for(var n=[],s=2;s<arguments.length;s++)n[s-2]=arguments[s];var o=new t,r=function(t,e,i){if(i||2===arguments.length)for(var n,s=0,o=e.length;s<o;s++)!n&&s in e||(n||(n=Array.prototype.slice.call(e,0,s)),n[s]=e[s]);return t.concat(n||Array.prototype.slice.call(e))}([e,i],n,!0).map((function(t){return Ct(t)})),a=Ct(o);return r.forEach((function(t){var e;e=a,t.traverse((function(t,i){i.forEach((function(t){e.add(t.serviceIdentifier,t.clone())}))}))})),o},t.prototype.load=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var i=this._getContainerModuleHelpersFactory(),n=0,s=t;n<s.length;n++){var o=s[n],r=i(o.id);o.registry(r.bindFunction,r.unbindFunction,r.isboundFunction,r.rebindFunction,r.unbindAsyncFunction,r.onActivationFunction,r.onDeactivationFunction)}},t.prototype.loadAsync=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return he(this,void 0,void 0,(function(){var e,i,n,s,o;return ue(this,(function(r){switch(r.label){case 0:e=this._getContainerModuleHelpersFactory(),i=0,n=t,r.label=1;case 1:return i<n.length?(s=n[i],o=e(s.id),[4,s.registry(o.bindFunction,o.unbindFunction,o.isboundFunction,o.rebindFunction,o.unbindAsyncFunction,o.onActivationFunction,o.onDeactivationFunction)]):[3,4];case 2:r.sent(),r.label=3;case 3:return i++,[3,1];case 4:return[2]}}))}))},t.prototype.unload=function(){for(var t=this,e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];e.forEach((function(e){var i=t._removeModuleBindings(e.id);t._deactivateSingletons(i),t._removeModuleHandlers(e.id)}))},t.prototype.unloadAsync=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return he(this,void 0,void 0,(function(){var e,i,n,s;return ue(this,(function(o){switch(o.label){case 0:e=0,i=t,o.label=1;case 1:return e<i.length?(n=i[e],s=this._removeModuleBindings(n.id),[4,this._deactivateSingletonsAsync(s)]):[3,4];case 2:o.sent(),this._removeModuleHandlers(n.id),o.label=3;case 3:return e++,[3,1];case 4:return[2]}}))}))},t.prototype.bind=function(t){var e=this.options.defaultScope||X,i=new et(t,e);return this._bindingDictionary.add(t,i),new oe(i)},t.prototype.rebind=function(t){return this.unbind(t),this.bind(t)},t.prototype.rebindAsync=function(t){return he(this,void 0,void 0,(function(){return ue(this,(function(e){switch(e.label){case 0:return[4,this.unbindAsync(t)];case 1:return e.sent(),[2,this.bind(t)]}}))}))},t.prototype.unbind=function(t){if(this._bindingDictionary.hasKey(t)){var e=this._bindingDictionary.get(t);this._deactivateSingletons(e)}this._removeServiceFromDictionary(t)},t.prototype.unbindAsync=function(t){return he(this,void 0,void 0,(function(){var e;return ue(this,(function(i){switch(i.label){case 0:return this._bindingDictionary.hasKey(t)?(e=this._bindingDictionary.get(t),[4,this._deactivateSingletonsAsync(e)]):[3,2];case 1:i.sent(),i.label=2;case 2:return this._removeServiceFromDictionary(t),[2]}}))}))},t.prototype.unbindAll=function(){var t=this;this._bindingDictionary.traverse((function(e,i){t._deactivateSingletons(i)})),this._bindingDictionary=new ae},t.prototype.unbindAllAsync=function(){return he(this,void 0,void 0,(function(){var t,e=this;return ue(this,(function(i){switch(i.label){case 0:return t=[],this._bindingDictionary.traverse((function(i,n){t.push(e._deactivateSingletonsAsync(n))})),[4,Promise.all(t)];case 1:return i.sent(),this._bindingDictionary=new ae,[2]}}))}))},t.prototype.onActivation=function(t,e){this._activations.add(t,e)},t.prototype.onDeactivation=function(t,e){this._deactivations.add(t,e)},t.prototype.isBound=function(t){var e=this._bindingDictionary.hasKey(t);return!e&&this.parent&&(e=this.parent.isBound(t)),e},t.prototype.isCurrentBound=function(t){return this._bindingDictionary.hasKey(t)},t.prototype.isBoundNamed=function(t,e){return this.isBoundTagged(t,j,e)},t.prototype.isBoundTagged=function(t,e,i){var n=!1;if(this._bindingDictionary.hasKey(t)){var s=this._bindingDictionary.get(t),o=function(t,e,i,n){var s=new gt(J.Variable,"",e,new ut(i,n)),o=new ht(t);return new kt(e,o,null,[],s)}(this,t,e,i);n=s.some((function(t){return t.constraint(o)}))}return!n&&this.parent&&(n=this.parent.isBoundTagged(t,e,i)),n},t.prototype.snapshot=function(){this._snapshots.push(re.of(this._bindingDictionary.clone(),this._middleware,this._activations.clone(),this._deactivations.clone(),this._moduleActivationStore.clone()))},t.prototype.restore=function(){var t=this._snapshots.pop();if(void 0===t)throw new Error("No snapshot available to restore.");this._bindingDictionary=t.bindings,this._activations=t.activations,this._deactivations=t.deactivations,this._middleware=t.middleware,this._moduleActivationStore=t.moduleActivationStore},t.prototype.createChild=function(e){var i=new t(e||this.options);return i.parent=this,i},t.prototype.applyMiddleware=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var i=this._middleware?this._middleware:this._planAndResolve();this._middleware=t.reduce((function(t,e){return e(t)}),i)},t.prototype.applyCustomMetadataReader=function(t){this._metadataReader=t},t.prototype.get=function(t){var e=this._getNotAllArgs(t,!1);return this._getButThrowIfAsync(e)},t.prototype.getAsync=function(t){return he(this,void 0,void 0,(function(){var e;return ue(this,(function(i){return e=this._getNotAllArgs(t,!1),[2,this._get(e)]}))}))},t.prototype.getTagged=function(t,e,i){var n=this._getNotAllArgs(t,!1,e,i);return this._getButThrowIfAsync(n)},t.prototype.getTaggedAsync=function(t,e,i){return he(this,void 0,void 0,(function(){var n;return ue(this,(function(s){return n=this._getNotAllArgs(t,!1,e,i),[2,this._get(n)]}))}))},t.prototype.getNamed=function(t,e){return this.getTagged(t,j,e)},t.prototype.getNamedAsync=function(t,e){return this.getTaggedAsync(t,j,e)},t.prototype.getAll=function(t){var e=this._getAllArgs(t);return this._getButThrowIfAsync(e)},t.prototype.getAllAsync=function(t){var e=this._getAllArgs(t);return this._getAll(e)},t.prototype.getAllTagged=function(t,e,i){var n=this._getNotAllArgs(t,!0,e,i);return this._getButThrowIfAsync(n)},t.prototype.getAllTaggedAsync=function(t,e,i){var n=this._getNotAllArgs(t,!0,e,i);return this._getAll(n)},t.prototype.getAllNamed=function(t,e){return this.getAllTagged(t,j,e)},t.prototype.getAllNamedAsync=function(t,e){return this.getAllTaggedAsync(t,j,e)},t.prototype.resolve=function(t){var e=this.isBound(t);e||this.bind(t).toSelf();var i=this.get(t);return e||this.unbind(t),i},t.prototype._preDestroy=function(t,e){if(Reflect.hasMetadata(U,t))return e[Reflect.getMetadata(U,t).value]()},t.prototype._removeModuleHandlers=function(t){var e=this._moduleActivationStore.remove(t);this._activations.removeIntersection(e.onActivations),this._deactivations.removeIntersection(e.onDeactivations)},t.prototype._removeModuleBindings=function(t){return this._bindingDictionary.removeByCondition((function(e){return e.moduleId===t}))},t.prototype._deactivate=function(t,e){var i=this,n=Object.getPrototypeOf(e).constructor;try{if(this._deactivations.hasKey(t.serviceIdentifier)){var s=this._deactivateContainer(e,this._deactivations.get(t.serviceIdentifier).values());if(St(s))return this._handleDeactivationError(s.then((function(){return i._propagateContainerDeactivationThenBindingAndPreDestroyAsync(t,e,n)})),n)}var o=this._propagateContainerDeactivationThenBindingAndPreDestroy(t,e,n);if(St(o))return this._handleDeactivationError(o,n)}catch(t){throw new Error(N(n.name,t.message))}},t.prototype._handleDeactivationError=function(t,e){return he(this,void 0,void 0,(function(){var i;return ue(this,(function(n){switch(n.label){case 0:return n.trys.push([0,2,,3]),[4,t];case 1:return n.sent(),[3,3];case 2:throw i=n.sent(),new Error(N(e.name,i.message));case 3:return[2]}}))}))},t.prototype._deactivateContainer=function(t,e){for(var i=this,n=e.next();n.value;){var s=n.value(t);if(St(s))return s.then((function(){return i._deactivateContainerAsync(t,e)}));n=e.next()}},t.prototype._deactivateContainerAsync=function(t,e){return he(this,void 0,void 0,(function(){var i;return ue(this,(function(n){switch(n.label){case 0:i=e.next(),n.label=1;case 1:return i.value?[4,i.value(t)]:[3,3];case 2:return n.sent(),i=e.next(),[3,1];case 3:return[2]}}))}))},t.prototype._getContainerModuleHelpersFactory=function(){var t=this,e=function(t,e){t._binding.moduleId=e},i=function(i){return function(n){var s=t.rebind(n);return e(s,i),s}},n=function(e){return function(i,n){t._moduleActivationStore.addActivation(e,i,n),t.onActivation(i,n)}},s=function(e){return function(i,n){t._moduleActivationStore.addDeactivation(e,i,n),t.onDeactivation(i,n)}};return function(o){return{bindFunction:(r=o,function(i){var n=t.bind(i);return e(n,r),n}),isboundFunction:function(e){return t.isBound(e)},onActivationFunction:n(o),onDeactivationFunction:s(o),rebindFunction:i(o),unbindFunction:function(e){return t.unbind(e)},unbindAsyncFunction:function(e){return t.unbindAsync(e)}};var r}},t.prototype._getAll=function(t){return Promise.all(this._get(t))},t.prototype._get=function(t){var e=ce(ce({},t),{contextInterceptor:function(t){return t},targetType:J.Variable});if(this._middleware){var i=this._middleware(e);if(null==i)throw new Error("Invalid return type in middleware. Middleware must return!");return i}return this._planAndResolve()(e)},t.prototype._getButThrowIfAsync=function(t){var e=this._get(t);if(It(e))throw new Error("You are attempting to construct '"+t.serviceIdentifier+"' in a synchronous way\n but it has asynchronous dependencies.");return e},t.prototype._getAllArgs=function(t){return{avoidConstraints:!0,isMultiInject:!0,serviceIdentifier:t}},t.prototype._getNotAllArgs=function(t,e,i,n){return{avoidConstraints:!1,isMultiInject:e,serviceIdentifier:t,key:i,value:n}},t.prototype._planAndResolve=function(){var t=this;return function(e){var i=function(t,e,i,n,s,o,r,a){void 0===a&&(a=!1);var l=new ht(e),c=function(t,e,i,n,s,o){var r=new ut(t?L:F,i),a=new gt(e,"",i,r);if(void 0!==s){var l=new ut(s,o);a.metadata.push(l)}return a}(i,n,s,0,o,r);try{return Tt(t,a,s,l,null,c),l}catch(t){throw st(t)&&lt(l.plan.rootRequest),t}}(t._metadataReader,t,e.isMultiInject,e.targetType,e.serviceIdentifier,e.key,e.value,e.avoidConstraints);return function(t){return Rt(t.plan.rootRequest.requestScope)(t.plan.rootRequest)}(i=e.contextInterceptor(i))}},t.prototype._deactivateIfSingleton=function(t){var e=this;if(t.activated)return St(t.cache)?t.cache.then((function(i){return e._deactivate(t,i)})):this._deactivate(t,t.cache)},t.prototype._deactivateSingletons=function(t){for(var e=0,i=t;e<i.length;e++){var n=i[e];if(St(this._deactivateIfSingleton(n)))throw new Error("Attempting to unbind dependency with asynchronous destruction (@preDestroy or onDeactivation)")}},t.prototype._deactivateSingletonsAsync=function(t){return he(this,void 0,void 0,(function(){var e=this;return ue(this,(function(i){switch(i.label){case 0:return[4,Promise.all(t.map((function(t){return e._deactivateIfSingleton(t)})))];case 1:return i.sent(),[2]}}))}))},t.prototype._propagateContainerDeactivationThenBindingAndPreDestroy=function(t,e,i){return this.parent?this._deactivate.bind(this.parent)(t,e):this._bindingDeactivationAndPreDestroy(t,e,i)},t.prototype._propagateContainerDeactivationThenBindingAndPreDestroyAsync=function(t,e,i){return he(this,void 0,void 0,(function(){return ue(this,(function(n){switch(n.label){case 0:return this.parent?[4,this._deactivate.bind(this.parent)(t,e)]:[3,2];case 1:return n.sent(),[3,4];case 2:return[4,this._bindingDeactivationAndPreDestroyAsync(t,e,i)];case 3:n.sent(),n.label=4;case 4:return[2]}}))}))},t.prototype._removeServiceFromDictionary=function(t){try{this._bindingDictionary.remove(t)}catch(e){throw new Error("Could not unbind serviceIdentifier: "+ot(t))}},t.prototype._bindingDeactivationAndPreDestroy=function(t,e,i){var n=this;if("function"==typeof t.onDeactivation){var s=t.onDeactivation(e);if(St(s))return s.then((function(){return n._preDestroy(i,e)}))}return this._preDestroy(i,e)},t.prototype._bindingDeactivationAndPreDestroyAsync=function(t,e,i){return he(this,void 0,void 0,(function(){return ue(this,(function(n){switch(n.label){case 0:return"function"!=typeof t.onDeactivation?[3,2]:[4,t.onDeactivation(e)];case 1:n.sent(),n.label=2;case 2:return[4,this._preDestroy(i,e)];case 3:return n.sent(),[2]}}))}))},t}(),pe=(i(539),i(379)),fe=i.n(pe),ge=i(795),me=i.n(ge),ve=i(569),_e=i.n(ve),ye=i(565),be=i.n(ye),we=i(216),xe=i.n(we),ke=i(589),Ce=i.n(ke),De=i(46),Te={};Te.styleTagTransform=Ce(),Te.setAttributes=be(),Te.insert=_e().bind(null,"head"),Te.domAPI=me(),Te.insertStyleElement=xe(),fe()(De.Z,Te),De.Z&&De.Z.locals&&De.Z.locals;let Ae=class{get TEG_jquery(){return c(this.TEG)}get TEG(){return{css:"custom",html:"test1",fun:t=>this.Teg=t}}};Ae=function(t,e,i,n){var s,o=arguments.length,r=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(s=t[a])&&(r=(o<3?s(r):o>3?s(e,i,r):s(e,i))||r);return o>3&&r&&Object.defineProperty(e,i,r),r}([K()],Ae);let Se=class{TEG_jquery(t=void 0){return this.ARGS=t,c(this.TEG)}get TEG(){return{fun:t=>this.fun_teg(t)}}get TEG2(){return{fun:t=>this.fun_teg(t)}}fun_teg(t){this.Teg=t}};Se=function(t,e,i,n){var s,o=arguments.length,r=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(s=t[a])&&(r=(o<3?s(r):o>3?s(e,i,r):s(e,i))||r);return o>3&&r&&Object.defineProperty(e,i,r),r}([K()],Se);let Ie=class extends Se{TEG_jquery(t=void 0){return this.ARGS=t,c(this.TEG2)}fun_teg(t){super.fun_teg(t),t.data("OBJ",this)}get TEG(){return{css:"custom",html:"test1"}}get TEG2(){let t=this.TEG;return"Teg_obj"==this.constructor.name?t:r(t,super.TEG2)}};Ie=function(t,e,i,n){var s,o=arguments.length,r=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(s=t[a])&&(r=(o<3?s(r):o>3?s(e,i,r):s(e,i))||r);return o>3&&r&&Object.defineProperty(e,i,r),r}([K()],Ie);var Pe=i(8),Ee=i(956),Me={};Me.styleTagTransform=Ce(),Me.setAttributes=be(),Me.insert=_e().bind(null,"head"),Me.domAPI=me(),Me.insertStyleElement=xe(),fe()(Ee.Z,Me),Ee.Z&&Ee.Z.locals&&Ee.Z.locals;var Oe;let Ne=Oe=class extends Pe.C{main(t){if(t.ev=t.ev||window.event,t.ev.cancelBubble=!0,this.Teg.css("display",""),this.Teg.empty(),t.fun){let e=t.fun({menu:this.Teg,el:t.el});e&&(e.body=this.Teg,c(e))}return k(this.Teg),!1}ev_none(){this.Teg.css("display","none")}fun_teg(t){Oe.Instance=this,super.fun_teg(t),d(document,"contextmenu",(()=>Oe.Instance.ev_none())),d(document,"click",(()=>Oe.Instance.ev_none()))}get TEG(){return{classes:"MENU",attr:{id:"contextMenuId"},css:"menu",html:["test"]}}};Ne=Oe=function(t,e,i,n){var s,o=arguments.length,r=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(s=t[a])&&(r=(o<3?s(r):o>3?s(e,i,r):s(e,i))||r);return o>3&&r&&Object.defineProperty(e,i,r),r}([K()],Ne);var He=i(545),je={};je.styleTagTransform=Ce(),je.setAttributes=be(),je.insert=_e().bind(null,"head"),je.domAPI=me(),je.insertStyleElement=xe(),fe()(He.Z,je),He.Z&&He.Z.locals&&He.Z.locals;let ze=class extends Pe.C{get TEG_body(){return{classes:"fm-abs-body",html:"empty"}}get TEG(){return{classes:"fm-abs",css:"fm-abs",html:this.TEG_body,event:{click:()=>this.click()}}}click(){this.Teg.css("z-index",(()=>(a.z+=1,a.z)))}show(t){return super.show(void 0),this.Teg.draggable(),this}ФормаВЦентре(){this.Teg.css("left","50%"),this.Teg.css("top","50%")}};ze=function(t,e,i,n){var s,o=arguments.length,r=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(s=t[a])&&(r=(o<3?s(r):o>3?s(e,i,r):s(e,i))||r);return o>3&&r&&Object.defineProperty(e,i,r),r}([K()],ze);var We=i(165),Re={};Re.styleTagTransform=Ce(),Re.setAttributes=be(),Re.insert=_e().bind(null,"head"),Re.domAPI=me(),Re.insertStyleElement=xe(),fe()(We.Z,Re),We.Z&&We.Z.locals&&We.Z.locals;class Fe extends Ie{fun_teg(t){super.fun_teg(t),Fe.Instance=this}get TEG(){return{css:"Fm-body",html:{html:[{html:"test"},{html:"test"},{html:"test"}]},event:{contextmenu:t=>({html:[{html:"test"}]})}}}}const Le=new de;Le.bind(C.ITEG_Custom).to(Se),Le.bind(C.ITEG_Custom).to(Ie),Le.bind(C.ITEG_Custom).to(Pe.C),Le.bind(C.ITEG_Custom).to(Ae),Le.bind(C.IFm_abs).to(ze),Le.bind(C.IMenu_2206161052).to(Ne),Le.bind(C.Fm_body).to(Fe),(new class{Метод(){const t=Le.get(C.Fm_body),e=Le.get(C.IMenu_2206161052);t.TEG_jquery(),e.TEG_jquery()}}).Метод()},8:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{C:()=>Teg_show});var _src_index__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(913),$=__webpack_require__(755),__decorate=function(t,e,i,n){var s,o=arguments.length,r=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,n);else for(var a=t.length-1;a>=0;a--)(s=t[a])&&(r=(o<3?s(r):o>3?s(e,i,r):s(e,i))||r);return o>3&&r&&Object.defineProperty(e,i,r),r};let Teg_show=class Teg_show extends _src_index__WEBPACK_IMPORTED_MODULE_0__.mi{fun_teg(t){super.fun_teg(t),this.show(void 0)}show(t){return(0,_src_index__WEBPACK_IMPORTED_MODULE_0__.Sl)(this.Teg),this}static show(ARGS){var _a;let cs="string"==typeof ARGS.cs?eval(ARGS.cs):ARGS.cs;null==(null===(_a=cs.Single)||void 0===_a?void 0:_a.Teg)?cs.Single=new cs(ARGS):cs.Single.show(void 0)}static show_id(t){let e=$(".id"+t.id);return 0==e.length?new t.cs(t):e.data("OBJ").show(void 0)}};Teg_show=__decorate([(0,_src_index__WEBPACK_IMPORTED_MODULE_0__.b2)()],Teg_show)},496:t=>{"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var i=function(){};i.prototype=e.prototype,t.prototype=new i,t.prototype.constructor=t}},384:t=>{t.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},539:(t,e,i)=>{var n=Object.getOwnPropertyDescriptors||function(t){for(var e=Object.keys(t),i={},n=0;n<e.length;n++)i[e[n]]=Object.getOwnPropertyDescriptor(t,e[n]);return i},s=/%[sdj%]/g;e.format=function(t){if(!v(t)){for(var e=[],i=0;i<arguments.length;i++)e.push(a(arguments[i]));return e.join(" ")}i=1;for(var n=arguments,o=n.length,r=String(t).replace(s,(function(t){if("%%"===t)return"%";if(i>=o)return t;switch(t){case"%s":return String(n[i++]);case"%d":return Number(n[i++]);case"%j":try{return JSON.stringify(n[i++])}catch(t){return"[Circular]"}default:return t}})),l=n[i];i<o;l=n[++i])g(l)||!b(l)?r+=" "+l:r+=" "+a(l);return r},e.deprecate=function(t,i){if("undefined"!=typeof process&&!0===process.noDeprecation)return t;if("undefined"==typeof process)return function(){return e.deprecate(t,i).apply(this,arguments)};var n=!1;return function(){if(!n){if(process.throwDeprecation)throw new Error(i);process.traceDeprecation?console.trace(i):console.error(i),n=!0}return t.apply(this,arguments)}};var o,r={};function a(t,i){var n={seen:[],stylize:c};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),f(i)?n.showHidden=i:i&&e._extend(n,i),_(n.showHidden)&&(n.showHidden=!1),_(n.depth)&&(n.depth=2),_(n.colors)&&(n.colors=!1),_(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=l),h(n,t,n.depth)}function l(t,e){var i=a.styles[e];return i?"["+a.colors[i][0]+"m"+t+"["+a.colors[i][1]+"m":t}function c(t,e){return t}function h(t,i,n){if(t.customInspect&&i&&k(i.inspect)&&i.inspect!==e.inspect&&(!i.constructor||i.constructor.prototype!==i)){var s=i.inspect(n,t);return v(s)||(s=h(t,s,n)),s}var o=function(t,e){if(_(e))return t.stylize("undefined","undefined");if(v(e)){var i="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(i,"string")}return m(e)?t.stylize(""+e,"number"):f(e)?t.stylize(""+e,"boolean"):g(e)?t.stylize("null","null"):void 0}(t,i);if(o)return o;var r=Object.keys(i),a=function(t){var e={};return t.forEach((function(t,i){e[t]=!0})),e}(r);if(t.showHidden&&(r=Object.getOwnPropertyNames(i)),x(i)&&(r.indexOf("message")>=0||r.indexOf("description")>=0))return u(i);if(0===r.length){if(k(i)){var l=i.name?": "+i.name:"";return t.stylize("[Function"+l+"]","special")}if(y(i))return t.stylize(RegExp.prototype.toString.call(i),"regexp");if(w(i))return t.stylize(Date.prototype.toString.call(i),"date");if(x(i))return u(i)}var c,b="",C=!1,D=["{","}"];return p(i)&&(C=!0,D=["[","]"]),k(i)&&(b=" [Function"+(i.name?": "+i.name:"")+"]"),y(i)&&(b=" "+RegExp.prototype.toString.call(i)),w(i)&&(b=" "+Date.prototype.toUTCString.call(i)),x(i)&&(b=" "+u(i)),0!==r.length||C&&0!=i.length?n<0?y(i)?t.stylize(RegExp.prototype.toString.call(i),"regexp"):t.stylize("[Object]","special"):(t.seen.push(i),c=C?function(t,e,i,n,s){for(var o=[],r=0,a=e.length;r<a;++r)A(e,String(r))?o.push(d(t,e,i,n,String(r),!0)):o.push("");return s.forEach((function(s){s.match(/^\d+$/)||o.push(d(t,e,i,n,s,!0))})),o}(t,i,n,a,r):r.map((function(e){return d(t,i,n,a,e,C)})),t.seen.pop(),function(t,e,i){return t.reduce((function(t,e){return e.indexOf("\n"),t+e.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?i[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+i[1]:i[0]+e+" "+t.join(", ")+" "+i[1]}(c,b,D)):D[0]+b+D[1]}function u(t){return"["+Error.prototype.toString.call(t)+"]"}function d(t,e,i,n,s,o){var r,a,l;if((l=Object.getOwnPropertyDescriptor(e,s)||{value:e[s]}).get?a=l.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):l.set&&(a=t.stylize("[Setter]","special")),A(n,s)||(r="["+s+"]"),a||(t.seen.indexOf(l.value)<0?(a=g(i)?h(t,l.value,null):h(t,l.value,i-1)).indexOf("\n")>-1&&(a=o?a.split("\n").map((function(t){return"  "+t})).join("\n").substr(2):"\n"+a.split("\n").map((function(t){return"   "+t})).join("\n")):a=t.stylize("[Circular]","special")),_(r)){if(o&&s.match(/^\d+$/))return a;(r=JSON.stringify(""+s)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(r=r.substr(1,r.length-2),r=t.stylize(r,"name")):(r=r.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),r=t.stylize(r,"string"))}return r+": "+a}function p(t){return Array.isArray(t)}function f(t){return"boolean"==typeof t}function g(t){return null===t}function m(t){return"number"==typeof t}function v(t){return"string"==typeof t}function _(t){return void 0===t}function y(t){return b(t)&&"[object RegExp]"===C(t)}function b(t){return"object"==typeof t&&null!==t}function w(t){return b(t)&&"[object Date]"===C(t)}function x(t){return b(t)&&("[object Error]"===C(t)||t instanceof Error)}function k(t){return"function"==typeof t}function C(t){return Object.prototype.toString.call(t)}function D(t){return t<10?"0"+t.toString(10):t.toString(10)}e.debuglog=function(t){if(_(o)&&(o=process.env.NODE_DEBUG||""),t=t.toUpperCase(),!r[t])if(new RegExp("\\b"+t+"\\b","i").test(o)){var i=process.pid;r[t]=function(){var n=e.format.apply(e,arguments);console.error("%s %d: %s",t,i,n)}}else r[t]=function(){};return r[t]},e.inspect=a,a.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},a.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.isArray=p,e.isBoolean=f,e.isNull=g,e.isNullOrUndefined=function(t){return null==t},e.isNumber=m,e.isString=v,e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=_,e.isRegExp=y,e.isObject=b,e.isDate=w,e.isError=x,e.isFunction=k,e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=i(384);var T=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function A(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.log=function(){var t,i;console.log("%s - %s",(i=[D((t=new Date).getHours()),D(t.getMinutes()),D(t.getSeconds())].join(":"),[t.getDate(),T[t.getMonth()],i].join(" ")),e.format.apply(e,arguments))},e.inherits=i(496),e._extend=function(t,e){if(!e||!b(e))return t;for(var i=Object.keys(e),n=i.length;n--;)t[i[n]]=e[i[n]];return t};var S="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function I(t,e){if(!t){var i=new Error("Promise was rejected with a falsy value");i.reason=t,t=i}return e(t)}e.promisify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');if(S&&t[S]){var e;if("function"!=typeof(e=t[S]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(e,S,{value:e,enumerable:!1,writable:!1,configurable:!0}),e}function e(){for(var e,i,n=new Promise((function(t,n){e=t,i=n})),s=[],o=0;o<arguments.length;o++)s.push(arguments[o]);s.push((function(t,n){t?i(t):e(n)}));try{t.apply(this,s)}catch(t){i(t)}return n}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),S&&Object.defineProperty(e,S,{value:e,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(e,n(t))},e.promisify.custom=S,e.callbackify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');function e(){for(var e=[],i=0;i<arguments.length;i++)e.push(arguments[i]);var n=e.pop();if("function"!=typeof n)throw new TypeError("The last argument must be of type Function");var s=this,o=function(){return n.apply(s,arguments)};t.apply(this,e).then((function(t){process.nextTick(o,null,t)}),(function(t){process.nextTick(I,t,o)}))}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),Object.defineProperties(e,n(t)),e}},513:t=>{function e(t){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}e.keys=()=>[],e.resolve=e,e.id=513,t.exports=e}},__webpack_module_cache__={};function __webpack_require__(t){var e=__webpack_module_cache__[t];if(void 0!==e)return e.exports;var i=__webpack_module_cache__[t]={id:t,exports:{}};return __webpack_modules__[t].call(i.exports,i,i.exports,__webpack_require__),i.exports}__webpack_require__.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return __webpack_require__.d(e,{a:e}),e},__webpack_require__.d=(t,e)=>{for(var i in e)__webpack_require__.o(e,i)&&!__webpack_require__.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),__webpack_require__.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),__webpack_require__.nc=void 0;var __webpack_exports__=__webpack_require__(913)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QVUyekQsT0FBTzcxRCxVQUFVdUQsZUFBZUgsS0FBSzRaLEVBQUs5YSxHQ0FsRjZ5RyxvQkFBb0JNLFFBQUsxMkcsRUNHekIsSUFBSTIyRyxvQkFBc0JQLG9CQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL2lkZS8uL3NyYy9pbmplY3RhYmxlL2NsYXNzLmpzL1RFRy9GT1JNL2ZtLmFicy4yMzA0MTMxMzUxL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly9pZGUvLi9zcmMvaW5qZWN0YWJsZS9jbGFzcy5qcy9URUcvRk9STS9mbS5ib2R5L3N0eWxlLmNzcyIsIndlYnBhY2s6Ly9pZGUvLi9zcmMvaW5qZWN0YWJsZS9jbGFzcy5qcy9URUcvTUVOVS9tZW51LjIyMDYxNjEwNTIvc3R5bGUuY3NzIiwid2VicGFjazovL2lkZS8uL3NyYy9pbmplY3RhYmxlL2NsYXNzLmpzL1RFRy9jdXN0b20vc3R5bGUuY3NzIiwid2VicGFjazovL2lkZS8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vaWRlLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vaWRlLy4vbm9kZV9tb2R1bGVzL2pxdWVyeS11aS1idW5kbGUvanF1ZXJ5LXVpLmpzIiwid2VicGFjazovL2lkZS8uL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanMiLCJ3ZWJwYWNrOi8vaWRlLy4vbm9kZV9tb2R1bGVzL3JlZmxlY3QtbWV0YWRhdGEvUmVmbGVjdC5qcyIsIndlYnBhY2s6Ly9pZGUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vaWRlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9pZGUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vaWRlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL2lkZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL2lkZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL2lkZS8uL3NyYy9MSUIvZnVuL2lkL2lkLmRhdGUuMjMwMTEyMTMwNi50cyIsIndlYnBhY2s6Ly9pZGUvLi9zcmMvTElCL2Z1bi9qY2xhc3MuMjMwOTAxMTcxNy50cyIsIndlYnBhY2s6Ly9pZGUvLi9zcmMvTElCL2Z1bi9vYmovb2JqLk1lcmdlUmVjdXJzaXZlLjIyMDgyOTExNTgudHMiLCJ3ZWJwYWNrOi8vaWRlLy4vc3JjL0xJQi9jb21wL2JvNTIvZ2xvYmFsLjIzMDMyMzEyNDAudHMiLCJ3ZWJwYWNrOi8vaWRlLy4vc3JjL0xJQi9mdW5zL2pmdW4uZXYuMjMwOTAxMjAxMy50cyIsIndlYnBhY2s6Ly9pZGUvLi9zcmMvVEVHL3RlZy5jb21wbGV4LjIzMDkwMjE1MTMudHMiLCJ3ZWJwYWNrOi8vaWRlLy4vc3JjL1RFRy9ldmVudC90ZWcuYXR0ci5ldmVudC5hZGQuMjIwODI5MDkzOC50cyIsIndlYnBhY2s6Ly9pZGUvLi9zcmMvVEVHL2JvZHkvdGVnLmF0dHIuYm9keS5hZGQuMjIwNjIyMTIxOS50cyIsIndlYnBhY2s6Ly9pZGUvLi9zcmMvVEVHL2h0bWwvdGVnLmh0bWwuZGVmYXVsdC5hZGQuMjIwNjIyMTQyMS50cyIsIndlYnBhY2s6Ly9pZGUvLi9zcmMvVEVHL2h0bWwvdGVnLmh0bWwuYXJyLmFkZC4yMjA2MjIxMzE5LnRzIiwid2VicGFjazovL2lkZS8uL3NyYy9URUcvaHRtbC90ZWcuaHRtbC5udW1iZXIuYWRkLjIyMDYyMjE0MjYudHMiLCJ3ZWJwYWNrOi8vaWRlLy4vc3JjL1RFRy9mdW4vdGVnLmZ1bi50cmlnZ2VyLjIyMDgyOTA5NDkudHMiLCJ3ZWJwYWNrOi8vaWRlLy4vc3JjL1RFRy90ZWcubWFpbi5hZGQuMjIwODI5MTEzOS50cyIsIndlYnBhY2s6Ly9pZGUvLi9zcmMvVEVHL2JvZHkvdGVnLmJvZHkuZWRpdC4yMjA2MjIxMzAxLnRzIiwid2VicGFjazovL2lkZS8uL3NyYy9URUcvZGF0YS90ZWcuYXR0ci5kYXRhLmFkZC4yMjA4MjkwOTAxLnRzIiwid2VicGFjazovL2lkZS8uL3NyYy9URUcvYXR0ci90ZWcuYXR0ci5hZGQuMjIwODI5MDkzMi50cyIsIndlYnBhY2s6Ly9pZGUvLi9zcmMvVEVHL2Nzcy90ZWcuYXR0ci5jc3MuYWRkLjIyMDgyOTA5MjQudHMiLCJ3ZWJwYWNrOi8vaWRlLy4vc3JjL1RFRy9jc3MvdGVnLmF0dHIuQ1NTLmFkZC4yMjA4MjkwOTI4LnRzIiwid2VicGFjazovL2lkZS8uL3NyYy9URUcvY2xhc3MvdGVnLmF0dHIuY2xhc3MuYWRkLjIyMDgyOTA5MTAudHMiLCJ3ZWJwYWNrOi8vaWRlLy4vc3JjL1RFRy9hdHRyL3RlZy5hdHRyLnByb3AuYWRkLjIyMDgyOTA5MTYudHMiLCJ3ZWJwYWNrOi8vaWRlLy4vc3JjL1RFRy9hdHRyL3RlZy5hdHRyLmh0bWwuYWRkLjIyMDYyMjEzMTQudHMiLCJ3ZWJwYWNrOi8vaWRlLy4vc3JjL1RFRy9mdW4vdGVnLmZ1bnMudHJpZ2dlci4yMjA4MjkwOTQ1LnRzIiwid2VicGFjazovL2lkZS8uL3NyYy9URUcvdGVnLmNsYXNzLjIzMDkwMjE1MTIudHMiLCJ3ZWJwYWNrOi8vaWRlLy4vc3JjL0xJQi9jb21wL2NsYXNzL21vdXNlL21vdXNlbW92ZS4yMzA4MzExNTE2LnRzIiwid2VicGFjazovL2lkZS8uL3NyYy9MSUIvZnVucy9tb3VzZS90ZWcuc2hvdy5tb3VzZS4yMzA0MDcxMzQ5LnRzIiwid2VicGFjazovL2lkZS8uL3NyYy9pbmplY3RhYmxlL3R5cGVzLnRzIiwid2VicGFjazovL2lkZS8uL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvY29uc3RhbnRzL2Vycm9yX21zZ3MuanMiLCJ3ZWJwYWNrOi8vaWRlLy4vbm9kZV9tb2R1bGVzL2ludmVyc2lmeS9lcy9jb25zdGFudHMvbWV0YWRhdGFfa2V5cy5qcyIsIndlYnBhY2s6Ly9pZGUvLi9ub2RlX21vZHVsZXMvaW52ZXJzaWZ5L2VzL2Fubm90YXRpb24vaW5qZWN0YWJsZS5qcyIsIndlYnBhY2s6Ly9pZGUvLi9ub2RlX21vZHVsZXMvaW52ZXJzaWZ5L2VzL2NvbnN0YW50cy9saXRlcmFsX3R5cGVzLmpzIiwid2VicGFjazovL2lkZS8uL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvdXRpbHMvaWQuanMiLCJ3ZWJwYWNrOi8vaWRlLy4vbm9kZV9tb2R1bGVzL2ludmVyc2lmeS9lcy9iaW5kaW5ncy9iaW5kaW5nLmpzIiwid2VicGFjazovL2lkZS8uL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvcGxhbm5pbmcvbWV0YWRhdGFfcmVhZGVyLmpzIiwid2VicGFjazovL2lkZS8uL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvYmluZGluZ3MvYmluZGluZ19jb3VudC5qcyIsIndlYnBhY2s6Ly9pZGUvLi9ub2RlX21vZHVsZXMvaW52ZXJzaWZ5L2VzL3V0aWxzL2V4Y2VwdGlvbnMuanMiLCJ3ZWJwYWNrOi8vaWRlLy4vbm9kZV9tb2R1bGVzL2ludmVyc2lmeS9lcy91dGlscy9zZXJpYWxpemF0aW9uLmpzIiwid2VicGFjazovL2lkZS8uL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvcGxhbm5pbmcvY29udGV4dC5qcyIsIndlYnBhY2s6Ly9pZGUvLi9ub2RlX21vZHVsZXMvaW52ZXJzaWZ5L2VzL3BsYW5uaW5nL21ldGFkYXRhLmpzIiwid2VicGFjazovL2lkZS8uL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvcGxhbm5pbmcvcGxhbi5qcyIsIndlYnBhY2s6Ly9pZGUvLi9ub2RlX21vZHVsZXMvaW52ZXJzaWZ5L2VzL2Fubm90YXRpb24vbGF6eV9zZXJ2aWNlX2lkZW50aWZpZXIuanMiLCJ3ZWJwYWNrOi8vaWRlLy4vbm9kZV9tb2R1bGVzL2ludmVyc2lmeS9lcy9wbGFubmluZy9xdWVyeWFibGVfc3RyaW5nLmpzIiwid2VicGFjazovL2lkZS8uL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvcGxhbm5pbmcvdGFyZ2V0LmpzIiwid2VicGFjazovL2lkZS8uL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvcGxhbm5pbmcvcmVmbGVjdGlvbl91dGlscy5qcyIsIndlYnBhY2s6Ly9pZGUvLi9ub2RlX21vZHVsZXMvaW52ZXJzaWZ5L2VzL3BsYW5uaW5nL3JlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vaWRlLy4vbm9kZV9tb2R1bGVzL2ludmVyc2lmeS9lcy9wbGFubmluZy9wbGFubmVyLmpzIiwid2VicGFjazovL2lkZS8uL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvdXRpbHMvYXN5bmMuanMiLCJ3ZWJwYWNrOi8vaWRlLy4vbm9kZV9tb2R1bGVzL2ludmVyc2lmeS9lcy9zY29wZS9zY29wZS5qcyIsIndlYnBhY2s6Ly9pZGUvLi9ub2RlX21vZHVsZXMvaW52ZXJzaWZ5L2VzL3V0aWxzL2ZhY3RvcnlfdHlwZS5qcyIsIndlYnBhY2s6Ly9pZGUvLi9ub2RlX21vZHVsZXMvaW52ZXJzaWZ5L2VzL3V0aWxzL2JpbmRpbmdfdXRpbHMuanMiLCJ3ZWJwYWNrOi8vaWRlLy4vbm9kZV9tb2R1bGVzL2ludmVyc2lmeS9lcy9yZXNvbHV0aW9uL2luc3RhbnRpYXRpb24uanMiLCJ3ZWJwYWNrOi8vaWRlLy4vbm9kZV9tb2R1bGVzL2ludmVyc2lmeS9lcy9yZXNvbHV0aW9uL3Jlc29sdmVyLmpzIiwid2VicGFjazovL2lkZS8uL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvc3ludGF4L2NvbnN0cmFpbnRfaGVscGVycy5qcyIsIndlYnBhY2s6Ly9pZGUvLi9ub2RlX21vZHVsZXMvaW52ZXJzaWZ5L2VzL3N5bnRheC9iaW5kaW5nX3doZW5fc3ludGF4LmpzIiwid2VicGFjazovL2lkZS8uL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvc3ludGF4L2JpbmRpbmdfb25fc3ludGF4LmpzIiwid2VicGFjazovL2lkZS8uL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvc3ludGF4L2JpbmRpbmdfd2hlbl9vbl9zeW50YXguanMiLCJ3ZWJwYWNrOi8vaWRlLy4vbm9kZV9tb2R1bGVzL2ludmVyc2lmeS9lcy9zeW50YXgvYmluZGluZ19pbl9zeW50YXguanMiLCJ3ZWJwYWNrOi8vaWRlLy4vbm9kZV9tb2R1bGVzL2ludmVyc2lmeS9lcy9zeW50YXgvYmluZGluZ19pbl93aGVuX29uX3N5bnRheC5qcyIsIndlYnBhY2s6Ly9pZGUvLi9ub2RlX21vZHVsZXMvaW52ZXJzaWZ5L2VzL3N5bnRheC9iaW5kaW5nX3RvX3N5bnRheC5qcyIsIndlYnBhY2s6Ly9pZGUvLi9ub2RlX21vZHVsZXMvaW52ZXJzaWZ5L2VzL2NvbnRhaW5lci9jb250YWluZXJfc25hcHNob3QuanMiLCJ3ZWJwYWNrOi8vaWRlLy4vbm9kZV9tb2R1bGVzL2ludmVyc2lmeS9lcy9jb250YWluZXIvbG9va3VwLmpzIiwid2VicGFjazovL2lkZS8uL25vZGVfbW9kdWxlcy9pbnZlcnNpZnkvZXMvdXRpbHMvY2xvbmFibGUuanMiLCJ3ZWJwYWNrOi8vaWRlLy4vbm9kZV9tb2R1bGVzL2ludmVyc2lmeS9lcy9jb250YWluZXIvbW9kdWxlX2FjdGl2YXRpb25fc3RvcmUuanMiLCJ3ZWJwYWNrOi8vaWRlLy4vbm9kZV9tb2R1bGVzL2ludmVyc2lmeS9lcy9jb250YWluZXIvY29udGFpbmVyLmpzIiwid2VicGFjazovL2lkZS8uL3NyYy9pbmplY3RhYmxlL2NsYXNzLmpzL1RFRy9jdXN0b20vc3R5bGUuY3NzP2Y3MjgiLCJ3ZWJwYWNrOi8vaWRlLy4vc3JjL2luamVjdGFibGUvY2xhc3MuanMvVEVHL2N1c3RvbS90ZWcudHMiLCJ3ZWJwYWNrOi8vaWRlLy4vc3JjL2luamVjdGFibGUvY2xhc3MuanMvVEVHL3RlZy5taW4vdGVnLm1pbi4yMzA0MTgxNzAzLnRzIiwid2VicGFjazovL2lkZS8uL3NyYy9pbmplY3RhYmxlL2NsYXNzLmpzL1RFRy90ZWcubWluL3RlZy5vYmouMjMwNDA5MTkzMC50cyIsIndlYnBhY2s6Ly9pZGUvLi9zcmMvaW5qZWN0YWJsZS9jbGFzcy5qcy9URUcvTUVOVS9tZW51LjIyMDYxNjEwNTIvc3R5bGUuY3NzPzVkODUiLCJ3ZWJwYWNrOi8vaWRlLy4vc3JjL2luamVjdGFibGUvY2xhc3MuanMvVEVHL01FTlUvbWVudS4yMjA2MTYxMDUyL3RlZy50cyIsIndlYnBhY2s6Ly9pZGUvLi9zcmMvaW5qZWN0YWJsZS9jbGFzcy5qcy9URUcvRk9STS9mbS5hYnMuMjMwNDEzMTM1MS9zdHlsZS5jc3M/MDIxNSIsIndlYnBhY2s6Ly9pZGUvLi9zcmMvaW5qZWN0YWJsZS9jbGFzcy5qcy9URUcvRk9STS9mbS5hYnMuMjMwNDEzMTM1MS90ZWcudHMiLCJ3ZWJwYWNrOi8vaWRlLy4vc3JjL2luamVjdGFibGUvY2xhc3MuanMvVEVHL0ZPUk0vZm0uYm9keS9zdHlsZS5jc3M/ZjZhMiIsIndlYnBhY2s6Ly9pZGUvLi9zcmMvaW5qZWN0YWJsZS9jbGFzcy5qcy9URUcvRk9STS9mbS5ib2R5L3RlZy50cyIsIndlYnBhY2s6Ly9pZGUvLi9zcmMvaW5qZWN0YWJsZS9pbnZlcnNpZnkuY29uZmlnLnRzIiwid2VicGFjazovL2lkZS8uL3NyYy9pbmplY3RhYmxlL2luZGV4LnRzIiwid2VicGFjazovL2lkZS8uL3NyYy9pbmplY3RhYmxlL2NsYXNzLmpzL1RFRy90ZWcubWluL3RlZy5zaG93LjIzMDMyNTE3NTQudHMiLCJ3ZWJwYWNrOi8vaWRlLy4vbm9kZV9tb2R1bGVzL3V0aWwvbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vaWRlLy4vbm9kZV9tb2R1bGVzL3V0aWwvc3VwcG9ydC9pc0J1ZmZlckJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vaWRlLy4vbm9kZV9tb2R1bGVzL3V0aWwvdXRpbC5qcyIsIndlYnBhY2s6Ly9pZGUvLi9zcmMvaW1nLyBzeW5jIF5cXC5cXC8uKlxcLnBuZyQiLCJ3ZWJwYWNrOi8vaWRlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2lkZS93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9pZGUvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2lkZS93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2lkZS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2lkZS93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vaWRlL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLmZtLWFicyB7XHJcbiAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcclxuICAgIGJvcmRlcjogMnB4IHNvbGlkO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG59YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvaW5qZWN0YWJsZS9jbGFzcy5qcy9URUcvRk9STS9mbS5hYnMuMjMwNDEzMTM1MS9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxpQkFBaUI7SUFDakIsaUJBQWlCO0lBQ2pCLGtCQUFrQjtJQUNsQixxQkFBcUI7QUFDekJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmZtLWFicyB7XFxyXFxuICAgIGJhY2tncm91bmQ6IHdoaXRlO1xcclxcbiAgICBib3JkZXI6IDJweCBzb2xpZDtcXHJcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLkZtLWJvZHkge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDEwMHZoO1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICBtYXgtaGVpZ2h0OiAxMDAlO1xyXG4gICAgbWFyZ2luOiAwIGF1dG87XHJcbn1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9pbmplY3RhYmxlL2NsYXNzLmpzL1RFRy9GT1JNL2ZtLmJvZHkvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksV0FBVztJQUNYLGFBQWE7SUFDYixjQUFjO0lBQ2QsZUFBZTtJQUNmLGdCQUFnQjtJQUNoQixjQUFjO0FBQ2xCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5GbS1ib2R5IHtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGhlaWdodDogMTAwdmg7XFxyXFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgICBtYXgtd2lkdGg6IDEwMCU7XFxyXFxuICAgIG1heC1oZWlnaHQ6IDEwMCU7XFxyXFxuICAgIG1hcmdpbjogMCBhdXRvO1xcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5tZW51IHtcclxuICAgIHBhZGRpbmc6IDVweDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDZweDtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogMDtcclxuICAgIGxlZnQ6IDA7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjNjY2O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0NDQztcclxuICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICBmbG9hdDogbGVmdDtcclxufWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2luamVjdGFibGUvY2xhc3MuanMvVEVHL01FTlUvbWVudS4yMjA2MTYxMDUyL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLFlBQVk7SUFDWixrQkFBa0I7SUFDbEIsa0JBQWtCO0lBQ2xCLE1BQU07SUFDTixPQUFPO0lBQ1Asc0JBQXNCO0lBQ3RCLHNCQUFzQjtJQUN0QixhQUFhO0lBQ2IsV0FBVztBQUNmXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5tZW51IHtcXHJcXG4gICAgcGFkZGluZzogNXB4O1xcclxcbiAgICBib3JkZXItcmFkaXVzOiA2cHg7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgdG9wOiAwO1xcclxcbiAgICBsZWZ0OiAwO1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjNjY2O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQ0NDO1xcclxcbiAgICBkaXNwbGF5OiBub25lO1xcclxcbiAgICBmbG9hdDogbGVmdDtcXHJcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuY3VzdG9tIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IGdyZWVuO1xyXG59YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvaW5qZWN0YWJsZS9jbGFzcy5qcy9URUcvY3VzdG9tL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLHVCQUF1QjtBQUMzQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuY3VzdG9tIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogZ3JlZW47XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiLyohIGpRdWVyeSBVSSAtIHYxLjEyLjEgLSAyMDE3LTAzLTE5XG4qIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiogSW5jbHVkZXM6IHdpZGdldC5qcywgcG9zaXRpb24uanMsIGRhdGEuanMsIGRpc2FibGUtc2VsZWN0aW9uLmpzLCBmb2N1c2FibGUuanMsIGZvcm0tcmVzZXQtbWl4aW4uanMsIGpxdWVyeS0xLTcuanMsIGtleWNvZGUuanMsIGxhYmVscy5qcywgc2Nyb2xsLXBhcmVudC5qcywgdGFiYmFibGUuanMsIHVuaXF1ZS1pZC5qcywgd2lkZ2V0cy9kcmFnZ2FibGUuanMsIHdpZGdldHMvZHJvcHBhYmxlLmpzLCB3aWRnZXRzL3Jlc2l6YWJsZS5qcywgd2lkZ2V0cy9zZWxlY3RhYmxlLmpzLCB3aWRnZXRzL3NvcnRhYmxlLmpzLCB3aWRnZXRzL2FjY29yZGlvbi5qcywgd2lkZ2V0cy9hdXRvY29tcGxldGUuanMsIHdpZGdldHMvYnV0dG9uLmpzLCB3aWRnZXRzL2NoZWNrYm94cmFkaW8uanMsIHdpZGdldHMvY29udHJvbGdyb3VwLmpzLCB3aWRnZXRzL2RhdGVwaWNrZXIuanMsIHdpZGdldHMvZGlhbG9nLmpzLCB3aWRnZXRzL21lbnUuanMsIHdpZGdldHMvbW91c2UuanMsIHdpZGdldHMvcHJvZ3Jlc3NiYXIuanMsIHdpZGdldHMvc2VsZWN0bWVudS5qcywgd2lkZ2V0cy9zbGlkZXIuanMsIHdpZGdldHMvc3Bpbm5lci5qcywgd2lkZ2V0cy90YWJzLmpzLCB3aWRnZXRzL3Rvb2x0aXAuanMsIGVmZmVjdC5qcywgZWZmZWN0cy9lZmZlY3QtYmxpbmQuanMsIGVmZmVjdHMvZWZmZWN0LWJvdW5jZS5qcywgZWZmZWN0cy9lZmZlY3QtY2xpcC5qcywgZWZmZWN0cy9lZmZlY3QtZHJvcC5qcywgZWZmZWN0cy9lZmZlY3QtZXhwbG9kZS5qcywgZWZmZWN0cy9lZmZlY3QtZmFkZS5qcywgZWZmZWN0cy9lZmZlY3QtZm9sZC5qcywgZWZmZWN0cy9lZmZlY3QtaGlnaGxpZ2h0LmpzLCBlZmZlY3RzL2VmZmVjdC1wdWZmLmpzLCBlZmZlY3RzL2VmZmVjdC1wdWxzYXRlLmpzLCBlZmZlY3RzL2VmZmVjdC1zY2FsZS5qcywgZWZmZWN0cy9lZmZlY3Qtc2hha2UuanMsIGVmZmVjdHMvZWZmZWN0LXNpemUuanMsIGVmZmVjdHMvZWZmZWN0LXNsaWRlLmpzLCBlZmZlY3RzL2VmZmVjdC10cmFuc2Zlci5qc1xuKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yczsgTGljZW5zZWQgTUlUICovXG5cbihmdW5jdGlvbiggZmFjdG9yeSApIHtcblx0aWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblxuXHRcdC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cblx0XHRkZWZpbmUoWyBcImpxdWVyeVwiIF0sIGZhY3RvcnkgKTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIEJyb3dzZXIgZ2xvYmFsc1xuXHRcdGZhY3RvcnkoIGpRdWVyeSApO1xuXHR9XG59KGZ1bmN0aW9uKCAkICkge1xuXG4kLnVpID0gJC51aSB8fCB7fTtcblxudmFyIHZlcnNpb24gPSAkLnVpLnZlcnNpb24gPSBcIjEuMTIuMVwiO1xuXG5cbi8qIVxuICogalF1ZXJ5IFVJIFdpZGdldCAxLjEyLjFcbiAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICovXG5cbi8vPj5sYWJlbDogV2lkZ2V0XG4vLz4+Z3JvdXA6IENvcmVcbi8vPj5kZXNjcmlwdGlvbjogUHJvdmlkZXMgYSBmYWN0b3J5IGZvciBjcmVhdGluZyBzdGF0ZWZ1bCB3aWRnZXRzIHdpdGggYSBjb21tb24gQVBJLlxuLy8+PmRvY3M6IGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL2pRdWVyeS53aWRnZXQvXG4vLz4+ZGVtb3M6IGh0dHA6Ly9qcXVlcnl1aS5jb20vd2lkZ2V0L1xuXG5cblxudmFyIHdpZGdldFV1aWQgPSAwO1xudmFyIHdpZGdldFNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG4kLmNsZWFuRGF0YSA9ICggZnVuY3Rpb24oIG9yaWcgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGV2ZW50cywgZWxlbSwgaTtcblx0XHRmb3IgKCBpID0gMDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdHRyeSB7XG5cblx0XHRcdFx0Ly8gT25seSB0cmlnZ2VyIHJlbW92ZSB3aGVuIG5lY2Vzc2FyeSB0byBzYXZlIHRpbWVcblx0XHRcdFx0ZXZlbnRzID0gJC5fZGF0YSggZWxlbSwgXCJldmVudHNcIiApO1xuXHRcdFx0XHRpZiAoIGV2ZW50cyAmJiBldmVudHMucmVtb3ZlICkge1xuXHRcdFx0XHRcdCQoIGVsZW0gKS50cmlnZ2VySGFuZGxlciggXCJyZW1vdmVcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzgyMzVcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHR9XG5cdFx0b3JpZyggZWxlbXMgKTtcblx0fTtcbn0gKSggJC5jbGVhbkRhdGEgKTtcblxuJC53aWRnZXQgPSBmdW5jdGlvbiggbmFtZSwgYmFzZSwgcHJvdG90eXBlICkge1xuXHR2YXIgZXhpc3RpbmdDb25zdHJ1Y3RvciwgY29uc3RydWN0b3IsIGJhc2VQcm90b3R5cGU7XG5cblx0Ly8gUHJveGllZFByb3RvdHlwZSBhbGxvd3MgdGhlIHByb3ZpZGVkIHByb3RvdHlwZSB0byByZW1haW4gdW5tb2RpZmllZFxuXHQvLyBzbyB0aGF0IGl0IGNhbiBiZSB1c2VkIGFzIGEgbWl4aW4gZm9yIG11bHRpcGxlIHdpZGdldHMgKCM4ODc2KVxuXHR2YXIgcHJveGllZFByb3RvdHlwZSA9IHt9O1xuXG5cdHZhciBuYW1lc3BhY2UgPSBuYW1lLnNwbGl0KCBcIi5cIiApWyAwIF07XG5cdG5hbWUgPSBuYW1lLnNwbGl0KCBcIi5cIiApWyAxIF07XG5cdHZhciBmdWxsTmFtZSA9IG5hbWVzcGFjZSArIFwiLVwiICsgbmFtZTtcblxuXHRpZiAoICFwcm90b3R5cGUgKSB7XG5cdFx0cHJvdG90eXBlID0gYmFzZTtcblx0XHRiYXNlID0gJC5XaWRnZXQ7XG5cdH1cblxuXHRpZiAoICQuaXNBcnJheSggcHJvdG90eXBlICkgKSB7XG5cdFx0cHJvdG90eXBlID0gJC5leHRlbmQuYXBwbHkoIG51bGwsIFsge30gXS5jb25jYXQoIHByb3RvdHlwZSApICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgc2VsZWN0b3IgZm9yIHBsdWdpblxuXHQkLmV4cHIucHNldWRvc1sgZnVsbE5hbWUudG9Mb3dlckNhc2UoKSBdID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuICEhJC5kYXRhKCBlbGVtLCBmdWxsTmFtZSApO1xuXHR9O1xuXG5cdCRbIG5hbWVzcGFjZSBdID0gJFsgbmFtZXNwYWNlIF0gfHwge307XG5cdGV4aXN0aW5nQ29uc3RydWN0b3IgPSAkWyBuYW1lc3BhY2UgXVsgbmFtZSBdO1xuXHRjb25zdHJ1Y3RvciA9ICRbIG5hbWVzcGFjZSBdWyBuYW1lIF0gPSBmdW5jdGlvbiggb3B0aW9ucywgZWxlbWVudCApIHtcblxuXHRcdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCBcIm5ld1wiIGtleXdvcmRcblx0XHRpZiAoICF0aGlzLl9jcmVhdGVXaWRnZXQgKSB7XG5cdFx0XHRyZXR1cm4gbmV3IGNvbnN0cnVjdG9yKCBvcHRpb25zLCBlbGVtZW50ICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IGluaXRpYWxpemluZyBmb3Igc2ltcGxlIGluaGVyaXRhbmNlXG5cdFx0Ly8gbXVzdCB1c2UgXCJuZXdcIiBrZXl3b3JkICh0aGUgY29kZSBhYm92ZSBhbHdheXMgcGFzc2VzIGFyZ3MpXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0dGhpcy5fY3JlYXRlV2lkZ2V0KCBvcHRpb25zLCBlbGVtZW50ICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8vIEV4dGVuZCB3aXRoIHRoZSBleGlzdGluZyBjb25zdHJ1Y3RvciB0byBjYXJyeSBvdmVyIGFueSBzdGF0aWMgcHJvcGVydGllc1xuXHQkLmV4dGVuZCggY29uc3RydWN0b3IsIGV4aXN0aW5nQ29uc3RydWN0b3IsIHtcblx0XHR2ZXJzaW9uOiBwcm90b3R5cGUudmVyc2lvbixcblxuXHRcdC8vIENvcHkgdGhlIG9iamVjdCB1c2VkIHRvIGNyZWF0ZSB0aGUgcHJvdG90eXBlIGluIGNhc2Ugd2UgbmVlZCB0b1xuXHRcdC8vIHJlZGVmaW5lIHRoZSB3aWRnZXQgbGF0ZXJcblx0XHRfcHJvdG86ICQuZXh0ZW5kKCB7fSwgcHJvdG90eXBlICksXG5cblx0XHQvLyBUcmFjayB3aWRnZXRzIHRoYXQgaW5oZXJpdCBmcm9tIHRoaXMgd2lkZ2V0IGluIGNhc2UgdGhpcyB3aWRnZXQgaXNcblx0XHQvLyByZWRlZmluZWQgYWZ0ZXIgYSB3aWRnZXQgaW5oZXJpdHMgZnJvbSBpdFxuXHRcdF9jaGlsZENvbnN0cnVjdG9yczogW11cblx0fSApO1xuXG5cdGJhc2VQcm90b3R5cGUgPSBuZXcgYmFzZSgpO1xuXG5cdC8vIFdlIG5lZWQgdG8gbWFrZSB0aGUgb3B0aW9ucyBoYXNoIGEgcHJvcGVydHkgZGlyZWN0bHkgb24gdGhlIG5ldyBpbnN0YW5jZVxuXHQvLyBvdGhlcndpc2Ugd2UnbGwgbW9kaWZ5IHRoZSBvcHRpb25zIGhhc2ggb24gdGhlIHByb3RvdHlwZSB0aGF0IHdlJ3JlXG5cdC8vIGluaGVyaXRpbmcgZnJvbVxuXHRiYXNlUHJvdG90eXBlLm9wdGlvbnMgPSAkLndpZGdldC5leHRlbmQoIHt9LCBiYXNlUHJvdG90eXBlLm9wdGlvbnMgKTtcblx0JC5lYWNoKCBwcm90b3R5cGUsIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRpZiAoICEkLmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRwcm94aWVkUHJvdG90eXBlWyBwcm9wIF0gPSB2YWx1ZTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0cHJveGllZFByb3RvdHlwZVsgcHJvcCBdID0gKCBmdW5jdGlvbigpIHtcblx0XHRcdGZ1bmN0aW9uIF9zdXBlcigpIHtcblx0XHRcdFx0cmV0dXJuIGJhc2UucHJvdG90eXBlWyBwcm9wIF0uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiBfc3VwZXJBcHBseSggYXJncyApIHtcblx0XHRcdFx0cmV0dXJuIGJhc2UucHJvdG90eXBlWyBwcm9wIF0uYXBwbHkoIHRoaXMsIGFyZ3MgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgX19zdXBlciA9IHRoaXMuX3N1cGVyO1xuXHRcdFx0XHR2YXIgX19zdXBlckFwcGx5ID0gdGhpcy5fc3VwZXJBcHBseTtcblx0XHRcdFx0dmFyIHJldHVyblZhbHVlO1xuXG5cdFx0XHRcdHRoaXMuX3N1cGVyID0gX3N1cGVyO1xuXHRcdFx0XHR0aGlzLl9zdXBlckFwcGx5ID0gX3N1cGVyQXBwbHk7XG5cblx0XHRcdFx0cmV0dXJuVmFsdWUgPSB2YWx1ZS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cblx0XHRcdFx0dGhpcy5fc3VwZXIgPSBfX3N1cGVyO1xuXHRcdFx0XHR0aGlzLl9zdXBlckFwcGx5ID0gX19zdXBlckFwcGx5O1xuXG5cdFx0XHRcdHJldHVybiByZXR1cm5WYWx1ZTtcblx0XHRcdH07XG5cdFx0fSApKCk7XG5cdH0gKTtcblx0Y29uc3RydWN0b3IucHJvdG90eXBlID0gJC53aWRnZXQuZXh0ZW5kKCBiYXNlUHJvdG90eXBlLCB7XG5cblx0XHQvLyBUT0RPOiByZW1vdmUgc3VwcG9ydCBmb3Igd2lkZ2V0RXZlbnRQcmVmaXhcblx0XHQvLyBhbHdheXMgdXNlIHRoZSBuYW1lICsgYSBjb2xvbiBhcyB0aGUgcHJlZml4LCBlLmcuLCBkcmFnZ2FibGU6c3RhcnRcblx0XHQvLyBkb24ndCBwcmVmaXggZm9yIHdpZGdldHMgdGhhdCBhcmVuJ3QgRE9NLWJhc2VkXG5cdFx0d2lkZ2V0RXZlbnRQcmVmaXg6IGV4aXN0aW5nQ29uc3RydWN0b3IgPyAoIGJhc2VQcm90b3R5cGUud2lkZ2V0RXZlbnRQcmVmaXggfHwgbmFtZSApIDogbmFtZVxuXHR9LCBwcm94aWVkUHJvdG90eXBlLCB7XG5cdFx0Y29uc3RydWN0b3I6IGNvbnN0cnVjdG9yLFxuXHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlLFxuXHRcdHdpZGdldE5hbWU6IG5hbWUsXG5cdFx0d2lkZ2V0RnVsbE5hbWU6IGZ1bGxOYW1lXG5cdH0gKTtcblxuXHQvLyBJZiB0aGlzIHdpZGdldCBpcyBiZWluZyByZWRlZmluZWQgdGhlbiB3ZSBuZWVkIHRvIGZpbmQgYWxsIHdpZGdldHMgdGhhdFxuXHQvLyBhcmUgaW5oZXJpdGluZyBmcm9tIGl0IGFuZCByZWRlZmluZSBhbGwgb2YgdGhlbSBzbyB0aGF0IHRoZXkgaW5oZXJpdCBmcm9tXG5cdC8vIHRoZSBuZXcgdmVyc2lvbiBvZiB0aGlzIHdpZGdldC4gV2UncmUgZXNzZW50aWFsbHkgdHJ5aW5nIHRvIHJlcGxhY2Ugb25lXG5cdC8vIGxldmVsIGluIHRoZSBwcm90b3R5cGUgY2hhaW4uXG5cdGlmICggZXhpc3RpbmdDb25zdHJ1Y3RvciApIHtcblx0XHQkLmVhY2goIGV4aXN0aW5nQ29uc3RydWN0b3IuX2NoaWxkQ29uc3RydWN0b3JzLCBmdW5jdGlvbiggaSwgY2hpbGQgKSB7XG5cdFx0XHR2YXIgY2hpbGRQcm90b3R5cGUgPSBjaGlsZC5wcm90b3R5cGU7XG5cblx0XHRcdC8vIFJlZGVmaW5lIHRoZSBjaGlsZCB3aWRnZXQgdXNpbmcgdGhlIHNhbWUgcHJvdG90eXBlIHRoYXQgd2FzXG5cdFx0XHQvLyBvcmlnaW5hbGx5IHVzZWQsIGJ1dCBpbmhlcml0IGZyb20gdGhlIG5ldyB2ZXJzaW9uIG9mIHRoZSBiYXNlXG5cdFx0XHQkLndpZGdldCggY2hpbGRQcm90b3R5cGUubmFtZXNwYWNlICsgXCIuXCIgKyBjaGlsZFByb3RvdHlwZS53aWRnZXROYW1lLCBjb25zdHJ1Y3Rvcixcblx0XHRcdFx0Y2hpbGQuX3Byb3RvICk7XG5cdFx0fSApO1xuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBsaXN0IG9mIGV4aXN0aW5nIGNoaWxkIGNvbnN0cnVjdG9ycyBmcm9tIHRoZSBvbGQgY29uc3RydWN0b3Jcblx0XHQvLyBzbyB0aGUgb2xkIGNoaWxkIGNvbnN0cnVjdG9ycyBjYW4gYmUgZ2FyYmFnZSBjb2xsZWN0ZWRcblx0XHRkZWxldGUgZXhpc3RpbmdDb25zdHJ1Y3Rvci5fY2hpbGRDb25zdHJ1Y3RvcnM7XG5cdH0gZWxzZSB7XG5cdFx0YmFzZS5fY2hpbGRDb25zdHJ1Y3RvcnMucHVzaCggY29uc3RydWN0b3IgKTtcblx0fVxuXG5cdCQud2lkZ2V0LmJyaWRnZSggbmFtZSwgY29uc3RydWN0b3IgKTtcblxuXHRyZXR1cm4gY29uc3RydWN0b3I7XG59O1xuXG4kLndpZGdldC5leHRlbmQgPSBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHR2YXIgaW5wdXQgPSB3aWRnZXRTbGljZS5jYWxsKCBhcmd1bWVudHMsIDEgKTtcblx0dmFyIGlucHV0SW5kZXggPSAwO1xuXHR2YXIgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7XG5cdHZhciBrZXk7XG5cdHZhciB2YWx1ZTtcblxuXHRmb3IgKCA7IGlucHV0SW5kZXggPCBpbnB1dExlbmd0aDsgaW5wdXRJbmRleCsrICkge1xuXHRcdGZvciAoIGtleSBpbiBpbnB1dFsgaW5wdXRJbmRleCBdICkge1xuXHRcdFx0dmFsdWUgPSBpbnB1dFsgaW5wdXRJbmRleCBdWyBrZXkgXTtcblx0XHRcdGlmICggaW5wdXRbIGlucHV0SW5kZXggXS5oYXNPd25Qcm9wZXJ0eSgga2V5ICkgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBDbG9uZSBvYmplY3RzXG5cdFx0XHRcdGlmICggJC5pc1BsYWluT2JqZWN0KCB2YWx1ZSApICkge1xuXHRcdFx0XHRcdHRhcmdldFsga2V5IF0gPSAkLmlzUGxhaW5PYmplY3QoIHRhcmdldFsga2V5IF0gKSA/XG5cdFx0XHRcdFx0XHQkLndpZGdldC5leHRlbmQoIHt9LCB0YXJnZXRbIGtleSBdLCB2YWx1ZSApIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgZXh0ZW5kIHN0cmluZ3MsIGFycmF5cywgZXRjLiB3aXRoIG9iamVjdHNcblx0XHRcdFx0XHRcdCQud2lkZ2V0LmV4dGVuZCgge30sIHZhbHVlICk7XG5cblx0XHRcdFx0Ly8gQ29weSBldmVyeXRoaW5nIGVsc2UgYnkgcmVmZXJlbmNlXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBrZXkgXSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG4kLndpZGdldC5icmlkZ2UgPSBmdW5jdGlvbiggbmFtZSwgb2JqZWN0ICkge1xuXHR2YXIgZnVsbE5hbWUgPSBvYmplY3QucHJvdG90eXBlLndpZGdldEZ1bGxOYW1lIHx8IG5hbWU7XG5cdCQuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHRcdHZhciBpc01ldGhvZENhbGwgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIjtcblx0XHR2YXIgYXJncyA9IHdpZGdldFNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMSApO1xuXHRcdHZhciByZXR1cm5WYWx1ZSA9IHRoaXM7XG5cblx0XHRpZiAoIGlzTWV0aG9kQ2FsbCApIHtcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhbiBlbXB0eSBjb2xsZWN0aW9uLCB3ZSBuZWVkIHRvIGhhdmUgdGhlIGluc3RhbmNlIG1ldGhvZFxuXHRcdFx0Ly8gcmV0dXJuIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHRoZSBqUXVlcnkgaW5zdGFuY2Vcblx0XHRcdGlmICggIXRoaXMubGVuZ3RoICYmIG9wdGlvbnMgPT09IFwiaW5zdGFuY2VcIiApIHtcblx0XHRcdFx0cmV0dXJuVmFsdWUgPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHZhciBtZXRob2RWYWx1ZTtcblx0XHRcdFx0XHR2YXIgaW5zdGFuY2UgPSAkLmRhdGEoIHRoaXMsIGZ1bGxOYW1lICk7XG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbnMgPT09IFwiaW5zdGFuY2VcIiApIHtcblx0XHRcdFx0XHRcdHJldHVyblZhbHVlID0gaW5zdGFuY2U7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCAhaW5zdGFuY2UgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gJC5lcnJvciggXCJjYW5ub3QgY2FsbCBtZXRob2RzIG9uIFwiICsgbmFtZSArXG5cdFx0XHRcdFx0XHRcdFwiIHByaW9yIHRvIGluaXRpYWxpemF0aW9uOyBcIiArXG5cdFx0XHRcdFx0XHRcdFwiYXR0ZW1wdGVkIHRvIGNhbGwgbWV0aG9kICdcIiArIG9wdGlvbnMgKyBcIidcIiApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggISQuaXNGdW5jdGlvbiggaW5zdGFuY2VbIG9wdGlvbnMgXSApIHx8IG9wdGlvbnMuY2hhckF0KCAwICkgPT09IFwiX1wiICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuICQuZXJyb3IoIFwibm8gc3VjaCBtZXRob2QgJ1wiICsgb3B0aW9ucyArIFwiJyBmb3IgXCIgKyBuYW1lICtcblx0XHRcdFx0XHRcdFx0XCIgd2lkZ2V0IGluc3RhbmNlXCIgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRtZXRob2RWYWx1ZSA9IGluc3RhbmNlWyBvcHRpb25zIF0uYXBwbHkoIGluc3RhbmNlLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1ldGhvZFZhbHVlICE9PSBpbnN0YW5jZSAmJiBtZXRob2RWYWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuVmFsdWUgPSBtZXRob2RWYWx1ZSAmJiBtZXRob2RWYWx1ZS5qcXVlcnkgP1xuXHRcdFx0XHRcdFx0XHRyZXR1cm5WYWx1ZS5wdXNoU3RhY2soIG1ldGhvZFZhbHVlLmdldCgpICkgOlxuXHRcdFx0XHRcdFx0XHRtZXRob2RWYWx1ZTtcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBBbGxvdyBtdWx0aXBsZSBoYXNoZXMgdG8gYmUgcGFzc2VkIG9uIGluaXRcblx0XHRcdGlmICggYXJncy5sZW5ndGggKSB7XG5cdFx0XHRcdG9wdGlvbnMgPSAkLndpZGdldC5leHRlbmQuYXBwbHkoIG51bGwsIFsgb3B0aW9ucyBdLmNvbmNhdCggYXJncyApICk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBpbnN0YW5jZSA9ICQuZGF0YSggdGhpcywgZnVsbE5hbWUgKTtcblx0XHRcdFx0aWYgKCBpbnN0YW5jZSApIHtcblx0XHRcdFx0XHRpbnN0YW5jZS5vcHRpb24oIG9wdGlvbnMgfHwge30gKTtcblx0XHRcdFx0XHRpZiAoIGluc3RhbmNlLl9pbml0ICkge1xuXHRcdFx0XHRcdFx0aW5zdGFuY2UuX2luaXQoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0JC5kYXRhKCB0aGlzLCBmdWxsTmFtZSwgbmV3IG9iamVjdCggb3B0aW9ucywgdGhpcyApICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0dXJuVmFsdWU7XG5cdH07XG59O1xuXG4kLldpZGdldCA9IGZ1bmN0aW9uKCAvKiBvcHRpb25zLCBlbGVtZW50ICovICkge307XG4kLldpZGdldC5fY2hpbGRDb25zdHJ1Y3RvcnMgPSBbXTtcblxuJC5XaWRnZXQucHJvdG90eXBlID0ge1xuXHR3aWRnZXROYW1lOiBcIndpZGdldFwiLFxuXHR3aWRnZXRFdmVudFByZWZpeDogXCJcIixcblx0ZGVmYXVsdEVsZW1lbnQ6IFwiPGRpdj5cIixcblxuXHRvcHRpb25zOiB7XG5cdFx0Y2xhc3Nlczoge30sXG5cdFx0ZGlzYWJsZWQ6IGZhbHNlLFxuXG5cdFx0Ly8gQ2FsbGJhY2tzXG5cdFx0Y3JlYXRlOiBudWxsXG5cdH0sXG5cblx0X2NyZWF0ZVdpZGdldDogZnVuY3Rpb24oIG9wdGlvbnMsIGVsZW1lbnQgKSB7XG5cdFx0ZWxlbWVudCA9ICQoIGVsZW1lbnQgfHwgdGhpcy5kZWZhdWx0RWxlbWVudCB8fCB0aGlzIClbIDAgXTtcblx0XHR0aGlzLmVsZW1lbnQgPSAkKCBlbGVtZW50ICk7XG5cdFx0dGhpcy51dWlkID0gd2lkZ2V0VXVpZCsrO1xuXHRcdHRoaXMuZXZlbnROYW1lc3BhY2UgPSBcIi5cIiArIHRoaXMud2lkZ2V0TmFtZSArIHRoaXMudXVpZDtcblxuXHRcdHRoaXMuYmluZGluZ3MgPSAkKCk7XG5cdFx0dGhpcy5ob3ZlcmFibGUgPSAkKCk7XG5cdFx0dGhpcy5mb2N1c2FibGUgPSAkKCk7XG5cdFx0dGhpcy5jbGFzc2VzRWxlbWVudExvb2t1cCA9IHt9O1xuXG5cdFx0aWYgKCBlbGVtZW50ICE9PSB0aGlzICkge1xuXHRcdFx0JC5kYXRhKCBlbGVtZW50LCB0aGlzLndpZGdldEZ1bGxOYW1lLCB0aGlzICk7XG5cdFx0XHR0aGlzLl9vbiggdHJ1ZSwgdGhpcy5lbGVtZW50LCB7XG5cdFx0XHRcdHJlbW92ZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRcdGlmICggZXZlbnQudGFyZ2V0ID09PSBlbGVtZW50ICkge1xuXHRcdFx0XHRcdFx0dGhpcy5kZXN0cm95KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0XHR0aGlzLmRvY3VtZW50ID0gJCggZWxlbWVudC5zdHlsZSA/XG5cblx0XHRcdFx0Ly8gRWxlbWVudCB3aXRoaW4gdGhlIGRvY3VtZW50XG5cdFx0XHRcdGVsZW1lbnQub3duZXJEb2N1bWVudCA6XG5cblx0XHRcdFx0Ly8gRWxlbWVudCBpcyB3aW5kb3cgb3IgZG9jdW1lbnRcblx0XHRcdFx0ZWxlbWVudC5kb2N1bWVudCB8fCBlbGVtZW50ICk7XG5cdFx0XHR0aGlzLndpbmRvdyA9ICQoIHRoaXMuZG9jdW1lbnRbIDAgXS5kZWZhdWx0VmlldyB8fCB0aGlzLmRvY3VtZW50WyAwIF0ucGFyZW50V2luZG93ICk7XG5cdFx0fVxuXG5cdFx0dGhpcy5vcHRpb25zID0gJC53aWRnZXQuZXh0ZW5kKCB7fSxcblx0XHRcdHRoaXMub3B0aW9ucyxcblx0XHRcdHRoaXMuX2dldENyZWF0ZU9wdGlvbnMoKSxcblx0XHRcdG9wdGlvbnMgKTtcblxuXHRcdHRoaXMuX2NyZWF0ZSgpO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgKSB7XG5cdFx0XHR0aGlzLl9zZXRPcHRpb25EaXNhYmxlZCggdGhpcy5vcHRpb25zLmRpc2FibGVkICk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fdHJpZ2dlciggXCJjcmVhdGVcIiwgbnVsbCwgdGhpcy5fZ2V0Q3JlYXRlRXZlbnREYXRhKCkgKTtcblx0XHR0aGlzLl9pbml0KCk7XG5cdH0sXG5cblx0X2dldENyZWF0ZU9wdGlvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB7fTtcblx0fSxcblxuXHRfZ2V0Q3JlYXRlRXZlbnREYXRhOiAkLm5vb3AsXG5cblx0X2NyZWF0ZTogJC5ub29wLFxuXG5cdF9pbml0OiAkLm5vb3AsXG5cblx0ZGVzdHJveTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHRoYXQgPSB0aGlzO1xuXG5cdFx0dGhpcy5fZGVzdHJveSgpO1xuXHRcdCQuZWFjaCggdGhpcy5jbGFzc2VzRWxlbWVudExvb2t1cCwgZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0XHR0aGF0Ll9yZW1vdmVDbGFzcyggdmFsdWUsIGtleSApO1xuXHRcdH0gKTtcblxuXHRcdC8vIFdlIGNhbiBwcm9iYWJseSByZW1vdmUgdGhlIHVuYmluZCBjYWxscyBpbiAyLjBcblx0XHQvLyBhbGwgZXZlbnQgYmluZGluZ3Mgc2hvdWxkIGdvIHRocm91Z2ggdGhpcy5fb24oKVxuXHRcdHRoaXMuZWxlbWVudFxuXHRcdFx0Lm9mZiggdGhpcy5ldmVudE5hbWVzcGFjZSApXG5cdFx0XHQucmVtb3ZlRGF0YSggdGhpcy53aWRnZXRGdWxsTmFtZSApO1xuXHRcdHRoaXMud2lkZ2V0KClcblx0XHRcdC5vZmYoIHRoaXMuZXZlbnROYW1lc3BhY2UgKVxuXHRcdFx0LnJlbW92ZUF0dHIoIFwiYXJpYS1kaXNhYmxlZFwiICk7XG5cblx0XHQvLyBDbGVhbiB1cCBldmVudHMgYW5kIHN0YXRlc1xuXHRcdHRoaXMuYmluZGluZ3Mub2ZmKCB0aGlzLmV2ZW50TmFtZXNwYWNlICk7XG5cdH0sXG5cblx0X2Rlc3Ryb3k6ICQubm9vcCxcblxuXHR3aWRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVsZW1lbnQ7XG5cdH0sXG5cblx0b3B0aW9uOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgb3B0aW9ucyA9IGtleTtcblx0XHR2YXIgcGFydHM7XG5cdFx0dmFyIGN1ck9wdGlvbjtcblx0XHR2YXIgaTtcblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIGEgcmVmZXJlbmNlIHRvIHRoZSBpbnRlcm5hbCBoYXNoXG5cdFx0XHRyZXR1cm4gJC53aWRnZXQuZXh0ZW5kKCB7fSwgdGhpcy5vcHRpb25zICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyBIYW5kbGUgbmVzdGVkIGtleXMsIGUuZy4sIFwiZm9vLmJhclwiID0+IHsgZm9vOiB7IGJhcjogX19fIH0gfVxuXHRcdFx0b3B0aW9ucyA9IHt9O1xuXHRcdFx0cGFydHMgPSBrZXkuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHRrZXkgPSBwYXJ0cy5zaGlmdCgpO1xuXHRcdFx0aWYgKCBwYXJ0cy5sZW5ndGggKSB7XG5cdFx0XHRcdGN1ck9wdGlvbiA9IG9wdGlvbnNbIGtleSBdID0gJC53aWRnZXQuZXh0ZW5kKCB7fSwgdGhpcy5vcHRpb25zWyBrZXkgXSApO1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aCAtIDE7IGkrKyApIHtcblx0XHRcdFx0XHRjdXJPcHRpb25bIHBhcnRzWyBpIF0gXSA9IGN1ck9wdGlvblsgcGFydHNbIGkgXSBdIHx8IHt9O1xuXHRcdFx0XHRcdGN1ck9wdGlvbiA9IGN1ck9wdGlvblsgcGFydHNbIGkgXSBdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGtleSA9IHBhcnRzLnBvcCgpO1xuXHRcdFx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGN1ck9wdGlvblsga2V5IF0gPT09IHVuZGVmaW5lZCA/IG51bGwgOiBjdXJPcHRpb25bIGtleSBdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGN1ck9wdGlvblsga2V5IF0gPSB2YWx1ZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25zWyBrZXkgXSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHRoaXMub3B0aW9uc1sga2V5IF07XG5cdFx0XHRcdH1cblx0XHRcdFx0b3B0aW9uc1sga2V5IF0gPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLl9zZXRPcHRpb25zKCBvcHRpb25zICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRfc2V0T3B0aW9uczogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdFx0dmFyIGtleTtcblxuXHRcdGZvciAoIGtleSBpbiBvcHRpb25zICkge1xuXHRcdFx0dGhpcy5fc2V0T3B0aW9uKCBrZXksIG9wdGlvbnNbIGtleSBdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0X3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0aWYgKCBrZXkgPT09IFwiY2xhc3Nlc1wiICkge1xuXHRcdFx0dGhpcy5fc2V0T3B0aW9uQ2xhc3NlcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHR0aGlzLm9wdGlvbnNbIGtleSBdID0gdmFsdWU7XG5cblx0XHRpZiAoIGtleSA9PT0gXCJkaXNhYmxlZFwiICkge1xuXHRcdFx0dGhpcy5fc2V0T3B0aW9uRGlzYWJsZWQoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0X3NldE9wdGlvbkNsYXNzZXM6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NLZXksIGVsZW1lbnRzLCBjdXJyZW50RWxlbWVudHM7XG5cblx0XHRmb3IgKCBjbGFzc0tleSBpbiB2YWx1ZSApIHtcblx0XHRcdGN1cnJlbnRFbGVtZW50cyA9IHRoaXMuY2xhc3Nlc0VsZW1lbnRMb29rdXBbIGNsYXNzS2V5IF07XG5cdFx0XHRpZiAoIHZhbHVlWyBjbGFzc0tleSBdID09PSB0aGlzLm9wdGlvbnMuY2xhc3Nlc1sgY2xhc3NLZXkgXSB8fFxuXHRcdFx0XHRcdCFjdXJyZW50RWxlbWVudHMgfHxcblx0XHRcdFx0XHQhY3VycmVudEVsZW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlIGFyZSBkb2luZyB0aGlzIHRvIGNyZWF0ZSBhIG5ldyBqUXVlcnkgb2JqZWN0IGJlY2F1c2UgdGhlIF9yZW1vdmVDbGFzcygpIGNhbGxcblx0XHRcdC8vIG9uIHRoZSBuZXh0IGxpbmUgaXMgZ29pbmcgdG8gZGVzdHJveSB0aGUgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IGVsZW1lbnRzIGJlaW5nXG5cdFx0XHQvLyB0cmFja2VkLiBXZSBuZWVkIHRvIHNhdmUgYSBjb3B5IG9mIHRoaXMgY29sbGVjdGlvbiBzbyB0aGF0IHdlIGNhbiBhZGQgdGhlIG5ldyBjbGFzc2VzXG5cdFx0XHQvLyBiZWxvdy5cblx0XHRcdGVsZW1lbnRzID0gJCggY3VycmVudEVsZW1lbnRzLmdldCgpICk7XG5cdFx0XHR0aGlzLl9yZW1vdmVDbGFzcyggY3VycmVudEVsZW1lbnRzLCBjbGFzc0tleSApO1xuXG5cdFx0XHQvLyBXZSBkb24ndCB1c2UgX2FkZENsYXNzKCkgaGVyZSwgYmVjYXVzZSB0aGF0IHVzZXMgdGhpcy5vcHRpb25zLmNsYXNzZXNcblx0XHRcdC8vIGZvciBnZW5lcmF0aW5nIHRoZSBzdHJpbmcgb2YgY2xhc3Nlcy4gV2Ugd2FudCB0byB1c2UgdGhlIHZhbHVlIHBhc3NlZCBpbiBmcm9tXG5cdFx0XHQvLyBfc2V0T3B0aW9uKCksIHRoaXMgaXMgdGhlIG5ldyB2YWx1ZSBvZiB0aGUgY2xhc3NlcyBvcHRpb24gd2hpY2ggd2FzIHBhc3NlZCB0b1xuXHRcdFx0Ly8gX3NldE9wdGlvbigpLiBXZSBwYXNzIHRoaXMgdmFsdWUgZGlyZWN0bHkgdG8gX2NsYXNzZXMoKS5cblx0XHRcdGVsZW1lbnRzLmFkZENsYXNzKCB0aGlzLl9jbGFzc2VzKCB7XG5cdFx0XHRcdGVsZW1lbnQ6IGVsZW1lbnRzLFxuXHRcdFx0XHRrZXlzOiBjbGFzc0tleSxcblx0XHRcdFx0Y2xhc3NlczogdmFsdWUsXG5cdFx0XHRcdGFkZDogdHJ1ZVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXHR9LFxuXG5cdF9zZXRPcHRpb25EaXNhYmxlZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHRoaXMuX3RvZ2dsZUNsYXNzKCB0aGlzLndpZGdldCgpLCB0aGlzLndpZGdldEZ1bGxOYW1lICsgXCItZGlzYWJsZWRcIiwgbnVsbCwgISF2YWx1ZSApO1xuXG5cdFx0Ly8gSWYgdGhlIHdpZGdldCBpcyBiZWNvbWluZyBkaXNhYmxlZCwgdGhlbiBub3RoaW5nIGlzIGludGVyYWN0aXZlXG5cdFx0aWYgKCB2YWx1ZSApIHtcblx0XHRcdHRoaXMuX3JlbW92ZUNsYXNzKCB0aGlzLmhvdmVyYWJsZSwgbnVsbCwgXCJ1aS1zdGF0ZS1ob3ZlclwiICk7XG5cdFx0XHR0aGlzLl9yZW1vdmVDbGFzcyggdGhpcy5mb2N1c2FibGUsIG51bGwsIFwidWktc3RhdGUtZm9jdXNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRlbmFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9zZXRPcHRpb25zKCB7IGRpc2FibGVkOiBmYWxzZSB9ICk7XG5cdH0sXG5cblx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3NldE9wdGlvbnMoIHsgZGlzYWJsZWQ6IHRydWUgfSApO1xuXHR9LFxuXG5cdF9jbGFzc2VzOiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0XHR2YXIgZnVsbCA9IFtdO1xuXHRcdHZhciB0aGF0ID0gdGhpcztcblxuXHRcdG9wdGlvbnMgPSAkLmV4dGVuZCgge1xuXHRcdFx0ZWxlbWVudDogdGhpcy5lbGVtZW50LFxuXHRcdFx0Y2xhc3NlczogdGhpcy5vcHRpb25zLmNsYXNzZXMgfHwge31cblx0XHR9LCBvcHRpb25zICk7XG5cblx0XHRmdW5jdGlvbiBwcm9jZXNzQ2xhc3NTdHJpbmcoIGNsYXNzZXMsIGNoZWNrT3B0aW9uICkge1xuXHRcdFx0dmFyIGN1cnJlbnQsIGk7XG5cdFx0XHRmb3IgKCBpID0gMDsgaSA8IGNsYXNzZXMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGN1cnJlbnQgPSB0aGF0LmNsYXNzZXNFbGVtZW50TG9va3VwWyBjbGFzc2VzWyBpIF0gXSB8fCAkKCk7XG5cdFx0XHRcdGlmICggb3B0aW9ucy5hZGQgKSB7XG5cdFx0XHRcdFx0Y3VycmVudCA9ICQoICQudW5pcXVlU29ydCggY3VycmVudC5nZXQoKS5jb25jYXQoIG9wdGlvbnMuZWxlbWVudC5nZXQoKSApICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjdXJyZW50ID0gJCggY3VycmVudC5ub3QoIG9wdGlvbnMuZWxlbWVudCApLmdldCgpICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhhdC5jbGFzc2VzRWxlbWVudExvb2t1cFsgY2xhc3Nlc1sgaSBdIF0gPSBjdXJyZW50O1xuXHRcdFx0XHRmdWxsLnB1c2goIGNsYXNzZXNbIGkgXSApO1xuXHRcdFx0XHRpZiAoIGNoZWNrT3B0aW9uICYmIG9wdGlvbnMuY2xhc3Nlc1sgY2xhc3Nlc1sgaSBdIF0gKSB7XG5cdFx0XHRcdFx0ZnVsbC5wdXNoKCBvcHRpb25zLmNsYXNzZXNbIGNsYXNzZXNbIGkgXSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLl9vbiggb3B0aW9ucy5lbGVtZW50LCB7XG5cdFx0XHRcInJlbW92ZVwiOiBcIl91bnRyYWNrQ2xhc3Nlc0VsZW1lbnRcIlxuXHRcdH0gKTtcblxuXHRcdGlmICggb3B0aW9ucy5rZXlzICkge1xuXHRcdFx0cHJvY2Vzc0NsYXNzU3RyaW5nKCBvcHRpb25zLmtleXMubWF0Y2goIC9cXFMrL2cgKSB8fCBbXSwgdHJ1ZSApO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMuZXh0cmEgKSB7XG5cdFx0XHRwcm9jZXNzQ2xhc3NTdHJpbmcoIG9wdGlvbnMuZXh0cmEubWF0Y2goIC9cXFMrL2cgKSB8fCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBmdWxsLmpvaW4oIFwiIFwiICk7XG5cdH0sXG5cblx0X3VudHJhY2tDbGFzc2VzRWxlbWVudDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciB0aGF0ID0gdGhpcztcblx0XHQkLmVhY2goIHRoYXQuY2xhc3Nlc0VsZW1lbnRMb29rdXAsIGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdFx0aWYgKCAkLmluQXJyYXkoIGV2ZW50LnRhcmdldCwgdmFsdWUgKSAhPT0gLTEgKSB7XG5cdFx0XHRcdHRoYXQuY2xhc3Nlc0VsZW1lbnRMb29rdXBbIGtleSBdID0gJCggdmFsdWUubm90KCBldmVudC50YXJnZXQgKS5nZXQoKSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRfcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCBlbGVtZW50LCBrZXlzLCBleHRyYSApIHtcblx0XHRyZXR1cm4gdGhpcy5fdG9nZ2xlQ2xhc3MoIGVsZW1lbnQsIGtleXMsIGV4dHJhLCBmYWxzZSApO1xuXHR9LFxuXG5cdF9hZGRDbGFzczogZnVuY3Rpb24oIGVsZW1lbnQsIGtleXMsIGV4dHJhICkge1xuXHRcdHJldHVybiB0aGlzLl90b2dnbGVDbGFzcyggZWxlbWVudCwga2V5cywgZXh0cmEsIHRydWUgKTtcblx0fSxcblxuXHRfdG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCBlbGVtZW50LCBrZXlzLCBleHRyYSwgYWRkICkge1xuXHRcdGFkZCA9ICggdHlwZW9mIGFkZCA9PT0gXCJib29sZWFuXCIgKSA/IGFkZCA6IGV4dHJhO1xuXHRcdHZhciBzaGlmdCA9ICggdHlwZW9mIGVsZW1lbnQgPT09IFwic3RyaW5nXCIgfHwgZWxlbWVudCA9PT0gbnVsbCApLFxuXHRcdFx0b3B0aW9ucyA9IHtcblx0XHRcdFx0ZXh0cmE6IHNoaWZ0ID8ga2V5cyA6IGV4dHJhLFxuXHRcdFx0XHRrZXlzOiBzaGlmdCA/IGVsZW1lbnQgOiBrZXlzLFxuXHRcdFx0XHRlbGVtZW50OiBzaGlmdCA/IHRoaXMuZWxlbWVudCA6IGVsZW1lbnQsXG5cdFx0XHRcdGFkZDogYWRkXG5cdFx0XHR9O1xuXHRcdG9wdGlvbnMuZWxlbWVudC50b2dnbGVDbGFzcyggdGhpcy5fY2xhc3Nlcyggb3B0aW9ucyApLCBhZGQgKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRfb246IGZ1bmN0aW9uKCBzdXBwcmVzc0Rpc2FibGVkQ2hlY2ssIGVsZW1lbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBkZWxlZ2F0ZUVsZW1lbnQ7XG5cdFx0dmFyIGluc3RhbmNlID0gdGhpcztcblxuXHRcdC8vIE5vIHN1cHByZXNzRGlzYWJsZWRDaGVjayBmbGFnLCBzaHVmZmxlIGFyZ3VtZW50c1xuXHRcdGlmICggdHlwZW9mIHN1cHByZXNzRGlzYWJsZWRDaGVjayAhPT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRoYW5kbGVycyA9IGVsZW1lbnQ7XG5cdFx0XHRlbGVtZW50ID0gc3VwcHJlc3NEaXNhYmxlZENoZWNrO1xuXHRcdFx0c3VwcHJlc3NEaXNhYmxlZENoZWNrID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gTm8gZWxlbWVudCBhcmd1bWVudCwgc2h1ZmZsZSBhbmQgdXNlIHRoaXMuZWxlbWVudFxuXHRcdGlmICggIWhhbmRsZXJzICkge1xuXHRcdFx0aGFuZGxlcnMgPSBlbGVtZW50O1xuXHRcdFx0ZWxlbWVudCA9IHRoaXMuZWxlbWVudDtcblx0XHRcdGRlbGVnYXRlRWxlbWVudCA9IHRoaXMud2lkZ2V0KCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW1lbnQgPSBkZWxlZ2F0ZUVsZW1lbnQgPSAkKCBlbGVtZW50ICk7XG5cdFx0XHR0aGlzLmJpbmRpbmdzID0gdGhpcy5iaW5kaW5ncy5hZGQoIGVsZW1lbnQgKTtcblx0XHR9XG5cblx0XHQkLmVhY2goIGhhbmRsZXJzLCBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXIgKSB7XG5cdFx0XHRmdW5jdGlvbiBoYW5kbGVyUHJveHkoKSB7XG5cblx0XHRcdFx0Ly8gQWxsb3cgd2lkZ2V0cyB0byBjdXN0b21pemUgdGhlIGRpc2FibGVkIGhhbmRsaW5nXG5cdFx0XHRcdC8vIC0gZGlzYWJsZWQgYXMgYW4gYXJyYXkgaW5zdGVhZCBvZiBib29sZWFuXG5cdFx0XHRcdC8vIC0gZGlzYWJsZWQgY2xhc3MgYXMgbWV0aG9kIGZvciBkaXNhYmxpbmcgaW5kaXZpZHVhbCBwYXJ0c1xuXHRcdFx0XHRpZiAoICFzdXBwcmVzc0Rpc2FibGVkQ2hlY2sgJiZcblx0XHRcdFx0XHRcdCggaW5zdGFuY2Uub3B0aW9ucy5kaXNhYmxlZCA9PT0gdHJ1ZSB8fFxuXHRcdFx0XHRcdFx0JCggdGhpcyApLmhhc0NsYXNzKCBcInVpLXN0YXRlLWRpc2FibGVkXCIgKSApICkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gKCB0eXBlb2YgaGFuZGxlciA9PT0gXCJzdHJpbmdcIiA/IGluc3RhbmNlWyBoYW5kbGVyIF0gOiBoYW5kbGVyIClcblx0XHRcdFx0XHQuYXBwbHkoIGluc3RhbmNlLCBhcmd1bWVudHMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29weSB0aGUgZ3VpZCBzbyBkaXJlY3QgdW5iaW5kaW5nIHdvcmtzXG5cdFx0XHRpZiAoIHR5cGVvZiBoYW5kbGVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRoYW5kbGVyUHJveHkuZ3VpZCA9IGhhbmRsZXIuZ3VpZCA9XG5cdFx0XHRcdFx0aGFuZGxlci5ndWlkIHx8IGhhbmRsZXJQcm94eS5ndWlkIHx8ICQuZ3VpZCsrO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgbWF0Y2ggPSBldmVudC5tYXRjaCggL14oW1xcdzotXSopXFxzKiguKikkLyApO1xuXHRcdFx0dmFyIGV2ZW50TmFtZSA9IG1hdGNoWyAxIF0gKyBpbnN0YW5jZS5ldmVudE5hbWVzcGFjZTtcblx0XHRcdHZhciBzZWxlY3RvciA9IG1hdGNoWyAyIF07XG5cblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGRlbGVnYXRlRWxlbWVudC5vbiggZXZlbnROYW1lLCBzZWxlY3RvciwgaGFuZGxlclByb3h5ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50Lm9uKCBldmVudE5hbWUsIGhhbmRsZXJQcm94eSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRfb2ZmOiBmdW5jdGlvbiggZWxlbWVudCwgZXZlbnROYW1lICkge1xuXHRcdGV2ZW50TmFtZSA9ICggZXZlbnROYW1lIHx8IFwiXCIgKS5zcGxpdCggXCIgXCIgKS5qb2luKCB0aGlzLmV2ZW50TmFtZXNwYWNlICsgXCIgXCIgKSArXG5cdFx0XHR0aGlzLmV2ZW50TmFtZXNwYWNlO1xuXHRcdGVsZW1lbnQub2ZmKCBldmVudE5hbWUgKS5vZmYoIGV2ZW50TmFtZSApO1xuXG5cdFx0Ly8gQ2xlYXIgdGhlIHN0YWNrIHRvIGF2b2lkIG1lbW9yeSBsZWFrcyAoIzEwMDU2KVxuXHRcdHRoaXMuYmluZGluZ3MgPSAkKCB0aGlzLmJpbmRpbmdzLm5vdCggZWxlbWVudCApLmdldCgpICk7XG5cdFx0dGhpcy5mb2N1c2FibGUgPSAkKCB0aGlzLmZvY3VzYWJsZS5ub3QoIGVsZW1lbnQgKS5nZXQoKSApO1xuXHRcdHRoaXMuaG92ZXJhYmxlID0gJCggdGhpcy5ob3ZlcmFibGUubm90KCBlbGVtZW50ICkuZ2V0KCkgKTtcblx0fSxcblxuXHRfZGVsYXk6IGZ1bmN0aW9uKCBoYW5kbGVyLCBkZWxheSApIHtcblx0XHRmdW5jdGlvbiBoYW5kbGVyUHJveHkoKSB7XG5cdFx0XHRyZXR1cm4gKCB0eXBlb2YgaGFuZGxlciA9PT0gXCJzdHJpbmdcIiA/IGluc3RhbmNlWyBoYW5kbGVyIF0gOiBoYW5kbGVyIClcblx0XHRcdFx0LmFwcGx5KCBpbnN0YW5jZSwgYXJndW1lbnRzICk7XG5cdFx0fVxuXHRcdHZhciBpbnN0YW5jZSA9IHRoaXM7XG5cdFx0cmV0dXJuIHNldFRpbWVvdXQoIGhhbmRsZXJQcm94eSwgZGVsYXkgfHwgMCApO1xuXHR9LFxuXG5cdF9ob3ZlcmFibGU6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdHRoaXMuaG92ZXJhYmxlID0gdGhpcy5ob3ZlcmFibGUuYWRkKCBlbGVtZW50ICk7XG5cdFx0dGhpcy5fb24oIGVsZW1lbnQsIHtcblx0XHRcdG1vdXNlZW50ZXI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0dGhpcy5fYWRkQ2xhc3MoICQoIGV2ZW50LmN1cnJlbnRUYXJnZXQgKSwgbnVsbCwgXCJ1aS1zdGF0ZS1ob3ZlclwiICk7XG5cdFx0XHR9LFxuXHRcdFx0bW91c2VsZWF2ZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR0aGlzLl9yZW1vdmVDbGFzcyggJCggZXZlbnQuY3VycmVudFRhcmdldCApLCBudWxsLCBcInVpLXN0YXRlLWhvdmVyXCIgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0X2ZvY3VzYWJsZTogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0dGhpcy5mb2N1c2FibGUgPSB0aGlzLmZvY3VzYWJsZS5hZGQoIGVsZW1lbnQgKTtcblx0XHR0aGlzLl9vbiggZWxlbWVudCwge1xuXHRcdFx0Zm9jdXNpbjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR0aGlzLl9hZGRDbGFzcyggJCggZXZlbnQuY3VycmVudFRhcmdldCApLCBudWxsLCBcInVpLXN0YXRlLWZvY3VzXCIgKTtcblx0XHRcdH0sXG5cdFx0XHRmb2N1c291dDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR0aGlzLl9yZW1vdmVDbGFzcyggJCggZXZlbnQuY3VycmVudFRhcmdldCApLCBudWxsLCBcInVpLXN0YXRlLWZvY3VzXCIgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0X3RyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBldmVudCwgZGF0YSApIHtcblx0XHR2YXIgcHJvcCwgb3JpZztcblx0XHR2YXIgY2FsbGJhY2sgPSB0aGlzLm9wdGlvbnNbIHR5cGUgXTtcblxuXHRcdGRhdGEgPSBkYXRhIHx8IHt9O1xuXHRcdGV2ZW50ID0gJC5FdmVudCggZXZlbnQgKTtcblx0XHRldmVudC50eXBlID0gKCB0eXBlID09PSB0aGlzLndpZGdldEV2ZW50UHJlZml4ID9cblx0XHRcdHR5cGUgOlxuXHRcdFx0dGhpcy53aWRnZXRFdmVudFByZWZpeCArIHR5cGUgKS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0Ly8gVGhlIG9yaWdpbmFsIGV2ZW50IG1heSBjb21lIGZyb20gYW55IGVsZW1lbnRcblx0XHQvLyBzbyB3ZSBuZWVkIHRvIHJlc2V0IHRoZSB0YXJnZXQgb24gdGhlIG5ldyBldmVudFxuXHRcdGV2ZW50LnRhcmdldCA9IHRoaXMuZWxlbWVudFsgMCBdO1xuXG5cdFx0Ly8gQ29weSBvcmlnaW5hbCBldmVudCBwcm9wZXJ0aWVzIG92ZXIgdG8gdGhlIG5ldyBldmVudFxuXHRcdG9yaWcgPSBldmVudC5vcmlnaW5hbEV2ZW50O1xuXHRcdGlmICggb3JpZyApIHtcblx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdFx0aWYgKCAhKCBwcm9wIGluIGV2ZW50ICkgKSB7XG5cdFx0XHRcdFx0ZXZlbnRbIHByb3AgXSA9IG9yaWdbIHByb3AgXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMuZWxlbWVudC50cmlnZ2VyKCBldmVudCwgZGF0YSApO1xuXHRcdHJldHVybiAhKCAkLmlzRnVuY3Rpb24oIGNhbGxiYWNrICkgJiZcblx0XHRcdGNhbGxiYWNrLmFwcGx5KCB0aGlzLmVsZW1lbnRbIDAgXSwgWyBldmVudCBdLmNvbmNhdCggZGF0YSApICkgPT09IGZhbHNlIHx8XG5cdFx0XHRldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApO1xuXHR9XG59O1xuXG4kLmVhY2goIHsgc2hvdzogXCJmYWRlSW5cIiwgaGlkZTogXCJmYWRlT3V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgZGVmYXVsdEVmZmVjdCApIHtcblx0JC5XaWRnZXQucHJvdG90eXBlWyBcIl9cIiArIG1ldGhvZCBdID0gZnVuY3Rpb24oIGVsZW1lbnQsIG9wdGlvbnMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvcHRpb25zID0geyBlZmZlY3Q6IG9wdGlvbnMgfTtcblx0XHR9XG5cblx0XHR2YXIgaGFzT3B0aW9ucztcblx0XHR2YXIgZWZmZWN0TmFtZSA9ICFvcHRpb25zID9cblx0XHRcdG1ldGhvZCA6XG5cdFx0XHRvcHRpb25zID09PSB0cnVlIHx8IHR5cGVvZiBvcHRpb25zID09PSBcIm51bWJlclwiID9cblx0XHRcdFx0ZGVmYXVsdEVmZmVjdCA6XG5cdFx0XHRcdG9wdGlvbnMuZWZmZWN0IHx8IGRlZmF1bHRFZmZlY3Q7XG5cblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblx0XHRpZiAoIHR5cGVvZiBvcHRpb25zID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHsgZHVyYXRpb246IG9wdGlvbnMgfTtcblx0XHR9XG5cblx0XHRoYXNPcHRpb25zID0gISQuaXNFbXB0eU9iamVjdCggb3B0aW9ucyApO1xuXHRcdG9wdGlvbnMuY29tcGxldGUgPSBjYWxsYmFjaztcblxuXHRcdGlmICggb3B0aW9ucy5kZWxheSApIHtcblx0XHRcdGVsZW1lbnQuZGVsYXkoIG9wdGlvbnMuZGVsYXkgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhhc09wdGlvbnMgJiYgJC5lZmZlY3RzICYmICQuZWZmZWN0cy5lZmZlY3RbIGVmZmVjdE5hbWUgXSApIHtcblx0XHRcdGVsZW1lbnRbIG1ldGhvZCBdKCBvcHRpb25zICk7XG5cdFx0fSBlbHNlIGlmICggZWZmZWN0TmFtZSAhPT0gbWV0aG9kICYmIGVsZW1lbnRbIGVmZmVjdE5hbWUgXSApIHtcblx0XHRcdGVsZW1lbnRbIGVmZmVjdE5hbWUgXSggb3B0aW9ucy5kdXJhdGlvbiwgb3B0aW9ucy5lYXNpbmcsIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW1lbnQucXVldWUoIGZ1bmN0aW9uKCBuZXh0ICkge1xuXHRcdFx0XHQkKCB0aGlzIClbIG1ldGhvZCBdKCk7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2suY2FsbCggZWxlbWVudFsgMCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0bmV4dCgpO1xuXHRcdFx0fSApO1xuXHRcdH1cblx0fTtcbn0gKTtcblxudmFyIHdpZGdldCA9ICQud2lkZ2V0O1xuXG5cbi8qIVxuICogalF1ZXJ5IFVJIFBvc2l0aW9uIDEuMTIuMVxuICogaHR0cDovL2pxdWVyeXVpLmNvbVxuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vcG9zaXRpb24vXG4gKi9cblxuLy8+PmxhYmVsOiBQb3NpdGlvblxuLy8+Pmdyb3VwOiBDb3JlXG4vLz4+ZGVzY3JpcHRpb246IFBvc2l0aW9ucyBlbGVtZW50cyByZWxhdGl2ZSB0byBvdGhlciBlbGVtZW50cy5cbi8vPj5kb2NzOiBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9wb3NpdGlvbi9cbi8vPj5kZW1vczogaHR0cDovL2pxdWVyeXVpLmNvbS9wb3NpdGlvbi9cblxuXG4oIGZ1bmN0aW9uKCkge1xudmFyIGNhY2hlZFNjcm9sbGJhcldpZHRoLFxuXHRtYXggPSBNYXRoLm1heCxcblx0YWJzID0gTWF0aC5hYnMsXG5cdHJob3Jpem9udGFsID0gL2xlZnR8Y2VudGVyfHJpZ2h0Lyxcblx0cnZlcnRpY2FsID0gL3RvcHxjZW50ZXJ8Ym90dG9tLyxcblx0cm9mZnNldCA9IC9bXFwrXFwtXVxcZCsoXFwuW1xcZF0rKT8lPy8sXG5cdHJwb3NpdGlvbiA9IC9eXFx3Ky8sXG5cdHJwZXJjZW50ID0gLyUkLyxcblx0X3Bvc2l0aW9uID0gJC5mbi5wb3NpdGlvbjtcblxuZnVuY3Rpb24gZ2V0T2Zmc2V0cyggb2Zmc2V0cywgd2lkdGgsIGhlaWdodCApIHtcblx0cmV0dXJuIFtcblx0XHRwYXJzZUZsb2F0KCBvZmZzZXRzWyAwIF0gKSAqICggcnBlcmNlbnQudGVzdCggb2Zmc2V0c1sgMCBdICkgPyB3aWR0aCAvIDEwMCA6IDEgKSxcblx0XHRwYXJzZUZsb2F0KCBvZmZzZXRzWyAxIF0gKSAqICggcnBlcmNlbnQudGVzdCggb2Zmc2V0c1sgMSBdICkgPyBoZWlnaHQgLyAxMDAgOiAxIClcblx0XTtcbn1cblxuZnVuY3Rpb24gcGFyc2VDc3MoIGVsZW1lbnQsIHByb3BlcnR5ICkge1xuXHRyZXR1cm4gcGFyc2VJbnQoICQuY3NzKCBlbGVtZW50LCBwcm9wZXJ0eSApLCAxMCApIHx8IDA7XG59XG5cbmZ1bmN0aW9uIGdldERpbWVuc2lvbnMoIGVsZW0gKSB7XG5cdHZhciByYXcgPSBlbGVtWyAwIF07XG5cdGlmICggcmF3Lm5vZGVUeXBlID09PSA5ICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHR3aWR0aDogZWxlbS53aWR0aCgpLFxuXHRcdFx0aGVpZ2h0OiBlbGVtLmhlaWdodCgpLFxuXHRcdFx0b2Zmc2V0OiB7IHRvcDogMCwgbGVmdDogMCB9XG5cdFx0fTtcblx0fVxuXHRpZiAoICQuaXNXaW5kb3coIHJhdyApICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHR3aWR0aDogZWxlbS53aWR0aCgpLFxuXHRcdFx0aGVpZ2h0OiBlbGVtLmhlaWdodCgpLFxuXHRcdFx0b2Zmc2V0OiB7IHRvcDogZWxlbS5zY3JvbGxUb3AoKSwgbGVmdDogZWxlbS5zY3JvbGxMZWZ0KCkgfVxuXHRcdH07XG5cdH1cblx0aWYgKCByYXcucHJldmVudERlZmF1bHQgKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHdpZHRoOiAwLFxuXHRcdFx0aGVpZ2h0OiAwLFxuXHRcdFx0b2Zmc2V0OiB7IHRvcDogcmF3LnBhZ2VZLCBsZWZ0OiByYXcucGFnZVggfVxuXHRcdH07XG5cdH1cblx0cmV0dXJuIHtcblx0XHR3aWR0aDogZWxlbS5vdXRlcldpZHRoKCksXG5cdFx0aGVpZ2h0OiBlbGVtLm91dGVySGVpZ2h0KCksXG5cdFx0b2Zmc2V0OiBlbGVtLm9mZnNldCgpXG5cdH07XG59XG5cbiQucG9zaXRpb24gPSB7XG5cdHNjcm9sbGJhcldpZHRoOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGNhY2hlZFNjcm9sbGJhcldpZHRoICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm4gY2FjaGVkU2Nyb2xsYmFyV2lkdGg7XG5cdFx0fVxuXHRcdHZhciB3MSwgdzIsXG5cdFx0XHRkaXYgPSAkKCBcIjxkaXYgXCIgK1xuXHRcdFx0XHRcInN0eWxlPSdkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjUwcHg7aGVpZ2h0OjUwcHg7b3ZlcmZsb3c6aGlkZGVuOyc+XCIgK1xuXHRcdFx0XHRcIjxkaXYgc3R5bGU9J2hlaWdodDoxMDBweDt3aWR0aDphdXRvOyc+PC9kaXY+PC9kaXY+XCIgKSxcblx0XHRcdGlubmVyRGl2ID0gZGl2LmNoaWxkcmVuKClbIDAgXTtcblxuXHRcdCQoIFwiYm9keVwiICkuYXBwZW5kKCBkaXYgKTtcblx0XHR3MSA9IGlubmVyRGl2Lm9mZnNldFdpZHRoO1xuXHRcdGRpdi5jc3MoIFwib3ZlcmZsb3dcIiwgXCJzY3JvbGxcIiApO1xuXG5cdFx0dzIgPSBpbm5lckRpdi5vZmZzZXRXaWR0aDtcblxuXHRcdGlmICggdzEgPT09IHcyICkge1xuXHRcdFx0dzIgPSBkaXZbIDAgXS5jbGllbnRXaWR0aDtcblx0XHR9XG5cblx0XHRkaXYucmVtb3ZlKCk7XG5cblx0XHRyZXR1cm4gKCBjYWNoZWRTY3JvbGxiYXJXaWR0aCA9IHcxIC0gdzIgKTtcblx0fSxcblx0Z2V0U2Nyb2xsSW5mbzogZnVuY3Rpb24oIHdpdGhpbiApIHtcblx0XHR2YXIgb3ZlcmZsb3dYID0gd2l0aGluLmlzV2luZG93IHx8IHdpdGhpbi5pc0RvY3VtZW50ID8gXCJcIiA6XG5cdFx0XHRcdHdpdGhpbi5lbGVtZW50LmNzcyggXCJvdmVyZmxvdy14XCIgKSxcblx0XHRcdG92ZXJmbG93WSA9IHdpdGhpbi5pc1dpbmRvdyB8fCB3aXRoaW4uaXNEb2N1bWVudCA/IFwiXCIgOlxuXHRcdFx0XHR3aXRoaW4uZWxlbWVudC5jc3MoIFwib3ZlcmZsb3cteVwiICksXG5cdFx0XHRoYXNPdmVyZmxvd1ggPSBvdmVyZmxvd1ggPT09IFwic2Nyb2xsXCIgfHxcblx0XHRcdFx0KCBvdmVyZmxvd1ggPT09IFwiYXV0b1wiICYmIHdpdGhpbi53aWR0aCA8IHdpdGhpbi5lbGVtZW50WyAwIF0uc2Nyb2xsV2lkdGggKSxcblx0XHRcdGhhc092ZXJmbG93WSA9IG92ZXJmbG93WSA9PT0gXCJzY3JvbGxcIiB8fFxuXHRcdFx0XHQoIG92ZXJmbG93WSA9PT0gXCJhdXRvXCIgJiYgd2l0aGluLmhlaWdodCA8IHdpdGhpbi5lbGVtZW50WyAwIF0uc2Nyb2xsSGVpZ2h0ICk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHdpZHRoOiBoYXNPdmVyZmxvd1kgPyAkLnBvc2l0aW9uLnNjcm9sbGJhcldpZHRoKCkgOiAwLFxuXHRcdFx0aGVpZ2h0OiBoYXNPdmVyZmxvd1ggPyAkLnBvc2l0aW9uLnNjcm9sbGJhcldpZHRoKCkgOiAwXG5cdFx0fTtcblx0fSxcblx0Z2V0V2l0aGluSW5mbzogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0dmFyIHdpdGhpbkVsZW1lbnQgPSAkKCBlbGVtZW50IHx8IHdpbmRvdyApLFxuXHRcdFx0aXNXaW5kb3cgPSAkLmlzV2luZG93KCB3aXRoaW5FbGVtZW50WyAwIF0gKSxcblx0XHRcdGlzRG9jdW1lbnQgPSAhIXdpdGhpbkVsZW1lbnRbIDAgXSAmJiB3aXRoaW5FbGVtZW50WyAwIF0ubm9kZVR5cGUgPT09IDksXG5cdFx0XHRoYXNPZmZzZXQgPSAhaXNXaW5kb3cgJiYgIWlzRG9jdW1lbnQ7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGVsZW1lbnQ6IHdpdGhpbkVsZW1lbnQsXG5cdFx0XHRpc1dpbmRvdzogaXNXaW5kb3csXG5cdFx0XHRpc0RvY3VtZW50OiBpc0RvY3VtZW50LFxuXHRcdFx0b2Zmc2V0OiBoYXNPZmZzZXQgPyAkKCBlbGVtZW50ICkub2Zmc2V0KCkgOiB7IGxlZnQ6IDAsIHRvcDogMCB9LFxuXHRcdFx0c2Nyb2xsTGVmdDogd2l0aGluRWxlbWVudC5zY3JvbGxMZWZ0KCksXG5cdFx0XHRzY3JvbGxUb3A6IHdpdGhpbkVsZW1lbnQuc2Nyb2xsVG9wKCksXG5cdFx0XHR3aWR0aDogd2l0aGluRWxlbWVudC5vdXRlcldpZHRoKCksXG5cdFx0XHRoZWlnaHQ6IHdpdGhpbkVsZW1lbnQub3V0ZXJIZWlnaHQoKVxuXHRcdH07XG5cdH1cbn07XG5cbiQuZm4ucG9zaXRpb24gPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0aWYgKCAhb3B0aW9ucyB8fCAhb3B0aW9ucy5vZiApIHtcblx0XHRyZXR1cm4gX3Bvc2l0aW9uLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0fVxuXG5cdC8vIE1ha2UgYSBjb3B5LCB3ZSBkb24ndCB3YW50IHRvIG1vZGlmeSBhcmd1bWVudHNcblx0b3B0aW9ucyA9ICQuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciBhdE9mZnNldCwgdGFyZ2V0V2lkdGgsIHRhcmdldEhlaWdodCwgdGFyZ2V0T2Zmc2V0LCBiYXNlUG9zaXRpb24sIGRpbWVuc2lvbnMsXG5cdFx0dGFyZ2V0ID0gJCggb3B0aW9ucy5vZiApLFxuXHRcdHdpdGhpbiA9ICQucG9zaXRpb24uZ2V0V2l0aGluSW5mbyggb3B0aW9ucy53aXRoaW4gKSxcblx0XHRzY3JvbGxJbmZvID0gJC5wb3NpdGlvbi5nZXRTY3JvbGxJbmZvKCB3aXRoaW4gKSxcblx0XHRjb2xsaXNpb24gPSAoIG9wdGlvbnMuY29sbGlzaW9uIHx8IFwiZmxpcFwiICkuc3BsaXQoIFwiIFwiICksXG5cdFx0b2Zmc2V0cyA9IHt9O1xuXG5cdGRpbWVuc2lvbnMgPSBnZXREaW1lbnNpb25zKCB0YXJnZXQgKTtcblx0aWYgKCB0YXJnZXRbIDAgXS5wcmV2ZW50RGVmYXVsdCApIHtcblxuXHRcdC8vIEZvcmNlIGxlZnQgdG9wIHRvIGFsbG93IGZsaXBwaW5nXG5cdFx0b3B0aW9ucy5hdCA9IFwibGVmdCB0b3BcIjtcblx0fVxuXHR0YXJnZXRXaWR0aCA9IGRpbWVuc2lvbnMud2lkdGg7XG5cdHRhcmdldEhlaWdodCA9IGRpbWVuc2lvbnMuaGVpZ2h0O1xuXHR0YXJnZXRPZmZzZXQgPSBkaW1lbnNpb25zLm9mZnNldDtcblxuXHQvLyBDbG9uZSB0byByZXVzZSBvcmlnaW5hbCB0YXJnZXRPZmZzZXQgbGF0ZXJcblx0YmFzZVBvc2l0aW9uID0gJC5leHRlbmQoIHt9LCB0YXJnZXRPZmZzZXQgKTtcblxuXHQvLyBGb3JjZSBteSBhbmQgYXQgdG8gaGF2ZSB2YWxpZCBob3Jpem9udGFsIGFuZCB2ZXJ0aWNhbCBwb3NpdGlvbnNcblx0Ly8gaWYgYSB2YWx1ZSBpcyBtaXNzaW5nIG9yIGludmFsaWQsIGl0IHdpbGwgYmUgY29udmVydGVkIHRvIGNlbnRlclxuXHQkLmVhY2goIFsgXCJteVwiLCBcImF0XCIgXSwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHBvcyA9ICggb3B0aW9uc1sgdGhpcyBdIHx8IFwiXCIgKS5zcGxpdCggXCIgXCIgKSxcblx0XHRcdGhvcml6b250YWxPZmZzZXQsXG5cdFx0XHR2ZXJ0aWNhbE9mZnNldDtcblxuXHRcdGlmICggcG9zLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdHBvcyA9IHJob3Jpem9udGFsLnRlc3QoIHBvc1sgMCBdICkgP1xuXHRcdFx0XHRwb3MuY29uY2F0KCBbIFwiY2VudGVyXCIgXSApIDpcblx0XHRcdFx0cnZlcnRpY2FsLnRlc3QoIHBvc1sgMCBdICkgP1xuXHRcdFx0XHRcdFsgXCJjZW50ZXJcIiBdLmNvbmNhdCggcG9zICkgOlxuXHRcdFx0XHRcdFsgXCJjZW50ZXJcIiwgXCJjZW50ZXJcIiBdO1xuXHRcdH1cblx0XHRwb3NbIDAgXSA9IHJob3Jpem9udGFsLnRlc3QoIHBvc1sgMCBdICkgPyBwb3NbIDAgXSA6IFwiY2VudGVyXCI7XG5cdFx0cG9zWyAxIF0gPSBydmVydGljYWwudGVzdCggcG9zWyAxIF0gKSA/IHBvc1sgMSBdIDogXCJjZW50ZXJcIjtcblxuXHRcdC8vIENhbGN1bGF0ZSBvZmZzZXRzXG5cdFx0aG9yaXpvbnRhbE9mZnNldCA9IHJvZmZzZXQuZXhlYyggcG9zWyAwIF0gKTtcblx0XHR2ZXJ0aWNhbE9mZnNldCA9IHJvZmZzZXQuZXhlYyggcG9zWyAxIF0gKTtcblx0XHRvZmZzZXRzWyB0aGlzIF0gPSBbXG5cdFx0XHRob3Jpem9udGFsT2Zmc2V0ID8gaG9yaXpvbnRhbE9mZnNldFsgMCBdIDogMCxcblx0XHRcdHZlcnRpY2FsT2Zmc2V0ID8gdmVydGljYWxPZmZzZXRbIDAgXSA6IDBcblx0XHRdO1xuXG5cdFx0Ly8gUmVkdWNlIHRvIGp1c3QgdGhlIHBvc2l0aW9ucyB3aXRob3V0IHRoZSBvZmZzZXRzXG5cdFx0b3B0aW9uc1sgdGhpcyBdID0gW1xuXHRcdFx0cnBvc2l0aW9uLmV4ZWMoIHBvc1sgMCBdIClbIDAgXSxcblx0XHRcdHJwb3NpdGlvbi5leGVjKCBwb3NbIDEgXSApWyAwIF1cblx0XHRdO1xuXHR9ICk7XG5cblx0Ly8gTm9ybWFsaXplIGNvbGxpc2lvbiBvcHRpb25cblx0aWYgKCBjb2xsaXNpb24ubGVuZ3RoID09PSAxICkge1xuXHRcdGNvbGxpc2lvblsgMSBdID0gY29sbGlzaW9uWyAwIF07XG5cdH1cblxuXHRpZiAoIG9wdGlvbnMuYXRbIDAgXSA9PT0gXCJyaWdodFwiICkge1xuXHRcdGJhc2VQb3NpdGlvbi5sZWZ0ICs9IHRhcmdldFdpZHRoO1xuXHR9IGVsc2UgaWYgKCBvcHRpb25zLmF0WyAwIF0gPT09IFwiY2VudGVyXCIgKSB7XG5cdFx0YmFzZVBvc2l0aW9uLmxlZnQgKz0gdGFyZ2V0V2lkdGggLyAyO1xuXHR9XG5cblx0aWYgKCBvcHRpb25zLmF0WyAxIF0gPT09IFwiYm90dG9tXCIgKSB7XG5cdFx0YmFzZVBvc2l0aW9uLnRvcCArPSB0YXJnZXRIZWlnaHQ7XG5cdH0gZWxzZSBpZiAoIG9wdGlvbnMuYXRbIDEgXSA9PT0gXCJjZW50ZXJcIiApIHtcblx0XHRiYXNlUG9zaXRpb24udG9wICs9IHRhcmdldEhlaWdodCAvIDI7XG5cdH1cblxuXHRhdE9mZnNldCA9IGdldE9mZnNldHMoIG9mZnNldHMuYXQsIHRhcmdldFdpZHRoLCB0YXJnZXRIZWlnaHQgKTtcblx0YmFzZVBvc2l0aW9uLmxlZnQgKz0gYXRPZmZzZXRbIDAgXTtcblx0YmFzZVBvc2l0aW9uLnRvcCArPSBhdE9mZnNldFsgMSBdO1xuXG5cdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjb2xsaXNpb25Qb3NpdGlvbiwgdXNpbmcsXG5cdFx0XHRlbGVtID0gJCggdGhpcyApLFxuXHRcdFx0ZWxlbVdpZHRoID0gZWxlbS5vdXRlcldpZHRoKCksXG5cdFx0XHRlbGVtSGVpZ2h0ID0gZWxlbS5vdXRlckhlaWdodCgpLFxuXHRcdFx0bWFyZ2luTGVmdCA9IHBhcnNlQ3NzKCB0aGlzLCBcIm1hcmdpbkxlZnRcIiApLFxuXHRcdFx0bWFyZ2luVG9wID0gcGFyc2VDc3MoIHRoaXMsIFwibWFyZ2luVG9wXCIgKSxcblx0XHRcdGNvbGxpc2lvbldpZHRoID0gZWxlbVdpZHRoICsgbWFyZ2luTGVmdCArIHBhcnNlQ3NzKCB0aGlzLCBcIm1hcmdpblJpZ2h0XCIgKSArXG5cdFx0XHRcdHNjcm9sbEluZm8ud2lkdGgsXG5cdFx0XHRjb2xsaXNpb25IZWlnaHQgPSBlbGVtSGVpZ2h0ICsgbWFyZ2luVG9wICsgcGFyc2VDc3MoIHRoaXMsIFwibWFyZ2luQm90dG9tXCIgKSArXG5cdFx0XHRcdHNjcm9sbEluZm8uaGVpZ2h0LFxuXHRcdFx0cG9zaXRpb24gPSAkLmV4dGVuZCgge30sIGJhc2VQb3NpdGlvbiApLFxuXHRcdFx0bXlPZmZzZXQgPSBnZXRPZmZzZXRzKCBvZmZzZXRzLm15LCBlbGVtLm91dGVyV2lkdGgoKSwgZWxlbS5vdXRlckhlaWdodCgpICk7XG5cblx0XHRpZiAoIG9wdGlvbnMubXlbIDAgXSA9PT0gXCJyaWdodFwiICkge1xuXHRcdFx0cG9zaXRpb24ubGVmdCAtPSBlbGVtV2lkdGg7XG5cdFx0fSBlbHNlIGlmICggb3B0aW9ucy5teVsgMCBdID09PSBcImNlbnRlclwiICkge1xuXHRcdFx0cG9zaXRpb24ubGVmdCAtPSBlbGVtV2lkdGggLyAyO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy5teVsgMSBdID09PSBcImJvdHRvbVwiICkge1xuXHRcdFx0cG9zaXRpb24udG9wIC09IGVsZW1IZWlnaHQ7XG5cdFx0fSBlbHNlIGlmICggb3B0aW9ucy5teVsgMSBdID09PSBcImNlbnRlclwiICkge1xuXHRcdFx0cG9zaXRpb24udG9wIC09IGVsZW1IZWlnaHQgLyAyO1xuXHRcdH1cblxuXHRcdHBvc2l0aW9uLmxlZnQgKz0gbXlPZmZzZXRbIDAgXTtcblx0XHRwb3NpdGlvbi50b3AgKz0gbXlPZmZzZXRbIDEgXTtcblxuXHRcdGNvbGxpc2lvblBvc2l0aW9uID0ge1xuXHRcdFx0bWFyZ2luTGVmdDogbWFyZ2luTGVmdCxcblx0XHRcdG1hcmdpblRvcDogbWFyZ2luVG9wXG5cdFx0fTtcblxuXHRcdCQuZWFjaCggWyBcImxlZnRcIiwgXCJ0b3BcIiBdLCBmdW5jdGlvbiggaSwgZGlyICkge1xuXHRcdFx0aWYgKCAkLnVpLnBvc2l0aW9uWyBjb2xsaXNpb25bIGkgXSBdICkge1xuXHRcdFx0XHQkLnVpLnBvc2l0aW9uWyBjb2xsaXNpb25bIGkgXSBdWyBkaXIgXSggcG9zaXRpb24sIHtcblx0XHRcdFx0XHR0YXJnZXRXaWR0aDogdGFyZ2V0V2lkdGgsXG5cdFx0XHRcdFx0dGFyZ2V0SGVpZ2h0OiB0YXJnZXRIZWlnaHQsXG5cdFx0XHRcdFx0ZWxlbVdpZHRoOiBlbGVtV2lkdGgsXG5cdFx0XHRcdFx0ZWxlbUhlaWdodDogZWxlbUhlaWdodCxcblx0XHRcdFx0XHRjb2xsaXNpb25Qb3NpdGlvbjogY29sbGlzaW9uUG9zaXRpb24sXG5cdFx0XHRcdFx0Y29sbGlzaW9uV2lkdGg6IGNvbGxpc2lvbldpZHRoLFxuXHRcdFx0XHRcdGNvbGxpc2lvbkhlaWdodDogY29sbGlzaW9uSGVpZ2h0LFxuXHRcdFx0XHRcdG9mZnNldDogWyBhdE9mZnNldFsgMCBdICsgbXlPZmZzZXRbIDAgXSwgYXRPZmZzZXQgWyAxIF0gKyBteU9mZnNldFsgMSBdIF0sXG5cdFx0XHRcdFx0bXk6IG9wdGlvbnMubXksXG5cdFx0XHRcdFx0YXQ6IG9wdGlvbnMuYXQsXG5cdFx0XHRcdFx0d2l0aGluOiB3aXRoaW4sXG5cdFx0XHRcdFx0ZWxlbTogZWxlbVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdFx0aWYgKCBvcHRpb25zLnVzaW5nICkge1xuXG5cdFx0XHQvLyBBZGRzIGZlZWRiYWNrIGFzIHNlY29uZCBhcmd1bWVudCB0byB1c2luZyBjYWxsYmFjaywgaWYgcHJlc2VudFxuXHRcdFx0dXNpbmcgPSBmdW5jdGlvbiggcHJvcHMgKSB7XG5cdFx0XHRcdHZhciBsZWZ0ID0gdGFyZ2V0T2Zmc2V0LmxlZnQgLSBwb3NpdGlvbi5sZWZ0LFxuXHRcdFx0XHRcdHJpZ2h0ID0gbGVmdCArIHRhcmdldFdpZHRoIC0gZWxlbVdpZHRoLFxuXHRcdFx0XHRcdHRvcCA9IHRhcmdldE9mZnNldC50b3AgLSBwb3NpdGlvbi50b3AsXG5cdFx0XHRcdFx0Ym90dG9tID0gdG9wICsgdGFyZ2V0SGVpZ2h0IC0gZWxlbUhlaWdodCxcblx0XHRcdFx0XHRmZWVkYmFjayA9IHtcblx0XHRcdFx0XHRcdHRhcmdldDoge1xuXHRcdFx0XHRcdFx0XHRlbGVtZW50OiB0YXJnZXQsXG5cdFx0XHRcdFx0XHRcdGxlZnQ6IHRhcmdldE9mZnNldC5sZWZ0LFxuXHRcdFx0XHRcdFx0XHR0b3A6IHRhcmdldE9mZnNldC50b3AsXG5cdFx0XHRcdFx0XHRcdHdpZHRoOiB0YXJnZXRXaWR0aCxcblx0XHRcdFx0XHRcdFx0aGVpZ2h0OiB0YXJnZXRIZWlnaHRcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRlbGVtZW50OiB7XG5cdFx0XHRcdFx0XHRcdGVsZW1lbnQ6IGVsZW0sXG5cdFx0XHRcdFx0XHRcdGxlZnQ6IHBvc2l0aW9uLmxlZnQsXG5cdFx0XHRcdFx0XHRcdHRvcDogcG9zaXRpb24udG9wLFxuXHRcdFx0XHRcdFx0XHR3aWR0aDogZWxlbVdpZHRoLFxuXHRcdFx0XHRcdFx0XHRoZWlnaHQ6IGVsZW1IZWlnaHRcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRob3Jpem9udGFsOiByaWdodCA8IDAgPyBcImxlZnRcIiA6IGxlZnQgPiAwID8gXCJyaWdodFwiIDogXCJjZW50ZXJcIixcblx0XHRcdFx0XHRcdHZlcnRpY2FsOiBib3R0b20gPCAwID8gXCJ0b3BcIiA6IHRvcCA+IDAgPyBcImJvdHRvbVwiIDogXCJtaWRkbGVcIlxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdGlmICggdGFyZ2V0V2lkdGggPCBlbGVtV2lkdGggJiYgYWJzKCBsZWZ0ICsgcmlnaHQgKSA8IHRhcmdldFdpZHRoICkge1xuXHRcdFx0XHRcdGZlZWRiYWNrLmhvcml6b250YWwgPSBcImNlbnRlclwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggdGFyZ2V0SGVpZ2h0IDwgZWxlbUhlaWdodCAmJiBhYnMoIHRvcCArIGJvdHRvbSApIDwgdGFyZ2V0SGVpZ2h0ICkge1xuXHRcdFx0XHRcdGZlZWRiYWNrLnZlcnRpY2FsID0gXCJtaWRkbGVcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIG1heCggYWJzKCBsZWZ0ICksIGFicyggcmlnaHQgKSApID4gbWF4KCBhYnMoIHRvcCApLCBhYnMoIGJvdHRvbSApICkgKSB7XG5cdFx0XHRcdFx0ZmVlZGJhY2suaW1wb3J0YW50ID0gXCJob3Jpem9udGFsXCI7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZmVlZGJhY2suaW1wb3J0YW50ID0gXCJ2ZXJ0aWNhbFwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggdGhpcywgcHJvcHMsIGZlZWRiYWNrICk7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdGVsZW0ub2Zmc2V0KCAkLmV4dGVuZCggcG9zaXRpb24sIHsgdXNpbmc6IHVzaW5nIH0gKSApO1xuXHR9ICk7XG59O1xuXG4kLnVpLnBvc2l0aW9uID0ge1xuXHRmaXQ6IHtcblx0XHRsZWZ0OiBmdW5jdGlvbiggcG9zaXRpb24sIGRhdGEgKSB7XG5cdFx0XHR2YXIgd2l0aGluID0gZGF0YS53aXRoaW4sXG5cdFx0XHRcdHdpdGhpbk9mZnNldCA9IHdpdGhpbi5pc1dpbmRvdyA/IHdpdGhpbi5zY3JvbGxMZWZ0IDogd2l0aGluLm9mZnNldC5sZWZ0LFxuXHRcdFx0XHRvdXRlcldpZHRoID0gd2l0aGluLndpZHRoLFxuXHRcdFx0XHRjb2xsaXNpb25Qb3NMZWZ0ID0gcG9zaXRpb24ubGVmdCAtIGRhdGEuY29sbGlzaW9uUG9zaXRpb24ubWFyZ2luTGVmdCxcblx0XHRcdFx0b3ZlckxlZnQgPSB3aXRoaW5PZmZzZXQgLSBjb2xsaXNpb25Qb3NMZWZ0LFxuXHRcdFx0XHRvdmVyUmlnaHQgPSBjb2xsaXNpb25Qb3NMZWZ0ICsgZGF0YS5jb2xsaXNpb25XaWR0aCAtIG91dGVyV2lkdGggLSB3aXRoaW5PZmZzZXQsXG5cdFx0XHRcdG5ld092ZXJSaWdodDtcblxuXHRcdFx0Ly8gRWxlbWVudCBpcyB3aWRlciB0aGFuIHdpdGhpblxuXHRcdFx0aWYgKCBkYXRhLmNvbGxpc2lvbldpZHRoID4gb3V0ZXJXaWR0aCApIHtcblxuXHRcdFx0XHQvLyBFbGVtZW50IGlzIGluaXRpYWxseSBvdmVyIHRoZSBsZWZ0IHNpZGUgb2Ygd2l0aGluXG5cdFx0XHRcdGlmICggb3ZlckxlZnQgPiAwICYmIG92ZXJSaWdodCA8PSAwICkge1xuXHRcdFx0XHRcdG5ld092ZXJSaWdodCA9IHBvc2l0aW9uLmxlZnQgKyBvdmVyTGVmdCArIGRhdGEuY29sbGlzaW9uV2lkdGggLSBvdXRlcldpZHRoIC1cblx0XHRcdFx0XHRcdHdpdGhpbk9mZnNldDtcblx0XHRcdFx0XHRwb3NpdGlvbi5sZWZ0ICs9IG92ZXJMZWZ0IC0gbmV3T3ZlclJpZ2h0O1xuXG5cdFx0XHRcdC8vIEVsZW1lbnQgaXMgaW5pdGlhbGx5IG92ZXIgcmlnaHQgc2lkZSBvZiB3aXRoaW5cblx0XHRcdFx0fSBlbHNlIGlmICggb3ZlclJpZ2h0ID4gMCAmJiBvdmVyTGVmdCA8PSAwICkge1xuXHRcdFx0XHRcdHBvc2l0aW9uLmxlZnQgPSB3aXRoaW5PZmZzZXQ7XG5cblx0XHRcdFx0Ly8gRWxlbWVudCBpcyBpbml0aWFsbHkgb3ZlciBib3RoIGxlZnQgYW5kIHJpZ2h0IHNpZGVzIG9mIHdpdGhpblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGlmICggb3ZlckxlZnQgPiBvdmVyUmlnaHQgKSB7XG5cdFx0XHRcdFx0XHRwb3NpdGlvbi5sZWZ0ID0gd2l0aGluT2Zmc2V0ICsgb3V0ZXJXaWR0aCAtIGRhdGEuY29sbGlzaW9uV2lkdGg7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHBvc2l0aW9uLmxlZnQgPSB3aXRoaW5PZmZzZXQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvbyBmYXIgbGVmdCAtPiBhbGlnbiB3aXRoIGxlZnQgZWRnZVxuXHRcdFx0fSBlbHNlIGlmICggb3ZlckxlZnQgPiAwICkge1xuXHRcdFx0XHRwb3NpdGlvbi5sZWZ0ICs9IG92ZXJMZWZ0O1xuXG5cdFx0XHQvLyBUb28gZmFyIHJpZ2h0IC0+IGFsaWduIHdpdGggcmlnaHQgZWRnZVxuXHRcdFx0fSBlbHNlIGlmICggb3ZlclJpZ2h0ID4gMCApIHtcblx0XHRcdFx0cG9zaXRpb24ubGVmdCAtPSBvdmVyUmlnaHQ7XG5cblx0XHRcdC8vIEFkanVzdCBiYXNlZCBvbiBwb3NpdGlvbiBhbmQgbWFyZ2luXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwb3NpdGlvbi5sZWZ0ID0gbWF4KCBwb3NpdGlvbi5sZWZ0IC0gY29sbGlzaW9uUG9zTGVmdCwgcG9zaXRpb24ubGVmdCApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0dG9wOiBmdW5jdGlvbiggcG9zaXRpb24sIGRhdGEgKSB7XG5cdFx0XHR2YXIgd2l0aGluID0gZGF0YS53aXRoaW4sXG5cdFx0XHRcdHdpdGhpbk9mZnNldCA9IHdpdGhpbi5pc1dpbmRvdyA/IHdpdGhpbi5zY3JvbGxUb3AgOiB3aXRoaW4ub2Zmc2V0LnRvcCxcblx0XHRcdFx0b3V0ZXJIZWlnaHQgPSBkYXRhLndpdGhpbi5oZWlnaHQsXG5cdFx0XHRcdGNvbGxpc2lvblBvc1RvcCA9IHBvc2l0aW9uLnRvcCAtIGRhdGEuY29sbGlzaW9uUG9zaXRpb24ubWFyZ2luVG9wLFxuXHRcdFx0XHRvdmVyVG9wID0gd2l0aGluT2Zmc2V0IC0gY29sbGlzaW9uUG9zVG9wLFxuXHRcdFx0XHRvdmVyQm90dG9tID0gY29sbGlzaW9uUG9zVG9wICsgZGF0YS5jb2xsaXNpb25IZWlnaHQgLSBvdXRlckhlaWdodCAtIHdpdGhpbk9mZnNldCxcblx0XHRcdFx0bmV3T3ZlckJvdHRvbTtcblxuXHRcdFx0Ly8gRWxlbWVudCBpcyB0YWxsZXIgdGhhbiB3aXRoaW5cblx0XHRcdGlmICggZGF0YS5jb2xsaXNpb25IZWlnaHQgPiBvdXRlckhlaWdodCApIHtcblxuXHRcdFx0XHQvLyBFbGVtZW50IGlzIGluaXRpYWxseSBvdmVyIHRoZSB0b3Agb2Ygd2l0aGluXG5cdFx0XHRcdGlmICggb3ZlclRvcCA+IDAgJiYgb3ZlckJvdHRvbSA8PSAwICkge1xuXHRcdFx0XHRcdG5ld092ZXJCb3R0b20gPSBwb3NpdGlvbi50b3AgKyBvdmVyVG9wICsgZGF0YS5jb2xsaXNpb25IZWlnaHQgLSBvdXRlckhlaWdodCAtXG5cdFx0XHRcdFx0XHR3aXRoaW5PZmZzZXQ7XG5cdFx0XHRcdFx0cG9zaXRpb24udG9wICs9IG92ZXJUb3AgLSBuZXdPdmVyQm90dG9tO1xuXG5cdFx0XHRcdC8vIEVsZW1lbnQgaXMgaW5pdGlhbGx5IG92ZXIgYm90dG9tIG9mIHdpdGhpblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBvdmVyQm90dG9tID4gMCAmJiBvdmVyVG9wIDw9IDAgKSB7XG5cdFx0XHRcdFx0cG9zaXRpb24udG9wID0gd2l0aGluT2Zmc2V0O1xuXG5cdFx0XHRcdC8vIEVsZW1lbnQgaXMgaW5pdGlhbGx5IG92ZXIgYm90aCB0b3AgYW5kIGJvdHRvbSBvZiB3aXRoaW5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpZiAoIG92ZXJUb3AgPiBvdmVyQm90dG9tICkge1xuXHRcdFx0XHRcdFx0cG9zaXRpb24udG9wID0gd2l0aGluT2Zmc2V0ICsgb3V0ZXJIZWlnaHQgLSBkYXRhLmNvbGxpc2lvbkhlaWdodDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cG9zaXRpb24udG9wID0gd2l0aGluT2Zmc2V0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb28gZmFyIHVwIC0+IGFsaWduIHdpdGggdG9wXG5cdFx0XHR9IGVsc2UgaWYgKCBvdmVyVG9wID4gMCApIHtcblx0XHRcdFx0cG9zaXRpb24udG9wICs9IG92ZXJUb3A7XG5cblx0XHRcdC8vIFRvbyBmYXIgZG93biAtPiBhbGlnbiB3aXRoIGJvdHRvbSBlZGdlXG5cdFx0XHR9IGVsc2UgaWYgKCBvdmVyQm90dG9tID4gMCApIHtcblx0XHRcdFx0cG9zaXRpb24udG9wIC09IG92ZXJCb3R0b207XG5cblx0XHRcdC8vIEFkanVzdCBiYXNlZCBvbiBwb3NpdGlvbiBhbmQgbWFyZ2luXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwb3NpdGlvbi50b3AgPSBtYXgoIHBvc2l0aW9uLnRvcCAtIGNvbGxpc2lvblBvc1RvcCwgcG9zaXRpb24udG9wICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRmbGlwOiB7XG5cdFx0bGVmdDogZnVuY3Rpb24oIHBvc2l0aW9uLCBkYXRhICkge1xuXHRcdFx0dmFyIHdpdGhpbiA9IGRhdGEud2l0aGluLFxuXHRcdFx0XHR3aXRoaW5PZmZzZXQgPSB3aXRoaW4ub2Zmc2V0LmxlZnQgKyB3aXRoaW4uc2Nyb2xsTGVmdCxcblx0XHRcdFx0b3V0ZXJXaWR0aCA9IHdpdGhpbi53aWR0aCxcblx0XHRcdFx0b2Zmc2V0TGVmdCA9IHdpdGhpbi5pc1dpbmRvdyA/IHdpdGhpbi5zY3JvbGxMZWZ0IDogd2l0aGluLm9mZnNldC5sZWZ0LFxuXHRcdFx0XHRjb2xsaXNpb25Qb3NMZWZ0ID0gcG9zaXRpb24ubGVmdCAtIGRhdGEuY29sbGlzaW9uUG9zaXRpb24ubWFyZ2luTGVmdCxcblx0XHRcdFx0b3ZlckxlZnQgPSBjb2xsaXNpb25Qb3NMZWZ0IC0gb2Zmc2V0TGVmdCxcblx0XHRcdFx0b3ZlclJpZ2h0ID0gY29sbGlzaW9uUG9zTGVmdCArIGRhdGEuY29sbGlzaW9uV2lkdGggLSBvdXRlcldpZHRoIC0gb2Zmc2V0TGVmdCxcblx0XHRcdFx0bXlPZmZzZXQgPSBkYXRhLm15WyAwIF0gPT09IFwibGVmdFwiID9cblx0XHRcdFx0XHQtZGF0YS5lbGVtV2lkdGggOlxuXHRcdFx0XHRcdGRhdGEubXlbIDAgXSA9PT0gXCJyaWdodFwiID9cblx0XHRcdFx0XHRcdGRhdGEuZWxlbVdpZHRoIDpcblx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdGF0T2Zmc2V0ID0gZGF0YS5hdFsgMCBdID09PSBcImxlZnRcIiA/XG5cdFx0XHRcdFx0ZGF0YS50YXJnZXRXaWR0aCA6XG5cdFx0XHRcdFx0ZGF0YS5hdFsgMCBdID09PSBcInJpZ2h0XCIgP1xuXHRcdFx0XHRcdFx0LWRhdGEudGFyZ2V0V2lkdGggOlxuXHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0b2Zmc2V0ID0gLTIgKiBkYXRhLm9mZnNldFsgMCBdLFxuXHRcdFx0XHRuZXdPdmVyUmlnaHQsXG5cdFx0XHRcdG5ld092ZXJMZWZ0O1xuXG5cdFx0XHRpZiAoIG92ZXJMZWZ0IDwgMCApIHtcblx0XHRcdFx0bmV3T3ZlclJpZ2h0ID0gcG9zaXRpb24ubGVmdCArIG15T2Zmc2V0ICsgYXRPZmZzZXQgKyBvZmZzZXQgKyBkYXRhLmNvbGxpc2lvbldpZHRoIC1cblx0XHRcdFx0XHRvdXRlcldpZHRoIC0gd2l0aGluT2Zmc2V0O1xuXHRcdFx0XHRpZiAoIG5ld092ZXJSaWdodCA8IDAgfHwgbmV3T3ZlclJpZ2h0IDwgYWJzKCBvdmVyTGVmdCApICkge1xuXHRcdFx0XHRcdHBvc2l0aW9uLmxlZnQgKz0gbXlPZmZzZXQgKyBhdE9mZnNldCArIG9mZnNldDtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmICggb3ZlclJpZ2h0ID4gMCApIHtcblx0XHRcdFx0bmV3T3ZlckxlZnQgPSBwb3NpdGlvbi5sZWZ0IC0gZGF0YS5jb2xsaXNpb25Qb3NpdGlvbi5tYXJnaW5MZWZ0ICsgbXlPZmZzZXQgK1xuXHRcdFx0XHRcdGF0T2Zmc2V0ICsgb2Zmc2V0IC0gb2Zmc2V0TGVmdDtcblx0XHRcdFx0aWYgKCBuZXdPdmVyTGVmdCA+IDAgfHwgYWJzKCBuZXdPdmVyTGVmdCApIDwgb3ZlclJpZ2h0ICkge1xuXHRcdFx0XHRcdHBvc2l0aW9uLmxlZnQgKz0gbXlPZmZzZXQgKyBhdE9mZnNldCArIG9mZnNldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0dG9wOiBmdW5jdGlvbiggcG9zaXRpb24sIGRhdGEgKSB7XG5cdFx0XHR2YXIgd2l0aGluID0gZGF0YS53aXRoaW4sXG5cdFx0XHRcdHdpdGhpbk9mZnNldCA9IHdpdGhpbi5vZmZzZXQudG9wICsgd2l0aGluLnNjcm9sbFRvcCxcblx0XHRcdFx0b3V0ZXJIZWlnaHQgPSB3aXRoaW4uaGVpZ2h0LFxuXHRcdFx0XHRvZmZzZXRUb3AgPSB3aXRoaW4uaXNXaW5kb3cgPyB3aXRoaW4uc2Nyb2xsVG9wIDogd2l0aGluLm9mZnNldC50b3AsXG5cdFx0XHRcdGNvbGxpc2lvblBvc1RvcCA9IHBvc2l0aW9uLnRvcCAtIGRhdGEuY29sbGlzaW9uUG9zaXRpb24ubWFyZ2luVG9wLFxuXHRcdFx0XHRvdmVyVG9wID0gY29sbGlzaW9uUG9zVG9wIC0gb2Zmc2V0VG9wLFxuXHRcdFx0XHRvdmVyQm90dG9tID0gY29sbGlzaW9uUG9zVG9wICsgZGF0YS5jb2xsaXNpb25IZWlnaHQgLSBvdXRlckhlaWdodCAtIG9mZnNldFRvcCxcblx0XHRcdFx0dG9wID0gZGF0YS5teVsgMSBdID09PSBcInRvcFwiLFxuXHRcdFx0XHRteU9mZnNldCA9IHRvcCA/XG5cdFx0XHRcdFx0LWRhdGEuZWxlbUhlaWdodCA6XG5cdFx0XHRcdFx0ZGF0YS5teVsgMSBdID09PSBcImJvdHRvbVwiID9cblx0XHRcdFx0XHRcdGRhdGEuZWxlbUhlaWdodCA6XG5cdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRhdE9mZnNldCA9IGRhdGEuYXRbIDEgXSA9PT0gXCJ0b3BcIiA/XG5cdFx0XHRcdFx0ZGF0YS50YXJnZXRIZWlnaHQgOlxuXHRcdFx0XHRcdGRhdGEuYXRbIDEgXSA9PT0gXCJib3R0b21cIiA/XG5cdFx0XHRcdFx0XHQtZGF0YS50YXJnZXRIZWlnaHQgOlxuXHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0b2Zmc2V0ID0gLTIgKiBkYXRhLm9mZnNldFsgMSBdLFxuXHRcdFx0XHRuZXdPdmVyVG9wLFxuXHRcdFx0XHRuZXdPdmVyQm90dG9tO1xuXHRcdFx0aWYgKCBvdmVyVG9wIDwgMCApIHtcblx0XHRcdFx0bmV3T3ZlckJvdHRvbSA9IHBvc2l0aW9uLnRvcCArIG15T2Zmc2V0ICsgYXRPZmZzZXQgKyBvZmZzZXQgKyBkYXRhLmNvbGxpc2lvbkhlaWdodCAtXG5cdFx0XHRcdFx0b3V0ZXJIZWlnaHQgLSB3aXRoaW5PZmZzZXQ7XG5cdFx0XHRcdGlmICggbmV3T3ZlckJvdHRvbSA8IDAgfHwgbmV3T3ZlckJvdHRvbSA8IGFicyggb3ZlclRvcCApICkge1xuXHRcdFx0XHRcdHBvc2l0aW9uLnRvcCArPSBteU9mZnNldCArIGF0T2Zmc2V0ICsgb2Zmc2V0O1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKCBvdmVyQm90dG9tID4gMCApIHtcblx0XHRcdFx0bmV3T3ZlclRvcCA9IHBvc2l0aW9uLnRvcCAtIGRhdGEuY29sbGlzaW9uUG9zaXRpb24ubWFyZ2luVG9wICsgbXlPZmZzZXQgKyBhdE9mZnNldCArXG5cdFx0XHRcdFx0b2Zmc2V0IC0gb2Zmc2V0VG9wO1xuXHRcdFx0XHRpZiAoIG5ld092ZXJUb3AgPiAwIHx8IGFicyggbmV3T3ZlclRvcCApIDwgb3ZlckJvdHRvbSApIHtcblx0XHRcdFx0XHRwb3NpdGlvbi50b3AgKz0gbXlPZmZzZXQgKyBhdE9mZnNldCArIG9mZnNldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0ZmxpcGZpdDoge1xuXHRcdGxlZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0JC51aS5wb3NpdGlvbi5mbGlwLmxlZnQuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0JC51aS5wb3NpdGlvbi5maXQubGVmdC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fSxcblx0XHR0b3A6IGZ1bmN0aW9uKCkge1xuXHRcdFx0JC51aS5wb3NpdGlvbi5mbGlwLnRvcC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHQkLnVpLnBvc2l0aW9uLmZpdC50b3AuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fVxufTtcblxufSApKCk7XG5cbnZhciBwb3NpdGlvbiA9ICQudWkucG9zaXRpb247XG5cblxuLyohXG4gKiBqUXVlcnkgVUkgOmRhdGEgMS4xMi4xXG4gKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqL1xuXG4vLz4+bGFiZWw6IDpkYXRhIFNlbGVjdG9yXG4vLz4+Z3JvdXA6IENvcmVcbi8vPj5kZXNjcmlwdGlvbjogU2VsZWN0cyBlbGVtZW50cyB3aGljaCBoYXZlIGRhdGEgc3RvcmVkIHVuZGVyIHRoZSBzcGVjaWZpZWQga2V5LlxuLy8+PmRvY3M6IGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL2RhdGEtc2VsZWN0b3IvXG5cblxudmFyIGRhdGEgPSAkLmV4dGVuZCggJC5leHByLnBzZXVkb3MsIHtcblx0ZGF0YTogJC5leHByLmNyZWF0ZVBzZXVkbyA/XG5cdFx0JC5leHByLmNyZWF0ZVBzZXVkbyggZnVuY3Rpb24oIGRhdGFOYW1lICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gISEkLmRhdGEoIGVsZW0sIGRhdGFOYW1lICk7XG5cdFx0XHR9O1xuXHRcdH0gKSA6XG5cblx0XHQvLyBTdXBwb3J0OiBqUXVlcnkgPDEuOFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBpLCBtYXRjaCApIHtcblx0XHRcdHJldHVybiAhISQuZGF0YSggZWxlbSwgbWF0Y2hbIDMgXSApO1xuXHRcdH1cbn0gKTtcblxuLyohXG4gKiBqUXVlcnkgVUkgRGlzYWJsZSBTZWxlY3Rpb24gMS4xMi4xXG4gKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqL1xuXG4vLz4+bGFiZWw6IGRpc2FibGVTZWxlY3Rpb25cbi8vPj5ncm91cDogQ29yZVxuLy8+PmRlc2NyaXB0aW9uOiBEaXNhYmxlIHNlbGVjdGlvbiBvZiB0ZXh0IGNvbnRlbnQgd2l0aGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbi8vPj5kb2NzOiBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9kaXNhYmxlU2VsZWN0aW9uL1xuXG4vLyBUaGlzIGZpbGUgaXMgZGVwcmVjYXRlZFxuXG5cbnZhciBkaXNhYmxlU2VsZWN0aW9uID0gJC5mbi5leHRlbmQoIHtcblx0ZGlzYWJsZVNlbGVjdGlvbjogKCBmdW5jdGlvbigpIHtcblx0XHR2YXIgZXZlbnRUeXBlID0gXCJvbnNlbGVjdHN0YXJ0XCIgaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApID9cblx0XHRcdFwic2VsZWN0c3RhcnRcIiA6XG5cdFx0XHRcIm1vdXNlZG93blwiO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMub24oIGV2ZW50VHlwZSArIFwiLnVpLWRpc2FibGVTZWxlY3Rpb25cIiwgZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0fSApO1xuXHRcdH07XG5cdH0gKSgpLFxuXG5cdGVuYWJsZVNlbGVjdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCBcIi51aS1kaXNhYmxlU2VsZWN0aW9uXCIgKTtcblx0fVxufSApO1xuXG5cbi8qIVxuICogalF1ZXJ5IFVJIEZvY3VzYWJsZSAxLjEyLjFcbiAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICovXG5cbi8vPj5sYWJlbDogOmZvY3VzYWJsZSBTZWxlY3RvclxuLy8+Pmdyb3VwOiBDb3JlXG4vLz4+ZGVzY3JpcHRpb246IFNlbGVjdHMgZWxlbWVudHMgd2hpY2ggY2FuIGJlIGZvY3VzZWQuXG4vLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vZm9jdXNhYmxlLXNlbGVjdG9yL1xuXG5cblxuLy8gU2VsZWN0b3JzXG4kLnVpLmZvY3VzYWJsZSA9IGZ1bmN0aW9uKCBlbGVtZW50LCBoYXNUYWJpbmRleCApIHtcblx0dmFyIG1hcCwgbWFwTmFtZSwgaW1nLCBmb2N1c2FibGVJZlZpc2libGUsIGZpZWxkc2V0LFxuXHRcdG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdGlmICggXCJhcmVhXCIgPT09IG5vZGVOYW1lICkge1xuXHRcdG1hcCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcblx0XHRtYXBOYW1lID0gbWFwLm5hbWU7XG5cdFx0aWYgKCAhZWxlbWVudC5ocmVmIHx8ICFtYXBOYW1lIHx8IG1hcC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm1hcFwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRpbWcgPSAkKCBcImltZ1t1c2VtYXA9JyNcIiArIG1hcE5hbWUgKyBcIiddXCIgKTtcblx0XHRyZXR1cm4gaW1nLmxlbmd0aCA+IDAgJiYgaW1nLmlzKCBcIjp2aXNpYmxlXCIgKTtcblx0fVxuXG5cdGlmICggL14oaW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbnxvYmplY3QpJC8udGVzdCggbm9kZU5hbWUgKSApIHtcblx0XHRmb2N1c2FibGVJZlZpc2libGUgPSAhZWxlbWVudC5kaXNhYmxlZDtcblxuXHRcdGlmICggZm9jdXNhYmxlSWZWaXNpYmxlICkge1xuXG5cdFx0XHQvLyBGb3JtIGNvbnRyb2xzIHdpdGhpbiBhIGRpc2FibGVkIGZpZWxkc2V0IGFyZSBkaXNhYmxlZC5cblx0XHRcdC8vIEhvd2V2ZXIsIGNvbnRyb2xzIHdpdGhpbiB0aGUgZmllbGRzZXQncyBsZWdlbmQgZG8gbm90IGdldCBkaXNhYmxlZC5cblx0XHRcdC8vIFNpbmNlIGNvbnRyb2xzIGdlbmVyYWxseSBhcmVuJ3QgcGxhY2VkIGluc2lkZSBsZWdlbmRzLCB3ZSBza2lwXG5cdFx0XHQvLyB0aGlzIHBvcnRpb24gb2YgdGhlIGNoZWNrLlxuXHRcdFx0ZmllbGRzZXQgPSAkKCBlbGVtZW50ICkuY2xvc2VzdCggXCJmaWVsZHNldFwiIClbIDAgXTtcblx0XHRcdGlmICggZmllbGRzZXQgKSB7XG5cdFx0XHRcdGZvY3VzYWJsZUlmVmlzaWJsZSA9ICFmaWVsZHNldC5kaXNhYmxlZDtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIFwiYVwiID09PSBub2RlTmFtZSApIHtcblx0XHRmb2N1c2FibGVJZlZpc2libGUgPSBlbGVtZW50LmhyZWYgfHwgaGFzVGFiaW5kZXg7XG5cdH0gZWxzZSB7XG5cdFx0Zm9jdXNhYmxlSWZWaXNpYmxlID0gaGFzVGFiaW5kZXg7XG5cdH1cblxuXHRyZXR1cm4gZm9jdXNhYmxlSWZWaXNpYmxlICYmICQoIGVsZW1lbnQgKS5pcyggXCI6dmlzaWJsZVwiICkgJiYgdmlzaWJsZSggJCggZWxlbWVudCApICk7XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA4IG9ubHlcbi8vIElFIDggZG9lc24ndCByZXNvbHZlIGluaGVyaXQgdG8gdmlzaWJsZS9oaWRkZW4gZm9yIGNvbXB1dGVkIHZhbHVlc1xuZnVuY3Rpb24gdmlzaWJsZSggZWxlbWVudCApIHtcblx0dmFyIHZpc2liaWxpdHkgPSBlbGVtZW50LmNzcyggXCJ2aXNpYmlsaXR5XCIgKTtcblx0d2hpbGUgKCB2aXNpYmlsaXR5ID09PSBcImluaGVyaXRcIiApIHtcblx0XHRlbGVtZW50ID0gZWxlbWVudC5wYXJlbnQoKTtcblx0XHR2aXNpYmlsaXR5ID0gZWxlbWVudC5jc3MoIFwidmlzaWJpbGl0eVwiICk7XG5cdH1cblx0cmV0dXJuIHZpc2liaWxpdHkgIT09IFwiaGlkZGVuXCI7XG59XG5cbiQuZXh0ZW5kKCAkLmV4cHIucHNldWRvcywge1xuXHRmb2N1c2FibGU6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdHJldHVybiAkLnVpLmZvY3VzYWJsZSggZWxlbWVudCwgJC5hdHRyKCBlbGVtZW50LCBcInRhYmluZGV4XCIgKSAhPSBudWxsICk7XG5cdH1cbn0gKTtcblxudmFyIGZvY3VzYWJsZSA9ICQudWkuZm9jdXNhYmxlO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBJRTggT25seVxuLy8gSUU4IGRvZXMgbm90IHN1cHBvcnQgdGhlIGZvcm0gYXR0cmlidXRlIGFuZCB3aGVuIGl0IGlzIHN1cHBsaWVkLiBJdCBvdmVyd3JpdGVzIHRoZSBmb3JtIHByb3Bcbi8vIHdpdGggYSBzdHJpbmcsIHNvIHdlIG5lZWQgdG8gZmluZCB0aGUgcHJvcGVyIGZvcm0uXG52YXIgZm9ybSA9ICQuZm4uZm9ybSA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdHlwZW9mIHRoaXNbIDAgXS5mb3JtID09PSBcInN0cmluZ1wiID8gdGhpcy5jbG9zZXN0KCBcImZvcm1cIiApIDogJCggdGhpc1sgMCBdLmZvcm0gKTtcbn07XG5cblxuLyohXG4gKiBqUXVlcnkgVUkgRm9ybSBSZXNldCBNaXhpbiAxLjEyLjFcbiAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICovXG5cbi8vPj5sYWJlbDogRm9ybSBSZXNldCBNaXhpblxuLy8+Pmdyb3VwOiBDb3JlXG4vLz4+ZGVzY3JpcHRpb246IFJlZnJlc2ggaW5wdXQgd2lkZ2V0cyB3aGVuIHRoZWlyIGZvcm0gaXMgcmVzZXRcbi8vPj5kb2NzOiBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9mb3JtLXJlc2V0LW1peGluL1xuXG5cblxudmFyIGZvcm1SZXNldE1peGluID0gJC51aS5mb3JtUmVzZXRNaXhpbiA9IHtcblx0X2Zvcm1SZXNldEhhbmRsZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBmb3JtID0gJCggdGhpcyApO1xuXG5cdFx0Ly8gV2FpdCBmb3IgdGhlIGZvcm0gcmVzZXQgdG8gYWN0dWFsbHkgaGFwcGVuIGJlZm9yZSByZWZyZXNoaW5nXG5cdFx0c2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5zdGFuY2VzID0gZm9ybS5kYXRhKCBcInVpLWZvcm0tcmVzZXQtaW5zdGFuY2VzXCIgKTtcblx0XHRcdCQuZWFjaCggaW5zdGFuY2VzLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dGhpcy5yZWZyZXNoKCk7XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdF9iaW5kRm9ybVJlc2V0SGFuZGxlcjogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5mb3JtID0gdGhpcy5lbGVtZW50LmZvcm0oKTtcblx0XHRpZiAoICF0aGlzLmZvcm0ubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBpbnN0YW5jZXMgPSB0aGlzLmZvcm0uZGF0YSggXCJ1aS1mb3JtLXJlc2V0LWluc3RhbmNlc1wiICkgfHwgW107XG5cdFx0aWYgKCAhaW5zdGFuY2VzLmxlbmd0aCApIHtcblxuXHRcdFx0Ly8gV2UgZG9uJ3QgdXNlIF9vbigpIGhlcmUgYmVjYXVzZSB3ZSB1c2UgYSBzaW5nbGUgZXZlbnQgaGFuZGxlciBwZXIgZm9ybVxuXHRcdFx0dGhpcy5mb3JtLm9uKCBcInJlc2V0LnVpLWZvcm0tcmVzZXRcIiwgdGhpcy5fZm9ybVJlc2V0SGFuZGxlciApO1xuXHRcdH1cblx0XHRpbnN0YW5jZXMucHVzaCggdGhpcyApO1xuXHRcdHRoaXMuZm9ybS5kYXRhKCBcInVpLWZvcm0tcmVzZXQtaW5zdGFuY2VzXCIsIGluc3RhbmNlcyApO1xuXHR9LFxuXG5cdF91bmJpbmRGb3JtUmVzZXRIYW5kbGVyOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzLmZvcm0ubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBpbnN0YW5jZXMgPSB0aGlzLmZvcm0uZGF0YSggXCJ1aS1mb3JtLXJlc2V0LWluc3RhbmNlc1wiICk7XG5cdFx0aW5zdGFuY2VzLnNwbGljZSggJC5pbkFycmF5KCB0aGlzLCBpbnN0YW5jZXMgKSwgMSApO1xuXHRcdGlmICggaW5zdGFuY2VzLmxlbmd0aCApIHtcblx0XHRcdHRoaXMuZm9ybS5kYXRhKCBcInVpLWZvcm0tcmVzZXQtaW5zdGFuY2VzXCIsIGluc3RhbmNlcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmZvcm1cblx0XHRcdFx0LnJlbW92ZURhdGEoIFwidWktZm9ybS1yZXNldC1pbnN0YW5jZXNcIiApXG5cdFx0XHRcdC5vZmYoIFwicmVzZXQudWktZm9ybS1yZXNldFwiICk7XG5cdFx0fVxuXHR9XG59O1xuXG5cbi8qIVxuICogalF1ZXJ5IFVJIFN1cHBvcnQgZm9yIGpRdWVyeSBjb3JlIDEuNy54IDEuMTIuMVxuICogaHR0cDovL2pxdWVyeXVpLmNvbVxuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICovXG5cbi8vPj5sYWJlbDogalF1ZXJ5IDEuNyBTdXBwb3J0XG4vLz4+Z3JvdXA6IENvcmVcbi8vPj5kZXNjcmlwdGlvbjogU3VwcG9ydCB2ZXJzaW9uIDEuNy54IG9mIGpRdWVyeSBjb3JlXG5cblxuXG4vLyBTdXBwb3J0OiBqUXVlcnkgMS43IG9ubHlcbi8vIE5vdCBhIGdyZWF0IHdheSB0byBjaGVjayB2ZXJzaW9ucywgYnV0IHNpbmNlIHdlIG9ubHkgc3VwcG9ydCAxLjcrIGFuZCBvbmx5XG4vLyBuZWVkIHRvIGRldGVjdCA8MS44LCB0aGlzIGlzIGEgc2ltcGxlIGNoZWNrIHRoYXQgc2hvdWxkIHN1ZmZpY2UuIENoZWNraW5nXG4vLyBmb3IgXCIxLjcuXCIgd291bGQgYmUgYSBiaXQgc2FmZXIsIGJ1dCB0aGUgdmVyc2lvbiBzdHJpbmcgaXMgMS43LCBub3QgMS43LjBcbi8vIGFuZCB3ZSdsbCBuZXZlciByZWFjaCAxLjcwLjAgKGlmIHdlIGRvLCB3ZSBjZXJ0YWlubHkgd29uJ3QgYmUgc3VwcG9ydGluZ1xuLy8gMS43IGFueW1vcmUpLiBTZWUgIzExMTk3IGZvciB3aHkgd2UncmUgbm90IHVzaW5nIGZlYXR1cmUgZGV0ZWN0aW9uLlxuaWYgKCAkLmZuLmpxdWVyeS5zdWJzdHJpbmcoIDAsIDMgKSA9PT0gXCIxLjdcIiApIHtcblxuXHQvLyBTZXR0ZXJzIGZvciAuaW5uZXJXaWR0aCgpLCAuaW5uZXJIZWlnaHQoKSwgLm91dGVyV2lkdGgoKSwgLm91dGVySGVpZ2h0KClcblx0Ly8gVW5saWtlIGpRdWVyeSBDb3JlIDEuOCssIHRoZXNlIG9ubHkgc3VwcG9ydCBudW1lcmljIHZhbHVlcyB0byBzZXQgdGhlXG5cdC8vIGRpbWVuc2lvbnMgaW4gcGl4ZWxzXG5cdCQuZWFjaCggWyBcIldpZHRoXCIsIFwiSGVpZ2h0XCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdFx0dmFyIHNpZGUgPSBuYW1lID09PSBcIldpZHRoXCIgPyBbIFwiTGVmdFwiLCBcIlJpZ2h0XCIgXSA6IFsgXCJUb3BcIiwgXCJCb3R0b21cIiBdLFxuXHRcdFx0dHlwZSA9IG5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdG9yaWcgPSB7XG5cdFx0XHRcdGlubmVyV2lkdGg6ICQuZm4uaW5uZXJXaWR0aCxcblx0XHRcdFx0aW5uZXJIZWlnaHQ6ICQuZm4uaW5uZXJIZWlnaHQsXG5cdFx0XHRcdG91dGVyV2lkdGg6ICQuZm4ub3V0ZXJXaWR0aCxcblx0XHRcdFx0b3V0ZXJIZWlnaHQ6ICQuZm4ub3V0ZXJIZWlnaHRcblx0XHRcdH07XG5cblx0XHRmdW5jdGlvbiByZWR1Y2UoIGVsZW0sIHNpemUsIGJvcmRlciwgbWFyZ2luICkge1xuXHRcdFx0JC5lYWNoKCBzaWRlLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2l6ZSAtPSBwYXJzZUZsb2F0KCAkLmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyB0aGlzICkgKSB8fCAwO1xuXHRcdFx0XHRpZiAoIGJvcmRlciApIHtcblx0XHRcdFx0XHRzaXplIC09IHBhcnNlRmxvYXQoICQuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgdGhpcyArIFwiV2lkdGhcIiApICkgfHwgMDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIG1hcmdpbiApIHtcblx0XHRcdFx0XHRzaXplIC09IHBhcnNlRmxvYXQoICQuY3NzKCBlbGVtLCBcIm1hcmdpblwiICsgdGhpcyApICkgfHwgMDtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdFx0cmV0dXJuIHNpemU7XG5cdFx0fVxuXG5cdFx0JC5mblsgXCJpbm5lclwiICsgbmFtZSBdID0gZnVuY3Rpb24oIHNpemUgKSB7XG5cdFx0XHRpZiAoIHNpemUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIG9yaWdbIFwiaW5uZXJcIiArIG5hbWUgXS5jYWxsKCB0aGlzICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQkKCB0aGlzICkuY3NzKCB0eXBlLCByZWR1Y2UoIHRoaXMsIHNpemUgKSArIFwicHhcIiApO1xuXHRcdFx0fSApO1xuXHRcdH07XG5cblx0XHQkLmZuWyBcIm91dGVyXCIgKyBuYW1lIF0gPSBmdW5jdGlvbiggc2l6ZSwgbWFyZ2luICkge1xuXHRcdFx0aWYgKCB0eXBlb2Ygc2l6ZSAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0cmV0dXJuIG9yaWdbIFwib3V0ZXJcIiArIG5hbWUgXS5jYWxsKCB0aGlzLCBzaXplICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQkKCB0aGlzICkuY3NzKCB0eXBlLCByZWR1Y2UoIHRoaXMsIHNpemUsIHRydWUsIG1hcmdpbiApICsgXCJweFwiICk7XG5cdFx0XHR9ICk7XG5cdFx0fTtcblx0fSApO1xuXG5cdCQuZm4uYWRkQmFjayA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlciggc2VsZWN0b3IgKVxuXHRcdCk7XG5cdH07XG59XG5cbjtcbi8qIVxuICogalF1ZXJ5IFVJIEtleWNvZGUgMS4xMi4xXG4gKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqL1xuXG4vLz4+bGFiZWw6IEtleWNvZGVcbi8vPj5ncm91cDogQ29yZVxuLy8+PmRlc2NyaXB0aW9uOiBQcm92aWRlIGtleWNvZGVzIGFzIGtleW5hbWVzXG4vLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20valF1ZXJ5LnVpLmtleUNvZGUvXG5cblxudmFyIGtleWNvZGUgPSAkLnVpLmtleUNvZGUgPSB7XG5cdEJBQ0tTUEFDRTogOCxcblx0Q09NTUE6IDE4OCxcblx0REVMRVRFOiA0Nixcblx0RE9XTjogNDAsXG5cdEVORDogMzUsXG5cdEVOVEVSOiAxMyxcblx0RVNDQVBFOiAyNyxcblx0SE9NRTogMzYsXG5cdExFRlQ6IDM3LFxuXHRQQUdFX0RPV046IDM0LFxuXHRQQUdFX1VQOiAzMyxcblx0UEVSSU9EOiAxOTAsXG5cdFJJR0hUOiAzOSxcblx0U1BBQ0U6IDMyLFxuXHRUQUI6IDksXG5cdFVQOiAzOFxufTtcblxuXG5cblxuLy8gSW50ZXJuYWwgdXNlIG9ubHlcbnZhciBlc2NhcGVTZWxlY3RvciA9ICQudWkuZXNjYXBlU2VsZWN0b3IgPSAoIGZ1bmN0aW9uKCkge1xuXHR2YXIgc2VsZWN0b3JFc2NhcGUgPSAvKFshXCIjJCUmJygpKissLi86Ozw9Pj9AW1xcXV5ge3x9fl0pL2c7XG5cdHJldHVybiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHNlbGVjdG9yLnJlcGxhY2UoIHNlbGVjdG9yRXNjYXBlLCBcIlxcXFwkMVwiICk7XG5cdH07XG59ICkoKTtcblxuXG4vKiFcbiAqIGpRdWVyeSBVSSBMYWJlbHMgMS4xMi4xXG4gKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqL1xuXG4vLz4+bGFiZWw6IGxhYmVsc1xuLy8+Pmdyb3VwOiBDb3JlXG4vLz4+ZGVzY3JpcHRpb246IEZpbmQgYWxsIHRoZSBsYWJlbHMgYXNzb2NpYXRlZCB3aXRoIGEgZ2l2ZW4gaW5wdXRcbi8vPj5kb2NzOiBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9sYWJlbHMvXG5cblxuXG52YXIgbGFiZWxzID0gJC5mbi5sYWJlbHMgPSBmdW5jdGlvbigpIHtcblx0dmFyIGFuY2VzdG9yLCBzZWxlY3RvciwgaWQsIGxhYmVscywgYW5jZXN0b3JzO1xuXG5cdC8vIENoZWNrIGNvbnRyb2wubGFiZWxzIGZpcnN0XG5cdGlmICggdGhpc1sgMCBdLmxhYmVscyAmJiB0aGlzWyAwIF0ubGFiZWxzLmxlbmd0aCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHRoaXNbIDAgXS5sYWJlbHMgKTtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9IDExLCBGRiA8PSAzNywgQW5kcm9pZCA8PSAyLjMgb25seVxuXHQvLyBBYm92ZSBicm93c2VycyBkbyBub3Qgc3VwcG9ydCBjb250cm9sLmxhYmVscy4gRXZlcnl0aGluZyBiZWxvdyBpcyB0byBzdXBwb3J0IHRoZW1cblx0Ly8gYXMgd2VsbCBhcyBkb2N1bWVudCBmcmFnbWVudHMuIGNvbnRyb2wubGFiZWxzIGRvZXMgbm90IHdvcmsgb24gZG9jdW1lbnQgZnJhZ21lbnRzXG5cdGxhYmVscyA9IHRoaXMuZXEoIDAgKS5wYXJlbnRzKCBcImxhYmVsXCIgKTtcblxuXHQvLyBMb29rIGZvciB0aGUgbGFiZWwgYmFzZWQgb24gdGhlIGlkXG5cdGlkID0gdGhpcy5hdHRyKCBcImlkXCIgKTtcblx0aWYgKCBpZCApIHtcblxuXHRcdC8vIFdlIGRvbid0IHNlYXJjaCBhZ2FpbnN0IHRoZSBkb2N1bWVudCBpbiBjYXNlIHRoZSBlbGVtZW50XG5cdFx0Ly8gaXMgZGlzY29ubmVjdGVkIGZyb20gdGhlIERPTVxuXHRcdGFuY2VzdG9yID0gdGhpcy5lcSggMCApLnBhcmVudHMoKS5sYXN0KCk7XG5cblx0XHQvLyBHZXQgYSBmdWxsIHNldCBvZiB0b3AgbGV2ZWwgYW5jZXN0b3JzXG5cdFx0YW5jZXN0b3JzID0gYW5jZXN0b3IuYWRkKCBhbmNlc3Rvci5sZW5ndGggPyBhbmNlc3Rvci5zaWJsaW5ncygpIDogdGhpcy5zaWJsaW5ncygpICk7XG5cblx0XHQvLyBDcmVhdGUgYSBzZWxlY3RvciBmb3IgdGhlIGxhYmVsIGJhc2VkIG9uIHRoZSBpZFxuXHRcdHNlbGVjdG9yID0gXCJsYWJlbFtmb3I9J1wiICsgJC51aS5lc2NhcGVTZWxlY3RvciggaWQgKSArIFwiJ11cIjtcblxuXHRcdGxhYmVscyA9IGxhYmVscy5hZGQoIGFuY2VzdG9ycy5maW5kKCBzZWxlY3RvciApLmFkZEJhY2soIHNlbGVjdG9yICkgKTtcblxuXHR9XG5cblx0Ly8gUmV0dXJuIHdoYXRldmVyIHdlIGhhdmUgZm91bmQgZm9yIGxhYmVsc1xuXHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGxhYmVscyApO1xufTtcblxuXG4vKiFcbiAqIGpRdWVyeSBVSSBTY3JvbGwgUGFyZW50IDEuMTIuMVxuICogaHR0cDovL2pxdWVyeXVpLmNvbVxuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKi9cblxuLy8+PmxhYmVsOiBzY3JvbGxQYXJlbnRcbi8vPj5ncm91cDogQ29yZVxuLy8+PmRlc2NyaXB0aW9uOiBHZXQgdGhlIGNsb3Nlc3QgYW5jZXN0b3IgZWxlbWVudCB0aGF0IGlzIHNjcm9sbGFibGUuXG4vLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vc2Nyb2xsUGFyZW50L1xuXG5cblxudmFyIHNjcm9sbFBhcmVudCA9ICQuZm4uc2Nyb2xsUGFyZW50ID0gZnVuY3Rpb24oIGluY2x1ZGVIaWRkZW4gKSB7XG5cdHZhciBwb3NpdGlvbiA9IHRoaXMuY3NzKCBcInBvc2l0aW9uXCIgKSxcblx0XHRleGNsdWRlU3RhdGljUGFyZW50ID0gcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIixcblx0XHRvdmVyZmxvd1JlZ2V4ID0gaW5jbHVkZUhpZGRlbiA/IC8oYXV0b3xzY3JvbGx8aGlkZGVuKS8gOiAvKGF1dG98c2Nyb2xsKS8sXG5cdFx0c2Nyb2xsUGFyZW50ID0gdGhpcy5wYXJlbnRzKCkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBwYXJlbnQgPSAkKCB0aGlzICk7XG5cdFx0XHRpZiAoIGV4Y2x1ZGVTdGF0aWNQYXJlbnQgJiYgcGFyZW50LmNzcyggXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBvdmVyZmxvd1JlZ2V4LnRlc3QoIHBhcmVudC5jc3MoIFwib3ZlcmZsb3dcIiApICsgcGFyZW50LmNzcyggXCJvdmVyZmxvdy15XCIgKSArXG5cdFx0XHRcdHBhcmVudC5jc3MoIFwib3ZlcmZsb3cteFwiICkgKTtcblx0XHR9ICkuZXEoIDAgKTtcblxuXHRyZXR1cm4gcG9zaXRpb24gPT09IFwiZml4ZWRcIiB8fCAhc2Nyb2xsUGFyZW50Lmxlbmd0aCA/XG5cdFx0JCggdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSA6XG5cdFx0c2Nyb2xsUGFyZW50O1xufTtcblxuXG4vKiFcbiAqIGpRdWVyeSBVSSBUYWJiYWJsZSAxLjEyLjFcbiAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICovXG5cbi8vPj5sYWJlbDogOnRhYmJhYmxlIFNlbGVjdG9yXG4vLz4+Z3JvdXA6IENvcmVcbi8vPj5kZXNjcmlwdGlvbjogU2VsZWN0cyBlbGVtZW50cyB3aGljaCBjYW4gYmUgdGFiYmVkIHRvLlxuLy8+PmRvY3M6IGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL3RhYmJhYmxlLXNlbGVjdG9yL1xuXG5cblxudmFyIHRhYmJhYmxlID0gJC5leHRlbmQoICQuZXhwci5wc2V1ZG9zLCB7XG5cdHRhYmJhYmxlOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHR2YXIgdGFiSW5kZXggPSAkLmF0dHIoIGVsZW1lbnQsIFwidGFiaW5kZXhcIiApLFxuXHRcdFx0aGFzVGFiaW5kZXggPSB0YWJJbmRleCAhPSBudWxsO1xuXHRcdHJldHVybiAoICFoYXNUYWJpbmRleCB8fCB0YWJJbmRleCA+PSAwICkgJiYgJC51aS5mb2N1c2FibGUoIGVsZW1lbnQsIGhhc1RhYmluZGV4ICk7XG5cdH1cbn0gKTtcblxuXG4vKiFcbiAqIGpRdWVyeSBVSSBVbmlxdWUgSUQgMS4xMi4xXG4gKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqL1xuXG4vLz4+bGFiZWw6IHVuaXF1ZUlkXG4vLz4+Z3JvdXA6IENvcmVcbi8vPj5kZXNjcmlwdGlvbjogRnVuY3Rpb25zIHRvIGdlbmVyYXRlIGFuZCByZW1vdmUgdW5pcXVlSWQnc1xuLy8+PmRvY3M6IGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL3VuaXF1ZUlkL1xuXG5cblxudmFyIHVuaXF1ZUlkID0gJC5mbi5leHRlbmQoIHtcblx0dW5pcXVlSWQ6ICggZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHV1aWQgPSAwO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIXRoaXMuaWQgKSB7XG5cdFx0XHRcdFx0dGhpcy5pZCA9IFwidWktaWQtXCIgKyAoICsrdXVpZCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fTtcblx0fSApKCksXG5cblx0cmVtb3ZlVW5pcXVlSWQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAvXnVpLWlkLVxcZCskLy50ZXN0KCB0aGlzLmlkICkgKSB7XG5cdFx0XHRcdCQoIHRoaXMgKS5yZW1vdmVBdHRyKCBcImlkXCIgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gVGhpcyBmaWxlIGlzIGRlcHJlY2F0ZWRcbnZhciBpZSA9ICQudWkuaWUgPSAhIS9tc2llIFtcXHcuXSsvLmV4ZWMoIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSApO1xuXG4vKiFcbiAqIGpRdWVyeSBVSSBNb3VzZSAxLjEyLjFcbiAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICovXG5cbi8vPj5sYWJlbDogTW91c2Vcbi8vPj5ncm91cDogV2lkZ2V0c1xuLy8+PmRlc2NyaXB0aW9uOiBBYnN0cmFjdHMgbW91c2UtYmFzZWQgaW50ZXJhY3Rpb25zIHRvIGFzc2lzdCBpbiBjcmVhdGluZyBjZXJ0YWluIHdpZGdldHMuXG4vLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vbW91c2UvXG5cblxuXG52YXIgbW91c2VIYW5kbGVkID0gZmFsc2U7XG4kKCBkb2N1bWVudCApLm9uKCBcIm1vdXNldXBcIiwgZnVuY3Rpb24oKSB7XG5cdG1vdXNlSGFuZGxlZCA9IGZhbHNlO1xufSApO1xuXG52YXIgd2lkZ2V0c01vdXNlID0gJC53aWRnZXQoIFwidWkubW91c2VcIiwge1xuXHR2ZXJzaW9uOiBcIjEuMTIuMVwiLFxuXHRvcHRpb25zOiB7XG5cdFx0Y2FuY2VsOiBcImlucHV0LCB0ZXh0YXJlYSwgYnV0dG9uLCBzZWxlY3QsIG9wdGlvblwiLFxuXHRcdGRpc3RhbmNlOiAxLFxuXHRcdGRlbGF5OiAwXG5cdH0sXG5cdF9tb3VzZUluaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB0aGF0ID0gdGhpcztcblxuXHRcdHRoaXMuZWxlbWVudFxuXHRcdFx0Lm9uKCBcIm1vdXNlZG93bi5cIiArIHRoaXMud2lkZ2V0TmFtZSwgZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRyZXR1cm4gdGhhdC5fbW91c2VEb3duKCBldmVudCApO1xuXHRcdFx0fSApXG5cdFx0XHQub24oIFwiY2xpY2suXCIgKyB0aGlzLndpZGdldE5hbWUsIGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0aWYgKCB0cnVlID09PSAkLmRhdGEoIGV2ZW50LnRhcmdldCwgdGhhdC53aWRnZXROYW1lICsgXCIucHJldmVudENsaWNrRXZlbnRcIiApICkge1xuXHRcdFx0XHRcdCQucmVtb3ZlRGF0YSggZXZlbnQudGFyZ2V0LCB0aGF0LndpZGdldE5hbWUgKyBcIi5wcmV2ZW50Q2xpY2tFdmVudFwiICk7XG5cdFx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cblx0XHR0aGlzLnN0YXJ0ZWQgPSBmYWxzZTtcblx0fSxcblxuXHQvLyBUT0RPOiBtYWtlIHN1cmUgZGVzdHJveWluZyBvbmUgaW5zdGFuY2Ugb2YgbW91c2UgZG9lc24ndCBtZXNzIHdpdGhcblx0Ly8gb3RoZXIgaW5zdGFuY2VzIG9mIG1vdXNlXG5cdF9tb3VzZURlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuZWxlbWVudC5vZmYoIFwiLlwiICsgdGhpcy53aWRnZXROYW1lICk7XG5cdFx0aWYgKCB0aGlzLl9tb3VzZU1vdmVEZWxlZ2F0ZSApIHtcblx0XHRcdHRoaXMuZG9jdW1lbnRcblx0XHRcdFx0Lm9mZiggXCJtb3VzZW1vdmUuXCIgKyB0aGlzLndpZGdldE5hbWUsIHRoaXMuX21vdXNlTW92ZURlbGVnYXRlIClcblx0XHRcdFx0Lm9mZiggXCJtb3VzZXVwLlwiICsgdGhpcy53aWRnZXROYW1lLCB0aGlzLl9tb3VzZVVwRGVsZWdhdGUgKTtcblx0XHR9XG5cdH0sXG5cblx0X21vdXNlRG93bjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0Ly8gZG9uJ3QgbGV0IG1vcmUgdGhhbiBvbmUgd2lkZ2V0IGhhbmRsZSBtb3VzZVN0YXJ0XG5cdFx0aWYgKCBtb3VzZUhhbmRsZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5fbW91c2VNb3ZlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gV2UgbWF5IGhhdmUgbWlzc2VkIG1vdXNldXAgKG91dCBvZiB3aW5kb3cpXG5cdFx0KCB0aGlzLl9tb3VzZVN0YXJ0ZWQgJiYgdGhpcy5fbW91c2VVcCggZXZlbnQgKSApO1xuXG5cdFx0dGhpcy5fbW91c2VEb3duRXZlbnQgPSBldmVudDtcblxuXHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdGJ0bklzTGVmdCA9ICggZXZlbnQud2hpY2ggPT09IDEgKSxcblxuXHRcdFx0Ly8gZXZlbnQudGFyZ2V0Lm5vZGVOYW1lIHdvcmtzIGFyb3VuZCBhIGJ1ZyBpbiBJRSA4IHdpdGhcblx0XHRcdC8vIGRpc2FibGVkIGlucHV0cyAoIzc2MjApXG5cdFx0XHRlbElzQ2FuY2VsID0gKCB0eXBlb2YgdGhpcy5vcHRpb25zLmNhbmNlbCA9PT0gXCJzdHJpbmdcIiAmJiBldmVudC50YXJnZXQubm9kZU5hbWUgP1xuXHRcdFx0XHQkKCBldmVudC50YXJnZXQgKS5jbG9zZXN0KCB0aGlzLm9wdGlvbnMuY2FuY2VsICkubGVuZ3RoIDogZmFsc2UgKTtcblx0XHRpZiAoICFidG5Jc0xlZnQgfHwgZWxJc0NhbmNlbCB8fCAhdGhpcy5fbW91c2VDYXB0dXJlKCBldmVudCApICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0dGhpcy5tb3VzZURlbGF5TWV0ID0gIXRoaXMub3B0aW9ucy5kZWxheTtcblx0XHRpZiAoICF0aGlzLm1vdXNlRGVsYXlNZXQgKSB7XG5cdFx0XHR0aGlzLl9tb3VzZURlbGF5VGltZXIgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dGhhdC5tb3VzZURlbGF5TWV0ID0gdHJ1ZTtcblx0XHRcdH0sIHRoaXMub3B0aW9ucy5kZWxheSApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5fbW91c2VEaXN0YW5jZU1ldCggZXZlbnQgKSAmJiB0aGlzLl9tb3VzZURlbGF5TWV0KCBldmVudCApICkge1xuXHRcdFx0dGhpcy5fbW91c2VTdGFydGVkID0gKCB0aGlzLl9tb3VzZVN0YXJ0KCBldmVudCApICE9PSBmYWxzZSApO1xuXHRcdFx0aWYgKCAhdGhpcy5fbW91c2VTdGFydGVkICkge1xuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDbGljayBldmVudCBtYXkgbmV2ZXIgaGF2ZSBmaXJlZCAoR2Vja28gJiBPcGVyYSlcblx0XHRpZiAoIHRydWUgPT09ICQuZGF0YSggZXZlbnQudGFyZ2V0LCB0aGlzLndpZGdldE5hbWUgKyBcIi5wcmV2ZW50Q2xpY2tFdmVudFwiICkgKSB7XG5cdFx0XHQkLnJlbW92ZURhdGEoIGV2ZW50LnRhcmdldCwgdGhpcy53aWRnZXROYW1lICsgXCIucHJldmVudENsaWNrRXZlbnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFRoZXNlIGRlbGVnYXRlcyBhcmUgcmVxdWlyZWQgdG8ga2VlcCBjb250ZXh0XG5cdFx0dGhpcy5fbW91c2VNb3ZlRGVsZWdhdGUgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRyZXR1cm4gdGhhdC5fbW91c2VNb3ZlKCBldmVudCApO1xuXHRcdH07XG5cdFx0dGhpcy5fbW91c2VVcERlbGVnYXRlID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0cmV0dXJuIHRoYXQuX21vdXNlVXAoIGV2ZW50ICk7XG5cdFx0fTtcblxuXHRcdHRoaXMuZG9jdW1lbnRcblx0XHRcdC5vbiggXCJtb3VzZW1vdmUuXCIgKyB0aGlzLndpZGdldE5hbWUsIHRoaXMuX21vdXNlTW92ZURlbGVnYXRlIClcblx0XHRcdC5vbiggXCJtb3VzZXVwLlwiICsgdGhpcy53aWRnZXROYW1lLCB0aGlzLl9tb3VzZVVwRGVsZWdhdGUgKTtcblxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRtb3VzZUhhbmRsZWQgPSB0cnVlO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdF9tb3VzZU1vdmU6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdC8vIE9ubHkgY2hlY2sgZm9yIG1vdXNldXBzIG91dHNpZGUgdGhlIGRvY3VtZW50IGlmIHlvdSd2ZSBtb3ZlZCBpbnNpZGUgdGhlIGRvY3VtZW50XG5cdFx0Ly8gYXQgbGVhc3Qgb25jZS4gVGhpcyBwcmV2ZW50cyB0aGUgZmlyaW5nIG9mIG1vdXNldXAgaW4gdGhlIGNhc2Ugb2YgSUU8OSwgd2hpY2ggd2lsbFxuXHRcdC8vIGZpcmUgYSBtb3VzZW1vdmUgZXZlbnQgaWYgY29udGVudCBpcyBwbGFjZWQgdW5kZXIgdGhlIGN1cnNvci4gU2VlICM3Nzc4XG5cdFx0Ly8gU3VwcG9ydDogSUUgPDlcblx0XHRpZiAoIHRoaXMuX21vdXNlTW92ZWQgKSB7XG5cblx0XHRcdC8vIElFIG1vdXNldXAgY2hlY2sgLSBtb3VzZXVwIGhhcHBlbmVkIHdoZW4gbW91c2Ugd2FzIG91dCBvZiB3aW5kb3dcblx0XHRcdGlmICggJC51aS5pZSAmJiAoICFkb2N1bWVudC5kb2N1bWVudE1vZGUgfHwgZG9jdW1lbnQuZG9jdW1lbnRNb2RlIDwgOSApICYmXG5cdFx0XHRcdFx0IWV2ZW50LmJ1dHRvbiApIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX21vdXNlVXAoIGV2ZW50ICk7XG5cblx0XHRcdC8vIElmcmFtZSBtb3VzZXVwIGNoZWNrIC0gbW91c2V1cCBvY2N1cnJlZCBpbiBhbm90aGVyIGRvY3VtZW50XG5cdFx0XHR9IGVsc2UgaWYgKCAhZXZlbnQud2hpY2ggKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9OCAtIDlcblx0XHRcdFx0Ly8gU2FmYXJpIHNldHMgd2hpY2ggdG8gMCBpZiB5b3UgcHJlc3MgYW55IG9mIHRoZSBmb2xsb3dpbmcga2V5c1xuXHRcdFx0XHQvLyBkdXJpbmcgYSBkcmFnICgjMTQ0NjEpXG5cdFx0XHRcdGlmICggZXZlbnQub3JpZ2luYWxFdmVudC5hbHRLZXkgfHwgZXZlbnQub3JpZ2luYWxFdmVudC5jdHJsS2V5IHx8XG5cdFx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQub3JpZ2luYWxFdmVudC5zaGlmdEtleSApIHtcblx0XHRcdFx0XHR0aGlzLmlnbm9yZU1pc3NpbmdXaGljaCA9IHRydWU7XG5cdFx0XHRcdH0gZWxzZSBpZiAoICF0aGlzLmlnbm9yZU1pc3NpbmdXaGljaCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5fbW91c2VVcCggZXZlbnQgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZXZlbnQud2hpY2ggfHwgZXZlbnQuYnV0dG9uICkge1xuXHRcdFx0dGhpcy5fbW91c2VNb3ZlZCA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLl9tb3VzZVN0YXJ0ZWQgKSB7XG5cdFx0XHR0aGlzLl9tb3VzZURyYWcoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuX21vdXNlRGlzdGFuY2VNZXQoIGV2ZW50ICkgJiYgdGhpcy5fbW91c2VEZWxheU1ldCggZXZlbnQgKSApIHtcblx0XHRcdHRoaXMuX21vdXNlU3RhcnRlZCA9XG5cdFx0XHRcdCggdGhpcy5fbW91c2VTdGFydCggdGhpcy5fbW91c2VEb3duRXZlbnQsIGV2ZW50ICkgIT09IGZhbHNlICk7XG5cdFx0XHQoIHRoaXMuX21vdXNlU3RhcnRlZCA/IHRoaXMuX21vdXNlRHJhZyggZXZlbnQgKSA6IHRoaXMuX21vdXNlVXAoIGV2ZW50ICkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gIXRoaXMuX21vdXNlU3RhcnRlZDtcblx0fSxcblxuXHRfbW91c2VVcDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHRoaXMuZG9jdW1lbnRcblx0XHRcdC5vZmYoIFwibW91c2Vtb3ZlLlwiICsgdGhpcy53aWRnZXROYW1lLCB0aGlzLl9tb3VzZU1vdmVEZWxlZ2F0ZSApXG5cdFx0XHQub2ZmKCBcIm1vdXNldXAuXCIgKyB0aGlzLndpZGdldE5hbWUsIHRoaXMuX21vdXNlVXBEZWxlZ2F0ZSApO1xuXG5cdFx0aWYgKCB0aGlzLl9tb3VzZVN0YXJ0ZWQgKSB7XG5cdFx0XHR0aGlzLl9tb3VzZVN0YXJ0ZWQgPSBmYWxzZTtcblxuXHRcdFx0aWYgKCBldmVudC50YXJnZXQgPT09IHRoaXMuX21vdXNlRG93bkV2ZW50LnRhcmdldCApIHtcblx0XHRcdFx0JC5kYXRhKCBldmVudC50YXJnZXQsIHRoaXMud2lkZ2V0TmFtZSArIFwiLnByZXZlbnRDbGlja0V2ZW50XCIsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fbW91c2VTdG9wKCBldmVudCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5fbW91c2VEZWxheVRpbWVyICkge1xuXHRcdFx0Y2xlYXJUaW1lb3V0KCB0aGlzLl9tb3VzZURlbGF5VGltZXIgKTtcblx0XHRcdGRlbGV0ZSB0aGlzLl9tb3VzZURlbGF5VGltZXI7XG5cdFx0fVxuXG5cdFx0dGhpcy5pZ25vcmVNaXNzaW5nV2hpY2ggPSBmYWxzZTtcblx0XHRtb3VzZUhhbmRsZWQgPSBmYWxzZTtcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHR9LFxuXG5cdF9tb3VzZURpc3RhbmNlTWV0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0cmV0dXJuICggTWF0aC5tYXgoXG5cdFx0XHRcdE1hdGguYWJzKCB0aGlzLl9tb3VzZURvd25FdmVudC5wYWdlWCAtIGV2ZW50LnBhZ2VYICksXG5cdFx0XHRcdE1hdGguYWJzKCB0aGlzLl9tb3VzZURvd25FdmVudC5wYWdlWSAtIGV2ZW50LnBhZ2VZIClcblx0XHRcdCkgPj0gdGhpcy5vcHRpb25zLmRpc3RhbmNlXG5cdFx0KTtcblx0fSxcblxuXHRfbW91c2VEZWxheU1ldDogZnVuY3Rpb24oIC8qIGV2ZW50ICovICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlRGVsYXlNZXQ7XG5cdH0sXG5cblx0Ly8gVGhlc2UgYXJlIHBsYWNlaG9sZGVyIG1ldGhvZHMsIHRvIGJlIG92ZXJyaWRlbiBieSBleHRlbmRpbmcgcGx1Z2luXG5cdF9tb3VzZVN0YXJ0OiBmdW5jdGlvbiggLyogZXZlbnQgKi8gKSB7fSxcblx0X21vdXNlRHJhZzogZnVuY3Rpb24oIC8qIGV2ZW50ICovICkge30sXG5cdF9tb3VzZVN0b3A6IGZ1bmN0aW9uKCAvKiBldmVudCAqLyApIHt9LFxuXHRfbW91c2VDYXB0dXJlOiBmdW5jdGlvbiggLyogZXZlbnQgKi8gKSB7IHJldHVybiB0cnVlOyB9XG59ICk7XG5cblxuXG5cbi8vICQudWkucGx1Z2luIGlzIGRlcHJlY2F0ZWQuIFVzZSAkLndpZGdldCgpIGV4dGVuc2lvbnMgaW5zdGVhZC5cbnZhciBwbHVnaW4gPSAkLnVpLnBsdWdpbiA9IHtcblx0YWRkOiBmdW5jdGlvbiggbW9kdWxlLCBvcHRpb24sIHNldCApIHtcblx0XHR2YXIgaSxcblx0XHRcdHByb3RvID0gJC51aVsgbW9kdWxlIF0ucHJvdG90eXBlO1xuXHRcdGZvciAoIGkgaW4gc2V0ICkge1xuXHRcdFx0cHJvdG8ucGx1Z2luc1sgaSBdID0gcHJvdG8ucGx1Z2luc1sgaSBdIHx8IFtdO1xuXHRcdFx0cHJvdG8ucGx1Z2luc1sgaSBdLnB1c2goIFsgb3B0aW9uLCBzZXRbIGkgXSBdICk7XG5cdFx0fVxuXHR9LFxuXHRjYWxsOiBmdW5jdGlvbiggaW5zdGFuY2UsIG5hbWUsIGFyZ3MsIGFsbG93RGlzY29ubmVjdGVkICkge1xuXHRcdHZhciBpLFxuXHRcdFx0c2V0ID0gaW5zdGFuY2UucGx1Z2luc1sgbmFtZSBdO1xuXG5cdFx0aWYgKCAhc2V0ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggIWFsbG93RGlzY29ubmVjdGVkICYmICggIWluc3RhbmNlLmVsZW1lbnRbIDAgXS5wYXJlbnROb2RlIHx8XG5cdFx0XHRcdGluc3RhbmNlLmVsZW1lbnRbIDAgXS5wYXJlbnROb2RlLm5vZGVUeXBlID09PSAxMSApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgc2V0Lmxlbmd0aDsgaSsrICkge1xuXHRcdFx0aWYgKCBpbnN0YW5jZS5vcHRpb25zWyBzZXRbIGkgXVsgMCBdIF0gKSB7XG5cdFx0XHRcdHNldFsgaSBdWyAxIF0uYXBwbHkoIGluc3RhbmNlLmVsZW1lbnQsIGFyZ3MgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cblxuXG52YXIgc2FmZUFjdGl2ZUVsZW1lbnQgPSAkLnVpLnNhZmVBY3RpdmVFbGVtZW50ID0gZnVuY3Rpb24oIGRvY3VtZW50ICkge1xuXHR2YXIgYWN0aXZlRWxlbWVudDtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0Ly8gSUU5IHRocm93cyBhbiBcIlVuc3BlY2lmaWVkIGVycm9yXCIgYWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgZnJvbSBhbiA8aWZyYW1lPlxuXHR0cnkge1xuXHRcdGFjdGl2ZUVsZW1lbnQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyb3IgKSB7XG5cdFx0YWN0aXZlRWxlbWVudCA9IGRvY3VtZW50LmJvZHk7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBJRSBtYXkgcmV0dXJuIG51bGwgaW5zdGVhZCBvZiBhbiBlbGVtZW50XG5cdC8vIEludGVyZXN0aW5nbHksIHRoaXMgb25seSBzZWVtcyB0byBvY2N1ciB3aGVuIE5PVCBpbiBhbiBpZnJhbWVcblx0aWYgKCAhYWN0aXZlRWxlbWVudCApIHtcblx0XHRhY3RpdmVFbGVtZW50ID0gZG9jdW1lbnQuYm9keTtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0Ly8gSUUxMSByZXR1cm5zIGEgc2VlbWluZ2x5IGVtcHR5IG9iamVjdCBpbiBzb21lIGNhc2VzIHdoZW4gYWNjZXNzaW5nXG5cdC8vIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgZnJvbSBhbiA8aWZyYW1lPlxuXHRpZiAoICFhY3RpdmVFbGVtZW50Lm5vZGVOYW1lICkge1xuXHRcdGFjdGl2ZUVsZW1lbnQgPSBkb2N1bWVudC5ib2R5O1xuXHR9XG5cblx0cmV0dXJuIGFjdGl2ZUVsZW1lbnQ7XG59O1xuXG5cblxudmFyIHNhZmVCbHVyID0gJC51aS5zYWZlQmx1ciA9IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFOSAtIDEwIG9ubHlcblx0Ly8gSWYgdGhlIDxib2R5PiBpcyBibHVycmVkLCBJRSB3aWxsIHN3aXRjaCB3aW5kb3dzLCBzZWUgIzk0MjBcblx0aWYgKCBlbGVtZW50ICYmIGVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJib2R5XCIgKSB7XG5cdFx0JCggZWxlbWVudCApLnRyaWdnZXIoIFwiYmx1clwiICk7XG5cdH1cbn07XG5cblxuLyohXG4gKiBqUXVlcnkgVUkgRHJhZ2dhYmxlIDEuMTIuMVxuICogaHR0cDovL2pxdWVyeXVpLmNvbVxuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKi9cblxuLy8+PmxhYmVsOiBEcmFnZ2FibGVcbi8vPj5ncm91cDogSW50ZXJhY3Rpb25zXG4vLz4+ZGVzY3JpcHRpb246IEVuYWJsZXMgZHJhZ2dpbmcgZnVuY3Rpb25hbGl0eSBmb3IgYW55IGVsZW1lbnQuXG4vLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vZHJhZ2dhYmxlL1xuLy8+PmRlbW9zOiBodHRwOi8vanF1ZXJ5dWkuY29tL2RyYWdnYWJsZS9cbi8vPj5jc3Muc3RydWN0dXJlOiAuLi8uLi90aGVtZXMvYmFzZS9kcmFnZ2FibGUuY3NzXG5cblxuXG4kLndpZGdldCggXCJ1aS5kcmFnZ2FibGVcIiwgJC51aS5tb3VzZSwge1xuXHR2ZXJzaW9uOiBcIjEuMTIuMVwiLFxuXHR3aWRnZXRFdmVudFByZWZpeDogXCJkcmFnXCIsXG5cdG9wdGlvbnM6IHtcblx0XHRhZGRDbGFzc2VzOiB0cnVlLFxuXHRcdGFwcGVuZFRvOiBcInBhcmVudFwiLFxuXHRcdGF4aXM6IGZhbHNlLFxuXHRcdGNvbm5lY3RUb1NvcnRhYmxlOiBmYWxzZSxcblx0XHRjb250YWlubWVudDogZmFsc2UsXG5cdFx0Y3Vyc29yOiBcImF1dG9cIixcblx0XHRjdXJzb3JBdDogZmFsc2UsXG5cdFx0Z3JpZDogZmFsc2UsXG5cdFx0aGFuZGxlOiBmYWxzZSxcblx0XHRoZWxwZXI6IFwib3JpZ2luYWxcIixcblx0XHRpZnJhbWVGaXg6IGZhbHNlLFxuXHRcdG9wYWNpdHk6IGZhbHNlLFxuXHRcdHJlZnJlc2hQb3NpdGlvbnM6IGZhbHNlLFxuXHRcdHJldmVydDogZmFsc2UsXG5cdFx0cmV2ZXJ0RHVyYXRpb246IDUwMCxcblx0XHRzY29wZTogXCJkZWZhdWx0XCIsXG5cdFx0c2Nyb2xsOiB0cnVlLFxuXHRcdHNjcm9sbFNlbnNpdGl2aXR5OiAyMCxcblx0XHRzY3JvbGxTcGVlZDogMjAsXG5cdFx0c25hcDogZmFsc2UsXG5cdFx0c25hcE1vZGU6IFwiYm90aFwiLFxuXHRcdHNuYXBUb2xlcmFuY2U6IDIwLFxuXHRcdHN0YWNrOiBmYWxzZSxcblx0XHR6SW5kZXg6IGZhbHNlLFxuXG5cdFx0Ly8gQ2FsbGJhY2tzXG5cdFx0ZHJhZzogbnVsbCxcblx0XHRzdGFydDogbnVsbCxcblx0XHRzdG9wOiBudWxsXG5cdH0sXG5cdF9jcmVhdGU6IGZ1bmN0aW9uKCkge1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuaGVscGVyID09PSBcIm9yaWdpbmFsXCIgKSB7XG5cdFx0XHR0aGlzLl9zZXRQb3NpdGlvblJlbGF0aXZlKCk7XG5cdFx0fVxuXHRcdGlmICggdGhpcy5vcHRpb25zLmFkZENsYXNzZXMgKSB7XG5cdFx0XHR0aGlzLl9hZGRDbGFzcyggXCJ1aS1kcmFnZ2FibGVcIiApO1xuXHRcdH1cblx0XHR0aGlzLl9zZXRIYW5kbGVDbGFzc05hbWUoKTtcblxuXHRcdHRoaXMuX21vdXNlSW5pdCgpO1xuXHR9LFxuXG5cdF9zZXRPcHRpb246IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHRoaXMuX3N1cGVyKCBrZXksIHZhbHVlICk7XG5cdFx0aWYgKCBrZXkgPT09IFwiaGFuZGxlXCIgKSB7XG5cdFx0XHR0aGlzLl9yZW1vdmVIYW5kbGVDbGFzc05hbWUoKTtcblx0XHRcdHRoaXMuX3NldEhhbmRsZUNsYXNzTmFtZSgpO1xuXHRcdH1cblx0fSxcblxuXHRfZGVzdHJveTogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAoIHRoaXMuaGVscGVyIHx8IHRoaXMuZWxlbWVudCApLmlzKCBcIi51aS1kcmFnZ2FibGUtZHJhZ2dpbmdcIiApICkge1xuXHRcdFx0dGhpcy5kZXN0cm95T25DbGVhciA9IHRydWU7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHRoaXMuX3JlbW92ZUhhbmRsZUNsYXNzTmFtZSgpO1xuXHRcdHRoaXMuX21vdXNlRGVzdHJveSgpO1xuXHR9LFxuXG5cdF9tb3VzZUNhcHR1cmU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgbyA9IHRoaXMub3B0aW9ucztcblxuXHRcdC8vIEFtb25nIG90aGVycywgcHJldmVudCBhIGRyYWcgb24gYSByZXNpemFibGUtaGFuZGxlXG5cdFx0aWYgKCB0aGlzLmhlbHBlciB8fCBvLmRpc2FibGVkIHx8XG5cdFx0XHRcdCQoIGV2ZW50LnRhcmdldCApLmNsb3Nlc3QoIFwiLnVpLXJlc2l6YWJsZS1oYW5kbGVcIiApLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly9RdWl0IGlmIHdlJ3JlIG5vdCBvbiBhIHZhbGlkIGhhbmRsZVxuXHRcdHRoaXMuaGFuZGxlID0gdGhpcy5fZ2V0SGFuZGxlKCBldmVudCApO1xuXHRcdGlmICggIXRoaXMuaGFuZGxlICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHRoaXMuX2JsdXJBY3RpdmVFbGVtZW50KCBldmVudCApO1xuXG5cdFx0dGhpcy5fYmxvY2tGcmFtZXMoIG8uaWZyYW1lRml4ID09PSB0cnVlID8gXCJpZnJhbWVcIiA6IG8uaWZyYW1lRml4ICk7XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblxuXHR9LFxuXG5cdF9ibG9ja0ZyYW1lczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMuaWZyYW1lQmxvY2tzID0gdGhpcy5kb2N1bWVudC5maW5kKCBzZWxlY3RvciApLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaWZyYW1lID0gJCggdGhpcyApO1xuXG5cdFx0XHRyZXR1cm4gJCggXCI8ZGl2PlwiIClcblx0XHRcdFx0LmNzcyggXCJwb3NpdGlvblwiLCBcImFic29sdXRlXCIgKVxuXHRcdFx0XHQuYXBwZW5kVG8oIGlmcmFtZS5wYXJlbnQoKSApXG5cdFx0XHRcdC5vdXRlcldpZHRoKCBpZnJhbWUub3V0ZXJXaWR0aCgpIClcblx0XHRcdFx0Lm91dGVySGVpZ2h0KCBpZnJhbWUub3V0ZXJIZWlnaHQoKSApXG5cdFx0XHRcdC5vZmZzZXQoIGlmcmFtZS5vZmZzZXQoKSApWyAwIF07XG5cdFx0fSApO1xuXHR9LFxuXG5cdF91bmJsb2NrRnJhbWVzOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoIHRoaXMuaWZyYW1lQmxvY2tzICkge1xuXHRcdFx0dGhpcy5pZnJhbWVCbG9ja3MucmVtb3ZlKCk7XG5cdFx0XHRkZWxldGUgdGhpcy5pZnJhbWVCbG9ja3M7XG5cdFx0fVxuXHR9LFxuXG5cdF9ibHVyQWN0aXZlRWxlbWVudDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBhY3RpdmVFbGVtZW50ID0gJC51aS5zYWZlQWN0aXZlRWxlbWVudCggdGhpcy5kb2N1bWVudFsgMCBdICksXG5cdFx0XHR0YXJnZXQgPSAkKCBldmVudC50YXJnZXQgKTtcblxuXHRcdC8vIERvbid0IGJsdXIgaWYgdGhlIGV2ZW50IG9jY3VycmVkIG9uIGFuIGVsZW1lbnQgdGhhdCBpcyB3aXRoaW5cblx0XHQvLyB0aGUgY3VycmVudGx5IGZvY3VzZWQgZWxlbWVudFxuXHRcdC8vIFNlZSAjMTA1MjcsICMxMjQ3MlxuXHRcdGlmICggdGFyZ2V0LmNsb3Nlc3QoIGFjdGl2ZUVsZW1lbnQgKS5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQmx1ciBhbnkgZWxlbWVudCB0aGF0IGN1cnJlbnRseSBoYXMgZm9jdXMsIHNlZSAjNDI2MVxuXHRcdCQudWkuc2FmZUJsdXIoIGFjdGl2ZUVsZW1lbnQgKTtcblx0fSxcblxuXHRfbW91c2VTdGFydDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0dmFyIG8gPSB0aGlzLm9wdGlvbnM7XG5cblx0XHQvL0NyZWF0ZSBhbmQgYXBwZW5kIHRoZSB2aXNpYmxlIGhlbHBlclxuXHRcdHRoaXMuaGVscGVyID0gdGhpcy5fY3JlYXRlSGVscGVyKCBldmVudCApO1xuXG5cdFx0dGhpcy5fYWRkQ2xhc3MoIHRoaXMuaGVscGVyLCBcInVpLWRyYWdnYWJsZS1kcmFnZ2luZ1wiICk7XG5cblx0XHQvL0NhY2hlIHRoZSBoZWxwZXIgc2l6ZVxuXHRcdHRoaXMuX2NhY2hlSGVscGVyUHJvcG9ydGlvbnMoKTtcblxuXHRcdC8vSWYgZGRtYW5hZ2VyIGlzIHVzZWQgZm9yIGRyb3BwYWJsZXMsIHNldCB0aGUgZ2xvYmFsIGRyYWdnYWJsZVxuXHRcdGlmICggJC51aS5kZG1hbmFnZXIgKSB7XG5cdFx0XHQkLnVpLmRkbWFuYWdlci5jdXJyZW50ID0gdGhpcztcblx0XHR9XG5cblx0XHQvKlxuXHRcdCAqIC0gUG9zaXRpb24gZ2VuZXJhdGlvbiAtXG5cdFx0ICogVGhpcyBibG9jayBnZW5lcmF0ZXMgZXZlcnl0aGluZyBwb3NpdGlvbiByZWxhdGVkIC0gaXQncyB0aGUgY29yZSBvZiBkcmFnZ2FibGVzLlxuXHRcdCAqL1xuXG5cdFx0Ly9DYWNoZSB0aGUgbWFyZ2lucyBvZiB0aGUgb3JpZ2luYWwgZWxlbWVudFxuXHRcdHRoaXMuX2NhY2hlTWFyZ2lucygpO1xuXG5cdFx0Ly9TdG9yZSB0aGUgaGVscGVyJ3MgY3NzIHBvc2l0aW9uXG5cdFx0dGhpcy5jc3NQb3NpdGlvbiA9IHRoaXMuaGVscGVyLmNzcyggXCJwb3NpdGlvblwiICk7XG5cdFx0dGhpcy5zY3JvbGxQYXJlbnQgPSB0aGlzLmhlbHBlci5zY3JvbGxQYXJlbnQoIHRydWUgKTtcblx0XHR0aGlzLm9mZnNldFBhcmVudCA9IHRoaXMuaGVscGVyLm9mZnNldFBhcmVudCgpO1xuXHRcdHRoaXMuaGFzRml4ZWRBbmNlc3RvciA9IHRoaXMuaGVscGVyLnBhcmVudHMoKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gJCggdGhpcyApLmNzcyggXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIjtcblx0XHRcdH0gKS5sZW5ndGggPiAwO1xuXG5cdFx0Ly9UaGUgZWxlbWVudCdzIGFic29sdXRlIHBvc2l0aW9uIG9uIHRoZSBwYWdlIG1pbnVzIG1hcmdpbnNcblx0XHR0aGlzLnBvc2l0aW9uQWJzID0gdGhpcy5lbGVtZW50Lm9mZnNldCgpO1xuXHRcdHRoaXMuX3JlZnJlc2hPZmZzZXRzKCBldmVudCApO1xuXG5cdFx0Ly9HZW5lcmF0ZSB0aGUgb3JpZ2luYWwgcG9zaXRpb25cblx0XHR0aGlzLm9yaWdpbmFsUG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uID0gdGhpcy5fZ2VuZXJhdGVQb3NpdGlvbiggZXZlbnQsIGZhbHNlICk7XG5cdFx0dGhpcy5vcmlnaW5hbFBhZ2VYID0gZXZlbnQucGFnZVg7XG5cdFx0dGhpcy5vcmlnaW5hbFBhZ2VZID0gZXZlbnQucGFnZVk7XG5cblx0XHQvL0FkanVzdCB0aGUgbW91c2Ugb2Zmc2V0IHJlbGF0aXZlIHRvIHRoZSBoZWxwZXIgaWYgXCJjdXJzb3JBdFwiIGlzIHN1cHBsaWVkXG5cdFx0KCBvLmN1cnNvckF0ICYmIHRoaXMuX2FkanVzdE9mZnNldEZyb21IZWxwZXIoIG8uY3Vyc29yQXQgKSApO1xuXG5cdFx0Ly9TZXQgYSBjb250YWlubWVudCBpZiBnaXZlbiBpbiB0aGUgb3B0aW9uc1xuXHRcdHRoaXMuX3NldENvbnRhaW5tZW50KCk7XG5cblx0XHQvL1RyaWdnZXIgZXZlbnQgKyBjYWxsYmFja3Ncblx0XHRpZiAoIHRoaXMuX3RyaWdnZXIoIFwic3RhcnRcIiwgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHR0aGlzLl9jbGVhcigpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vUmVjYWNoZSB0aGUgaGVscGVyIHNpemVcblx0XHR0aGlzLl9jYWNoZUhlbHBlclByb3BvcnRpb25zKCk7XG5cblx0XHQvL1ByZXBhcmUgdGhlIGRyb3BwYWJsZSBvZmZzZXRzXG5cdFx0aWYgKCAkLnVpLmRkbWFuYWdlciAmJiAhby5kcm9wQmVoYXZpb3VyICkge1xuXHRcdFx0JC51aS5kZG1hbmFnZXIucHJlcGFyZU9mZnNldHMoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0Ly8gRXhlY3V0ZSB0aGUgZHJhZyBvbmNlIC0gdGhpcyBjYXVzZXMgdGhlIGhlbHBlciBub3QgdG8gYmUgdmlzaWJsZSBiZWZvcmUgZ2V0dGluZyBpdHNcblx0XHQvLyBjb3JyZWN0IHBvc2l0aW9uXG5cdFx0dGhpcy5fbW91c2VEcmFnKCBldmVudCwgdHJ1ZSApO1xuXG5cdFx0Ly8gSWYgdGhlIGRkbWFuYWdlciBpcyB1c2VkIGZvciBkcm9wcGFibGVzLCBpbmZvcm0gdGhlIG1hbmFnZXIgdGhhdCBkcmFnZ2luZyBoYXMgc3RhcnRlZFxuXHRcdC8vIChzZWUgIzUwMDMpXG5cdFx0aWYgKCAkLnVpLmRkbWFuYWdlciApIHtcblx0XHRcdCQudWkuZGRtYW5hZ2VyLmRyYWdTdGFydCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHRfcmVmcmVzaE9mZnNldHM6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR0aGlzLm9mZnNldCA9IHtcblx0XHRcdHRvcDogdGhpcy5wb3NpdGlvbkFicy50b3AgLSB0aGlzLm1hcmdpbnMudG9wLFxuXHRcdFx0bGVmdDogdGhpcy5wb3NpdGlvbkFicy5sZWZ0IC0gdGhpcy5tYXJnaW5zLmxlZnQsXG5cdFx0XHRzY3JvbGw6IGZhbHNlLFxuXHRcdFx0cGFyZW50OiB0aGlzLl9nZXRQYXJlbnRPZmZzZXQoKSxcblx0XHRcdHJlbGF0aXZlOiB0aGlzLl9nZXRSZWxhdGl2ZU9mZnNldCgpXG5cdFx0fTtcblxuXHRcdHRoaXMub2Zmc2V0LmNsaWNrID0ge1xuXHRcdFx0bGVmdDogZXZlbnQucGFnZVggLSB0aGlzLm9mZnNldC5sZWZ0LFxuXHRcdFx0dG9wOiBldmVudC5wYWdlWSAtIHRoaXMub2Zmc2V0LnRvcFxuXHRcdH07XG5cdH0sXG5cblx0X21vdXNlRHJhZzogZnVuY3Rpb24oIGV2ZW50LCBub1Byb3BhZ2F0aW9uICkge1xuXG5cdFx0Ly8gcmVzZXQgYW55IG5lY2Vzc2FyeSBjYWNoZWQgcHJvcGVydGllcyAoc2VlICM1MDA5KVxuXHRcdGlmICggdGhpcy5oYXNGaXhlZEFuY2VzdG9yICkge1xuXHRcdFx0dGhpcy5vZmZzZXQucGFyZW50ID0gdGhpcy5fZ2V0UGFyZW50T2Zmc2V0KCk7XG5cdFx0fVxuXG5cdFx0Ly9Db21wdXRlIHRoZSBoZWxwZXJzIHBvc2l0aW9uXG5cdFx0dGhpcy5wb3NpdGlvbiA9IHRoaXMuX2dlbmVyYXRlUG9zaXRpb24oIGV2ZW50LCB0cnVlICk7XG5cdFx0dGhpcy5wb3NpdGlvbkFicyA9IHRoaXMuX2NvbnZlcnRQb3NpdGlvblRvKCBcImFic29sdXRlXCIgKTtcblxuXHRcdC8vQ2FsbCBwbHVnaW5zIGFuZCBjYWxsYmFja3MgYW5kIHVzZSB0aGUgcmVzdWx0aW5nIHBvc2l0aW9uIGlmIHNvbWV0aGluZyBpcyByZXR1cm5lZFxuXHRcdGlmICggIW5vUHJvcGFnYXRpb24gKSB7XG5cdFx0XHR2YXIgdWkgPSB0aGlzLl91aUhhc2goKTtcblx0XHRcdGlmICggdGhpcy5fdHJpZ2dlciggXCJkcmFnXCIsIGV2ZW50LCB1aSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0dGhpcy5fbW91c2VVcCggbmV3ICQuRXZlbnQoIFwibW91c2V1cFwiLCBldmVudCApICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHRoaXMucG9zaXRpb24gPSB1aS5wb3NpdGlvbjtcblx0XHR9XG5cblx0XHR0aGlzLmhlbHBlclsgMCBdLnN0eWxlLmxlZnQgPSB0aGlzLnBvc2l0aW9uLmxlZnQgKyBcInB4XCI7XG5cdFx0dGhpcy5oZWxwZXJbIDAgXS5zdHlsZS50b3AgPSB0aGlzLnBvc2l0aW9uLnRvcCArIFwicHhcIjtcblxuXHRcdGlmICggJC51aS5kZG1hbmFnZXIgKSB7XG5cdFx0XHQkLnVpLmRkbWFuYWdlci5kcmFnKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblxuXHRfbW91c2VTdG9wOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHQvL0lmIHdlIGFyZSB1c2luZyBkcm9wcGFibGVzLCBpbmZvcm0gdGhlIG1hbmFnZXIgYWJvdXQgdGhlIGRyb3Bcblx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRkcm9wcGVkID0gZmFsc2U7XG5cdFx0aWYgKCAkLnVpLmRkbWFuYWdlciAmJiAhdGhpcy5vcHRpb25zLmRyb3BCZWhhdmlvdXIgKSB7XG5cdFx0XHRkcm9wcGVkID0gJC51aS5kZG1hbmFnZXIuZHJvcCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHQvL2lmIGEgZHJvcCBjb21lcyBmcm9tIG91dHNpZGUgKGEgc29ydGFibGUpXG5cdFx0aWYgKCB0aGlzLmRyb3BwZWQgKSB7XG5cdFx0XHRkcm9wcGVkID0gdGhpcy5kcm9wcGVkO1xuXHRcdFx0dGhpcy5kcm9wcGVkID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYgKCAoIHRoaXMub3B0aW9ucy5yZXZlcnQgPT09IFwiaW52YWxpZFwiICYmICFkcm9wcGVkICkgfHxcblx0XHRcdFx0KCB0aGlzLm9wdGlvbnMucmV2ZXJ0ID09PSBcInZhbGlkXCIgJiYgZHJvcHBlZCApIHx8XG5cdFx0XHRcdHRoaXMub3B0aW9ucy5yZXZlcnQgPT09IHRydWUgfHwgKCAkLmlzRnVuY3Rpb24oIHRoaXMub3B0aW9ucy5yZXZlcnQgKSAmJlxuXHRcdFx0XHR0aGlzLm9wdGlvbnMucmV2ZXJ0LmNhbGwoIHRoaXMuZWxlbWVudCwgZHJvcHBlZCApIClcblx0XHQpIHtcblx0XHRcdCQoIHRoaXMuaGVscGVyICkuYW5pbWF0ZShcblx0XHRcdFx0dGhpcy5vcmlnaW5hbFBvc2l0aW9uLFxuXHRcdFx0XHRwYXJzZUludCggdGhpcy5vcHRpb25zLnJldmVydER1cmF0aW9uLCAxMCApLFxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoYXQuX3RyaWdnZXIoIFwic3RvcFwiLCBldmVudCApICE9PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdHRoYXQuX2NsZWFyKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIHRoaXMuX3RyaWdnZXIoIFwic3RvcFwiLCBldmVudCApICE9PSBmYWxzZSApIHtcblx0XHRcdFx0dGhpcy5fY2xlYXIoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0sXG5cblx0X21vdXNlVXA6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR0aGlzLl91bmJsb2NrRnJhbWVzKCk7XG5cblx0XHQvLyBJZiB0aGUgZGRtYW5hZ2VyIGlzIHVzZWQgZm9yIGRyb3BwYWJsZXMsIGluZm9ybSB0aGUgbWFuYWdlciB0aGF0IGRyYWdnaW5nIGhhcyBzdG9wcGVkXG5cdFx0Ly8gKHNlZSAjNTAwMylcblx0XHRpZiAoICQudWkuZGRtYW5hZ2VyICkge1xuXHRcdFx0JC51aS5kZG1hbmFnZXIuZHJhZ1N0b3AoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0Ly8gT25seSBuZWVkIHRvIGZvY3VzIGlmIHRoZSBldmVudCBvY2N1cnJlZCBvbiB0aGUgZHJhZ2dhYmxlIGl0c2VsZiwgc2VlICMxMDUyN1xuXHRcdGlmICggdGhpcy5oYW5kbGVFbGVtZW50LmlzKCBldmVudC50YXJnZXQgKSApIHtcblxuXHRcdFx0Ly8gVGhlIGludGVyYWN0aW9uIGlzIG92ZXI7IHdoZXRoZXIgb3Igbm90IHRoZSBjbGljayByZXN1bHRlZCBpbiBhIGRyYWcsXG5cdFx0XHQvLyBmb2N1cyB0aGUgZWxlbWVudFxuXHRcdFx0dGhpcy5lbGVtZW50LnRyaWdnZXIoIFwiZm9jdXNcIiApO1xuXHRcdH1cblxuXHRcdHJldHVybiAkLnVpLm1vdXNlLnByb3RvdHlwZS5fbW91c2VVcC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHR9LFxuXG5cdGNhbmNlbDogZnVuY3Rpb24oKSB7XG5cblx0XHRpZiAoIHRoaXMuaGVscGVyLmlzKCBcIi51aS1kcmFnZ2FibGUtZHJhZ2dpbmdcIiApICkge1xuXHRcdFx0dGhpcy5fbW91c2VVcCggbmV3ICQuRXZlbnQoIFwibW91c2V1cFwiLCB7IHRhcmdldDogdGhpcy5lbGVtZW50WyAwIF0gfSApICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuX2NsZWFyKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRfZ2V0SGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0cmV0dXJuIHRoaXMub3B0aW9ucy5oYW5kbGUgP1xuXHRcdFx0ISEkKCBldmVudC50YXJnZXQgKS5jbG9zZXN0KCB0aGlzLmVsZW1lbnQuZmluZCggdGhpcy5vcHRpb25zLmhhbmRsZSApICkubGVuZ3RoIDpcblx0XHRcdHRydWU7XG5cdH0sXG5cblx0X3NldEhhbmRsZUNsYXNzTmFtZTogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5oYW5kbGVFbGVtZW50ID0gdGhpcy5vcHRpb25zLmhhbmRsZSA/XG5cdFx0XHR0aGlzLmVsZW1lbnQuZmluZCggdGhpcy5vcHRpb25zLmhhbmRsZSApIDogdGhpcy5lbGVtZW50O1xuXHRcdHRoaXMuX2FkZENsYXNzKCB0aGlzLmhhbmRsZUVsZW1lbnQsIFwidWktZHJhZ2dhYmxlLWhhbmRsZVwiICk7XG5cdH0sXG5cblx0X3JlbW92ZUhhbmRsZUNsYXNzTmFtZTogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5fcmVtb3ZlQ2xhc3MoIHRoaXMuaGFuZGxlRWxlbWVudCwgXCJ1aS1kcmFnZ2FibGUtaGFuZGxlXCIgKTtcblx0fSxcblxuXHRfY3JlYXRlSGVscGVyOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHR2YXIgbyA9IHRoaXMub3B0aW9ucyxcblx0XHRcdGhlbHBlcklzRnVuY3Rpb24gPSAkLmlzRnVuY3Rpb24oIG8uaGVscGVyICksXG5cdFx0XHRoZWxwZXIgPSBoZWxwZXJJc0Z1bmN0aW9uID9cblx0XHRcdFx0JCggby5oZWxwZXIuYXBwbHkoIHRoaXMuZWxlbWVudFsgMCBdLCBbIGV2ZW50IF0gKSApIDpcblx0XHRcdFx0KCBvLmhlbHBlciA9PT0gXCJjbG9uZVwiID9cblx0XHRcdFx0XHR0aGlzLmVsZW1lbnQuY2xvbmUoKS5yZW1vdmVBdHRyKCBcImlkXCIgKSA6XG5cdFx0XHRcdFx0dGhpcy5lbGVtZW50ICk7XG5cblx0XHRpZiAoICFoZWxwZXIucGFyZW50cyggXCJib2R5XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRoZWxwZXIuYXBwZW5kVG8oICggby5hcHBlbmRUbyA9PT0gXCJwYXJlbnRcIiA/XG5cdFx0XHRcdHRoaXMuZWxlbWVudFsgMCBdLnBhcmVudE5vZGUgOlxuXHRcdFx0XHRvLmFwcGVuZFRvICkgKTtcblx0XHR9XG5cblx0XHQvLyBIdHRwOi8vYnVncy5qcXVlcnl1aS5jb20vdGlja2V0Lzk0NDZcblx0XHQvLyBhIGhlbHBlciBmdW5jdGlvbiBjYW4gcmV0dXJuIHRoZSBvcmlnaW5hbCBlbGVtZW50XG5cdFx0Ly8gd2hpY2ggd291bGRuJ3QgaGF2ZSBiZWVuIHNldCB0byByZWxhdGl2ZSBpbiBfY3JlYXRlXG5cdFx0aWYgKCBoZWxwZXJJc0Z1bmN0aW9uICYmIGhlbHBlclsgMCBdID09PSB0aGlzLmVsZW1lbnRbIDAgXSApIHtcblx0XHRcdHRoaXMuX3NldFBvc2l0aW9uUmVsYXRpdmUoKTtcblx0XHR9XG5cblx0XHRpZiAoIGhlbHBlclsgMCBdICE9PSB0aGlzLmVsZW1lbnRbIDAgXSAmJlxuXHRcdFx0XHQhKCAvKGZpeGVkfGFic29sdXRlKS8gKS50ZXN0KCBoZWxwZXIuY3NzKCBcInBvc2l0aW9uXCIgKSApICkge1xuXHRcdFx0aGVscGVyLmNzcyggXCJwb3NpdGlvblwiLCBcImFic29sdXRlXCIgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGVscGVyO1xuXG5cdH0sXG5cblx0X3NldFBvc2l0aW9uUmVsYXRpdmU6IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggISggL14oPzpyfGF8ZikvICkudGVzdCggdGhpcy5lbGVtZW50LmNzcyggXCJwb3NpdGlvblwiICkgKSApIHtcblx0XHRcdHRoaXMuZWxlbWVudFsgMCBdLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblx0fSxcblxuXHRfYWRqdXN0T2Zmc2V0RnJvbUhlbHBlcjogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRpZiAoIHR5cGVvZiBvYmogPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSBvYmouc3BsaXQoIFwiIFwiICk7XG5cdFx0fVxuXHRcdGlmICggJC5pc0FycmF5KCBvYmogKSApIHtcblx0XHRcdG9iaiA9IHsgbGVmdDogK29ialsgMCBdLCB0b3A6ICtvYmpbIDEgXSB8fCAwIH07XG5cdFx0fVxuXHRcdGlmICggXCJsZWZ0XCIgaW4gb2JqICkge1xuXHRcdFx0dGhpcy5vZmZzZXQuY2xpY2subGVmdCA9IG9iai5sZWZ0ICsgdGhpcy5tYXJnaW5zLmxlZnQ7XG5cdFx0fVxuXHRcdGlmICggXCJyaWdodFwiIGluIG9iaiApIHtcblx0XHRcdHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPSB0aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoIC0gb2JqLnJpZ2h0ICsgdGhpcy5tYXJnaW5zLmxlZnQ7XG5cdFx0fVxuXHRcdGlmICggXCJ0b3BcIiBpbiBvYmogKSB7XG5cdFx0XHR0aGlzLm9mZnNldC5jbGljay50b3AgPSBvYmoudG9wICsgdGhpcy5tYXJnaW5zLnRvcDtcblx0XHR9XG5cdFx0aWYgKCBcImJvdHRvbVwiIGluIG9iaiApIHtcblx0XHRcdHRoaXMub2Zmc2V0LmNsaWNrLnRvcCA9IHRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0IC0gb2JqLmJvdHRvbSArIHRoaXMubWFyZ2lucy50b3A7XG5cdFx0fVxuXHR9LFxuXG5cdF9pc1Jvb3ROb2RlOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRyZXR1cm4gKCAvKGh0bWx8Ym9keSkvaSApLnRlc3QoIGVsZW1lbnQudGFnTmFtZSApIHx8IGVsZW1lbnQgPT09IHRoaXMuZG9jdW1lbnRbIDAgXTtcblx0fSxcblxuXHRfZ2V0UGFyZW50T2Zmc2V0OiBmdW5jdGlvbigpIHtcblxuXHRcdC8vR2V0IHRoZSBvZmZzZXRQYXJlbnQgYW5kIGNhY2hlIGl0cyBwb3NpdGlvblxuXHRcdHZhciBwbyA9IHRoaXMub2Zmc2V0UGFyZW50Lm9mZnNldCgpLFxuXHRcdFx0ZG9jdW1lbnQgPSB0aGlzLmRvY3VtZW50WyAwIF07XG5cblx0XHQvLyBUaGlzIGlzIGEgc3BlY2lhbCBjYXNlIHdoZXJlIHdlIG5lZWQgdG8gbW9kaWZ5IGEgb2Zmc2V0IGNhbGN1bGF0ZWQgb24gc3RhcnQsIHNpbmNlIHRoZVxuXHRcdC8vIGZvbGxvd2luZyBoYXBwZW5lZDpcblx0XHQvLyAxLiBUaGUgcG9zaXRpb24gb2YgdGhlIGhlbHBlciBpcyBhYnNvbHV0ZSwgc28gaXQncyBwb3NpdGlvbiBpcyBjYWxjdWxhdGVkIGJhc2VkIG9uIHRoZVxuXHRcdC8vIG5leHQgcG9zaXRpb25lZCBwYXJlbnRcblx0XHQvLyAyLiBUaGUgYWN0dWFsIG9mZnNldCBwYXJlbnQgaXMgYSBjaGlsZCBvZiB0aGUgc2Nyb2xsIHBhcmVudCwgYW5kIHRoZSBzY3JvbGwgcGFyZW50IGlzbid0XG5cdFx0Ly8gdGhlIGRvY3VtZW50LCB3aGljaCBtZWFucyB0aGF0IHRoZSBzY3JvbGwgaXMgaW5jbHVkZWQgaW4gdGhlIGluaXRpYWwgY2FsY3VsYXRpb24gb2YgdGhlXG5cdFx0Ly8gb2Zmc2V0IG9mIHRoZSBwYXJlbnQsIGFuZCBuZXZlciByZWNhbGN1bGF0ZWQgdXBvbiBkcmFnXG5cdFx0aWYgKCB0aGlzLmNzc1Bvc2l0aW9uID09PSBcImFic29sdXRlXCIgJiYgdGhpcy5zY3JvbGxQYXJlbnRbIDAgXSAhPT0gZG9jdW1lbnQgJiZcblx0XHRcdFx0JC5jb250YWlucyggdGhpcy5zY3JvbGxQYXJlbnRbIDAgXSwgdGhpcy5vZmZzZXRQYXJlbnRbIDAgXSApICkge1xuXHRcdFx0cG8ubGVmdCArPSB0aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KCk7XG5cdFx0XHRwby50b3AgKz0gdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsVG9wKCk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLl9pc1Jvb3ROb2RlKCB0aGlzLm9mZnNldFBhcmVudFsgMCBdICkgKSB7XG5cdFx0XHRwbyA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcG8udG9wICsgKCBwYXJzZUludCggdGhpcy5vZmZzZXRQYXJlbnQuY3NzKCBcImJvcmRlclRvcFdpZHRoXCIgKSwgMTAgKSB8fCAwICksXG5cdFx0XHRsZWZ0OiBwby5sZWZ0ICsgKCBwYXJzZUludCggdGhpcy5vZmZzZXRQYXJlbnQuY3NzKCBcImJvcmRlckxlZnRXaWR0aFwiICksIDEwICkgfHwgMCApXG5cdFx0fTtcblxuXHR9LFxuXG5cdF9nZXRSZWxhdGl2ZU9mZnNldDogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCB0aGlzLmNzc1Bvc2l0aW9uICE9PSBcInJlbGF0aXZlXCIgKSB7XG5cdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0XHR2YXIgcCA9IHRoaXMuZWxlbWVudC5wb3NpdGlvbigpLFxuXHRcdFx0c2Nyb2xsSXNSb290Tm9kZSA9IHRoaXMuX2lzUm9vdE5vZGUoIHRoaXMuc2Nyb2xsUGFyZW50WyAwIF0gKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IHAudG9wIC0gKCBwYXJzZUludCggdGhpcy5oZWxwZXIuY3NzKCBcInRvcFwiICksIDEwICkgfHwgMCApICtcblx0XHRcdFx0KCAhc2Nyb2xsSXNSb290Tm9kZSA/IHRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpIDogMCApLFxuXHRcdFx0bGVmdDogcC5sZWZ0IC0gKCBwYXJzZUludCggdGhpcy5oZWxwZXIuY3NzKCBcImxlZnRcIiApLCAxMCApIHx8IDAgKSArXG5cdFx0XHRcdCggIXNjcm9sbElzUm9vdE5vZGUgPyB0aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KCkgOiAwIClcblx0XHR9O1xuXG5cdH0sXG5cblx0X2NhY2hlTWFyZ2luczogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5tYXJnaW5zID0ge1xuXHRcdFx0bGVmdDogKCBwYXJzZUludCggdGhpcy5lbGVtZW50LmNzcyggXCJtYXJnaW5MZWZ0XCIgKSwgMTAgKSB8fCAwICksXG5cdFx0XHR0b3A6ICggcGFyc2VJbnQoIHRoaXMuZWxlbWVudC5jc3MoIFwibWFyZ2luVG9wXCIgKSwgMTAgKSB8fCAwICksXG5cdFx0XHRyaWdodDogKCBwYXJzZUludCggdGhpcy5lbGVtZW50LmNzcyggXCJtYXJnaW5SaWdodFwiICksIDEwICkgfHwgMCApLFxuXHRcdFx0Ym90dG9tOiAoIHBhcnNlSW50KCB0aGlzLmVsZW1lbnQuY3NzKCBcIm1hcmdpbkJvdHRvbVwiICksIDEwICkgfHwgMCApXG5cdFx0fTtcblx0fSxcblxuXHRfY2FjaGVIZWxwZXJQcm9wb3J0aW9uczogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5oZWxwZXJQcm9wb3J0aW9ucyA9IHtcblx0XHRcdHdpZHRoOiB0aGlzLmhlbHBlci5vdXRlcldpZHRoKCksXG5cdFx0XHRoZWlnaHQ6IHRoaXMuaGVscGVyLm91dGVySGVpZ2h0KClcblx0XHR9O1xuXHR9LFxuXG5cdF9zZXRDb250YWlubWVudDogZnVuY3Rpb24oKSB7XG5cblx0XHR2YXIgaXNVc2VyU2Nyb2xsYWJsZSwgYywgY2UsXG5cdFx0XHRvID0gdGhpcy5vcHRpb25zLFxuXHRcdFx0ZG9jdW1lbnQgPSB0aGlzLmRvY3VtZW50WyAwIF07XG5cblx0XHR0aGlzLnJlbGF0aXZlQ29udGFpbmVyID0gbnVsbDtcblxuXHRcdGlmICggIW8uY29udGFpbm1lbnQgKSB7XG5cdFx0XHR0aGlzLmNvbnRhaW5tZW50ID0gbnVsbDtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG8uY29udGFpbm1lbnQgPT09IFwid2luZG93XCIgKSB7XG5cdFx0XHR0aGlzLmNvbnRhaW5tZW50ID0gW1xuXHRcdFx0XHQkKCB3aW5kb3cgKS5zY3JvbGxMZWZ0KCkgLSB0aGlzLm9mZnNldC5yZWxhdGl2ZS5sZWZ0IC0gdGhpcy5vZmZzZXQucGFyZW50LmxlZnQsXG5cdFx0XHRcdCQoIHdpbmRvdyApLnNjcm9sbFRvcCgpIC0gdGhpcy5vZmZzZXQucmVsYXRpdmUudG9wIC0gdGhpcy5vZmZzZXQucGFyZW50LnRvcCxcblx0XHRcdFx0JCggd2luZG93ICkuc2Nyb2xsTGVmdCgpICsgJCggd2luZG93ICkud2lkdGgoKSAtXG5cdFx0XHRcdFx0dGhpcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCAtIHRoaXMubWFyZ2lucy5sZWZ0LFxuXHRcdFx0XHQkKCB3aW5kb3cgKS5zY3JvbGxUb3AoKSArXG5cdFx0XHRcdFx0KCAkKCB3aW5kb3cgKS5oZWlnaHQoKSB8fCBkb2N1bWVudC5ib2R5LnBhcmVudE5vZGUuc2Nyb2xsSGVpZ2h0ICkgLVxuXHRcdFx0XHRcdHRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0IC0gdGhpcy5tYXJnaW5zLnRvcFxuXHRcdFx0XTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG8uY29udGFpbm1lbnQgPT09IFwiZG9jdW1lbnRcIiApIHtcblx0XHRcdHRoaXMuY29udGFpbm1lbnQgPSBbXG5cdFx0XHRcdDAsXG5cdFx0XHRcdDAsXG5cdFx0XHRcdCQoIGRvY3VtZW50ICkud2lkdGgoKSAtIHRoaXMuaGVscGVyUHJvcG9ydGlvbnMud2lkdGggLSB0aGlzLm1hcmdpbnMubGVmdCxcblx0XHRcdFx0KCAkKCBkb2N1bWVudCApLmhlaWdodCgpIHx8IGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZS5zY3JvbGxIZWlnaHQgKSAtXG5cdFx0XHRcdFx0dGhpcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQgLSB0aGlzLm1hcmdpbnMudG9wXG5cdFx0XHRdO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggby5jb250YWlubWVudC5jb25zdHJ1Y3RvciA9PT0gQXJyYXkgKSB7XG5cdFx0XHR0aGlzLmNvbnRhaW5tZW50ID0gby5jb250YWlubWVudDtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG8uY29udGFpbm1lbnQgPT09IFwicGFyZW50XCIgKSB7XG5cdFx0XHRvLmNvbnRhaW5tZW50ID0gdGhpcy5oZWxwZXJbIDAgXS5wYXJlbnROb2RlO1xuXHRcdH1cblxuXHRcdGMgPSAkKCBvLmNvbnRhaW5tZW50ICk7XG5cdFx0Y2UgPSBjWyAwIF07XG5cblx0XHRpZiAoICFjZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpc1VzZXJTY3JvbGxhYmxlID0gLyhzY3JvbGx8YXV0bykvLnRlc3QoIGMuY3NzKCBcIm92ZXJmbG93XCIgKSApO1xuXG5cdFx0dGhpcy5jb250YWlubWVudCA9IFtcblx0XHRcdCggcGFyc2VJbnQoIGMuY3NzKCBcImJvcmRlckxlZnRXaWR0aFwiICksIDEwICkgfHwgMCApICtcblx0XHRcdFx0KCBwYXJzZUludCggYy5jc3MoIFwicGFkZGluZ0xlZnRcIiApLCAxMCApIHx8IDAgKSxcblx0XHRcdCggcGFyc2VJbnQoIGMuY3NzKCBcImJvcmRlclRvcFdpZHRoXCIgKSwgMTAgKSB8fCAwICkgK1xuXHRcdFx0XHQoIHBhcnNlSW50KCBjLmNzcyggXCJwYWRkaW5nVG9wXCIgKSwgMTAgKSB8fCAwICksXG5cdFx0XHQoIGlzVXNlclNjcm9sbGFibGUgPyBNYXRoLm1heCggY2Uuc2Nyb2xsV2lkdGgsIGNlLm9mZnNldFdpZHRoICkgOiBjZS5vZmZzZXRXaWR0aCApIC1cblx0XHRcdFx0KCBwYXJzZUludCggYy5jc3MoIFwiYm9yZGVyUmlnaHRXaWR0aFwiICksIDEwICkgfHwgMCApIC1cblx0XHRcdFx0KCBwYXJzZUludCggYy5jc3MoIFwicGFkZGluZ1JpZ2h0XCIgKSwgMTAgKSB8fCAwICkgLVxuXHRcdFx0XHR0aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoIC1cblx0XHRcdFx0dGhpcy5tYXJnaW5zLmxlZnQgLVxuXHRcdFx0XHR0aGlzLm1hcmdpbnMucmlnaHQsXG5cdFx0XHQoIGlzVXNlclNjcm9sbGFibGUgPyBNYXRoLm1heCggY2Uuc2Nyb2xsSGVpZ2h0LCBjZS5vZmZzZXRIZWlnaHQgKSA6IGNlLm9mZnNldEhlaWdodCApIC1cblx0XHRcdFx0KCBwYXJzZUludCggYy5jc3MoIFwiYm9yZGVyQm90dG9tV2lkdGhcIiApLCAxMCApIHx8IDAgKSAtXG5cdFx0XHRcdCggcGFyc2VJbnQoIGMuY3NzKCBcInBhZGRpbmdCb3R0b21cIiApLCAxMCApIHx8IDAgKSAtXG5cdFx0XHRcdHRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0IC1cblx0XHRcdFx0dGhpcy5tYXJnaW5zLnRvcCAtXG5cdFx0XHRcdHRoaXMubWFyZ2lucy5ib3R0b21cblx0XHRdO1xuXHRcdHRoaXMucmVsYXRpdmVDb250YWluZXIgPSBjO1xuXHR9LFxuXG5cdF9jb252ZXJ0UG9zaXRpb25UbzogZnVuY3Rpb24oIGQsIHBvcyApIHtcblxuXHRcdGlmICggIXBvcyApIHtcblx0XHRcdHBvcyA9IHRoaXMucG9zaXRpb247XG5cdFx0fVxuXG5cdFx0dmFyIG1vZCA9IGQgPT09IFwiYWJzb2x1dGVcIiA/IDEgOiAtMSxcblx0XHRcdHNjcm9sbElzUm9vdE5vZGUgPSB0aGlzLl9pc1Jvb3ROb2RlKCB0aGlzLnNjcm9sbFBhcmVudFsgMCBdICk7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiAoXG5cblx0XHRcdFx0Ly8gVGhlIGFic29sdXRlIG1vdXNlIHBvc2l0aW9uXG5cdFx0XHRcdHBvcy50b3BcdCtcblxuXHRcdFx0XHQvLyBPbmx5IGZvciByZWxhdGl2ZSBwb3NpdGlvbmVkIG5vZGVzOiBSZWxhdGl2ZSBvZmZzZXQgZnJvbSBlbGVtZW50IHRvIG9mZnNldCBwYXJlbnRcblx0XHRcdFx0dGhpcy5vZmZzZXQucmVsYXRpdmUudG9wICogbW9kICtcblxuXHRcdFx0XHQvLyBUaGUgb2Zmc2V0UGFyZW50J3Mgb2Zmc2V0IHdpdGhvdXQgYm9yZGVycyAob2Zmc2V0ICsgYm9yZGVyKVxuXHRcdFx0XHR0aGlzLm9mZnNldC5wYXJlbnQudG9wICogbW9kIC1cblx0XHRcdFx0KCAoIHRoaXMuY3NzUG9zaXRpb24gPT09IFwiZml4ZWRcIiA/XG5cdFx0XHRcdFx0LXRoaXMub2Zmc2V0LnNjcm9sbC50b3AgOlxuXHRcdFx0XHRcdCggc2Nyb2xsSXNSb290Tm9kZSA/IDAgOiB0aGlzLm9mZnNldC5zY3JvbGwudG9wICkgKSAqIG1vZCApXG5cdFx0XHQpLFxuXHRcdFx0bGVmdDogKFxuXG5cdFx0XHRcdC8vIFRoZSBhYnNvbHV0ZSBtb3VzZSBwb3NpdGlvblxuXHRcdFx0XHRwb3MubGVmdCArXG5cblx0XHRcdFx0Ly8gT25seSBmb3IgcmVsYXRpdmUgcG9zaXRpb25lZCBub2RlczogUmVsYXRpdmUgb2Zmc2V0IGZyb20gZWxlbWVudCB0byBvZmZzZXQgcGFyZW50XG5cdFx0XHRcdHRoaXMub2Zmc2V0LnJlbGF0aXZlLmxlZnQgKiBtb2QgK1xuXG5cdFx0XHRcdC8vIFRoZSBvZmZzZXRQYXJlbnQncyBvZmZzZXQgd2l0aG91dCBib3JkZXJzIChvZmZzZXQgKyBib3JkZXIpXG5cdFx0XHRcdHRoaXMub2Zmc2V0LnBhcmVudC5sZWZ0ICogbW9kXHQtXG5cdFx0XHRcdCggKCB0aGlzLmNzc1Bvc2l0aW9uID09PSBcImZpeGVkXCIgP1xuXHRcdFx0XHRcdC10aGlzLm9mZnNldC5zY3JvbGwubGVmdCA6XG5cdFx0XHRcdFx0KCBzY3JvbGxJc1Jvb3ROb2RlID8gMCA6IHRoaXMub2Zmc2V0LnNjcm9sbC5sZWZ0ICkgKSAqIG1vZCApXG5cdFx0XHQpXG5cdFx0fTtcblxuXHR9LFxuXG5cdF9nZW5lcmF0ZVBvc2l0aW9uOiBmdW5jdGlvbiggZXZlbnQsIGNvbnN0cmFpblBvc2l0aW9uICkge1xuXG5cdFx0dmFyIGNvbnRhaW5tZW50LCBjbywgdG9wLCBsZWZ0LFxuXHRcdFx0byA9IHRoaXMub3B0aW9ucyxcblx0XHRcdHNjcm9sbElzUm9vdE5vZGUgPSB0aGlzLl9pc1Jvb3ROb2RlKCB0aGlzLnNjcm9sbFBhcmVudFsgMCBdICksXG5cdFx0XHRwYWdlWCA9IGV2ZW50LnBhZ2VYLFxuXHRcdFx0cGFnZVkgPSBldmVudC5wYWdlWTtcblxuXHRcdC8vIENhY2hlIHRoZSBzY3JvbGxcblx0XHRpZiAoICFzY3JvbGxJc1Jvb3ROb2RlIHx8ICF0aGlzLm9mZnNldC5zY3JvbGwgKSB7XG5cdFx0XHR0aGlzLm9mZnNldC5zY3JvbGwgPSB7XG5cdFx0XHRcdHRvcDogdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsVG9wKCksXG5cdFx0XHRcdGxlZnQ6IHRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbExlZnQoKVxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvKlxuXHRcdCAqIC0gUG9zaXRpb24gY29uc3RyYWluaW5nIC1cblx0XHQgKiBDb25zdHJhaW4gdGhlIHBvc2l0aW9uIHRvIGEgbWl4IG9mIGdyaWQsIGNvbnRhaW5tZW50LlxuXHRcdCAqL1xuXG5cdFx0Ly8gSWYgd2UgYXJlIG5vdCBkcmFnZ2luZyB5ZXQsIHdlIHdvbid0IGNoZWNrIGZvciBvcHRpb25zXG5cdFx0aWYgKCBjb25zdHJhaW5Qb3NpdGlvbiApIHtcblx0XHRcdGlmICggdGhpcy5jb250YWlubWVudCApIHtcblx0XHRcdFx0aWYgKCB0aGlzLnJlbGF0aXZlQ29udGFpbmVyICkge1xuXHRcdFx0XHRcdGNvID0gdGhpcy5yZWxhdGl2ZUNvbnRhaW5lci5vZmZzZXQoKTtcblx0XHRcdFx0XHRjb250YWlubWVudCA9IFtcblx0XHRcdFx0XHRcdHRoaXMuY29udGFpbm1lbnRbIDAgXSArIGNvLmxlZnQsXG5cdFx0XHRcdFx0XHR0aGlzLmNvbnRhaW5tZW50WyAxIF0gKyBjby50b3AsXG5cdFx0XHRcdFx0XHR0aGlzLmNvbnRhaW5tZW50WyAyIF0gKyBjby5sZWZ0LFxuXHRcdFx0XHRcdFx0dGhpcy5jb250YWlubWVudFsgMyBdICsgY28udG9wXG5cdFx0XHRcdFx0XTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250YWlubWVudCA9IHRoaXMuY29udGFpbm1lbnQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGV2ZW50LnBhZ2VYIC0gdGhpcy5vZmZzZXQuY2xpY2subGVmdCA8IGNvbnRhaW5tZW50WyAwIF0gKSB7XG5cdFx0XHRcdFx0cGFnZVggPSBjb250YWlubWVudFsgMCBdICsgdGhpcy5vZmZzZXQuY2xpY2subGVmdDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGV2ZW50LnBhZ2VZIC0gdGhpcy5vZmZzZXQuY2xpY2sudG9wIDwgY29udGFpbm1lbnRbIDEgXSApIHtcblx0XHRcdFx0XHRwYWdlWSA9IGNvbnRhaW5tZW50WyAxIF0gKyB0aGlzLm9mZnNldC5jbGljay50b3A7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBldmVudC5wYWdlWCAtIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPiBjb250YWlubWVudFsgMiBdICkge1xuXHRcdFx0XHRcdHBhZ2VYID0gY29udGFpbm1lbnRbIDIgXSArIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBldmVudC5wYWdlWSAtIHRoaXMub2Zmc2V0LmNsaWNrLnRvcCA+IGNvbnRhaW5tZW50WyAzIF0gKSB7XG5cdFx0XHRcdFx0cGFnZVkgPSBjb250YWlubWVudFsgMyBdICsgdGhpcy5vZmZzZXQuY2xpY2sudG9wO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggby5ncmlkICkge1xuXG5cdFx0XHRcdC8vQ2hlY2sgZm9yIGdyaWQgZWxlbWVudHMgc2V0IHRvIDAgdG8gcHJldmVudCBkaXZpZGUgYnkgMCBlcnJvciBjYXVzaW5nIGludmFsaWRcblx0XHRcdFx0Ly8gYXJndW1lbnQgZXJyb3JzIGluIElFIChzZWUgdGlja2V0ICM2OTUwKVxuXHRcdFx0XHR0b3AgPSBvLmdyaWRbIDEgXSA/IHRoaXMub3JpZ2luYWxQYWdlWSArIE1hdGgucm91bmQoICggcGFnZVkgLVxuXHRcdFx0XHRcdHRoaXMub3JpZ2luYWxQYWdlWSApIC8gby5ncmlkWyAxIF0gKSAqIG8uZ3JpZFsgMSBdIDogdGhpcy5vcmlnaW5hbFBhZ2VZO1xuXHRcdFx0XHRwYWdlWSA9IGNvbnRhaW5tZW50ID8gKCAoIHRvcCAtIHRoaXMub2Zmc2V0LmNsaWNrLnRvcCA+PSBjb250YWlubWVudFsgMSBdIHx8XG5cdFx0XHRcdFx0dG9wIC0gdGhpcy5vZmZzZXQuY2xpY2sudG9wID4gY29udGFpbm1lbnRbIDMgXSApID9cblx0XHRcdFx0XHRcdHRvcCA6XG5cdFx0XHRcdFx0XHQoICggdG9wIC0gdGhpcy5vZmZzZXQuY2xpY2sudG9wID49IGNvbnRhaW5tZW50WyAxIF0gKSA/XG5cdFx0XHRcdFx0XHRcdHRvcCAtIG8uZ3JpZFsgMSBdIDogdG9wICsgby5ncmlkWyAxIF0gKSApIDogdG9wO1xuXG5cdFx0XHRcdGxlZnQgPSBvLmdyaWRbIDAgXSA/IHRoaXMub3JpZ2luYWxQYWdlWCArXG5cdFx0XHRcdFx0TWF0aC5yb3VuZCggKCBwYWdlWCAtIHRoaXMub3JpZ2luYWxQYWdlWCApIC8gby5ncmlkWyAwIF0gKSAqIG8uZ3JpZFsgMCBdIDpcblx0XHRcdFx0XHR0aGlzLm9yaWdpbmFsUGFnZVg7XG5cdFx0XHRcdHBhZ2VYID0gY29udGFpbm1lbnQgPyAoICggbGVmdCAtIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPj0gY29udGFpbm1lbnRbIDAgXSB8fFxuXHRcdFx0XHRcdGxlZnQgLSB0aGlzLm9mZnNldC5jbGljay5sZWZ0ID4gY29udGFpbm1lbnRbIDIgXSApID9cblx0XHRcdFx0XHRcdGxlZnQgOlxuXHRcdFx0XHRcdFx0KCAoIGxlZnQgLSB0aGlzLm9mZnNldC5jbGljay5sZWZ0ID49IGNvbnRhaW5tZW50WyAwIF0gKSA/XG5cdFx0XHRcdFx0XHRcdGxlZnQgLSBvLmdyaWRbIDAgXSA6IGxlZnQgKyBvLmdyaWRbIDAgXSApICkgOiBsZWZ0O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG8uYXhpcyA9PT0gXCJ5XCIgKSB7XG5cdFx0XHRcdHBhZ2VYID0gdGhpcy5vcmlnaW5hbFBhZ2VYO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG8uYXhpcyA9PT0gXCJ4XCIgKSB7XG5cdFx0XHRcdHBhZ2VZID0gdGhpcy5vcmlnaW5hbFBhZ2VZO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IChcblxuXHRcdFx0XHQvLyBUaGUgYWJzb2x1dGUgbW91c2UgcG9zaXRpb25cblx0XHRcdFx0cGFnZVkgLVxuXG5cdFx0XHRcdC8vIENsaWNrIG9mZnNldCAocmVsYXRpdmUgdG8gdGhlIGVsZW1lbnQpXG5cdFx0XHRcdHRoaXMub2Zmc2V0LmNsaWNrLnRvcCAtXG5cblx0XHRcdFx0Ly8gT25seSBmb3IgcmVsYXRpdmUgcG9zaXRpb25lZCBub2RlczogUmVsYXRpdmUgb2Zmc2V0IGZyb20gZWxlbWVudCB0byBvZmZzZXQgcGFyZW50XG5cdFx0XHRcdHRoaXMub2Zmc2V0LnJlbGF0aXZlLnRvcCAtXG5cblx0XHRcdFx0Ly8gVGhlIG9mZnNldFBhcmVudCdzIG9mZnNldCB3aXRob3V0IGJvcmRlcnMgKG9mZnNldCArIGJvcmRlcilcblx0XHRcdFx0dGhpcy5vZmZzZXQucGFyZW50LnRvcCArXG5cdFx0XHRcdCggdGhpcy5jc3NQb3NpdGlvbiA9PT0gXCJmaXhlZFwiID9cblx0XHRcdFx0XHQtdGhpcy5vZmZzZXQuc2Nyb2xsLnRvcCA6XG5cdFx0XHRcdFx0KCBzY3JvbGxJc1Jvb3ROb2RlID8gMCA6IHRoaXMub2Zmc2V0LnNjcm9sbC50b3AgKSApXG5cdFx0XHQpLFxuXHRcdFx0bGVmdDogKFxuXG5cdFx0XHRcdC8vIFRoZSBhYnNvbHV0ZSBtb3VzZSBwb3NpdGlvblxuXHRcdFx0XHRwYWdlWCAtXG5cblx0XHRcdFx0Ly8gQ2xpY2sgb2Zmc2V0IChyZWxhdGl2ZSB0byB0aGUgZWxlbWVudClcblx0XHRcdFx0dGhpcy5vZmZzZXQuY2xpY2subGVmdCAtXG5cblx0XHRcdFx0Ly8gT25seSBmb3IgcmVsYXRpdmUgcG9zaXRpb25lZCBub2RlczogUmVsYXRpdmUgb2Zmc2V0IGZyb20gZWxlbWVudCB0byBvZmZzZXQgcGFyZW50XG5cdFx0XHRcdHRoaXMub2Zmc2V0LnJlbGF0aXZlLmxlZnQgLVxuXG5cdFx0XHRcdC8vIFRoZSBvZmZzZXRQYXJlbnQncyBvZmZzZXQgd2l0aG91dCBib3JkZXJzIChvZmZzZXQgKyBib3JkZXIpXG5cdFx0XHRcdHRoaXMub2Zmc2V0LnBhcmVudC5sZWZ0ICtcblx0XHRcdFx0KCB0aGlzLmNzc1Bvc2l0aW9uID09PSBcImZpeGVkXCIgP1xuXHRcdFx0XHRcdC10aGlzLm9mZnNldC5zY3JvbGwubGVmdCA6XG5cdFx0XHRcdFx0KCBzY3JvbGxJc1Jvb3ROb2RlID8gMCA6IHRoaXMub2Zmc2V0LnNjcm9sbC5sZWZ0ICkgKVxuXHRcdFx0KVxuXHRcdH07XG5cblx0fSxcblxuXHRfY2xlYXI6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuX3JlbW92ZUNsYXNzKCB0aGlzLmhlbHBlciwgXCJ1aS1kcmFnZ2FibGUtZHJhZ2dpbmdcIiApO1xuXHRcdGlmICggdGhpcy5oZWxwZXJbIDAgXSAhPT0gdGhpcy5lbGVtZW50WyAwIF0gJiYgIXRoaXMuY2FuY2VsSGVscGVyUmVtb3ZhbCApIHtcblx0XHRcdHRoaXMuaGVscGVyLnJlbW92ZSgpO1xuXHRcdH1cblx0XHR0aGlzLmhlbHBlciA9IG51bGw7XG5cdFx0dGhpcy5jYW5jZWxIZWxwZXJSZW1vdmFsID0gZmFsc2U7XG5cdFx0aWYgKCB0aGlzLmRlc3Ryb3lPbkNsZWFyICkge1xuXHRcdFx0dGhpcy5kZXN0cm95KCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIEZyb20gbm93IG9uIGJ1bGsgc3R1ZmYgLSBtYWlubHkgaGVscGVyc1xuXG5cdF90cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZXZlbnQsIHVpICkge1xuXHRcdHVpID0gdWkgfHwgdGhpcy5fdWlIYXNoKCk7XG5cdFx0JC51aS5wbHVnaW4uY2FsbCggdGhpcywgdHlwZSwgWyBldmVudCwgdWksIHRoaXMgXSwgdHJ1ZSApO1xuXG5cdFx0Ly8gQWJzb2x1dGUgcG9zaXRpb24gYW5kIG9mZnNldCAoc2VlICM2ODg0ICkgaGF2ZSB0byBiZSByZWNhbGN1bGF0ZWQgYWZ0ZXIgcGx1Z2luc1xuXHRcdGlmICggL14oZHJhZ3xzdGFydHxzdG9wKS8udGVzdCggdHlwZSApICkge1xuXHRcdFx0dGhpcy5wb3NpdGlvbkFicyA9IHRoaXMuX2NvbnZlcnRQb3NpdGlvblRvKCBcImFic29sdXRlXCIgKTtcblx0XHRcdHVpLm9mZnNldCA9IHRoaXMucG9zaXRpb25BYnM7XG5cdFx0fVxuXHRcdHJldHVybiAkLldpZGdldC5wcm90b3R5cGUuX3RyaWdnZXIuY2FsbCggdGhpcywgdHlwZSwgZXZlbnQsIHVpICk7XG5cdH0sXG5cblx0cGx1Z2luczoge30sXG5cblx0X3VpSGFzaDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGhlbHBlcjogdGhpcy5oZWxwZXIsXG5cdFx0XHRwb3NpdGlvbjogdGhpcy5wb3NpdGlvbixcblx0XHRcdG9yaWdpbmFsUG9zaXRpb246IHRoaXMub3JpZ2luYWxQb3NpdGlvbixcblx0XHRcdG9mZnNldDogdGhpcy5wb3NpdGlvbkFic1xuXHRcdH07XG5cdH1cblxufSApO1xuXG4kLnVpLnBsdWdpbi5hZGQoIFwiZHJhZ2dhYmxlXCIsIFwiY29ubmVjdFRvU29ydGFibGVcIiwge1xuXHRzdGFydDogZnVuY3Rpb24oIGV2ZW50LCB1aSwgZHJhZ2dhYmxlICkge1xuXHRcdHZhciB1aVNvcnRhYmxlID0gJC5leHRlbmQoIHt9LCB1aSwge1xuXHRcdFx0aXRlbTogZHJhZ2dhYmxlLmVsZW1lbnRcblx0XHR9ICk7XG5cblx0XHRkcmFnZ2FibGUuc29ydGFibGVzID0gW107XG5cdFx0JCggZHJhZ2dhYmxlLm9wdGlvbnMuY29ubmVjdFRvU29ydGFibGUgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzb3J0YWJsZSA9ICQoIHRoaXMgKS5zb3J0YWJsZSggXCJpbnN0YW5jZVwiICk7XG5cblx0XHRcdGlmICggc29ydGFibGUgJiYgIXNvcnRhYmxlLm9wdGlvbnMuZGlzYWJsZWQgKSB7XG5cdFx0XHRcdGRyYWdnYWJsZS5zb3J0YWJsZXMucHVzaCggc29ydGFibGUgKTtcblxuXHRcdFx0XHQvLyBSZWZyZXNoUG9zaXRpb25zIGlzIGNhbGxlZCBhdCBkcmFnIHN0YXJ0IHRvIHJlZnJlc2ggdGhlIGNvbnRhaW5lckNhY2hlXG5cdFx0XHRcdC8vIHdoaWNoIGlzIHVzZWQgaW4gZHJhZy4gVGhpcyBlbnN1cmVzIGl0J3MgaW5pdGlhbGl6ZWQgYW5kIHN5bmNocm9uaXplZFxuXHRcdFx0XHQvLyB3aXRoIGFueSBjaGFuZ2VzIHRoYXQgbWlnaHQgaGF2ZSBoYXBwZW5lZCBvbiB0aGUgcGFnZSBzaW5jZSBpbml0aWFsaXphdGlvbi5cblx0XHRcdFx0c29ydGFibGUucmVmcmVzaFBvc2l0aW9ucygpO1xuXHRcdFx0XHRzb3J0YWJsZS5fdHJpZ2dlciggXCJhY3RpdmF0ZVwiLCBldmVudCwgdWlTb3J0YWJsZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIGV2ZW50LCB1aSwgZHJhZ2dhYmxlICkge1xuXHRcdHZhciB1aVNvcnRhYmxlID0gJC5leHRlbmQoIHt9LCB1aSwge1xuXHRcdFx0aXRlbTogZHJhZ2dhYmxlLmVsZW1lbnRcblx0XHR9ICk7XG5cblx0XHRkcmFnZ2FibGUuY2FuY2VsSGVscGVyUmVtb3ZhbCA9IGZhbHNlO1xuXG5cdFx0JC5lYWNoKCBkcmFnZ2FibGUuc29ydGFibGVzLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzb3J0YWJsZSA9IHRoaXM7XG5cblx0XHRcdGlmICggc29ydGFibGUuaXNPdmVyICkge1xuXHRcdFx0XHRzb3J0YWJsZS5pc092ZXIgPSAwO1xuXG5cdFx0XHRcdC8vIEFsbG93IHRoaXMgc29ydGFibGUgdG8gaGFuZGxlIHJlbW92aW5nIHRoZSBoZWxwZXJcblx0XHRcdFx0ZHJhZ2dhYmxlLmNhbmNlbEhlbHBlclJlbW92YWwgPSB0cnVlO1xuXHRcdFx0XHRzb3J0YWJsZS5jYW5jZWxIZWxwZXJSZW1vdmFsID0gZmFsc2U7XG5cblx0XHRcdFx0Ly8gVXNlIF9zdG9yZWRDU1MgVG8gcmVzdG9yZSBwcm9wZXJ0aWVzIGluIHRoZSBzb3J0YWJsZSxcblx0XHRcdFx0Ly8gYXMgdGhpcyBhbHNvIGhhbmRsZXMgcmV2ZXJ0ICgjOTY3NSkgc2luY2UgdGhlIGRyYWdnYWJsZVxuXHRcdFx0XHQvLyBtYXkgaGF2ZSBtb2RpZmllZCB0aGVtIGluIHVuZXhwZWN0ZWQgd2F5cyAoIzg4MDkpXG5cdFx0XHRcdHNvcnRhYmxlLl9zdG9yZWRDU1MgPSB7XG5cdFx0XHRcdFx0cG9zaXRpb246IHNvcnRhYmxlLnBsYWNlaG9sZGVyLmNzcyggXCJwb3NpdGlvblwiICksXG5cdFx0XHRcdFx0dG9wOiBzb3J0YWJsZS5wbGFjZWhvbGRlci5jc3MoIFwidG9wXCIgKSxcblx0XHRcdFx0XHRsZWZ0OiBzb3J0YWJsZS5wbGFjZWhvbGRlci5jc3MoIFwibGVmdFwiIClcblx0XHRcdFx0fTtcblxuXHRcdFx0XHRzb3J0YWJsZS5fbW91c2VTdG9wKCBldmVudCApO1xuXG5cdFx0XHRcdC8vIE9uY2UgZHJhZyBoYXMgZW5kZWQsIHRoZSBzb3J0YWJsZSBzaG91bGQgcmV0dXJuIHRvIHVzaW5nXG5cdFx0XHRcdC8vIGl0cyBvcmlnaW5hbCBoZWxwZXIsIG5vdCB0aGUgc2hhcmVkIGhlbHBlciBmcm9tIGRyYWdnYWJsZVxuXHRcdFx0XHRzb3J0YWJsZS5vcHRpb25zLmhlbHBlciA9IHNvcnRhYmxlLm9wdGlvbnMuX2hlbHBlcjtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gUHJldmVudCB0aGlzIFNvcnRhYmxlIGZyb20gcmVtb3ZpbmcgdGhlIGhlbHBlci5cblx0XHRcdFx0Ly8gSG93ZXZlciwgZG9uJ3Qgc2V0IHRoZSBkcmFnZ2FibGUgdG8gcmVtb3ZlIHRoZSBoZWxwZXJcblx0XHRcdFx0Ly8gZWl0aGVyIGFzIGFub3RoZXIgY29ubmVjdGVkIFNvcnRhYmxlIG1heSB5ZXQgaGFuZGxlIHRoZSByZW1vdmFsLlxuXHRcdFx0XHRzb3J0YWJsZS5jYW5jZWxIZWxwZXJSZW1vdmFsID0gdHJ1ZTtcblxuXHRcdFx0XHRzb3J0YWJsZS5fdHJpZ2dlciggXCJkZWFjdGl2YXRlXCIsIGV2ZW50LCB1aVNvcnRhYmxlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRkcmFnOiBmdW5jdGlvbiggZXZlbnQsIHVpLCBkcmFnZ2FibGUgKSB7XG5cdFx0JC5lYWNoKCBkcmFnZ2FibGUuc29ydGFibGVzLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbm5lcm1vc3RJbnRlcnNlY3RpbmcgPSBmYWxzZSxcblx0XHRcdFx0c29ydGFibGUgPSB0aGlzO1xuXG5cdFx0XHQvLyBDb3B5IG92ZXIgdmFyaWFibGVzIHRoYXQgc29ydGFibGUncyBfaW50ZXJzZWN0c1dpdGggdXNlc1xuXHRcdFx0c29ydGFibGUucG9zaXRpb25BYnMgPSBkcmFnZ2FibGUucG9zaXRpb25BYnM7XG5cdFx0XHRzb3J0YWJsZS5oZWxwZXJQcm9wb3J0aW9ucyA9IGRyYWdnYWJsZS5oZWxwZXJQcm9wb3J0aW9ucztcblx0XHRcdHNvcnRhYmxlLm9mZnNldC5jbGljayA9IGRyYWdnYWJsZS5vZmZzZXQuY2xpY2s7XG5cblx0XHRcdGlmICggc29ydGFibGUuX2ludGVyc2VjdHNXaXRoKCBzb3J0YWJsZS5jb250YWluZXJDYWNoZSApICkge1xuXHRcdFx0XHRpbm5lcm1vc3RJbnRlcnNlY3RpbmcgPSB0cnVlO1xuXG5cdFx0XHRcdCQuZWFjaCggZHJhZ2dhYmxlLnNvcnRhYmxlcywgZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHQvLyBDb3B5IG92ZXIgdmFyaWFibGVzIHRoYXQgc29ydGFibGUncyBfaW50ZXJzZWN0c1dpdGggdXNlc1xuXHRcdFx0XHRcdHRoaXMucG9zaXRpb25BYnMgPSBkcmFnZ2FibGUucG9zaXRpb25BYnM7XG5cdFx0XHRcdFx0dGhpcy5oZWxwZXJQcm9wb3J0aW9ucyA9IGRyYWdnYWJsZS5oZWxwZXJQcm9wb3J0aW9ucztcblx0XHRcdFx0XHR0aGlzLm9mZnNldC5jbGljayA9IGRyYWdnYWJsZS5vZmZzZXQuY2xpY2s7XG5cblx0XHRcdFx0XHRpZiAoIHRoaXMgIT09IHNvcnRhYmxlICYmXG5cdFx0XHRcdFx0XHRcdHRoaXMuX2ludGVyc2VjdHNXaXRoKCB0aGlzLmNvbnRhaW5lckNhY2hlICkgJiZcblx0XHRcdFx0XHRcdFx0JC5jb250YWlucyggc29ydGFibGUuZWxlbWVudFsgMCBdLCB0aGlzLmVsZW1lbnRbIDAgXSApICkge1xuXHRcdFx0XHRcdFx0aW5uZXJtb3N0SW50ZXJzZWN0aW5nID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGlubmVybW9zdEludGVyc2VjdGluZztcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGlubmVybW9zdEludGVyc2VjdGluZyApIHtcblxuXHRcdFx0XHQvLyBJZiBpdCBpbnRlcnNlY3RzLCB3ZSB1c2UgYSBsaXR0bGUgaXNPdmVyIHZhcmlhYmxlIGFuZCBzZXQgaXQgb25jZSxcblx0XHRcdFx0Ly8gc28gdGhhdCB0aGUgbW92ZS1pbiBzdHVmZiBnZXRzIGZpcmVkIG9ubHkgb25jZS5cblx0XHRcdFx0aWYgKCAhc29ydGFibGUuaXNPdmVyICkge1xuXHRcdFx0XHRcdHNvcnRhYmxlLmlzT3ZlciA9IDE7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBkcmFnZ2FibGUncyBwYXJlbnQgaW4gY2FzZSB3ZSBuZWVkIHRvIHJlYXBwZW5kIHRvIGl0IGxhdGVyLlxuXHRcdFx0XHRcdGRyYWdnYWJsZS5fcGFyZW50ID0gdWkuaGVscGVyLnBhcmVudCgpO1xuXG5cdFx0XHRcdFx0c29ydGFibGUuY3VycmVudEl0ZW0gPSB1aS5oZWxwZXJcblx0XHRcdFx0XHRcdC5hcHBlbmRUbyggc29ydGFibGUuZWxlbWVudCApXG5cdFx0XHRcdFx0XHQuZGF0YSggXCJ1aS1zb3J0YWJsZS1pdGVtXCIsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGhlbHBlciBvcHRpb24gdG8gbGF0ZXIgcmVzdG9yZSBpdFxuXHRcdFx0XHRcdHNvcnRhYmxlLm9wdGlvbnMuX2hlbHBlciA9IHNvcnRhYmxlLm9wdGlvbnMuaGVscGVyO1xuXG5cdFx0XHRcdFx0c29ydGFibGUub3B0aW9ucy5oZWxwZXIgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiB1aS5oZWxwZXJbIDAgXTtcblx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0Ly8gRmlyZSB0aGUgc3RhcnQgZXZlbnRzIG9mIHRoZSBzb3J0YWJsZSB3aXRoIG91ciBwYXNzZWQgYnJvd3NlciBldmVudCxcblx0XHRcdFx0XHQvLyBhbmQgb3VyIG93biBoZWxwZXIgKHNvIGl0IGRvZXNuJ3QgY3JlYXRlIGEgbmV3IG9uZSlcblx0XHRcdFx0XHRldmVudC50YXJnZXQgPSBzb3J0YWJsZS5jdXJyZW50SXRlbVsgMCBdO1xuXHRcdFx0XHRcdHNvcnRhYmxlLl9tb3VzZUNhcHR1cmUoIGV2ZW50LCB0cnVlICk7XG5cdFx0XHRcdFx0c29ydGFibGUuX21vdXNlU3RhcnQoIGV2ZW50LCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBCZWNhdXNlIHRoZSBicm93c2VyIGV2ZW50IGlzIHdheSBvZmYgdGhlIG5ldyBhcHBlbmRlZCBwb3J0bGV0LFxuXHRcdFx0XHRcdC8vIG1vZGlmeSBuZWNlc3NhcnkgdmFyaWFibGVzIHRvIHJlZmxlY3QgdGhlIGNoYW5nZXNcblx0XHRcdFx0XHRzb3J0YWJsZS5vZmZzZXQuY2xpY2sudG9wID0gZHJhZ2dhYmxlLm9mZnNldC5jbGljay50b3A7XG5cdFx0XHRcdFx0c29ydGFibGUub2Zmc2V0LmNsaWNrLmxlZnQgPSBkcmFnZ2FibGUub2Zmc2V0LmNsaWNrLmxlZnQ7XG5cdFx0XHRcdFx0c29ydGFibGUub2Zmc2V0LnBhcmVudC5sZWZ0IC09IGRyYWdnYWJsZS5vZmZzZXQucGFyZW50LmxlZnQgLVxuXHRcdFx0XHRcdFx0c29ydGFibGUub2Zmc2V0LnBhcmVudC5sZWZ0O1xuXHRcdFx0XHRcdHNvcnRhYmxlLm9mZnNldC5wYXJlbnQudG9wIC09IGRyYWdnYWJsZS5vZmZzZXQucGFyZW50LnRvcCAtXG5cdFx0XHRcdFx0XHRzb3J0YWJsZS5vZmZzZXQucGFyZW50LnRvcDtcblxuXHRcdFx0XHRcdGRyYWdnYWJsZS5fdHJpZ2dlciggXCJ0b1NvcnRhYmxlXCIsIGV2ZW50ICk7XG5cblx0XHRcdFx0XHQvLyBJbmZvcm0gZHJhZ2dhYmxlIHRoYXQgdGhlIGhlbHBlciBpcyBpbiBhIHZhbGlkIGRyb3Agem9uZSxcblx0XHRcdFx0XHQvLyB1c2VkIHNvbGVseSBpbiB0aGUgcmV2ZXJ0IG9wdGlvbiB0byBoYW5kbGUgXCJ2YWxpZC9pbnZhbGlkXCIuXG5cdFx0XHRcdFx0ZHJhZ2dhYmxlLmRyb3BwZWQgPSBzb3J0YWJsZS5lbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gTmVlZCB0byByZWZyZXNoUG9zaXRpb25zIG9mIGFsbCBzb3J0YWJsZXMgaW4gdGhlIGNhc2UgdGhhdFxuXHRcdFx0XHRcdC8vIGFkZGluZyB0byBvbmUgc29ydGFibGUgY2hhbmdlcyB0aGUgbG9jYXRpb24gb2YgdGhlIG90aGVyIHNvcnRhYmxlcyAoIzk2NzUpXG5cdFx0XHRcdFx0JC5lYWNoKCBkcmFnZ2FibGUuc29ydGFibGVzLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHRoaXMucmVmcmVzaFBvc2l0aW9ucygpO1xuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRcdC8vIEhhY2sgc28gcmVjZWl2ZS91cGRhdGUgY2FsbGJhY2tzIHdvcmsgKG1vc3RseSlcblx0XHRcdFx0XHRkcmFnZ2FibGUuY3VycmVudEl0ZW0gPSBkcmFnZ2FibGUuZWxlbWVudDtcblx0XHRcdFx0XHRzb3J0YWJsZS5mcm9tT3V0c2lkZSA9IGRyYWdnYWJsZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggc29ydGFibGUuY3VycmVudEl0ZW0gKSB7XG5cdFx0XHRcdFx0c29ydGFibGUuX21vdXNlRHJhZyggZXZlbnQgKTtcblxuXHRcdFx0XHRcdC8vIENvcHkgdGhlIHNvcnRhYmxlJ3MgcG9zaXRpb24gYmVjYXVzZSB0aGUgZHJhZ2dhYmxlJ3MgY2FuIHBvdGVudGlhbGx5IHJlZmxlY3Rcblx0XHRcdFx0XHQvLyBhIHJlbGF0aXZlIHBvc2l0aW9uLCB3aGlsZSBzb3J0YWJsZSBpcyBhbHdheXMgYWJzb2x1dGUsIHdoaWNoIHRoZSBkcmFnZ2VkXG5cdFx0XHRcdFx0Ly8gZWxlbWVudCBoYXMgbm93IGJlY29tZS4gKCM4ODA5KVxuXHRcdFx0XHRcdHVpLnBvc2l0aW9uID0gc29ydGFibGUucG9zaXRpb247XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgZG9lc24ndCBpbnRlcnNlY3Qgd2l0aCB0aGUgc29ydGFibGUsIGFuZCBpdCBpbnRlcnNlY3RlZCBiZWZvcmUsXG5cdFx0XHRcdC8vIHdlIGZha2UgdGhlIGRyYWcgc3RvcCBvZiB0aGUgc29ydGFibGUsIGJ1dCBtYWtlIHN1cmUgaXQgZG9lc24ndCByZW1vdmVcblx0XHRcdFx0Ly8gdGhlIGhlbHBlciBieSB1c2luZyBjYW5jZWxIZWxwZXJSZW1vdmFsLlxuXHRcdFx0XHRpZiAoIHNvcnRhYmxlLmlzT3ZlciApIHtcblxuXHRcdFx0XHRcdHNvcnRhYmxlLmlzT3ZlciA9IDA7XG5cdFx0XHRcdFx0c29ydGFibGUuY2FuY2VsSGVscGVyUmVtb3ZhbCA9IHRydWU7XG5cblx0XHRcdFx0XHQvLyBDYWxsaW5nIHNvcnRhYmxlJ3MgbW91c2VTdG9wIHdvdWxkIHRyaWdnZXIgYSByZXZlcnQsXG5cdFx0XHRcdFx0Ly8gc28gcmV2ZXJ0IG11c3QgYmUgdGVtcG9yYXJpbHkgZmFsc2UgdW50aWwgYWZ0ZXIgbW91c2VTdG9wIGlzIGNhbGxlZC5cblx0XHRcdFx0XHRzb3J0YWJsZS5vcHRpb25zLl9yZXZlcnQgPSBzb3J0YWJsZS5vcHRpb25zLnJldmVydDtcblx0XHRcdFx0XHRzb3J0YWJsZS5vcHRpb25zLnJldmVydCA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0c29ydGFibGUuX3RyaWdnZXIoIFwib3V0XCIsIGV2ZW50LCBzb3J0YWJsZS5fdWlIYXNoKCBzb3J0YWJsZSApICk7XG5cdFx0XHRcdFx0c29ydGFibGUuX21vdXNlU3RvcCggZXZlbnQsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIFJlc3RvcmUgc29ydGFibGUgYmVoYXZpb3JzIHRoYXQgd2VyZSBtb2RmaWVkXG5cdFx0XHRcdFx0Ly8gd2hlbiB0aGUgZHJhZ2dhYmxlIGVudGVyZWQgdGhlIHNvcnRhYmxlIGFyZWEgKCM5NDgxKVxuXHRcdFx0XHRcdHNvcnRhYmxlLm9wdGlvbnMucmV2ZXJ0ID0gc29ydGFibGUub3B0aW9ucy5fcmV2ZXJ0O1xuXHRcdFx0XHRcdHNvcnRhYmxlLm9wdGlvbnMuaGVscGVyID0gc29ydGFibGUub3B0aW9ucy5faGVscGVyO1xuXG5cdFx0XHRcdFx0aWYgKCBzb3J0YWJsZS5wbGFjZWhvbGRlciApIHtcblx0XHRcdFx0XHRcdHNvcnRhYmxlLnBsYWNlaG9sZGVyLnJlbW92ZSgpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFJlc3RvcmUgYW5kIHJlY2FsY3VsYXRlIHRoZSBkcmFnZ2FibGUncyBvZmZzZXQgY29uc2lkZXJpbmcgdGhlIHNvcnRhYmxlXG5cdFx0XHRcdFx0Ly8gbWF5IGhhdmUgbW9kaWZpZWQgdGhlbSBpbiB1bmV4cGVjdGVkIHdheXMuICgjODgwOSwgIzEwNjY5KVxuXHRcdFx0XHRcdHVpLmhlbHBlci5hcHBlbmRUbyggZHJhZ2dhYmxlLl9wYXJlbnQgKTtcblx0XHRcdFx0XHRkcmFnZ2FibGUuX3JlZnJlc2hPZmZzZXRzKCBldmVudCApO1xuXHRcdFx0XHRcdHVpLnBvc2l0aW9uID0gZHJhZ2dhYmxlLl9nZW5lcmF0ZVBvc2l0aW9uKCBldmVudCwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0ZHJhZ2dhYmxlLl90cmlnZ2VyKCBcImZyb21Tb3J0YWJsZVwiLCBldmVudCApO1xuXG5cdFx0XHRcdFx0Ly8gSW5mb3JtIGRyYWdnYWJsZSB0aGF0IHRoZSBoZWxwZXIgaXMgbm8gbG9uZ2VyIGluIGEgdmFsaWQgZHJvcCB6b25lXG5cdFx0XHRcdFx0ZHJhZ2dhYmxlLmRyb3BwZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRcdC8vIE5lZWQgdG8gcmVmcmVzaFBvc2l0aW9ucyBvZiBhbGwgc29ydGFibGVzIGp1c3QgaW4gY2FzZSByZW1vdmluZ1xuXHRcdFx0XHRcdC8vIGZyb20gb25lIHNvcnRhYmxlIGNoYW5nZXMgdGhlIGxvY2F0aW9uIG9mIG90aGVyIHNvcnRhYmxlcyAoIzk2NzUpXG5cdFx0XHRcdFx0JC5lYWNoKCBkcmFnZ2FibGUuc29ydGFibGVzLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHRoaXMucmVmcmVzaFBvc2l0aW9ucygpO1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG4kLnVpLnBsdWdpbi5hZGQoIFwiZHJhZ2dhYmxlXCIsIFwiY3Vyc29yXCIsIHtcblx0c3RhcnQ6IGZ1bmN0aW9uKCBldmVudCwgdWksIGluc3RhbmNlICkge1xuXHRcdHZhciB0ID0gJCggXCJib2R5XCIgKSxcblx0XHRcdG8gPSBpbnN0YW5jZS5vcHRpb25zO1xuXG5cdFx0aWYgKCB0LmNzcyggXCJjdXJzb3JcIiApICkge1xuXHRcdFx0by5fY3Vyc29yID0gdC5jc3MoIFwiY3Vyc29yXCIgKTtcblx0XHR9XG5cdFx0dC5jc3MoIFwiY3Vyc29yXCIsIG8uY3Vyc29yICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCBldmVudCwgdWksIGluc3RhbmNlICkge1xuXHRcdHZhciBvID0gaW5zdGFuY2Uub3B0aW9ucztcblx0XHRpZiAoIG8uX2N1cnNvciApIHtcblx0XHRcdCQoIFwiYm9keVwiICkuY3NzKCBcImN1cnNvclwiLCBvLl9jdXJzb3IgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuJC51aS5wbHVnaW4uYWRkKCBcImRyYWdnYWJsZVwiLCBcIm9wYWNpdHlcIiwge1xuXHRzdGFydDogZnVuY3Rpb24oIGV2ZW50LCB1aSwgaW5zdGFuY2UgKSB7XG5cdFx0dmFyIHQgPSAkKCB1aS5oZWxwZXIgKSxcblx0XHRcdG8gPSBpbnN0YW5jZS5vcHRpb25zO1xuXHRcdGlmICggdC5jc3MoIFwib3BhY2l0eVwiICkgKSB7XG5cdFx0XHRvLl9vcGFjaXR5ID0gdC5jc3MoIFwib3BhY2l0eVwiICk7XG5cdFx0fVxuXHRcdHQuY3NzKCBcIm9wYWNpdHlcIiwgby5vcGFjaXR5ICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCBldmVudCwgdWksIGluc3RhbmNlICkge1xuXHRcdHZhciBvID0gaW5zdGFuY2Uub3B0aW9ucztcblx0XHRpZiAoIG8uX29wYWNpdHkgKSB7XG5cdFx0XHQkKCB1aS5oZWxwZXIgKS5jc3MoIFwib3BhY2l0eVwiLCBvLl9vcGFjaXR5ICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbiQudWkucGx1Z2luLmFkZCggXCJkcmFnZ2FibGVcIiwgXCJzY3JvbGxcIiwge1xuXHRzdGFydDogZnVuY3Rpb24oIGV2ZW50LCB1aSwgaSApIHtcblx0XHRpZiAoICFpLnNjcm9sbFBhcmVudE5vdEhpZGRlbiApIHtcblx0XHRcdGkuc2Nyb2xsUGFyZW50Tm90SGlkZGVuID0gaS5oZWxwZXIuc2Nyb2xsUGFyZW50KCBmYWxzZSApO1xuXHRcdH1cblxuXHRcdGlmICggaS5zY3JvbGxQYXJlbnROb3RIaWRkZW5bIDAgXSAhPT0gaS5kb2N1bWVudFsgMCBdICYmXG5cdFx0XHRcdGkuc2Nyb2xsUGFyZW50Tm90SGlkZGVuWyAwIF0udGFnTmFtZSAhPT0gXCJIVE1MXCIgKSB7XG5cdFx0XHRpLm92ZXJmbG93T2Zmc2V0ID0gaS5zY3JvbGxQYXJlbnROb3RIaWRkZW4ub2Zmc2V0KCk7XG5cdFx0fVxuXHR9LFxuXHRkcmFnOiBmdW5jdGlvbiggZXZlbnQsIHVpLCBpICApIHtcblxuXHRcdHZhciBvID0gaS5vcHRpb25zLFxuXHRcdFx0c2Nyb2xsZWQgPSBmYWxzZSxcblx0XHRcdHNjcm9sbFBhcmVudCA9IGkuc2Nyb2xsUGFyZW50Tm90SGlkZGVuWyAwIF0sXG5cdFx0XHRkb2N1bWVudCA9IGkuZG9jdW1lbnRbIDAgXTtcblxuXHRcdGlmICggc2Nyb2xsUGFyZW50ICE9PSBkb2N1bWVudCAmJiBzY3JvbGxQYXJlbnQudGFnTmFtZSAhPT0gXCJIVE1MXCIgKSB7XG5cdFx0XHRpZiAoICFvLmF4aXMgfHwgby5heGlzICE9PSBcInhcIiApIHtcblx0XHRcdFx0aWYgKCAoIGkub3ZlcmZsb3dPZmZzZXQudG9wICsgc2Nyb2xsUGFyZW50Lm9mZnNldEhlaWdodCApIC0gZXZlbnQucGFnZVkgPFxuXHRcdFx0XHRcdFx0by5zY3JvbGxTZW5zaXRpdml0eSApIHtcblx0XHRcdFx0XHRzY3JvbGxQYXJlbnQuc2Nyb2xsVG9wID0gc2Nyb2xsZWQgPSBzY3JvbGxQYXJlbnQuc2Nyb2xsVG9wICsgby5zY3JvbGxTcGVlZDtcblx0XHRcdFx0fSBlbHNlIGlmICggZXZlbnQucGFnZVkgLSBpLm92ZXJmbG93T2Zmc2V0LnRvcCA8IG8uc2Nyb2xsU2Vuc2l0aXZpdHkgKSB7XG5cdFx0XHRcdFx0c2Nyb2xsUGFyZW50LnNjcm9sbFRvcCA9IHNjcm9sbGVkID0gc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCAtIG8uc2Nyb2xsU3BlZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCAhby5heGlzIHx8IG8uYXhpcyAhPT0gXCJ5XCIgKSB7XG5cdFx0XHRcdGlmICggKCBpLm92ZXJmbG93T2Zmc2V0LmxlZnQgKyBzY3JvbGxQYXJlbnQub2Zmc2V0V2lkdGggKSAtIGV2ZW50LnBhZ2VYIDxcblx0XHRcdFx0XHRcdG8uc2Nyb2xsU2Vuc2l0aXZpdHkgKSB7XG5cdFx0XHRcdFx0c2Nyb2xsUGFyZW50LnNjcm9sbExlZnQgPSBzY3JvbGxlZCA9IHNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0ICsgby5zY3JvbGxTcGVlZDtcblx0XHRcdFx0fSBlbHNlIGlmICggZXZlbnQucGFnZVggLSBpLm92ZXJmbG93T2Zmc2V0LmxlZnQgPCBvLnNjcm9sbFNlbnNpdGl2aXR5ICkge1xuXHRcdFx0XHRcdHNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0ID0gc2Nyb2xsZWQgPSBzY3JvbGxQYXJlbnQuc2Nyb2xsTGVmdCAtIG8uc2Nyb2xsU3BlZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggIW8uYXhpcyB8fCBvLmF4aXMgIT09IFwieFwiICkge1xuXHRcdFx0XHRpZiAoIGV2ZW50LnBhZ2VZIC0gJCggZG9jdW1lbnQgKS5zY3JvbGxUb3AoKSA8IG8uc2Nyb2xsU2Vuc2l0aXZpdHkgKSB7XG5cdFx0XHRcdFx0c2Nyb2xsZWQgPSAkKCBkb2N1bWVudCApLnNjcm9sbFRvcCggJCggZG9jdW1lbnQgKS5zY3JvbGxUb3AoKSAtIG8uc2Nyb2xsU3BlZWQgKTtcblx0XHRcdFx0fSBlbHNlIGlmICggJCggd2luZG93ICkuaGVpZ2h0KCkgLSAoIGV2ZW50LnBhZ2VZIC0gJCggZG9jdW1lbnQgKS5zY3JvbGxUb3AoKSApIDxcblx0XHRcdFx0XHRcdG8uc2Nyb2xsU2Vuc2l0aXZpdHkgKSB7XG5cdFx0XHRcdFx0c2Nyb2xsZWQgPSAkKCBkb2N1bWVudCApLnNjcm9sbFRvcCggJCggZG9jdW1lbnQgKS5zY3JvbGxUb3AoKSArIG8uc2Nyb2xsU3BlZWQgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoICFvLmF4aXMgfHwgby5heGlzICE9PSBcInlcIiApIHtcblx0XHRcdFx0aWYgKCBldmVudC5wYWdlWCAtICQoIGRvY3VtZW50ICkuc2Nyb2xsTGVmdCgpIDwgby5zY3JvbGxTZW5zaXRpdml0eSApIHtcblx0XHRcdFx0XHRzY3JvbGxlZCA9ICQoIGRvY3VtZW50ICkuc2Nyb2xsTGVmdChcblx0XHRcdFx0XHRcdCQoIGRvY3VtZW50ICkuc2Nyb2xsTGVmdCgpIC0gby5zY3JvbGxTcGVlZFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoICQoIHdpbmRvdyApLndpZHRoKCkgLSAoIGV2ZW50LnBhZ2VYIC0gJCggZG9jdW1lbnQgKS5zY3JvbGxMZWZ0KCkgKSA8XG5cdFx0XHRcdFx0XHRvLnNjcm9sbFNlbnNpdGl2aXR5ICkge1xuXHRcdFx0XHRcdHNjcm9sbGVkID0gJCggZG9jdW1lbnQgKS5zY3JvbGxMZWZ0KFxuXHRcdFx0XHRcdFx0JCggZG9jdW1lbnQgKS5zY3JvbGxMZWZ0KCkgKyBvLnNjcm9sbFNwZWVkXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBzY3JvbGxlZCAhPT0gZmFsc2UgJiYgJC51aS5kZG1hbmFnZXIgJiYgIW8uZHJvcEJlaGF2aW91ciApIHtcblx0XHRcdCQudWkuZGRtYW5hZ2VyLnByZXBhcmVPZmZzZXRzKCBpLCBldmVudCApO1xuXHRcdH1cblxuXHR9XG59ICk7XG5cbiQudWkucGx1Z2luLmFkZCggXCJkcmFnZ2FibGVcIiwgXCJzbmFwXCIsIHtcblx0c3RhcnQ6IGZ1bmN0aW9uKCBldmVudCwgdWksIGkgKSB7XG5cblx0XHR2YXIgbyA9IGkub3B0aW9ucztcblxuXHRcdGkuc25hcEVsZW1lbnRzID0gW107XG5cblx0XHQkKCBvLnNuYXAuY29uc3RydWN0b3IgIT09IFN0cmluZyA/ICggby5zbmFwLml0ZW1zIHx8IFwiOmRhdGEodWktZHJhZ2dhYmxlKVwiICkgOiBvLnNuYXAgKVxuXHRcdFx0LmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgJHQgPSAkKCB0aGlzICksXG5cdFx0XHRcdFx0JG8gPSAkdC5vZmZzZXQoKTtcblx0XHRcdFx0aWYgKCB0aGlzICE9PSBpLmVsZW1lbnRbIDAgXSApIHtcblx0XHRcdFx0XHRpLnNuYXBFbGVtZW50cy5wdXNoKCB7XG5cdFx0XHRcdFx0XHRpdGVtOiB0aGlzLFxuXHRcdFx0XHRcdFx0d2lkdGg6ICR0Lm91dGVyV2lkdGgoKSwgaGVpZ2h0OiAkdC5vdXRlckhlaWdodCgpLFxuXHRcdFx0XHRcdFx0dG9wOiAkby50b3AsIGxlZnQ6ICRvLmxlZnRcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblxuXHR9LFxuXHRkcmFnOiBmdW5jdGlvbiggZXZlbnQsIHVpLCBpbnN0ICkge1xuXG5cdFx0dmFyIHRzLCBicywgbHMsIHJzLCBsLCByLCB0LCBiLCBpLCBmaXJzdCxcblx0XHRcdG8gPSBpbnN0Lm9wdGlvbnMsXG5cdFx0XHRkID0gby5zbmFwVG9sZXJhbmNlLFxuXHRcdFx0eDEgPSB1aS5vZmZzZXQubGVmdCwgeDIgPSB4MSArIGluc3QuaGVscGVyUHJvcG9ydGlvbnMud2lkdGgsXG5cdFx0XHR5MSA9IHVpLm9mZnNldC50b3AsIHkyID0geTEgKyBpbnN0LmhlbHBlclByb3BvcnRpb25zLmhlaWdodDtcblxuXHRcdGZvciAoIGkgPSBpbnN0LnNuYXBFbGVtZW50cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSApIHtcblxuXHRcdFx0bCA9IGluc3Quc25hcEVsZW1lbnRzWyBpIF0ubGVmdCAtIGluc3QubWFyZ2lucy5sZWZ0O1xuXHRcdFx0ciA9IGwgKyBpbnN0LnNuYXBFbGVtZW50c1sgaSBdLndpZHRoO1xuXHRcdFx0dCA9IGluc3Quc25hcEVsZW1lbnRzWyBpIF0udG9wIC0gaW5zdC5tYXJnaW5zLnRvcDtcblx0XHRcdGIgPSB0ICsgaW5zdC5zbmFwRWxlbWVudHNbIGkgXS5oZWlnaHQ7XG5cblx0XHRcdGlmICggeDIgPCBsIC0gZCB8fCB4MSA+IHIgKyBkIHx8IHkyIDwgdCAtIGQgfHwgeTEgPiBiICsgZCB8fFxuXHRcdFx0XHRcdCEkLmNvbnRhaW5zKCBpbnN0LnNuYXBFbGVtZW50c1sgaSBdLml0ZW0ub3duZXJEb2N1bWVudCxcblx0XHRcdFx0XHRpbnN0LnNuYXBFbGVtZW50c1sgaSBdLml0ZW0gKSApIHtcblx0XHRcdFx0aWYgKCBpbnN0LnNuYXBFbGVtZW50c1sgaSBdLnNuYXBwaW5nICkge1xuXHRcdFx0XHRcdCggaW5zdC5vcHRpb25zLnNuYXAucmVsZWFzZSAmJlxuXHRcdFx0XHRcdFx0aW5zdC5vcHRpb25zLnNuYXAucmVsZWFzZS5jYWxsKFxuXHRcdFx0XHRcdFx0XHRpbnN0LmVsZW1lbnQsXG5cdFx0XHRcdFx0XHRcdGV2ZW50LFxuXHRcdFx0XHRcdFx0XHQkLmV4dGVuZCggaW5zdC5fdWlIYXNoKCksIHsgc25hcEl0ZW06IGluc3Quc25hcEVsZW1lbnRzWyBpIF0uaXRlbSB9IClcblx0XHRcdFx0XHRcdCkgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpbnN0LnNuYXBFbGVtZW50c1sgaSBdLnNuYXBwaW5nID0gZmFsc2U7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG8uc25hcE1vZGUgIT09IFwiaW5uZXJcIiApIHtcblx0XHRcdFx0dHMgPSBNYXRoLmFicyggdCAtIHkyICkgPD0gZDtcblx0XHRcdFx0YnMgPSBNYXRoLmFicyggYiAtIHkxICkgPD0gZDtcblx0XHRcdFx0bHMgPSBNYXRoLmFicyggbCAtIHgyICkgPD0gZDtcblx0XHRcdFx0cnMgPSBNYXRoLmFicyggciAtIHgxICkgPD0gZDtcblx0XHRcdFx0aWYgKCB0cyApIHtcblx0XHRcdFx0XHR1aS5wb3NpdGlvbi50b3AgPSBpbnN0Ll9jb252ZXJ0UG9zaXRpb25UbyggXCJyZWxhdGl2ZVwiLCB7XG5cdFx0XHRcdFx0XHR0b3A6IHQgLSBpbnN0LmhlbHBlclByb3BvcnRpb25zLmhlaWdodCxcblx0XHRcdFx0XHRcdGxlZnQ6IDBcblx0XHRcdFx0XHR9ICkudG9wO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggYnMgKSB7XG5cdFx0XHRcdFx0dWkucG9zaXRpb24udG9wID0gaW5zdC5fY29udmVydFBvc2l0aW9uVG8oIFwicmVsYXRpdmVcIiwge1xuXHRcdFx0XHRcdFx0dG9wOiBiLFxuXHRcdFx0XHRcdFx0bGVmdDogMFxuXHRcdFx0XHRcdH0gKS50b3A7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBscyApIHtcblx0XHRcdFx0XHR1aS5wb3NpdGlvbi5sZWZ0ID0gaW5zdC5fY29udmVydFBvc2l0aW9uVG8oIFwicmVsYXRpdmVcIiwge1xuXHRcdFx0XHRcdFx0dG9wOiAwLFxuXHRcdFx0XHRcdFx0bGVmdDogbCAtIGluc3QuaGVscGVyUHJvcG9ydGlvbnMud2lkdGhcblx0XHRcdFx0XHR9ICkubGVmdDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIHJzICkge1xuXHRcdFx0XHRcdHVpLnBvc2l0aW9uLmxlZnQgPSBpbnN0Ll9jb252ZXJ0UG9zaXRpb25UbyggXCJyZWxhdGl2ZVwiLCB7XG5cdFx0XHRcdFx0XHR0b3A6IDAsXG5cdFx0XHRcdFx0XHRsZWZ0OiByXG5cdFx0XHRcdFx0fSApLmxlZnQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zmlyc3QgPSAoIHRzIHx8IGJzIHx8IGxzIHx8IHJzICk7XG5cblx0XHRcdGlmICggby5zbmFwTW9kZSAhPT0gXCJvdXRlclwiICkge1xuXHRcdFx0XHR0cyA9IE1hdGguYWJzKCB0IC0geTEgKSA8PSBkO1xuXHRcdFx0XHRicyA9IE1hdGguYWJzKCBiIC0geTIgKSA8PSBkO1xuXHRcdFx0XHRscyA9IE1hdGguYWJzKCBsIC0geDEgKSA8PSBkO1xuXHRcdFx0XHRycyA9IE1hdGguYWJzKCByIC0geDIgKSA8PSBkO1xuXHRcdFx0XHRpZiAoIHRzICkge1xuXHRcdFx0XHRcdHVpLnBvc2l0aW9uLnRvcCA9IGluc3QuX2NvbnZlcnRQb3NpdGlvblRvKCBcInJlbGF0aXZlXCIsIHtcblx0XHRcdFx0XHRcdHRvcDogdCxcblx0XHRcdFx0XHRcdGxlZnQ6IDBcblx0XHRcdFx0XHR9ICkudG9wO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggYnMgKSB7XG5cdFx0XHRcdFx0dWkucG9zaXRpb24udG9wID0gaW5zdC5fY29udmVydFBvc2l0aW9uVG8oIFwicmVsYXRpdmVcIiwge1xuXHRcdFx0XHRcdFx0dG9wOiBiIC0gaW5zdC5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQsXG5cdFx0XHRcdFx0XHRsZWZ0OiAwXG5cdFx0XHRcdFx0fSApLnRvcDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGxzICkge1xuXHRcdFx0XHRcdHVpLnBvc2l0aW9uLmxlZnQgPSBpbnN0Ll9jb252ZXJ0UG9zaXRpb25UbyggXCJyZWxhdGl2ZVwiLCB7XG5cdFx0XHRcdFx0XHR0b3A6IDAsXG5cdFx0XHRcdFx0XHRsZWZ0OiBsXG5cdFx0XHRcdFx0fSApLmxlZnQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBycyApIHtcblx0XHRcdFx0XHR1aS5wb3NpdGlvbi5sZWZ0ID0gaW5zdC5fY29udmVydFBvc2l0aW9uVG8oIFwicmVsYXRpdmVcIiwge1xuXHRcdFx0XHRcdFx0dG9wOiAwLFxuXHRcdFx0XHRcdFx0bGVmdDogciAtIGluc3QuaGVscGVyUHJvcG9ydGlvbnMud2lkdGhcblx0XHRcdFx0XHR9ICkubGVmdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoICFpbnN0LnNuYXBFbGVtZW50c1sgaSBdLnNuYXBwaW5nICYmICggdHMgfHwgYnMgfHwgbHMgfHwgcnMgfHwgZmlyc3QgKSApIHtcblx0XHRcdFx0KCBpbnN0Lm9wdGlvbnMuc25hcC5zbmFwICYmXG5cdFx0XHRcdFx0aW5zdC5vcHRpb25zLnNuYXAuc25hcC5jYWxsKFxuXHRcdFx0XHRcdFx0aW5zdC5lbGVtZW50LFxuXHRcdFx0XHRcdFx0ZXZlbnQsXG5cdFx0XHRcdFx0XHQkLmV4dGVuZCggaW5zdC5fdWlIYXNoKCksIHtcblx0XHRcdFx0XHRcdFx0c25hcEl0ZW06IGluc3Quc25hcEVsZW1lbnRzWyBpIF0uaXRlbVxuXHRcdFx0XHRcdFx0fSApICkgKTtcblx0XHRcdH1cblx0XHRcdGluc3Quc25hcEVsZW1lbnRzWyBpIF0uc25hcHBpbmcgPSAoIHRzIHx8IGJzIHx8IGxzIHx8IHJzIHx8IGZpcnN0ICk7XG5cblx0XHR9XG5cblx0fVxufSApO1xuXG4kLnVpLnBsdWdpbi5hZGQoIFwiZHJhZ2dhYmxlXCIsIFwic3RhY2tcIiwge1xuXHRzdGFydDogZnVuY3Rpb24oIGV2ZW50LCB1aSwgaW5zdGFuY2UgKSB7XG5cdFx0dmFyIG1pbixcblx0XHRcdG8gPSBpbnN0YW5jZS5vcHRpb25zLFxuXHRcdFx0Z3JvdXAgPSAkLm1ha2VBcnJheSggJCggby5zdGFjayApICkuc29ydCggZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRcdHJldHVybiAoIHBhcnNlSW50KCAkKCBhICkuY3NzKCBcInpJbmRleFwiICksIDEwICkgfHwgMCApIC1cblx0XHRcdFx0XHQoIHBhcnNlSW50KCAkKCBiICkuY3NzKCBcInpJbmRleFwiICksIDEwICkgfHwgMCApO1xuXHRcdFx0fSApO1xuXG5cdFx0aWYgKCAhZ3JvdXAubGVuZ3RoICkgeyByZXR1cm47IH1cblxuXHRcdG1pbiA9IHBhcnNlSW50KCAkKCBncm91cFsgMCBdICkuY3NzKCBcInpJbmRleFwiICksIDEwICkgfHwgMDtcblx0XHQkKCBncm91cCApLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0JCggdGhpcyApLmNzcyggXCJ6SW5kZXhcIiwgbWluICsgaSApO1xuXHRcdH0gKTtcblx0XHR0aGlzLmNzcyggXCJ6SW5kZXhcIiwgKCBtaW4gKyBncm91cC5sZW5ndGggKSApO1xuXHR9XG59ICk7XG5cbiQudWkucGx1Z2luLmFkZCggXCJkcmFnZ2FibGVcIiwgXCJ6SW5kZXhcIiwge1xuXHRzdGFydDogZnVuY3Rpb24oIGV2ZW50LCB1aSwgaW5zdGFuY2UgKSB7XG5cdFx0dmFyIHQgPSAkKCB1aS5oZWxwZXIgKSxcblx0XHRcdG8gPSBpbnN0YW5jZS5vcHRpb25zO1xuXG5cdFx0aWYgKCB0LmNzcyggXCJ6SW5kZXhcIiApICkge1xuXHRcdFx0by5fekluZGV4ID0gdC5jc3MoIFwiekluZGV4XCIgKTtcblx0XHR9XG5cdFx0dC5jc3MoIFwiekluZGV4XCIsIG8uekluZGV4ICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCBldmVudCwgdWksIGluc3RhbmNlICkge1xuXHRcdHZhciBvID0gaW5zdGFuY2Uub3B0aW9ucztcblxuXHRcdGlmICggby5fekluZGV4ICkge1xuXHRcdFx0JCggdWkuaGVscGVyICkuY3NzKCBcInpJbmRleFwiLCBvLl96SW5kZXggKTtcblx0XHR9XG5cdH1cbn0gKTtcblxudmFyIHdpZGdldHNEcmFnZ2FibGUgPSAkLnVpLmRyYWdnYWJsZTtcblxuXG4vKiFcbiAqIGpRdWVyeSBVSSBEcm9wcGFibGUgMS4xMi4xXG4gKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqL1xuXG4vLz4+bGFiZWw6IERyb3BwYWJsZVxuLy8+Pmdyb3VwOiBJbnRlcmFjdGlvbnNcbi8vPj5kZXNjcmlwdGlvbjogRW5hYmxlcyBkcm9wIHRhcmdldHMgZm9yIGRyYWdnYWJsZSBlbGVtZW50cy5cbi8vPj5kb2NzOiBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9kcm9wcGFibGUvXG4vLz4+ZGVtb3M6IGh0dHA6Ly9qcXVlcnl1aS5jb20vZHJvcHBhYmxlL1xuXG5cblxuJC53aWRnZXQoIFwidWkuZHJvcHBhYmxlXCIsIHtcblx0dmVyc2lvbjogXCIxLjEyLjFcIixcblx0d2lkZ2V0RXZlbnRQcmVmaXg6IFwiZHJvcFwiLFxuXHRvcHRpb25zOiB7XG5cdFx0YWNjZXB0OiBcIipcIixcblx0XHRhZGRDbGFzc2VzOiB0cnVlLFxuXHRcdGdyZWVkeTogZmFsc2UsXG5cdFx0c2NvcGU6IFwiZGVmYXVsdFwiLFxuXHRcdHRvbGVyYW5jZTogXCJpbnRlcnNlY3RcIixcblxuXHRcdC8vIENhbGxiYWNrc1xuXHRcdGFjdGl2YXRlOiBudWxsLFxuXHRcdGRlYWN0aXZhdGU6IG51bGwsXG5cdFx0ZHJvcDogbnVsbCxcblx0XHRvdXQ6IG51bGwsXG5cdFx0b3ZlcjogbnVsbFxuXHR9LFxuXHRfY3JlYXRlOiBmdW5jdGlvbigpIHtcblxuXHRcdHZhciBwcm9wb3J0aW9ucyxcblx0XHRcdG8gPSB0aGlzLm9wdGlvbnMsXG5cdFx0XHRhY2NlcHQgPSBvLmFjY2VwdDtcblxuXHRcdHRoaXMuaXNvdmVyID0gZmFsc2U7XG5cdFx0dGhpcy5pc291dCA9IHRydWU7XG5cblx0XHR0aGlzLmFjY2VwdCA9ICQuaXNGdW5jdGlvbiggYWNjZXB0ICkgPyBhY2NlcHQgOiBmdW5jdGlvbiggZCApIHtcblx0XHRcdHJldHVybiBkLmlzKCBhY2NlcHQgKTtcblx0XHR9O1xuXG5cdFx0dGhpcy5wcm9wb3J0aW9ucyA9IGZ1bmN0aW9uKCAvKiB2YWx1ZVRvV3JpdGUgKi8gKSB7XG5cdFx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cblx0XHRcdFx0Ly8gU3RvcmUgdGhlIGRyb3BwYWJsZSdzIHByb3BvcnRpb25zXG5cdFx0XHRcdHByb3BvcnRpb25zID0gYXJndW1lbnRzWyAwIF07XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIFJldHJpZXZlIG9yIGRlcml2ZSB0aGUgZHJvcHBhYmxlJ3MgcHJvcG9ydGlvbnNcblx0XHRcdFx0cmV0dXJuIHByb3BvcnRpb25zID9cblx0XHRcdFx0XHRwcm9wb3J0aW9ucyA6XG5cdFx0XHRcdFx0cHJvcG9ydGlvbnMgPSB7XG5cdFx0XHRcdFx0XHR3aWR0aDogdGhpcy5lbGVtZW50WyAwIF0ub2Zmc2V0V2lkdGgsXG5cdFx0XHRcdFx0XHRoZWlnaHQ6IHRoaXMuZWxlbWVudFsgMCBdLm9mZnNldEhlaWdodFxuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHRoaXMuX2FkZFRvTWFuYWdlciggby5zY29wZSApO1xuXG5cdFx0by5hZGRDbGFzc2VzICYmIHRoaXMuX2FkZENsYXNzKCBcInVpLWRyb3BwYWJsZVwiICk7XG5cblx0fSxcblxuXHRfYWRkVG9NYW5hZ2VyOiBmdW5jdGlvbiggc2NvcGUgKSB7XG5cblx0XHQvLyBBZGQgdGhlIHJlZmVyZW5jZSBhbmQgcG9zaXRpb25zIHRvIHRoZSBtYW5hZ2VyXG5cdFx0JC51aS5kZG1hbmFnZXIuZHJvcHBhYmxlc1sgc2NvcGUgXSA9ICQudWkuZGRtYW5hZ2VyLmRyb3BwYWJsZXNbIHNjb3BlIF0gfHwgW107XG5cdFx0JC51aS5kZG1hbmFnZXIuZHJvcHBhYmxlc1sgc2NvcGUgXS5wdXNoKCB0aGlzICk7XG5cdH0sXG5cblx0X3NwbGljZTogZnVuY3Rpb24oIGRyb3AgKSB7XG5cdFx0dmFyIGkgPSAwO1xuXHRcdGZvciAoIDsgaSA8IGRyb3AubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRpZiAoIGRyb3BbIGkgXSA9PT0gdGhpcyApIHtcblx0XHRcdFx0ZHJvcC5zcGxpY2UoIGksIDEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0X2Rlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBkcm9wID0gJC51aS5kZG1hbmFnZXIuZHJvcHBhYmxlc1sgdGhpcy5vcHRpb25zLnNjb3BlIF07XG5cblx0XHR0aGlzLl9zcGxpY2UoIGRyb3AgKTtcblx0fSxcblxuXHRfc2V0T3B0aW9uOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblxuXHRcdGlmICgga2V5ID09PSBcImFjY2VwdFwiICkge1xuXHRcdFx0dGhpcy5hY2NlcHQgPSAkLmlzRnVuY3Rpb24oIHZhbHVlICkgPyB2YWx1ZSA6IGZ1bmN0aW9uKCBkICkge1xuXHRcdFx0XHRyZXR1cm4gZC5pcyggdmFsdWUgKTtcblx0XHRcdH07XG5cdFx0fSBlbHNlIGlmICgga2V5ID09PSBcInNjb3BlXCIgKSB7XG5cdFx0XHR2YXIgZHJvcCA9ICQudWkuZGRtYW5hZ2VyLmRyb3BwYWJsZXNbIHRoaXMub3B0aW9ucy5zY29wZSBdO1xuXG5cdFx0XHR0aGlzLl9zcGxpY2UoIGRyb3AgKTtcblx0XHRcdHRoaXMuX2FkZFRvTWFuYWdlciggdmFsdWUgKTtcblx0XHR9XG5cblx0XHR0aGlzLl9zdXBlcigga2V5LCB2YWx1ZSApO1xuXHR9LFxuXG5cdF9hY3RpdmF0ZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBkcmFnZ2FibGUgPSAkLnVpLmRkbWFuYWdlci5jdXJyZW50O1xuXG5cdFx0dGhpcy5fYWRkQWN0aXZlQ2xhc3MoKTtcblx0XHRpZiAoIGRyYWdnYWJsZSApIHtcblx0XHRcdHRoaXMuX3RyaWdnZXIoIFwiYWN0aXZhdGVcIiwgZXZlbnQsIHRoaXMudWkoIGRyYWdnYWJsZSApICk7XG5cdFx0fVxuXHR9LFxuXG5cdF9kZWFjdGl2YXRlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGRyYWdnYWJsZSA9ICQudWkuZGRtYW5hZ2VyLmN1cnJlbnQ7XG5cblx0XHR0aGlzLl9yZW1vdmVBY3RpdmVDbGFzcygpO1xuXHRcdGlmICggZHJhZ2dhYmxlICkge1xuXHRcdFx0dGhpcy5fdHJpZ2dlciggXCJkZWFjdGl2YXRlXCIsIGV2ZW50LCB0aGlzLnVpKCBkcmFnZ2FibGUgKSApO1xuXHRcdH1cblx0fSxcblxuXHRfb3ZlcjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0dmFyIGRyYWdnYWJsZSA9ICQudWkuZGRtYW5hZ2VyLmN1cnJlbnQ7XG5cblx0XHQvLyBCYWlsIGlmIGRyYWdnYWJsZSBhbmQgZHJvcHBhYmxlIGFyZSBzYW1lIGVsZW1lbnRcblx0XHRpZiAoICFkcmFnZ2FibGUgfHwgKCBkcmFnZ2FibGUuY3VycmVudEl0ZW0gfHxcblx0XHRcdFx0ZHJhZ2dhYmxlLmVsZW1lbnQgKVsgMCBdID09PSB0aGlzLmVsZW1lbnRbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuYWNjZXB0LmNhbGwoIHRoaXMuZWxlbWVudFsgMCBdLCAoIGRyYWdnYWJsZS5jdXJyZW50SXRlbSB8fFxuXHRcdFx0XHRkcmFnZ2FibGUuZWxlbWVudCApICkgKSB7XG5cdFx0XHR0aGlzLl9hZGRIb3ZlckNsYXNzKCk7XG5cdFx0XHR0aGlzLl90cmlnZ2VyKCBcIm92ZXJcIiwgZXZlbnQsIHRoaXMudWkoIGRyYWdnYWJsZSApICk7XG5cdFx0fVxuXG5cdH0sXG5cblx0X291dDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0dmFyIGRyYWdnYWJsZSA9ICQudWkuZGRtYW5hZ2VyLmN1cnJlbnQ7XG5cblx0XHQvLyBCYWlsIGlmIGRyYWdnYWJsZSBhbmQgZHJvcHBhYmxlIGFyZSBzYW1lIGVsZW1lbnRcblx0XHRpZiAoICFkcmFnZ2FibGUgfHwgKCBkcmFnZ2FibGUuY3VycmVudEl0ZW0gfHxcblx0XHRcdFx0ZHJhZ2dhYmxlLmVsZW1lbnQgKVsgMCBdID09PSB0aGlzLmVsZW1lbnRbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuYWNjZXB0LmNhbGwoIHRoaXMuZWxlbWVudFsgMCBdLCAoIGRyYWdnYWJsZS5jdXJyZW50SXRlbSB8fFxuXHRcdFx0XHRkcmFnZ2FibGUuZWxlbWVudCApICkgKSB7XG5cdFx0XHR0aGlzLl9yZW1vdmVIb3ZlckNsYXNzKCk7XG5cdFx0XHR0aGlzLl90cmlnZ2VyKCBcIm91dFwiLCBldmVudCwgdGhpcy51aSggZHJhZ2dhYmxlICkgKTtcblx0XHR9XG5cblx0fSxcblxuXHRfZHJvcDogZnVuY3Rpb24oIGV2ZW50LCBjdXN0b20gKSB7XG5cblx0XHR2YXIgZHJhZ2dhYmxlID0gY3VzdG9tIHx8ICQudWkuZGRtYW5hZ2VyLmN1cnJlbnQsXG5cdFx0XHRjaGlsZHJlbkludGVyc2VjdGlvbiA9IGZhbHNlO1xuXG5cdFx0Ly8gQmFpbCBpZiBkcmFnZ2FibGUgYW5kIGRyb3BwYWJsZSBhcmUgc2FtZSBlbGVtZW50XG5cdFx0aWYgKCAhZHJhZ2dhYmxlIHx8ICggZHJhZ2dhYmxlLmN1cnJlbnRJdGVtIHx8XG5cdFx0XHRcdGRyYWdnYWJsZS5lbGVtZW50IClbIDAgXSA9PT0gdGhpcy5lbGVtZW50WyAwIF0gKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0dGhpcy5lbGVtZW50XG5cdFx0XHQuZmluZCggXCI6ZGF0YSh1aS1kcm9wcGFibGUpXCIgKVxuXHRcdFx0Lm5vdCggXCIudWktZHJhZ2dhYmxlLWRyYWdnaW5nXCIgKVxuXHRcdFx0LmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgaW5zdCA9ICQoIHRoaXMgKS5kcm9wcGFibGUoIFwiaW5zdGFuY2VcIiApO1xuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0aW5zdC5vcHRpb25zLmdyZWVkeSAmJlxuXHRcdFx0XHRcdCFpbnN0Lm9wdGlvbnMuZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRpbnN0Lm9wdGlvbnMuc2NvcGUgPT09IGRyYWdnYWJsZS5vcHRpb25zLnNjb3BlICYmXG5cdFx0XHRcdFx0aW5zdC5hY2NlcHQuY2FsbChcblx0XHRcdFx0XHRcdGluc3QuZWxlbWVudFsgMCBdLCAoIGRyYWdnYWJsZS5jdXJyZW50SXRlbSB8fCBkcmFnZ2FibGUuZWxlbWVudCApXG5cdFx0XHRcdFx0KSAmJlxuXHRcdFx0XHRcdGludGVyc2VjdChcblx0XHRcdFx0XHRcdGRyYWdnYWJsZSxcblx0XHRcdFx0XHRcdCQuZXh0ZW5kKCBpbnN0LCB7IG9mZnNldDogaW5zdC5lbGVtZW50Lm9mZnNldCgpIH0gKSxcblx0XHRcdFx0XHRcdGluc3Qub3B0aW9ucy50b2xlcmFuY2UsIGV2ZW50XG5cdFx0XHRcdFx0KVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRjaGlsZHJlbkludGVyc2VjdGlvbiA9IHRydWU7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlOyB9XG5cdFx0XHR9ICk7XG5cdFx0aWYgKCBjaGlsZHJlbkludGVyc2VjdGlvbiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuYWNjZXB0LmNhbGwoIHRoaXMuZWxlbWVudFsgMCBdLFxuXHRcdFx0XHQoIGRyYWdnYWJsZS5jdXJyZW50SXRlbSB8fCBkcmFnZ2FibGUuZWxlbWVudCApICkgKSB7XG5cdFx0XHR0aGlzLl9yZW1vdmVBY3RpdmVDbGFzcygpO1xuXHRcdFx0dGhpcy5fcmVtb3ZlSG92ZXJDbGFzcygpO1xuXG5cdFx0XHR0aGlzLl90cmlnZ2VyKCBcImRyb3BcIiwgZXZlbnQsIHRoaXMudWkoIGRyYWdnYWJsZSApICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5lbGVtZW50O1xuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblxuXHR9LFxuXG5cdHVpOiBmdW5jdGlvbiggYyApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZHJhZ2dhYmxlOiAoIGMuY3VycmVudEl0ZW0gfHwgYy5lbGVtZW50ICksXG5cdFx0XHRoZWxwZXI6IGMuaGVscGVyLFxuXHRcdFx0cG9zaXRpb246IGMucG9zaXRpb24sXG5cdFx0XHRvZmZzZXQ6IGMucG9zaXRpb25BYnNcblx0XHR9O1xuXHR9LFxuXG5cdC8vIEV4dGVuc2lvbiBwb2ludHMganVzdCB0byBtYWtlIGJhY2tjb21wYXQgc2FuZSBhbmQgYXZvaWQgZHVwbGljYXRpbmcgbG9naWNcblx0Ly8gVE9ETzogUmVtb3ZlIGluIDEuMTMgYWxvbmcgd2l0aCBjYWxsIHRvIGl0IGJlbG93XG5cdF9hZGRIb3ZlckNsYXNzOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLl9hZGRDbGFzcyggXCJ1aS1kcm9wcGFibGUtaG92ZXJcIiApO1xuXHR9LFxuXG5cdF9yZW1vdmVIb3ZlckNsYXNzOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLl9yZW1vdmVDbGFzcyggXCJ1aS1kcm9wcGFibGUtaG92ZXJcIiApO1xuXHR9LFxuXG5cdF9hZGRBY3RpdmVDbGFzczogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5fYWRkQ2xhc3MoIFwidWktZHJvcHBhYmxlLWFjdGl2ZVwiICk7XG5cdH0sXG5cblx0X3JlbW92ZUFjdGl2ZUNsYXNzOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLl9yZW1vdmVDbGFzcyggXCJ1aS1kcm9wcGFibGUtYWN0aXZlXCIgKTtcblx0fVxufSApO1xuXG52YXIgaW50ZXJzZWN0ID0gJC51aS5pbnRlcnNlY3QgPSAoIGZ1bmN0aW9uKCkge1xuXHRmdW5jdGlvbiBpc092ZXJBeGlzKCB4LCByZWZlcmVuY2UsIHNpemUgKSB7XG5cdFx0cmV0dXJuICggeCA+PSByZWZlcmVuY2UgKSAmJiAoIHggPCAoIHJlZmVyZW5jZSArIHNpemUgKSApO1xuXHR9XG5cblx0cmV0dXJuIGZ1bmN0aW9uKCBkcmFnZ2FibGUsIGRyb3BwYWJsZSwgdG9sZXJhbmNlTW9kZSwgZXZlbnQgKSB7XG5cblx0XHRpZiAoICFkcm9wcGFibGUub2Zmc2V0ICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHZhciB4MSA9ICggZHJhZ2dhYmxlLnBvc2l0aW9uQWJzIHx8XG5cdFx0XHRcdGRyYWdnYWJsZS5wb3NpdGlvbi5hYnNvbHV0ZSApLmxlZnQgKyBkcmFnZ2FibGUubWFyZ2lucy5sZWZ0LFxuXHRcdFx0eTEgPSAoIGRyYWdnYWJsZS5wb3NpdGlvbkFicyB8fFxuXHRcdFx0XHRkcmFnZ2FibGUucG9zaXRpb24uYWJzb2x1dGUgKS50b3AgKyBkcmFnZ2FibGUubWFyZ2lucy50b3AsXG5cdFx0XHR4MiA9IHgxICsgZHJhZ2dhYmxlLmhlbHBlclByb3BvcnRpb25zLndpZHRoLFxuXHRcdFx0eTIgPSB5MSArIGRyYWdnYWJsZS5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQsXG5cdFx0XHRsID0gZHJvcHBhYmxlLm9mZnNldC5sZWZ0LFxuXHRcdFx0dCA9IGRyb3BwYWJsZS5vZmZzZXQudG9wLFxuXHRcdFx0ciA9IGwgKyBkcm9wcGFibGUucHJvcG9ydGlvbnMoKS53aWR0aCxcblx0XHRcdGIgPSB0ICsgZHJvcHBhYmxlLnByb3BvcnRpb25zKCkuaGVpZ2h0O1xuXG5cdFx0c3dpdGNoICggdG9sZXJhbmNlTW9kZSApIHtcblx0XHRjYXNlIFwiZml0XCI6XG5cdFx0XHRyZXR1cm4gKCBsIDw9IHgxICYmIHgyIDw9IHIgJiYgdCA8PSB5MSAmJiB5MiA8PSBiICk7XG5cdFx0Y2FzZSBcImludGVyc2VjdFwiOlxuXHRcdFx0cmV0dXJuICggbCA8IHgxICsgKCBkcmFnZ2FibGUuaGVscGVyUHJvcG9ydGlvbnMud2lkdGggLyAyICkgJiYgLy8gUmlnaHQgSGFsZlxuXHRcdFx0XHR4MiAtICggZHJhZ2dhYmxlLmhlbHBlclByb3BvcnRpb25zLndpZHRoIC8gMiApIDwgciAmJiAvLyBMZWZ0IEhhbGZcblx0XHRcdFx0dCA8IHkxICsgKCBkcmFnZ2FibGUuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0IC8gMiApICYmIC8vIEJvdHRvbSBIYWxmXG5cdFx0XHRcdHkyIC0gKCBkcmFnZ2FibGUuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0IC8gMiApIDwgYiApOyAvLyBUb3AgSGFsZlxuXHRcdGNhc2UgXCJwb2ludGVyXCI6XG5cdFx0XHRyZXR1cm4gaXNPdmVyQXhpcyggZXZlbnQucGFnZVksIHQsIGRyb3BwYWJsZS5wcm9wb3J0aW9ucygpLmhlaWdodCApICYmXG5cdFx0XHRcdGlzT3ZlckF4aXMoIGV2ZW50LnBhZ2VYLCBsLCBkcm9wcGFibGUucHJvcG9ydGlvbnMoKS53aWR0aCApO1xuXHRcdGNhc2UgXCJ0b3VjaFwiOlxuXHRcdFx0cmV0dXJuIChcblx0XHRcdFx0KCB5MSA+PSB0ICYmIHkxIDw9IGIgKSB8fCAvLyBUb3AgZWRnZSB0b3VjaGluZ1xuXHRcdFx0XHQoIHkyID49IHQgJiYgeTIgPD0gYiApIHx8IC8vIEJvdHRvbSBlZGdlIHRvdWNoaW5nXG5cdFx0XHRcdCggeTEgPCB0ICYmIHkyID4gYiApIC8vIFN1cnJvdW5kZWQgdmVydGljYWxseVxuXHRcdFx0KSAmJiAoXG5cdFx0XHRcdCggeDEgPj0gbCAmJiB4MSA8PSByICkgfHwgLy8gTGVmdCBlZGdlIHRvdWNoaW5nXG5cdFx0XHRcdCggeDIgPj0gbCAmJiB4MiA8PSByICkgfHwgLy8gUmlnaHQgZWRnZSB0b3VjaGluZ1xuXHRcdFx0XHQoIHgxIDwgbCAmJiB4MiA+IHIgKSAvLyBTdXJyb3VuZGVkIGhvcml6b250YWxseVxuXHRcdFx0KTtcblx0XHRkZWZhdWx0OlxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fTtcbn0gKSgpO1xuXG4vKlxuXHRUaGlzIG1hbmFnZXIgdHJhY2tzIG9mZnNldHMgb2YgZHJhZ2dhYmxlcyBhbmQgZHJvcHBhYmxlc1xuKi9cbiQudWkuZGRtYW5hZ2VyID0ge1xuXHRjdXJyZW50OiBudWxsLFxuXHRkcm9wcGFibGVzOiB7IFwiZGVmYXVsdFwiOiBbXSB9LFxuXHRwcmVwYXJlT2Zmc2V0czogZnVuY3Rpb24oIHQsIGV2ZW50ICkge1xuXG5cdFx0dmFyIGksIGosXG5cdFx0XHRtID0gJC51aS5kZG1hbmFnZXIuZHJvcHBhYmxlc1sgdC5vcHRpb25zLnNjb3BlIF0gfHwgW10sXG5cdFx0XHR0eXBlID0gZXZlbnQgPyBldmVudC50eXBlIDogbnVsbCwgLy8gd29ya2Fyb3VuZCBmb3IgIzIzMTdcblx0XHRcdGxpc3QgPSAoIHQuY3VycmVudEl0ZW0gfHwgdC5lbGVtZW50ICkuZmluZCggXCI6ZGF0YSh1aS1kcm9wcGFibGUpXCIgKS5hZGRCYWNrKCk7XG5cblx0XHRkcm9wcGFibGVzTG9vcDogZm9yICggaSA9IDA7IGkgPCBtLmxlbmd0aDsgaSsrICkge1xuXG5cdFx0XHQvLyBObyBkaXNhYmxlZCBhbmQgbm9uLWFjY2VwdGVkXG5cdFx0XHRpZiAoIG1bIGkgXS5vcHRpb25zLmRpc2FibGVkIHx8ICggdCAmJiAhbVsgaSBdLmFjY2VwdC5jYWxsKCBtWyBpIF0uZWxlbWVudFsgMCBdLFxuXHRcdFx0XHRcdCggdC5jdXJyZW50SXRlbSB8fCB0LmVsZW1lbnQgKSApICkgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IGVsZW1lbnRzIGluIHRoZSBjdXJyZW50IGRyYWdnZWQgaXRlbVxuXHRcdFx0Zm9yICggaiA9IDA7IGogPCBsaXN0Lmxlbmd0aDsgaisrICkge1xuXHRcdFx0XHRpZiAoIGxpc3RbIGogXSA9PT0gbVsgaSBdLmVsZW1lbnRbIDAgXSApIHtcblx0XHRcdFx0XHRtWyBpIF0ucHJvcG9ydGlvbnMoKS5oZWlnaHQgPSAwO1xuXHRcdFx0XHRcdGNvbnRpbnVlIGRyb3BwYWJsZXNMb29wO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdG1bIGkgXS52aXNpYmxlID0gbVsgaSBdLmVsZW1lbnQuY3NzKCBcImRpc3BsYXlcIiApICE9PSBcIm5vbmVcIjtcblx0XHRcdGlmICggIW1bIGkgXS52aXNpYmxlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWN0aXZhdGUgdGhlIGRyb3BwYWJsZSBpZiB1c2VkIGRpcmVjdGx5IGZyb20gZHJhZ2dhYmxlc1xuXHRcdFx0aWYgKCB0eXBlID09PSBcIm1vdXNlZG93blwiICkge1xuXHRcdFx0XHRtWyBpIF0uX2FjdGl2YXRlLmNhbGwoIG1bIGkgXSwgZXZlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0bVsgaSBdLm9mZnNldCA9IG1bIGkgXS5lbGVtZW50Lm9mZnNldCgpO1xuXHRcdFx0bVsgaSBdLnByb3BvcnRpb25zKCB7XG5cdFx0XHRcdHdpZHRoOiBtWyBpIF0uZWxlbWVudFsgMCBdLm9mZnNldFdpZHRoLFxuXHRcdFx0XHRoZWlnaHQ6IG1bIGkgXS5lbGVtZW50WyAwIF0ub2Zmc2V0SGVpZ2h0XG5cdFx0XHR9ICk7XG5cblx0XHR9XG5cblx0fSxcblx0ZHJvcDogZnVuY3Rpb24oIGRyYWdnYWJsZSwgZXZlbnQgKSB7XG5cblx0XHR2YXIgZHJvcHBlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIGEgY29weSBvZiB0aGUgZHJvcHBhYmxlcyBpbiBjYXNlIHRoZSBsaXN0IGNoYW5nZXMgZHVyaW5nIHRoZSBkcm9wICgjOTExNilcblx0XHQkLmVhY2goICggJC51aS5kZG1hbmFnZXIuZHJvcHBhYmxlc1sgZHJhZ2dhYmxlLm9wdGlvbnMuc2NvcGUgXSB8fCBbXSApLnNsaWNlKCksIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRpZiAoICF0aGlzLm9wdGlvbnMgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGlmICggIXRoaXMub3B0aW9ucy5kaXNhYmxlZCAmJiB0aGlzLnZpc2libGUgJiZcblx0XHRcdFx0XHRpbnRlcnNlY3QoIGRyYWdnYWJsZSwgdGhpcywgdGhpcy5vcHRpb25zLnRvbGVyYW5jZSwgZXZlbnQgKSApIHtcblx0XHRcdFx0ZHJvcHBlZCA9IHRoaXMuX2Ryb3AuY2FsbCggdGhpcywgZXZlbnQgKSB8fCBkcm9wcGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoICF0aGlzLm9wdGlvbnMuZGlzYWJsZWQgJiYgdGhpcy52aXNpYmxlICYmIHRoaXMuYWNjZXB0LmNhbGwoIHRoaXMuZWxlbWVudFsgMCBdLFxuXHRcdFx0XHRcdCggZHJhZ2dhYmxlLmN1cnJlbnRJdGVtIHx8IGRyYWdnYWJsZS5lbGVtZW50ICkgKSApIHtcblx0XHRcdFx0dGhpcy5pc291dCA9IHRydWU7XG5cdFx0XHRcdHRoaXMuaXNvdmVyID0gZmFsc2U7XG5cdFx0XHRcdHRoaXMuX2RlYWN0aXZhdGUuY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHRcdH1cblxuXHRcdH0gKTtcblx0XHRyZXR1cm4gZHJvcHBlZDtcblxuXHR9LFxuXHRkcmFnU3RhcnQ6IGZ1bmN0aW9uKCBkcmFnZ2FibGUsIGV2ZW50ICkge1xuXG5cdFx0Ly8gTGlzdGVuIGZvciBzY3JvbGxpbmcgc28gdGhhdCBpZiB0aGUgZHJhZ2dpbmcgY2F1c2VzIHNjcm9sbGluZyB0aGUgcG9zaXRpb24gb2YgdGhlXG5cdFx0Ly8gZHJvcHBhYmxlcyBjYW4gYmUgcmVjYWxjdWxhdGVkIChzZWUgIzUwMDMpXG5cdFx0ZHJhZ2dhYmxlLmVsZW1lbnQucGFyZW50c1VudGlsKCBcImJvZHlcIiApLm9uKCBcInNjcm9sbC5kcm9wcGFibGVcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFkcmFnZ2FibGUub3B0aW9ucy5yZWZyZXNoUG9zaXRpb25zICkge1xuXHRcdFx0XHQkLnVpLmRkbWFuYWdlci5wcmVwYXJlT2Zmc2V0cyggZHJhZ2dhYmxlLCBldmVudCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0ZHJhZzogZnVuY3Rpb24oIGRyYWdnYWJsZSwgZXZlbnQgKSB7XG5cblx0XHQvLyBJZiB5b3UgaGF2ZSBhIGhpZ2hseSBkeW5hbWljIHBhZ2UsIHlvdSBtaWdodCB0cnkgdGhpcyBvcHRpb24uIEl0IHJlbmRlcnMgcG9zaXRpb25zXG5cdFx0Ly8gZXZlcnkgdGltZSB5b3UgbW92ZSB0aGUgbW91c2UuXG5cdFx0aWYgKCBkcmFnZ2FibGUub3B0aW9ucy5yZWZyZXNoUG9zaXRpb25zICkge1xuXHRcdFx0JC51aS5kZG1hbmFnZXIucHJlcGFyZU9mZnNldHMoIGRyYWdnYWJsZSwgZXZlbnQgKTtcblx0XHR9XG5cblx0XHQvLyBSdW4gdGhyb3VnaCBhbGwgZHJvcHBhYmxlcyBhbmQgY2hlY2sgdGhlaXIgcG9zaXRpb25zIGJhc2VkIG9uIHNwZWNpZmljIHRvbGVyYW5jZSBvcHRpb25zXG5cdFx0JC5lYWNoKCAkLnVpLmRkbWFuYWdlci5kcm9wcGFibGVzWyBkcmFnZ2FibGUub3B0aW9ucy5zY29wZSBdIHx8IFtdLCBmdW5jdGlvbigpIHtcblxuXHRcdFx0aWYgKCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgfHwgdGhpcy5ncmVlZHlDaGlsZCB8fCAhdGhpcy52aXNpYmxlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHZhciBwYXJlbnRJbnN0YW5jZSwgc2NvcGUsIHBhcmVudCxcblx0XHRcdFx0aW50ZXJzZWN0cyA9IGludGVyc2VjdCggZHJhZ2dhYmxlLCB0aGlzLCB0aGlzLm9wdGlvbnMudG9sZXJhbmNlLCBldmVudCApLFxuXHRcdFx0XHRjID0gIWludGVyc2VjdHMgJiYgdGhpcy5pc292ZXIgP1xuXHRcdFx0XHRcdFwiaXNvdXRcIiA6XG5cdFx0XHRcdFx0KCBpbnRlcnNlY3RzICYmICF0aGlzLmlzb3ZlciA/IFwiaXNvdmVyXCIgOiBudWxsICk7XG5cdFx0XHRpZiAoICFjICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGhpcy5vcHRpb25zLmdyZWVkeSApIHtcblxuXHRcdFx0XHQvLyBmaW5kIGRyb3BwYWJsZSBwYXJlbnRzIHdpdGggc2FtZSBzY29wZVxuXHRcdFx0XHRzY29wZSA9IHRoaXMub3B0aW9ucy5zY29wZTtcblx0XHRcdFx0cGFyZW50ID0gdGhpcy5lbGVtZW50LnBhcmVudHMoIFwiOmRhdGEodWktZHJvcHBhYmxlKVwiICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gJCggdGhpcyApLmRyb3BwYWJsZSggXCJpbnN0YW5jZVwiICkub3B0aW9ucy5zY29wZSA9PT0gc2NvcGU7XG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRpZiAoIHBhcmVudC5sZW5ndGggKSB7XG5cdFx0XHRcdFx0cGFyZW50SW5zdGFuY2UgPSAkKCBwYXJlbnRbIDAgXSApLmRyb3BwYWJsZSggXCJpbnN0YW5jZVwiICk7XG5cdFx0XHRcdFx0cGFyZW50SW5zdGFuY2UuZ3JlZWR5Q2hpbGQgPSAoIGMgPT09IFwiaXNvdmVyXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZSBqdXN0IG1vdmVkIGludG8gYSBncmVlZHkgY2hpbGRcblx0XHRcdGlmICggcGFyZW50SW5zdGFuY2UgJiYgYyA9PT0gXCJpc292ZXJcIiApIHtcblx0XHRcdFx0cGFyZW50SW5zdGFuY2UuaXNvdmVyID0gZmFsc2U7XG5cdFx0XHRcdHBhcmVudEluc3RhbmNlLmlzb3V0ID0gdHJ1ZTtcblx0XHRcdFx0cGFyZW50SW5zdGFuY2UuX291dC5jYWxsKCBwYXJlbnRJbnN0YW5jZSwgZXZlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpc1sgYyBdID0gdHJ1ZTtcblx0XHRcdHRoaXNbIGMgPT09IFwiaXNvdXRcIiA/IFwiaXNvdmVyXCIgOiBcImlzb3V0XCIgXSA9IGZhbHNlO1xuXHRcdFx0dGhpc1sgYyA9PT0gXCJpc292ZXJcIiA/IFwiX292ZXJcIiA6IFwiX291dFwiIF0uY2FsbCggdGhpcywgZXZlbnQgKTtcblxuXHRcdFx0Ly8gV2UganVzdCBtb3ZlZCBvdXQgb2YgYSBncmVlZHkgY2hpbGRcblx0XHRcdGlmICggcGFyZW50SW5zdGFuY2UgJiYgYyA9PT0gXCJpc291dFwiICkge1xuXHRcdFx0XHRwYXJlbnRJbnN0YW5jZS5pc291dCA9IGZhbHNlO1xuXHRcdFx0XHRwYXJlbnRJbnN0YW5jZS5pc292ZXIgPSB0cnVlO1xuXHRcdFx0XHRwYXJlbnRJbnN0YW5jZS5fb3Zlci5jYWxsKCBwYXJlbnRJbnN0YW5jZSwgZXZlbnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSxcblx0ZHJhZ1N0b3A6IGZ1bmN0aW9uKCBkcmFnZ2FibGUsIGV2ZW50ICkge1xuXHRcdGRyYWdnYWJsZS5lbGVtZW50LnBhcmVudHNVbnRpbCggXCJib2R5XCIgKS5vZmYoIFwic2Nyb2xsLmRyb3BwYWJsZVwiICk7XG5cblx0XHQvLyBDYWxsIHByZXBhcmVPZmZzZXRzIG9uZSBmaW5hbCB0aW1lIHNpbmNlIElFIGRvZXMgbm90IGZpcmUgcmV0dXJuIHNjcm9sbCBldmVudHMgd2hlblxuXHRcdC8vIG92ZXJmbG93IHdhcyBjYXVzZWQgYnkgZHJhZyAoc2VlICM1MDAzKVxuXHRcdGlmICggIWRyYWdnYWJsZS5vcHRpb25zLnJlZnJlc2hQb3NpdGlvbnMgKSB7XG5cdFx0XHQkLnVpLmRkbWFuYWdlci5wcmVwYXJlT2Zmc2V0cyggZHJhZ2dhYmxlLCBldmVudCApO1xuXHRcdH1cblx0fVxufTtcblxuLy8gREVQUkVDQVRFRFxuLy8gVE9ETzogc3dpdGNoIHJldHVybiBiYWNrIHRvIHdpZGdldCBkZWNsYXJhdGlvbiBhdCB0b3Agb2YgZmlsZSB3aGVuIHRoaXMgaXMgcmVtb3ZlZFxuaWYgKCAkLnVpQmFja0NvbXBhdCAhPT0gZmFsc2UgKSB7XG5cblx0Ly8gQmFja2NvbXBhdCBmb3IgYWN0aXZlQ2xhc3MgYW5kIGhvdmVyQ2xhc3Mgb3B0aW9uc1xuXHQkLndpZGdldCggXCJ1aS5kcm9wcGFibGVcIiwgJC51aS5kcm9wcGFibGUsIHtcblx0XHRvcHRpb25zOiB7XG5cdFx0XHRob3ZlckNsYXNzOiBmYWxzZSxcblx0XHRcdGFjdGl2ZUNsYXNzOiBmYWxzZVxuXHRcdH0sXG5cdFx0X2FkZEFjdGl2ZUNsYXNzOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuX3N1cGVyKCk7XG5cdFx0XHRpZiAoIHRoaXMub3B0aW9ucy5hY3RpdmVDbGFzcyApIHtcblx0XHRcdFx0dGhpcy5lbGVtZW50LmFkZENsYXNzKCB0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdF9yZW1vdmVBY3RpdmVDbGFzczogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLl9zdXBlcigpO1xuXHRcdFx0aWYgKCB0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MgKSB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5yZW1vdmVDbGFzcyggdGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfYWRkSG92ZXJDbGFzczogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLl9zdXBlcigpO1xuXHRcdFx0aWYgKCB0aGlzLm9wdGlvbnMuaG92ZXJDbGFzcyApIHtcblx0XHRcdFx0dGhpcy5lbGVtZW50LmFkZENsYXNzKCB0aGlzLm9wdGlvbnMuaG92ZXJDbGFzcyApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0X3JlbW92ZUhvdmVyQ2xhc3M6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5fc3VwZXIoKTtcblx0XHRcdGlmICggdGhpcy5vcHRpb25zLmhvdmVyQ2xhc3MgKSB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5yZW1vdmVDbGFzcyggdGhpcy5vcHRpb25zLmhvdmVyQ2xhc3MgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxudmFyIHdpZGdldHNEcm9wcGFibGUgPSAkLnVpLmRyb3BwYWJsZTtcblxuXG4vKiFcbiAqIGpRdWVyeSBVSSBSZXNpemFibGUgMS4xMi4xXG4gKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqL1xuXG4vLz4+bGFiZWw6IFJlc2l6YWJsZVxuLy8+Pmdyb3VwOiBJbnRlcmFjdGlvbnNcbi8vPj5kZXNjcmlwdGlvbjogRW5hYmxlcyByZXNpemUgZnVuY3Rpb25hbGl0eSBmb3IgYW55IGVsZW1lbnQuXG4vLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vcmVzaXphYmxlL1xuLy8+PmRlbW9zOiBodHRwOi8vanF1ZXJ5dWkuY29tL3Jlc2l6YWJsZS9cbi8vPj5jc3Muc3RydWN0dXJlOiAuLi8uLi90aGVtZXMvYmFzZS9jb3JlLmNzc1xuLy8+PmNzcy5zdHJ1Y3R1cmU6IC4uLy4uL3RoZW1lcy9iYXNlL3Jlc2l6YWJsZS5jc3Ncbi8vPj5jc3MudGhlbWU6IC4uLy4uL3RoZW1lcy9iYXNlL3RoZW1lLmNzc1xuXG5cblxuJC53aWRnZXQoIFwidWkucmVzaXphYmxlXCIsICQudWkubW91c2UsIHtcblx0dmVyc2lvbjogXCIxLjEyLjFcIixcblx0d2lkZ2V0RXZlbnRQcmVmaXg6IFwicmVzaXplXCIsXG5cdG9wdGlvbnM6IHtcblx0XHRhbHNvUmVzaXplOiBmYWxzZSxcblx0XHRhbmltYXRlOiBmYWxzZSxcblx0XHRhbmltYXRlRHVyYXRpb246IFwic2xvd1wiLFxuXHRcdGFuaW1hdGVFYXNpbmc6IFwic3dpbmdcIixcblx0XHRhc3BlY3RSYXRpbzogZmFsc2UsXG5cdFx0YXV0b0hpZGU6IGZhbHNlLFxuXHRcdGNsYXNzZXM6IHtcblx0XHRcdFwidWktcmVzaXphYmxlLXNlXCI6IFwidWktaWNvbiB1aS1pY29uLWdyaXBzbWFsbC1kaWFnb25hbC1zZVwiXG5cdFx0fSxcblx0XHRjb250YWlubWVudDogZmFsc2UsXG5cdFx0Z2hvc3Q6IGZhbHNlLFxuXHRcdGdyaWQ6IGZhbHNlLFxuXHRcdGhhbmRsZXM6IFwiZSxzLHNlXCIsXG5cdFx0aGVscGVyOiBmYWxzZSxcblx0XHRtYXhIZWlnaHQ6IG51bGwsXG5cdFx0bWF4V2lkdGg6IG51bGwsXG5cdFx0bWluSGVpZ2h0OiAxMCxcblx0XHRtaW5XaWR0aDogMTAsXG5cblx0XHQvLyBTZWUgIzc5NjBcblx0XHR6SW5kZXg6IDkwLFxuXG5cdFx0Ly8gQ2FsbGJhY2tzXG5cdFx0cmVzaXplOiBudWxsLFxuXHRcdHN0YXJ0OiBudWxsLFxuXHRcdHN0b3A6IG51bGxcblx0fSxcblxuXHRfbnVtOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIHBhcnNlRmxvYXQoIHZhbHVlICkgfHwgMDtcblx0fSxcblxuXHRfaXNOdW1iZXI6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gIWlzTmFOKCBwYXJzZUZsb2F0KCB2YWx1ZSApICk7XG5cdH0sXG5cblx0X2hhc1Njcm9sbDogZnVuY3Rpb24oIGVsLCBhICkge1xuXG5cdFx0aWYgKCAkKCBlbCApLmNzcyggXCJvdmVyZmxvd1wiICkgPT09IFwiaGlkZGVuXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0dmFyIHNjcm9sbCA9ICggYSAmJiBhID09PSBcImxlZnRcIiApID8gXCJzY3JvbGxMZWZ0XCIgOiBcInNjcm9sbFRvcFwiLFxuXHRcdFx0aGFzID0gZmFsc2U7XG5cblx0XHRpZiAoIGVsWyBzY3JvbGwgXSA+IDAgKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBUT0RPOiBkZXRlcm1pbmUgd2hpY2ggY2FzZXMgYWN0dWFsbHkgY2F1c2UgdGhpcyB0byBoYXBwZW5cblx0XHQvLyBpZiB0aGUgZWxlbWVudCBkb2Vzbid0IGhhdmUgdGhlIHNjcm9sbCBzZXQsIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvXG5cdFx0Ly8gc2V0IHRoZSBzY3JvbGxcblx0XHRlbFsgc2Nyb2xsIF0gPSAxO1xuXHRcdGhhcyA9ICggZWxbIHNjcm9sbCBdID4gMCApO1xuXHRcdGVsWyBzY3JvbGwgXSA9IDA7XG5cdFx0cmV0dXJuIGhhcztcblx0fSxcblxuXHRfY3JlYXRlOiBmdW5jdGlvbigpIHtcblxuXHRcdHZhciBtYXJnaW5zLFxuXHRcdFx0byA9IHRoaXMub3B0aW9ucyxcblx0XHRcdHRoYXQgPSB0aGlzO1xuXHRcdHRoaXMuX2FkZENsYXNzKCBcInVpLXJlc2l6YWJsZVwiICk7XG5cblx0XHQkLmV4dGVuZCggdGhpcywge1xuXHRcdFx0X2FzcGVjdFJhdGlvOiAhISggby5hc3BlY3RSYXRpbyApLFxuXHRcdFx0YXNwZWN0UmF0aW86IG8uYXNwZWN0UmF0aW8sXG5cdFx0XHRvcmlnaW5hbEVsZW1lbnQ6IHRoaXMuZWxlbWVudCxcblx0XHRcdF9wcm9wb3J0aW9uYWxseVJlc2l6ZUVsZW1lbnRzOiBbXSxcblx0XHRcdF9oZWxwZXI6IG8uaGVscGVyIHx8IG8uZ2hvc3QgfHwgby5hbmltYXRlID8gby5oZWxwZXIgfHwgXCJ1aS1yZXNpemFibGUtaGVscGVyXCIgOiBudWxsXG5cdFx0fSApO1xuXG5cdFx0Ly8gV3JhcCB0aGUgZWxlbWVudCBpZiBpdCBjYW5ub3QgaG9sZCBjaGlsZCBub2Rlc1xuXHRcdGlmICggdGhpcy5lbGVtZW50WyAwIF0ubm9kZU5hbWUubWF0Y2goIC9eKGNhbnZhc3x0ZXh0YXJlYXxpbnB1dHxzZWxlY3R8YnV0dG9ufGltZykkL2kgKSApIHtcblxuXHRcdFx0dGhpcy5lbGVtZW50LndyYXAoXG5cdFx0XHRcdCQoIFwiPGRpdiBjbGFzcz0ndWktd3JhcHBlcicgc3R5bGU9J292ZXJmbG93OiBoaWRkZW47Jz48L2Rpdj5cIiApLmNzcygge1xuXHRcdFx0XHRcdHBvc2l0aW9uOiB0aGlzLmVsZW1lbnQuY3NzKCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdFx0XHR3aWR0aDogdGhpcy5lbGVtZW50Lm91dGVyV2lkdGgoKSxcblx0XHRcdFx0XHRoZWlnaHQ6IHRoaXMuZWxlbWVudC5vdXRlckhlaWdodCgpLFxuXHRcdFx0XHRcdHRvcDogdGhpcy5lbGVtZW50LmNzcyggXCJ0b3BcIiApLFxuXHRcdFx0XHRcdGxlZnQ6IHRoaXMuZWxlbWVudC5jc3MoIFwibGVmdFwiIClcblx0XHRcdFx0fSApXG5cdFx0XHQpO1xuXG5cdFx0XHR0aGlzLmVsZW1lbnQgPSB0aGlzLmVsZW1lbnQucGFyZW50KCkuZGF0YShcblx0XHRcdFx0XCJ1aS1yZXNpemFibGVcIiwgdGhpcy5lbGVtZW50LnJlc2l6YWJsZSggXCJpbnN0YW5jZVwiIClcblx0XHRcdCk7XG5cblx0XHRcdHRoaXMuZWxlbWVudElzV3JhcHBlciA9IHRydWU7XG5cblx0XHRcdG1hcmdpbnMgPSB7XG5cdFx0XHRcdG1hcmdpblRvcDogdGhpcy5vcmlnaW5hbEVsZW1lbnQuY3NzKCBcIm1hcmdpblRvcFwiICksXG5cdFx0XHRcdG1hcmdpblJpZ2h0OiB0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoIFwibWFyZ2luUmlnaHRcIiApLFxuXHRcdFx0XHRtYXJnaW5Cb3R0b206IHRoaXMub3JpZ2luYWxFbGVtZW50LmNzcyggXCJtYXJnaW5Cb3R0b21cIiApLFxuXHRcdFx0XHRtYXJnaW5MZWZ0OiB0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoIFwibWFyZ2luTGVmdFwiIClcblx0XHRcdH07XG5cblx0XHRcdHRoaXMuZWxlbWVudC5jc3MoIG1hcmdpbnMgKTtcblx0XHRcdHRoaXMub3JpZ2luYWxFbGVtZW50LmNzcyggXCJtYXJnaW5cIiwgMCApO1xuXG5cdFx0XHQvLyBzdXBwb3J0OiBTYWZhcmlcblx0XHRcdC8vIFByZXZlbnQgU2FmYXJpIHRleHRhcmVhIHJlc2l6ZVxuXHRcdFx0dGhpcy5vcmlnaW5hbFJlc2l6ZVN0eWxlID0gdGhpcy5vcmlnaW5hbEVsZW1lbnQuY3NzKCBcInJlc2l6ZVwiICk7XG5cdFx0XHR0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoIFwicmVzaXplXCIsIFwibm9uZVwiICk7XG5cblx0XHRcdHRoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHMucHVzaCggdGhpcy5vcmlnaW5hbEVsZW1lbnQuY3NzKCB7XG5cdFx0XHRcdHBvc2l0aW9uOiBcInN0YXRpY1wiLFxuXHRcdFx0XHR6b29tOiAxLFxuXHRcdFx0XHRkaXNwbGF5OiBcImJsb2NrXCJcblx0XHRcdH0gKSApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTlcblx0XHRcdC8vIGF2b2lkIElFIGp1bXAgKGhhcmQgc2V0IHRoZSBtYXJnaW4pXG5cdFx0XHR0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoIG1hcmdpbnMgKTtcblxuXHRcdFx0dGhpcy5fcHJvcG9ydGlvbmFsbHlSZXNpemUoKTtcblx0XHR9XG5cblx0XHR0aGlzLl9zZXR1cEhhbmRsZXMoKTtcblxuXHRcdGlmICggby5hdXRvSGlkZSApIHtcblx0XHRcdCQoIHRoaXMuZWxlbWVudCApXG5cdFx0XHRcdC5vbiggXCJtb3VzZWVudGVyXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggby5kaXNhYmxlZCApIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhhdC5fcmVtb3ZlQ2xhc3MoIFwidWktcmVzaXphYmxlLWF1dG9oaWRlXCIgKTtcblx0XHRcdFx0XHR0aGF0Ll9oYW5kbGVzLnNob3coKTtcblx0XHRcdFx0fSApXG5cdFx0XHRcdC5vbiggXCJtb3VzZWxlYXZlXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggby5kaXNhYmxlZCApIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCAhdGhhdC5yZXNpemluZyApIHtcblx0XHRcdFx0XHRcdHRoYXQuX2FkZENsYXNzKCBcInVpLXJlc2l6YWJsZS1hdXRvaGlkZVwiICk7XG5cdFx0XHRcdFx0XHR0aGF0Ll9oYW5kbGVzLmhpZGUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR0aGlzLl9tb3VzZUluaXQoKTtcblx0fSxcblxuXHRfZGVzdHJveTogZnVuY3Rpb24oKSB7XG5cblx0XHR0aGlzLl9tb3VzZURlc3Ryb3koKTtcblxuXHRcdHZhciB3cmFwcGVyLFxuXHRcdFx0X2Rlc3Ryb3kgPSBmdW5jdGlvbiggZXhwICkge1xuXHRcdFx0XHQkKCBleHAgKVxuXHRcdFx0XHRcdC5yZW1vdmVEYXRhKCBcInJlc2l6YWJsZVwiIClcblx0XHRcdFx0XHQucmVtb3ZlRGF0YSggXCJ1aS1yZXNpemFibGVcIiApXG5cdFx0XHRcdFx0Lm9mZiggXCIucmVzaXphYmxlXCIgKVxuXHRcdFx0XHRcdC5maW5kKCBcIi51aS1yZXNpemFibGUtaGFuZGxlXCIgKVxuXHRcdFx0XHRcdFx0LnJlbW92ZSgpO1xuXHRcdFx0fTtcblxuXHRcdC8vIFRPRE86IFVud3JhcCBhdCBzYW1lIERPTSBwb3NpdGlvblxuXHRcdGlmICggdGhpcy5lbGVtZW50SXNXcmFwcGVyICkge1xuXHRcdFx0X2Rlc3Ryb3koIHRoaXMuZWxlbWVudCApO1xuXHRcdFx0d3JhcHBlciA9IHRoaXMuZWxlbWVudDtcblx0XHRcdHRoaXMub3JpZ2luYWxFbGVtZW50LmNzcygge1xuXHRcdFx0XHRwb3NpdGlvbjogd3JhcHBlci5jc3MoIFwicG9zaXRpb25cIiApLFxuXHRcdFx0XHR3aWR0aDogd3JhcHBlci5vdXRlcldpZHRoKCksXG5cdFx0XHRcdGhlaWdodDogd3JhcHBlci5vdXRlckhlaWdodCgpLFxuXHRcdFx0XHR0b3A6IHdyYXBwZXIuY3NzKCBcInRvcFwiICksXG5cdFx0XHRcdGxlZnQ6IHdyYXBwZXIuY3NzKCBcImxlZnRcIiApXG5cdFx0XHR9ICkuaW5zZXJ0QWZ0ZXIoIHdyYXBwZXIgKTtcblx0XHRcdHdyYXBwZXIucmVtb3ZlKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5vcmlnaW5hbEVsZW1lbnQuY3NzKCBcInJlc2l6ZVwiLCB0aGlzLm9yaWdpbmFsUmVzaXplU3R5bGUgKTtcblx0XHRfZGVzdHJveSggdGhpcy5vcmlnaW5hbEVsZW1lbnQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdF9zZXRPcHRpb246IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHRoaXMuX3N1cGVyKCBrZXksIHZhbHVlICk7XG5cblx0XHRzd2l0Y2ggKCBrZXkgKSB7XG5cdFx0Y2FzZSBcImhhbmRsZXNcIjpcblx0XHRcdHRoaXMuX3JlbW92ZUhhbmRsZXMoKTtcblx0XHRcdHRoaXMuX3NldHVwSGFuZGxlcygpO1xuXHRcdFx0YnJlYWs7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fSxcblxuXHRfc2V0dXBIYW5kbGVzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbyA9IHRoaXMub3B0aW9ucywgaGFuZGxlLCBpLCBuLCBobmFtZSwgYXhpcywgdGhhdCA9IHRoaXM7XG5cdFx0dGhpcy5oYW5kbGVzID0gby5oYW5kbGVzIHx8XG5cdFx0XHQoICEkKCBcIi51aS1yZXNpemFibGUtaGFuZGxlXCIsIHRoaXMuZWxlbWVudCApLmxlbmd0aCA/XG5cdFx0XHRcdFwiZSxzLHNlXCIgOiB7XG5cdFx0XHRcdFx0bjogXCIudWktcmVzaXphYmxlLW5cIixcblx0XHRcdFx0XHRlOiBcIi51aS1yZXNpemFibGUtZVwiLFxuXHRcdFx0XHRcdHM6IFwiLnVpLXJlc2l6YWJsZS1zXCIsXG5cdFx0XHRcdFx0dzogXCIudWktcmVzaXphYmxlLXdcIixcblx0XHRcdFx0XHRzZTogXCIudWktcmVzaXphYmxlLXNlXCIsXG5cdFx0XHRcdFx0c3c6IFwiLnVpLXJlc2l6YWJsZS1zd1wiLFxuXHRcdFx0XHRcdG5lOiBcIi51aS1yZXNpemFibGUtbmVcIixcblx0XHRcdFx0XHRudzogXCIudWktcmVzaXphYmxlLW53XCJcblx0XHRcdFx0fSApO1xuXG5cdFx0dGhpcy5faGFuZGxlcyA9ICQoKTtcblx0XHRpZiAoIHRoaXMuaGFuZGxlcy5jb25zdHJ1Y3RvciA9PT0gU3RyaW5nICkge1xuXG5cdFx0XHRpZiAoIHRoaXMuaGFuZGxlcyA9PT0gXCJhbGxcIiApIHtcblx0XHRcdFx0dGhpcy5oYW5kbGVzID0gXCJuLGUscyx3LHNlLHN3LG5lLG53XCI7XG5cdFx0XHR9XG5cblx0XHRcdG4gPSB0aGlzLmhhbmRsZXMuc3BsaXQoIFwiLFwiICk7XG5cdFx0XHR0aGlzLmhhbmRsZXMgPSB7fTtcblxuXHRcdFx0Zm9yICggaSA9IDA7IGkgPCBuLmxlbmd0aDsgaSsrICkge1xuXG5cdFx0XHRcdGhhbmRsZSA9ICQudHJpbSggblsgaSBdICk7XG5cdFx0XHRcdGhuYW1lID0gXCJ1aS1yZXNpemFibGUtXCIgKyBoYW5kbGU7XG5cdFx0XHRcdGF4aXMgPSAkKCBcIjxkaXY+XCIgKTtcblx0XHRcdFx0dGhpcy5fYWRkQ2xhc3MoIGF4aXMsIFwidWktcmVzaXphYmxlLWhhbmRsZSBcIiArIGhuYW1lICk7XG5cblx0XHRcdFx0YXhpcy5jc3MoIHsgekluZGV4OiBvLnpJbmRleCB9ICk7XG5cblx0XHRcdFx0dGhpcy5oYW5kbGVzWyBoYW5kbGUgXSA9IFwiLnVpLXJlc2l6YWJsZS1cIiArIGhhbmRsZTtcblx0XHRcdFx0dGhpcy5lbGVtZW50LmFwcGVuZCggYXhpcyApO1xuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dGhpcy5fcmVuZGVyQXhpcyA9IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cblx0XHRcdHZhciBpLCBheGlzLCBwYWRQb3MsIHBhZFdyYXBwZXI7XG5cblx0XHRcdHRhcmdldCA9IHRhcmdldCB8fCB0aGlzLmVsZW1lbnQ7XG5cblx0XHRcdGZvciAoIGkgaW4gdGhpcy5oYW5kbGVzICkge1xuXG5cdFx0XHRcdGlmICggdGhpcy5oYW5kbGVzWyBpIF0uY29uc3RydWN0b3IgPT09IFN0cmluZyApIHtcblx0XHRcdFx0XHR0aGlzLmhhbmRsZXNbIGkgXSA9IHRoaXMuZWxlbWVudC5jaGlsZHJlbiggdGhpcy5oYW5kbGVzWyBpIF0gKS5maXJzdCgpLnNob3coKTtcblx0XHRcdFx0fSBlbHNlIGlmICggdGhpcy5oYW5kbGVzWyBpIF0uanF1ZXJ5IHx8IHRoaXMuaGFuZGxlc1sgaSBdLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdHRoaXMuaGFuZGxlc1sgaSBdID0gJCggdGhpcy5oYW5kbGVzWyBpIF0gKTtcblx0XHRcdFx0XHR0aGlzLl9vbiggdGhpcy5oYW5kbGVzWyBpIF0sIHsgXCJtb3VzZWRvd25cIjogdGhhdC5fbW91c2VEb3duIH0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggdGhpcy5lbGVtZW50SXNXcmFwcGVyICYmXG5cdFx0XHRcdFx0XHR0aGlzLm9yaWdpbmFsRWxlbWVudFsgMCBdXG5cdFx0XHRcdFx0XHRcdC5ub2RlTmFtZVxuXHRcdFx0XHRcdFx0XHQubWF0Y2goIC9eKHRleHRhcmVhfGlucHV0fHNlbGVjdHxidXR0b24pJC9pICkgKSB7XG5cdFx0XHRcdFx0YXhpcyA9ICQoIHRoaXMuaGFuZGxlc1sgaSBdLCB0aGlzLmVsZW1lbnQgKTtcblxuXHRcdFx0XHRcdHBhZFdyYXBwZXIgPSAvc3d8bmV8bnd8c2V8bnxzLy50ZXN0KCBpICkgP1xuXHRcdFx0XHRcdFx0YXhpcy5vdXRlckhlaWdodCgpIDpcblx0XHRcdFx0XHRcdGF4aXMub3V0ZXJXaWR0aCgpO1xuXG5cdFx0XHRcdFx0cGFkUG9zID0gWyBcInBhZGRpbmdcIixcblx0XHRcdFx0XHRcdC9uZXxud3xuLy50ZXN0KCBpICkgPyBcIlRvcFwiIDpcblx0XHRcdFx0XHRcdC9zZXxzd3xzLy50ZXN0KCBpICkgPyBcIkJvdHRvbVwiIDpcblx0XHRcdFx0XHRcdC9eZSQvLnRlc3QoIGkgKSA/IFwiUmlnaHRcIiA6IFwiTGVmdFwiIF0uam9pbiggXCJcIiApO1xuXG5cdFx0XHRcdFx0dGFyZ2V0LmNzcyggcGFkUG9zLCBwYWRXcmFwcGVyICk7XG5cblx0XHRcdFx0XHR0aGlzLl9wcm9wb3J0aW9uYWxseVJlc2l6ZSgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5faGFuZGxlcyA9IHRoaXMuX2hhbmRsZXMuYWRkKCB0aGlzLmhhbmRsZXNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHQvLyBUT0RPOiBtYWtlIHJlbmRlckF4aXMgYSBwcm90b3R5cGUgZnVuY3Rpb25cblx0XHR0aGlzLl9yZW5kZXJBeGlzKCB0aGlzLmVsZW1lbnQgKTtcblxuXHRcdHRoaXMuX2hhbmRsZXMgPSB0aGlzLl9oYW5kbGVzLmFkZCggdGhpcy5lbGVtZW50LmZpbmQoIFwiLnVpLXJlc2l6YWJsZS1oYW5kbGVcIiApICk7XG5cdFx0dGhpcy5faGFuZGxlcy5kaXNhYmxlU2VsZWN0aW9uKCk7XG5cblx0XHR0aGlzLl9oYW5kbGVzLm9uKCBcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXRoYXQucmVzaXppbmcgKSB7XG5cdFx0XHRcdGlmICggdGhpcy5jbGFzc05hbWUgKSB7XG5cdFx0XHRcdFx0YXhpcyA9IHRoaXMuY2xhc3NOYW1lLm1hdGNoKCAvdWktcmVzaXphYmxlLShzZXxzd3xuZXxud3xufGV8c3x3KS9pICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhhdC5heGlzID0gYXhpcyAmJiBheGlzWyAxIF0gPyBheGlzWyAxIF0gOiBcInNlXCI7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdFx0aWYgKCBvLmF1dG9IaWRlICkge1xuXHRcdFx0dGhpcy5faGFuZGxlcy5oaWRlKCk7XG5cdFx0XHR0aGlzLl9hZGRDbGFzcyggXCJ1aS1yZXNpemFibGUtYXV0b2hpZGVcIiApO1xuXHRcdH1cblx0fSxcblxuXHRfcmVtb3ZlSGFuZGxlczogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5faGFuZGxlcy5yZW1vdmUoKTtcblx0fSxcblxuXHRfbW91c2VDYXB0dXJlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGksIGhhbmRsZSxcblx0XHRcdGNhcHR1cmUgPSBmYWxzZTtcblxuXHRcdGZvciAoIGkgaW4gdGhpcy5oYW5kbGVzICkge1xuXHRcdFx0aGFuZGxlID0gJCggdGhpcy5oYW5kbGVzWyBpIF0gKVsgMCBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgPT09IGV2ZW50LnRhcmdldCB8fCAkLmNvbnRhaW5zKCBoYW5kbGUsIGV2ZW50LnRhcmdldCApICkge1xuXHRcdFx0XHRjYXB0dXJlID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gIXRoaXMub3B0aW9ucy5kaXNhYmxlZCAmJiBjYXB0dXJlO1xuXHR9LFxuXG5cdF9tb3VzZVN0YXJ0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHR2YXIgY3VybGVmdCwgY3VydG9wLCBjdXJzb3IsXG5cdFx0XHRvID0gdGhpcy5vcHRpb25zLFxuXHRcdFx0ZWwgPSB0aGlzLmVsZW1lbnQ7XG5cblx0XHR0aGlzLnJlc2l6aW5nID0gdHJ1ZTtcblxuXHRcdHRoaXMuX3JlbmRlclByb3h5KCk7XG5cblx0XHRjdXJsZWZ0ID0gdGhpcy5fbnVtKCB0aGlzLmhlbHBlci5jc3MoIFwibGVmdFwiICkgKTtcblx0XHRjdXJ0b3AgPSB0aGlzLl9udW0oIHRoaXMuaGVscGVyLmNzcyggXCJ0b3BcIiApICk7XG5cblx0XHRpZiAoIG8uY29udGFpbm1lbnQgKSB7XG5cdFx0XHRjdXJsZWZ0ICs9ICQoIG8uY29udGFpbm1lbnQgKS5zY3JvbGxMZWZ0KCkgfHwgMDtcblx0XHRcdGN1cnRvcCArPSAkKCBvLmNvbnRhaW5tZW50ICkuc2Nyb2xsVG9wKCkgfHwgMDtcblx0XHR9XG5cblx0XHR0aGlzLm9mZnNldCA9IHRoaXMuaGVscGVyLm9mZnNldCgpO1xuXHRcdHRoaXMucG9zaXRpb24gPSB7IGxlZnQ6IGN1cmxlZnQsIHRvcDogY3VydG9wIH07XG5cblx0XHR0aGlzLnNpemUgPSB0aGlzLl9oZWxwZXIgPyB7XG5cdFx0XHRcdHdpZHRoOiB0aGlzLmhlbHBlci53aWR0aCgpLFxuXHRcdFx0XHRoZWlnaHQ6IHRoaXMuaGVscGVyLmhlaWdodCgpXG5cdFx0XHR9IDoge1xuXHRcdFx0XHR3aWR0aDogZWwud2lkdGgoKSxcblx0XHRcdFx0aGVpZ2h0OiBlbC5oZWlnaHQoKVxuXHRcdFx0fTtcblxuXHRcdHRoaXMub3JpZ2luYWxTaXplID0gdGhpcy5faGVscGVyID8ge1xuXHRcdFx0XHR3aWR0aDogZWwub3V0ZXJXaWR0aCgpLFxuXHRcdFx0XHRoZWlnaHQ6IGVsLm91dGVySGVpZ2h0KClcblx0XHRcdH0gOiB7XG5cdFx0XHRcdHdpZHRoOiBlbC53aWR0aCgpLFxuXHRcdFx0XHRoZWlnaHQ6IGVsLmhlaWdodCgpXG5cdFx0XHR9O1xuXG5cdFx0dGhpcy5zaXplRGlmZiA9IHtcblx0XHRcdHdpZHRoOiBlbC5vdXRlcldpZHRoKCkgLSBlbC53aWR0aCgpLFxuXHRcdFx0aGVpZ2h0OiBlbC5vdXRlckhlaWdodCgpIC0gZWwuaGVpZ2h0KClcblx0XHR9O1xuXG5cdFx0dGhpcy5vcmlnaW5hbFBvc2l0aW9uID0geyBsZWZ0OiBjdXJsZWZ0LCB0b3A6IGN1cnRvcCB9O1xuXHRcdHRoaXMub3JpZ2luYWxNb3VzZVBvc2l0aW9uID0geyBsZWZ0OiBldmVudC5wYWdlWCwgdG9wOiBldmVudC5wYWdlWSB9O1xuXG5cdFx0dGhpcy5hc3BlY3RSYXRpbyA9ICggdHlwZW9mIG8uYXNwZWN0UmF0aW8gPT09IFwibnVtYmVyXCIgKSA/XG5cdFx0XHRvLmFzcGVjdFJhdGlvIDpcblx0XHRcdCggKCB0aGlzLm9yaWdpbmFsU2l6ZS53aWR0aCAvIHRoaXMub3JpZ2luYWxTaXplLmhlaWdodCApIHx8IDEgKTtcblxuXHRcdGN1cnNvciA9ICQoIFwiLnVpLXJlc2l6YWJsZS1cIiArIHRoaXMuYXhpcyApLmNzcyggXCJjdXJzb3JcIiApO1xuXHRcdCQoIFwiYm9keVwiICkuY3NzKCBcImN1cnNvclwiLCBjdXJzb3IgPT09IFwiYXV0b1wiID8gdGhpcy5heGlzICsgXCItcmVzaXplXCIgOiBjdXJzb3IgKTtcblxuXHRcdHRoaXMuX2FkZENsYXNzKCBcInVpLXJlc2l6YWJsZS1yZXNpemluZ1wiICk7XG5cdFx0dGhpcy5fcHJvcGFnYXRlKCBcInN0YXJ0XCIsIGV2ZW50ICk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0X21vdXNlRHJhZzogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0dmFyIGRhdGEsIHByb3BzLFxuXHRcdFx0c21wID0gdGhpcy5vcmlnaW5hbE1vdXNlUG9zaXRpb24sXG5cdFx0XHRhID0gdGhpcy5heGlzLFxuXHRcdFx0ZHggPSAoIGV2ZW50LnBhZ2VYIC0gc21wLmxlZnQgKSB8fCAwLFxuXHRcdFx0ZHkgPSAoIGV2ZW50LnBhZ2VZIC0gc21wLnRvcCApIHx8IDAsXG5cdFx0XHR0cmlnZ2VyID0gdGhpcy5fY2hhbmdlWyBhIF07XG5cblx0XHR0aGlzLl91cGRhdGVQcmV2UHJvcGVydGllcygpO1xuXG5cdFx0aWYgKCAhdHJpZ2dlciApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRkYXRhID0gdHJpZ2dlci5hcHBseSggdGhpcywgWyBldmVudCwgZHgsIGR5IF0gKTtcblxuXHRcdHRoaXMuX3VwZGF0ZVZpcnR1YWxCb3VuZGFyaWVzKCBldmVudC5zaGlmdEtleSApO1xuXHRcdGlmICggdGhpcy5fYXNwZWN0UmF0aW8gfHwgZXZlbnQuc2hpZnRLZXkgKSB7XG5cdFx0XHRkYXRhID0gdGhpcy5fdXBkYXRlUmF0aW8oIGRhdGEsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0ZGF0YSA9IHRoaXMuX3Jlc3BlY3RTaXplKCBkYXRhLCBldmVudCApO1xuXG5cdFx0dGhpcy5fdXBkYXRlQ2FjaGUoIGRhdGEgKTtcblxuXHRcdHRoaXMuX3Byb3BhZ2F0ZSggXCJyZXNpemVcIiwgZXZlbnQgKTtcblxuXHRcdHByb3BzID0gdGhpcy5fYXBwbHlDaGFuZ2VzKCk7XG5cblx0XHRpZiAoICF0aGlzLl9oZWxwZXIgJiYgdGhpcy5fcHJvcG9ydGlvbmFsbHlSZXNpemVFbGVtZW50cy5sZW5ndGggKSB7XG5cdFx0XHR0aGlzLl9wcm9wb3J0aW9uYWxseVJlc2l6ZSgpO1xuXHRcdH1cblxuXHRcdGlmICggISQuaXNFbXB0eU9iamVjdCggcHJvcHMgKSApIHtcblx0XHRcdHRoaXMuX3VwZGF0ZVByZXZQcm9wZXJ0aWVzKCk7XG5cdFx0XHR0aGlzLl90cmlnZ2VyKCBcInJlc2l6ZVwiLCBldmVudCwgdGhpcy51aSgpICk7XG5cdFx0XHR0aGlzLl9hcHBseUNoYW5nZXMoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0sXG5cblx0X21vdXNlU3RvcDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0dGhpcy5yZXNpemluZyA9IGZhbHNlO1xuXHRcdHZhciBwciwgaXN0YSwgc29mZnNldGgsIHNvZmZzZXR3LCBzLCBsZWZ0LCB0b3AsXG5cdFx0XHRvID0gdGhpcy5vcHRpb25zLCB0aGF0ID0gdGhpcztcblxuXHRcdGlmICggdGhpcy5faGVscGVyICkge1xuXG5cdFx0XHRwciA9IHRoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHM7XG5cdFx0XHRpc3RhID0gcHIubGVuZ3RoICYmICggL3RleHRhcmVhL2kgKS50ZXN0KCBwclsgMCBdLm5vZGVOYW1lICk7XG5cdFx0XHRzb2Zmc2V0aCA9IGlzdGEgJiYgdGhpcy5faGFzU2Nyb2xsKCBwclsgMCBdLCBcImxlZnRcIiApID8gMCA6IHRoYXQuc2l6ZURpZmYuaGVpZ2h0O1xuXHRcdFx0c29mZnNldHcgPSBpc3RhID8gMCA6IHRoYXQuc2l6ZURpZmYud2lkdGg7XG5cblx0XHRcdHMgPSB7XG5cdFx0XHRcdHdpZHRoOiAoIHRoYXQuaGVscGVyLndpZHRoKCkgIC0gc29mZnNldHcgKSxcblx0XHRcdFx0aGVpZ2h0OiAoIHRoYXQuaGVscGVyLmhlaWdodCgpIC0gc29mZnNldGggKVxuXHRcdFx0fTtcblx0XHRcdGxlZnQgPSAoIHBhcnNlRmxvYXQoIHRoYXQuZWxlbWVudC5jc3MoIFwibGVmdFwiICkgKSArXG5cdFx0XHRcdCggdGhhdC5wb3NpdGlvbi5sZWZ0IC0gdGhhdC5vcmlnaW5hbFBvc2l0aW9uLmxlZnQgKSApIHx8IG51bGw7XG5cdFx0XHR0b3AgPSAoIHBhcnNlRmxvYXQoIHRoYXQuZWxlbWVudC5jc3MoIFwidG9wXCIgKSApICtcblx0XHRcdFx0KCB0aGF0LnBvc2l0aW9uLnRvcCAtIHRoYXQub3JpZ2luYWxQb3NpdGlvbi50b3AgKSApIHx8IG51bGw7XG5cblx0XHRcdGlmICggIW8uYW5pbWF0ZSApIHtcblx0XHRcdFx0dGhpcy5lbGVtZW50LmNzcyggJC5leHRlbmQoIHMsIHsgdG9wOiB0b3AsIGxlZnQ6IGxlZnQgfSApICk7XG5cdFx0XHR9XG5cblx0XHRcdHRoYXQuaGVscGVyLmhlaWdodCggdGhhdC5zaXplLmhlaWdodCApO1xuXHRcdFx0dGhhdC5oZWxwZXIud2lkdGgoIHRoYXQuc2l6ZS53aWR0aCApO1xuXG5cdFx0XHRpZiAoIHRoaXMuX2hlbHBlciAmJiAhby5hbmltYXRlICkge1xuXHRcdFx0XHR0aGlzLl9wcm9wb3J0aW9uYWxseVJlc2l6ZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdCQoIFwiYm9keVwiICkuY3NzKCBcImN1cnNvclwiLCBcImF1dG9cIiApO1xuXG5cdFx0dGhpcy5fcmVtb3ZlQ2xhc3MoIFwidWktcmVzaXphYmxlLXJlc2l6aW5nXCIgKTtcblxuXHRcdHRoaXMuX3Byb3BhZ2F0ZSggXCJzdG9wXCIsIGV2ZW50ICk7XG5cblx0XHRpZiAoIHRoaXMuX2hlbHBlciApIHtcblx0XHRcdHRoaXMuaGVscGVyLnJlbW92ZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblxuXHR9LFxuXG5cdF91cGRhdGVQcmV2UHJvcGVydGllczogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5wcmV2UG9zaXRpb24gPSB7XG5cdFx0XHR0b3A6IHRoaXMucG9zaXRpb24udG9wLFxuXHRcdFx0bGVmdDogdGhpcy5wb3NpdGlvbi5sZWZ0XG5cdFx0fTtcblx0XHR0aGlzLnByZXZTaXplID0ge1xuXHRcdFx0d2lkdGg6IHRoaXMuc2l6ZS53aWR0aCxcblx0XHRcdGhlaWdodDogdGhpcy5zaXplLmhlaWdodFxuXHRcdH07XG5cdH0sXG5cblx0X2FwcGx5Q2hhbmdlczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHByb3BzID0ge307XG5cblx0XHRpZiAoIHRoaXMucG9zaXRpb24udG9wICE9PSB0aGlzLnByZXZQb3NpdGlvbi50b3AgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSB0aGlzLnBvc2l0aW9uLnRvcCArIFwicHhcIjtcblx0XHR9XG5cdFx0aWYgKCB0aGlzLnBvc2l0aW9uLmxlZnQgIT09IHRoaXMucHJldlBvc2l0aW9uLmxlZnQgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gdGhpcy5wb3NpdGlvbi5sZWZ0ICsgXCJweFwiO1xuXHRcdH1cblx0XHRpZiAoIHRoaXMuc2l6ZS53aWR0aCAhPT0gdGhpcy5wcmV2U2l6ZS53aWR0aCApIHtcblx0XHRcdHByb3BzLndpZHRoID0gdGhpcy5zaXplLndpZHRoICsgXCJweFwiO1xuXHRcdH1cblx0XHRpZiAoIHRoaXMuc2l6ZS5oZWlnaHQgIT09IHRoaXMucHJldlNpemUuaGVpZ2h0ICkge1xuXHRcdFx0cHJvcHMuaGVpZ2h0ID0gdGhpcy5zaXplLmhlaWdodCArIFwicHhcIjtcblx0XHR9XG5cblx0XHR0aGlzLmhlbHBlci5jc3MoIHByb3BzICk7XG5cblx0XHRyZXR1cm4gcHJvcHM7XG5cdH0sXG5cblx0X3VwZGF0ZVZpcnR1YWxCb3VuZGFyaWVzOiBmdW5jdGlvbiggZm9yY2VBc3BlY3RSYXRpbyApIHtcblx0XHR2YXIgcE1pbldpZHRoLCBwTWF4V2lkdGgsIHBNaW5IZWlnaHQsIHBNYXhIZWlnaHQsIGIsXG5cdFx0XHRvID0gdGhpcy5vcHRpb25zO1xuXG5cdFx0YiA9IHtcblx0XHRcdG1pbldpZHRoOiB0aGlzLl9pc051bWJlciggby5taW5XaWR0aCApID8gby5taW5XaWR0aCA6IDAsXG5cdFx0XHRtYXhXaWR0aDogdGhpcy5faXNOdW1iZXIoIG8ubWF4V2lkdGggKSA/IG8ubWF4V2lkdGggOiBJbmZpbml0eSxcblx0XHRcdG1pbkhlaWdodDogdGhpcy5faXNOdW1iZXIoIG8ubWluSGVpZ2h0ICkgPyBvLm1pbkhlaWdodCA6IDAsXG5cdFx0XHRtYXhIZWlnaHQ6IHRoaXMuX2lzTnVtYmVyKCBvLm1heEhlaWdodCApID8gby5tYXhIZWlnaHQgOiBJbmZpbml0eVxuXHRcdH07XG5cblx0XHRpZiAoIHRoaXMuX2FzcGVjdFJhdGlvIHx8IGZvcmNlQXNwZWN0UmF0aW8gKSB7XG5cdFx0XHRwTWluV2lkdGggPSBiLm1pbkhlaWdodCAqIHRoaXMuYXNwZWN0UmF0aW87XG5cdFx0XHRwTWluSGVpZ2h0ID0gYi5taW5XaWR0aCAvIHRoaXMuYXNwZWN0UmF0aW87XG5cdFx0XHRwTWF4V2lkdGggPSBiLm1heEhlaWdodCAqIHRoaXMuYXNwZWN0UmF0aW87XG5cdFx0XHRwTWF4SGVpZ2h0ID0gYi5tYXhXaWR0aCAvIHRoaXMuYXNwZWN0UmF0aW87XG5cblx0XHRcdGlmICggcE1pbldpZHRoID4gYi5taW5XaWR0aCApIHtcblx0XHRcdFx0Yi5taW5XaWR0aCA9IHBNaW5XaWR0aDtcblx0XHRcdH1cblx0XHRcdGlmICggcE1pbkhlaWdodCA+IGIubWluSGVpZ2h0ICkge1xuXHRcdFx0XHRiLm1pbkhlaWdodCA9IHBNaW5IZWlnaHQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHBNYXhXaWR0aCA8IGIubWF4V2lkdGggKSB7XG5cdFx0XHRcdGIubWF4V2lkdGggPSBwTWF4V2lkdGg7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHBNYXhIZWlnaHQgPCBiLm1heEhlaWdodCApIHtcblx0XHRcdFx0Yi5tYXhIZWlnaHQgPSBwTWF4SGVpZ2h0O1xuXHRcdFx0fVxuXHRcdH1cblx0XHR0aGlzLl92Qm91bmRhcmllcyA9IGI7XG5cdH0sXG5cblx0X3VwZGF0ZUNhY2hlOiBmdW5jdGlvbiggZGF0YSApIHtcblx0XHR0aGlzLm9mZnNldCA9IHRoaXMuaGVscGVyLm9mZnNldCgpO1xuXHRcdGlmICggdGhpcy5faXNOdW1iZXIoIGRhdGEubGVmdCApICkge1xuXHRcdFx0dGhpcy5wb3NpdGlvbi5sZWZ0ID0gZGF0YS5sZWZ0O1xuXHRcdH1cblx0XHRpZiAoIHRoaXMuX2lzTnVtYmVyKCBkYXRhLnRvcCApICkge1xuXHRcdFx0dGhpcy5wb3NpdGlvbi50b3AgPSBkYXRhLnRvcDtcblx0XHR9XG5cdFx0aWYgKCB0aGlzLl9pc051bWJlciggZGF0YS5oZWlnaHQgKSApIHtcblx0XHRcdHRoaXMuc2l6ZS5oZWlnaHQgPSBkYXRhLmhlaWdodDtcblx0XHR9XG5cdFx0aWYgKCB0aGlzLl9pc051bWJlciggZGF0YS53aWR0aCApICkge1xuXHRcdFx0dGhpcy5zaXplLndpZHRoID0gZGF0YS53aWR0aDtcblx0XHR9XG5cdH0sXG5cblx0X3VwZGF0ZVJhdGlvOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdHZhciBjcG9zID0gdGhpcy5wb3NpdGlvbixcblx0XHRcdGNzaXplID0gdGhpcy5zaXplLFxuXHRcdFx0YSA9IHRoaXMuYXhpcztcblxuXHRcdGlmICggdGhpcy5faXNOdW1iZXIoIGRhdGEuaGVpZ2h0ICkgKSB7XG5cdFx0XHRkYXRhLndpZHRoID0gKCBkYXRhLmhlaWdodCAqIHRoaXMuYXNwZWN0UmF0aW8gKTtcblx0XHR9IGVsc2UgaWYgKCB0aGlzLl9pc051bWJlciggZGF0YS53aWR0aCApICkge1xuXHRcdFx0ZGF0YS5oZWlnaHQgPSAoIGRhdGEud2lkdGggLyB0aGlzLmFzcGVjdFJhdGlvICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBhID09PSBcInN3XCIgKSB7XG5cdFx0XHRkYXRhLmxlZnQgPSBjcG9zLmxlZnQgKyAoIGNzaXplLndpZHRoIC0gZGF0YS53aWR0aCApO1xuXHRcdFx0ZGF0YS50b3AgPSBudWxsO1xuXHRcdH1cblx0XHRpZiAoIGEgPT09IFwibndcIiApIHtcblx0XHRcdGRhdGEudG9wID0gY3Bvcy50b3AgKyAoIGNzaXplLmhlaWdodCAtIGRhdGEuaGVpZ2h0ICk7XG5cdFx0XHRkYXRhLmxlZnQgPSBjcG9zLmxlZnQgKyAoIGNzaXplLndpZHRoIC0gZGF0YS53aWR0aCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXHR9LFxuXG5cdF9yZXNwZWN0U2l6ZTogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHR2YXIgbyA9IHRoaXMuX3ZCb3VuZGFyaWVzLFxuXHRcdFx0YSA9IHRoaXMuYXhpcyxcblx0XHRcdGlzbWF4dyA9IHRoaXMuX2lzTnVtYmVyKCBkYXRhLndpZHRoICkgJiYgby5tYXhXaWR0aCAmJiAoIG8ubWF4V2lkdGggPCBkYXRhLndpZHRoICksXG5cdFx0XHRpc21heGggPSB0aGlzLl9pc051bWJlciggZGF0YS5oZWlnaHQgKSAmJiBvLm1heEhlaWdodCAmJiAoIG8ubWF4SGVpZ2h0IDwgZGF0YS5oZWlnaHQgKSxcblx0XHRcdGlzbWludyA9IHRoaXMuX2lzTnVtYmVyKCBkYXRhLndpZHRoICkgJiYgby5taW5XaWR0aCAmJiAoIG8ubWluV2lkdGggPiBkYXRhLndpZHRoICksXG5cdFx0XHRpc21pbmggPSB0aGlzLl9pc051bWJlciggZGF0YS5oZWlnaHQgKSAmJiBvLm1pbkhlaWdodCAmJiAoIG8ubWluSGVpZ2h0ID4gZGF0YS5oZWlnaHQgKSxcblx0XHRcdGR3ID0gdGhpcy5vcmlnaW5hbFBvc2l0aW9uLmxlZnQgKyB0aGlzLm9yaWdpbmFsU2l6ZS53aWR0aCxcblx0XHRcdGRoID0gdGhpcy5vcmlnaW5hbFBvc2l0aW9uLnRvcCArIHRoaXMub3JpZ2luYWxTaXplLmhlaWdodCxcblx0XHRcdGN3ID0gL3N3fG53fHcvLnRlc3QoIGEgKSwgY2ggPSAvbnd8bmV8bi8udGVzdCggYSApO1xuXHRcdGlmICggaXNtaW53ICkge1xuXHRcdFx0ZGF0YS53aWR0aCA9IG8ubWluV2lkdGg7XG5cdFx0fVxuXHRcdGlmICggaXNtaW5oICkge1xuXHRcdFx0ZGF0YS5oZWlnaHQgPSBvLm1pbkhlaWdodDtcblx0XHR9XG5cdFx0aWYgKCBpc21heHcgKSB7XG5cdFx0XHRkYXRhLndpZHRoID0gby5tYXhXaWR0aDtcblx0XHR9XG5cdFx0aWYgKCBpc21heGggKSB7XG5cdFx0XHRkYXRhLmhlaWdodCA9IG8ubWF4SGVpZ2h0O1xuXHRcdH1cblxuXHRcdGlmICggaXNtaW53ICYmIGN3ICkge1xuXHRcdFx0ZGF0YS5sZWZ0ID0gZHcgLSBvLm1pbldpZHRoO1xuXHRcdH1cblx0XHRpZiAoIGlzbWF4dyAmJiBjdyApIHtcblx0XHRcdGRhdGEubGVmdCA9IGR3IC0gby5tYXhXaWR0aDtcblx0XHR9XG5cdFx0aWYgKCBpc21pbmggJiYgY2ggKSB7XG5cdFx0XHRkYXRhLnRvcCA9IGRoIC0gby5taW5IZWlnaHQ7XG5cdFx0fVxuXHRcdGlmICggaXNtYXhoICYmIGNoICkge1xuXHRcdFx0ZGF0YS50b3AgPSBkaCAtIG8ubWF4SGVpZ2h0O1xuXHRcdH1cblxuXHRcdC8vIEZpeGluZyBqdW1wIGVycm9yIG9uIHRvcC9sZWZ0IC0gYnVnICMyMzMwXG5cdFx0aWYgKCAhZGF0YS53aWR0aCAmJiAhZGF0YS5oZWlnaHQgJiYgIWRhdGEubGVmdCAmJiBkYXRhLnRvcCApIHtcblx0XHRcdGRhdGEudG9wID0gbnVsbDtcblx0XHR9IGVsc2UgaWYgKCAhZGF0YS53aWR0aCAmJiAhZGF0YS5oZWlnaHQgJiYgIWRhdGEudG9wICYmIGRhdGEubGVmdCApIHtcblx0XHRcdGRhdGEubGVmdCA9IG51bGw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cdH0sXG5cblx0X2dldFBhZGRpbmdQbHVzQm9yZGVyRGltZW5zaW9uczogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0d2lkdGhzID0gW10sXG5cdFx0XHRib3JkZXJzID0gW1xuXHRcdFx0XHRlbGVtZW50LmNzcyggXCJib3JkZXJUb3BXaWR0aFwiICksXG5cdFx0XHRcdGVsZW1lbnQuY3NzKCBcImJvcmRlclJpZ2h0V2lkdGhcIiApLFxuXHRcdFx0XHRlbGVtZW50LmNzcyggXCJib3JkZXJCb3R0b21XaWR0aFwiICksXG5cdFx0XHRcdGVsZW1lbnQuY3NzKCBcImJvcmRlckxlZnRXaWR0aFwiIClcblx0XHRcdF0sXG5cdFx0XHRwYWRkaW5ncyA9IFtcblx0XHRcdFx0ZWxlbWVudC5jc3MoIFwicGFkZGluZ1RvcFwiICksXG5cdFx0XHRcdGVsZW1lbnQuY3NzKCBcInBhZGRpbmdSaWdodFwiICksXG5cdFx0XHRcdGVsZW1lbnQuY3NzKCBcInBhZGRpbmdCb3R0b21cIiApLFxuXHRcdFx0XHRlbGVtZW50LmNzcyggXCJwYWRkaW5nTGVmdFwiIClcblx0XHRcdF07XG5cblx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHR3aWR0aHNbIGkgXSA9ICggcGFyc2VGbG9hdCggYm9yZGVyc1sgaSBdICkgfHwgMCApO1xuXHRcdFx0d2lkdGhzWyBpIF0gKz0gKCBwYXJzZUZsb2F0KCBwYWRkaW5nc1sgaSBdICkgfHwgMCApO1xuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHRoZWlnaHQ6IHdpZHRoc1sgMCBdICsgd2lkdGhzWyAyIF0sXG5cdFx0XHR3aWR0aDogd2lkdGhzWyAxIF0gKyB3aWR0aHNbIDMgXVxuXHRcdH07XG5cdH0sXG5cblx0X3Byb3BvcnRpb25hbGx5UmVzaXplOiBmdW5jdGlvbigpIHtcblxuXHRcdGlmICggIXRoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBwcmVsLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRlbGVtZW50ID0gdGhpcy5oZWxwZXIgfHwgdGhpcy5lbGVtZW50O1xuXG5cdFx0Zm9yICggOyBpIDwgdGhpcy5fcHJvcG9ydGlvbmFsbHlSZXNpemVFbGVtZW50cy5sZW5ndGg7IGkrKyApIHtcblxuXHRcdFx0cHJlbCA9IHRoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHNbIGkgXTtcblxuXHRcdFx0Ly8gVE9ETzogU2VlbXMgbGlrZSBhIGJ1ZyB0byBjYWNoZSB0aGlzLm91dGVyRGltZW5zaW9uc1xuXHRcdFx0Ly8gY29uc2lkZXJpbmcgdGhhdCB3ZSBhcmUgaW4gYSBsb29wLlxuXHRcdFx0aWYgKCAhdGhpcy5vdXRlckRpbWVuc2lvbnMgKSB7XG5cdFx0XHRcdHRoaXMub3V0ZXJEaW1lbnNpb25zID0gdGhpcy5fZ2V0UGFkZGluZ1BsdXNCb3JkZXJEaW1lbnNpb25zKCBwcmVsICk7XG5cdFx0XHR9XG5cblx0XHRcdHByZWwuY3NzKCB7XG5cdFx0XHRcdGhlaWdodDogKCBlbGVtZW50LmhlaWdodCgpIC0gdGhpcy5vdXRlckRpbWVuc2lvbnMuaGVpZ2h0ICkgfHwgMCxcblx0XHRcdFx0d2lkdGg6ICggZWxlbWVudC53aWR0aCgpIC0gdGhpcy5vdXRlckRpbWVuc2lvbnMud2lkdGggKSB8fCAwXG5cdFx0XHR9ICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHRfcmVuZGVyUHJveHk6IGZ1bmN0aW9uKCkge1xuXG5cdFx0dmFyIGVsID0gdGhpcy5lbGVtZW50LCBvID0gdGhpcy5vcHRpb25zO1xuXHRcdHRoaXMuZWxlbWVudE9mZnNldCA9IGVsLm9mZnNldCgpO1xuXG5cdFx0aWYgKCB0aGlzLl9oZWxwZXIgKSB7XG5cblx0XHRcdHRoaXMuaGVscGVyID0gdGhpcy5oZWxwZXIgfHwgJCggXCI8ZGl2IHN0eWxlPSdvdmVyZmxvdzpoaWRkZW47Jz48L2Rpdj5cIiApO1xuXG5cdFx0XHR0aGlzLl9hZGRDbGFzcyggdGhpcy5oZWxwZXIsIHRoaXMuX2hlbHBlciApO1xuXHRcdFx0dGhpcy5oZWxwZXIuY3NzKCB7XG5cdFx0XHRcdHdpZHRoOiB0aGlzLmVsZW1lbnQub3V0ZXJXaWR0aCgpLFxuXHRcdFx0XHRoZWlnaHQ6IHRoaXMuZWxlbWVudC5vdXRlckhlaWdodCgpLFxuXHRcdFx0XHRwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuXHRcdFx0XHRsZWZ0OiB0aGlzLmVsZW1lbnRPZmZzZXQubGVmdCArIFwicHhcIixcblx0XHRcdFx0dG9wOiB0aGlzLmVsZW1lbnRPZmZzZXQudG9wICsgXCJweFwiLFxuXHRcdFx0XHR6SW5kZXg6ICsrby56SW5kZXggLy9UT0RPOiBEb24ndCBtb2RpZnkgb3B0aW9uXG5cdFx0XHR9ICk7XG5cblx0XHRcdHRoaXMuaGVscGVyXG5cdFx0XHRcdC5hcHBlbmRUbyggXCJib2R5XCIgKVxuXHRcdFx0XHQuZGlzYWJsZVNlbGVjdGlvbigpO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuaGVscGVyID0gdGhpcy5lbGVtZW50O1xuXHRcdH1cblxuXHR9LFxuXG5cdF9jaGFuZ2U6IHtcblx0XHRlOiBmdW5jdGlvbiggZXZlbnQsIGR4ICkge1xuXHRcdFx0cmV0dXJuIHsgd2lkdGg6IHRoaXMub3JpZ2luYWxTaXplLndpZHRoICsgZHggfTtcblx0XHR9LFxuXHRcdHc6IGZ1bmN0aW9uKCBldmVudCwgZHggKSB7XG5cdFx0XHR2YXIgY3MgPSB0aGlzLm9yaWdpbmFsU2l6ZSwgc3AgPSB0aGlzLm9yaWdpbmFsUG9zaXRpb247XG5cdFx0XHRyZXR1cm4geyBsZWZ0OiBzcC5sZWZ0ICsgZHgsIHdpZHRoOiBjcy53aWR0aCAtIGR4IH07XG5cdFx0fSxcblx0XHRuOiBmdW5jdGlvbiggZXZlbnQsIGR4LCBkeSApIHtcblx0XHRcdHZhciBjcyA9IHRoaXMub3JpZ2luYWxTaXplLCBzcCA9IHRoaXMub3JpZ2luYWxQb3NpdGlvbjtcblx0XHRcdHJldHVybiB7IHRvcDogc3AudG9wICsgZHksIGhlaWdodDogY3MuaGVpZ2h0IC0gZHkgfTtcblx0XHR9LFxuXHRcdHM6IGZ1bmN0aW9uKCBldmVudCwgZHgsIGR5ICkge1xuXHRcdFx0cmV0dXJuIHsgaGVpZ2h0OiB0aGlzLm9yaWdpbmFsU2l6ZS5oZWlnaHQgKyBkeSB9O1xuXHRcdH0sXG5cdFx0c2U6IGZ1bmN0aW9uKCBldmVudCwgZHgsIGR5ICkge1xuXHRcdFx0cmV0dXJuICQuZXh0ZW5kKCB0aGlzLl9jaGFuZ2Uucy5hcHBseSggdGhpcywgYXJndW1lbnRzICksXG5cdFx0XHRcdHRoaXMuX2NoYW5nZS5lLmFwcGx5KCB0aGlzLCBbIGV2ZW50LCBkeCwgZHkgXSApICk7XG5cdFx0fSxcblx0XHRzdzogZnVuY3Rpb24oIGV2ZW50LCBkeCwgZHkgKSB7XG5cdFx0XHRyZXR1cm4gJC5leHRlbmQoIHRoaXMuX2NoYW5nZS5zLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSxcblx0XHRcdFx0dGhpcy5fY2hhbmdlLncuYXBwbHkoIHRoaXMsIFsgZXZlbnQsIGR4LCBkeSBdICkgKTtcblx0XHR9LFxuXHRcdG5lOiBmdW5jdGlvbiggZXZlbnQsIGR4LCBkeSApIHtcblx0XHRcdHJldHVybiAkLmV4dGVuZCggdGhpcy5fY2hhbmdlLm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApLFxuXHRcdFx0XHR0aGlzLl9jaGFuZ2UuZS5hcHBseSggdGhpcywgWyBldmVudCwgZHgsIGR5IF0gKSApO1xuXHRcdH0sXG5cdFx0bnc6IGZ1bmN0aW9uKCBldmVudCwgZHgsIGR5ICkge1xuXHRcdFx0cmV0dXJuICQuZXh0ZW5kKCB0aGlzLl9jaGFuZ2Uubi5hcHBseSggdGhpcywgYXJndW1lbnRzICksXG5cdFx0XHRcdHRoaXMuX2NoYW5nZS53LmFwcGx5KCB0aGlzLCBbIGV2ZW50LCBkeCwgZHkgXSApICk7XG5cdFx0fVxuXHR9LFxuXG5cdF9wcm9wYWdhdGU6IGZ1bmN0aW9uKCBuLCBldmVudCApIHtcblx0XHQkLnVpLnBsdWdpbi5jYWxsKCB0aGlzLCBuLCBbIGV2ZW50LCB0aGlzLnVpKCkgXSApO1xuXHRcdCggbiAhPT0gXCJyZXNpemVcIiAmJiB0aGlzLl90cmlnZ2VyKCBuLCBldmVudCwgdGhpcy51aSgpICkgKTtcblx0fSxcblxuXHRwbHVnaW5zOiB7fSxcblxuXHR1aTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdG9yaWdpbmFsRWxlbWVudDogdGhpcy5vcmlnaW5hbEVsZW1lbnQsXG5cdFx0XHRlbGVtZW50OiB0aGlzLmVsZW1lbnQsXG5cdFx0XHRoZWxwZXI6IHRoaXMuaGVscGVyLFxuXHRcdFx0cG9zaXRpb246IHRoaXMucG9zaXRpb24sXG5cdFx0XHRzaXplOiB0aGlzLnNpemUsXG5cdFx0XHRvcmlnaW5hbFNpemU6IHRoaXMub3JpZ2luYWxTaXplLFxuXHRcdFx0b3JpZ2luYWxQb3NpdGlvbjogdGhpcy5vcmlnaW5hbFBvc2l0aW9uXG5cdFx0fTtcblx0fVxuXG59ICk7XG5cbi8qXG4gKiBSZXNpemFibGUgRXh0ZW5zaW9uc1xuICovXG5cbiQudWkucGx1Z2luLmFkZCggXCJyZXNpemFibGVcIiwgXCJhbmltYXRlXCIsIHtcblxuXHRzdG9wOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIHRoYXQgPSAkKCB0aGlzICkucmVzaXphYmxlKCBcImluc3RhbmNlXCIgKSxcblx0XHRcdG8gPSB0aGF0Lm9wdGlvbnMsXG5cdFx0XHRwciA9IHRoYXQuX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHMsXG5cdFx0XHRpc3RhID0gcHIubGVuZ3RoICYmICggL3RleHRhcmVhL2kgKS50ZXN0KCBwclsgMCBdLm5vZGVOYW1lICksXG5cdFx0XHRzb2Zmc2V0aCA9IGlzdGEgJiYgdGhhdC5faGFzU2Nyb2xsKCBwclsgMCBdLCBcImxlZnRcIiApID8gMCA6IHRoYXQuc2l6ZURpZmYuaGVpZ2h0LFxuXHRcdFx0c29mZnNldHcgPSBpc3RhID8gMCA6IHRoYXQuc2l6ZURpZmYud2lkdGgsXG5cdFx0XHRzdHlsZSA9IHtcblx0XHRcdFx0d2lkdGg6ICggdGhhdC5zaXplLndpZHRoIC0gc29mZnNldHcgKSxcblx0XHRcdFx0aGVpZ2h0OiAoIHRoYXQuc2l6ZS5oZWlnaHQgLSBzb2Zmc2V0aCApXG5cdFx0XHR9LFxuXHRcdFx0bGVmdCA9ICggcGFyc2VGbG9hdCggdGhhdC5lbGVtZW50LmNzcyggXCJsZWZ0XCIgKSApICtcblx0XHRcdFx0KCB0aGF0LnBvc2l0aW9uLmxlZnQgLSB0aGF0Lm9yaWdpbmFsUG9zaXRpb24ubGVmdCApICkgfHwgbnVsbCxcblx0XHRcdHRvcCA9ICggcGFyc2VGbG9hdCggdGhhdC5lbGVtZW50LmNzcyggXCJ0b3BcIiApICkgK1xuXHRcdFx0XHQoIHRoYXQucG9zaXRpb24udG9wIC0gdGhhdC5vcmlnaW5hbFBvc2l0aW9uLnRvcCApICkgfHwgbnVsbDtcblxuXHRcdHRoYXQuZWxlbWVudC5hbmltYXRlKFxuXHRcdFx0JC5leHRlbmQoIHN0eWxlLCB0b3AgJiYgbGVmdCA/IHsgdG9wOiB0b3AsIGxlZnQ6IGxlZnQgfSA6IHt9ICksIHtcblx0XHRcdFx0ZHVyYXRpb246IG8uYW5pbWF0ZUR1cmF0aW9uLFxuXHRcdFx0XHRlYXNpbmc6IG8uYW5pbWF0ZUVhc2luZyxcblx0XHRcdFx0c3RlcDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHR2YXIgZGF0YSA9IHtcblx0XHRcdFx0XHRcdHdpZHRoOiBwYXJzZUZsb2F0KCB0aGF0LmVsZW1lbnQuY3NzKCBcIndpZHRoXCIgKSApLFxuXHRcdFx0XHRcdFx0aGVpZ2h0OiBwYXJzZUZsb2F0KCB0aGF0LmVsZW1lbnQuY3NzKCBcImhlaWdodFwiICkgKSxcblx0XHRcdFx0XHRcdHRvcDogcGFyc2VGbG9hdCggdGhhdC5lbGVtZW50LmNzcyggXCJ0b3BcIiApICksXG5cdFx0XHRcdFx0XHRsZWZ0OiBwYXJzZUZsb2F0KCB0aGF0LmVsZW1lbnQuY3NzKCBcImxlZnRcIiApIClcblx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0aWYgKCBwciAmJiBwci5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHQkKCBwclsgMCBdICkuY3NzKCB7IHdpZHRoOiBkYXRhLndpZHRoLCBoZWlnaHQ6IGRhdGEuaGVpZ2h0IH0gKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcm9wYWdhdGluZyByZXNpemUsIGFuZCB1cGRhdGluZyB2YWx1ZXMgZm9yIGVhY2ggYW5pbWF0aW9uIHN0ZXBcblx0XHRcdFx0XHR0aGF0Ll91cGRhdGVDYWNoZSggZGF0YSApO1xuXHRcdFx0XHRcdHRoYXQuX3Byb3BhZ2F0ZSggXCJyZXNpemVcIiwgZXZlbnQgKTtcblxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0KTtcblx0fVxuXG59ICk7XG5cbiQudWkucGx1Z2luLmFkZCggXCJyZXNpemFibGVcIiwgXCJjb250YWlubWVudFwiLCB7XG5cblx0c3RhcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtZW50LCBwLCBjbywgY2gsIGN3LCB3aWR0aCwgaGVpZ2h0LFxuXHRcdFx0dGhhdCA9ICQoIHRoaXMgKS5yZXNpemFibGUoIFwiaW5zdGFuY2VcIiApLFxuXHRcdFx0byA9IHRoYXQub3B0aW9ucyxcblx0XHRcdGVsID0gdGhhdC5lbGVtZW50LFxuXHRcdFx0b2MgPSBvLmNvbnRhaW5tZW50LFxuXHRcdFx0Y2UgPSAoIG9jIGluc3RhbmNlb2YgJCApID9cblx0XHRcdFx0b2MuZ2V0KCAwICkgOlxuXHRcdFx0XHQoIC9wYXJlbnQvLnRlc3QoIG9jICkgKSA/IGVsLnBhcmVudCgpLmdldCggMCApIDogb2M7XG5cblx0XHRpZiAoICFjZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGF0LmNvbnRhaW5lckVsZW1lbnQgPSAkKCBjZSApO1xuXG5cdFx0aWYgKCAvZG9jdW1lbnQvLnRlc3QoIG9jICkgfHwgb2MgPT09IGRvY3VtZW50ICkge1xuXHRcdFx0dGhhdC5jb250YWluZXJPZmZzZXQgPSB7XG5cdFx0XHRcdGxlZnQ6IDAsXG5cdFx0XHRcdHRvcDogMFxuXHRcdFx0fTtcblx0XHRcdHRoYXQuY29udGFpbmVyUG9zaXRpb24gPSB7XG5cdFx0XHRcdGxlZnQ6IDAsXG5cdFx0XHRcdHRvcDogMFxuXHRcdFx0fTtcblxuXHRcdFx0dGhhdC5wYXJlbnREYXRhID0ge1xuXHRcdFx0XHRlbGVtZW50OiAkKCBkb2N1bWVudCApLFxuXHRcdFx0XHRsZWZ0OiAwLFxuXHRcdFx0XHR0b3A6IDAsXG5cdFx0XHRcdHdpZHRoOiAkKCBkb2N1bWVudCApLndpZHRoKCksXG5cdFx0XHRcdGhlaWdodDogJCggZG9jdW1lbnQgKS5oZWlnaHQoKSB8fCBkb2N1bWVudC5ib2R5LnBhcmVudE5vZGUuc2Nyb2xsSGVpZ2h0XG5cdFx0XHR9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtZW50ID0gJCggY2UgKTtcblx0XHRcdHAgPSBbXTtcblx0XHRcdCQoIFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkxlZnRcIiwgXCJCb3R0b21cIiBdICkuZWFjaCggZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdFx0XHRcdHBbIGkgXSA9IHRoYXQuX251bSggZWxlbWVudC5jc3MoIFwicGFkZGluZ1wiICsgbmFtZSApICk7XG5cdFx0XHR9ICk7XG5cblx0XHRcdHRoYXQuY29udGFpbmVyT2Zmc2V0ID0gZWxlbWVudC5vZmZzZXQoKTtcblx0XHRcdHRoYXQuY29udGFpbmVyUG9zaXRpb24gPSBlbGVtZW50LnBvc2l0aW9uKCk7XG5cdFx0XHR0aGF0LmNvbnRhaW5lclNpemUgPSB7XG5cdFx0XHRcdGhlaWdodDogKCBlbGVtZW50LmlubmVySGVpZ2h0KCkgLSBwWyAzIF0gKSxcblx0XHRcdFx0d2lkdGg6ICggZWxlbWVudC5pbm5lcldpZHRoKCkgLSBwWyAxIF0gKVxuXHRcdFx0fTtcblxuXHRcdFx0Y28gPSB0aGF0LmNvbnRhaW5lck9mZnNldDtcblx0XHRcdGNoID0gdGhhdC5jb250YWluZXJTaXplLmhlaWdodDtcblx0XHRcdGN3ID0gdGhhdC5jb250YWluZXJTaXplLndpZHRoO1xuXHRcdFx0d2lkdGggPSAoIHRoYXQuX2hhc1Njcm9sbCAoIGNlLCBcImxlZnRcIiApID8gY2Uuc2Nyb2xsV2lkdGggOiBjdyApO1xuXHRcdFx0aGVpZ2h0ID0gKCB0aGF0Ll9oYXNTY3JvbGwgKCBjZSApID8gY2Uuc2Nyb2xsSGVpZ2h0IDogY2ggKSA7XG5cblx0XHRcdHRoYXQucGFyZW50RGF0YSA9IHtcblx0XHRcdFx0ZWxlbWVudDogY2UsXG5cdFx0XHRcdGxlZnQ6IGNvLmxlZnQsXG5cdFx0XHRcdHRvcDogY28udG9wLFxuXHRcdFx0XHR3aWR0aDogd2lkdGgsXG5cdFx0XHRcdGhlaWdodDogaGVpZ2h0XG5cdFx0XHR9O1xuXHRcdH1cblx0fSxcblxuXHRyZXNpemU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgd29zZXQsIGhvc2V0LCBpc1BhcmVudCwgaXNPZmZzZXRSZWxhdGl2ZSxcblx0XHRcdHRoYXQgPSAkKCB0aGlzICkucmVzaXphYmxlKCBcImluc3RhbmNlXCIgKSxcblx0XHRcdG8gPSB0aGF0Lm9wdGlvbnMsXG5cdFx0XHRjbyA9IHRoYXQuY29udGFpbmVyT2Zmc2V0LFxuXHRcdFx0Y3AgPSB0aGF0LnBvc2l0aW9uLFxuXHRcdFx0cFJhdGlvID0gdGhhdC5fYXNwZWN0UmF0aW8gfHwgZXZlbnQuc2hpZnRLZXksXG5cdFx0XHRjb3AgPSB7XG5cdFx0XHRcdHRvcDogMCxcblx0XHRcdFx0bGVmdDogMFxuXHRcdFx0fSxcblx0XHRcdGNlID0gdGhhdC5jb250YWluZXJFbGVtZW50LFxuXHRcdFx0Y29udGludWVSZXNpemUgPSB0cnVlO1xuXG5cdFx0aWYgKCBjZVsgMCBdICE9PSBkb2N1bWVudCAmJiAoIC9zdGF0aWMvICkudGVzdCggY2UuY3NzKCBcInBvc2l0aW9uXCIgKSApICkge1xuXHRcdFx0Y29wID0gY287XG5cdFx0fVxuXG5cdFx0aWYgKCBjcC5sZWZ0IDwgKCB0aGF0Ll9oZWxwZXIgPyBjby5sZWZ0IDogMCApICkge1xuXHRcdFx0dGhhdC5zaXplLndpZHRoID0gdGhhdC5zaXplLndpZHRoICtcblx0XHRcdFx0KCB0aGF0Ll9oZWxwZXIgP1xuXHRcdFx0XHRcdCggdGhhdC5wb3NpdGlvbi5sZWZ0IC0gY28ubGVmdCApIDpcblx0XHRcdFx0XHQoIHRoYXQucG9zaXRpb24ubGVmdCAtIGNvcC5sZWZ0ICkgKTtcblxuXHRcdFx0aWYgKCBwUmF0aW8gKSB7XG5cdFx0XHRcdHRoYXQuc2l6ZS5oZWlnaHQgPSB0aGF0LnNpemUud2lkdGggLyB0aGF0LmFzcGVjdFJhdGlvO1xuXHRcdFx0XHRjb250aW51ZVJlc2l6ZSA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dGhhdC5wb3NpdGlvbi5sZWZ0ID0gby5oZWxwZXIgPyBjby5sZWZ0IDogMDtcblx0XHR9XG5cblx0XHRpZiAoIGNwLnRvcCA8ICggdGhhdC5faGVscGVyID8gY28udG9wIDogMCApICkge1xuXHRcdFx0dGhhdC5zaXplLmhlaWdodCA9IHRoYXQuc2l6ZS5oZWlnaHQgK1xuXHRcdFx0XHQoIHRoYXQuX2hlbHBlciA/XG5cdFx0XHRcdFx0KCB0aGF0LnBvc2l0aW9uLnRvcCAtIGNvLnRvcCApIDpcblx0XHRcdFx0XHR0aGF0LnBvc2l0aW9uLnRvcCApO1xuXG5cdFx0XHRpZiAoIHBSYXRpbyApIHtcblx0XHRcdFx0dGhhdC5zaXplLndpZHRoID0gdGhhdC5zaXplLmhlaWdodCAqIHRoYXQuYXNwZWN0UmF0aW87XG5cdFx0XHRcdGNvbnRpbnVlUmVzaXplID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR0aGF0LnBvc2l0aW9uLnRvcCA9IHRoYXQuX2hlbHBlciA/IGNvLnRvcCA6IDA7XG5cdFx0fVxuXG5cdFx0aXNQYXJlbnQgPSB0aGF0LmNvbnRhaW5lckVsZW1lbnQuZ2V0KCAwICkgPT09IHRoYXQuZWxlbWVudC5wYXJlbnQoKS5nZXQoIDAgKTtcblx0XHRpc09mZnNldFJlbGF0aXZlID0gL3JlbGF0aXZlfGFic29sdXRlLy50ZXN0KCB0aGF0LmNvbnRhaW5lckVsZW1lbnQuY3NzKCBcInBvc2l0aW9uXCIgKSApO1xuXG5cdFx0aWYgKCBpc1BhcmVudCAmJiBpc09mZnNldFJlbGF0aXZlICkge1xuXHRcdFx0dGhhdC5vZmZzZXQubGVmdCA9IHRoYXQucGFyZW50RGF0YS5sZWZ0ICsgdGhhdC5wb3NpdGlvbi5sZWZ0O1xuXHRcdFx0dGhhdC5vZmZzZXQudG9wID0gdGhhdC5wYXJlbnREYXRhLnRvcCArIHRoYXQucG9zaXRpb24udG9wO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGF0Lm9mZnNldC5sZWZ0ID0gdGhhdC5lbGVtZW50Lm9mZnNldCgpLmxlZnQ7XG5cdFx0XHR0aGF0Lm9mZnNldC50b3AgPSB0aGF0LmVsZW1lbnQub2Zmc2V0KCkudG9wO1xuXHRcdH1cblxuXHRcdHdvc2V0ID0gTWF0aC5hYnMoIHRoYXQuc2l6ZURpZmYud2lkdGggK1xuXHRcdFx0KCB0aGF0Ll9oZWxwZXIgP1xuXHRcdFx0XHR0aGF0Lm9mZnNldC5sZWZ0IC0gY29wLmxlZnQgOlxuXHRcdFx0XHQoIHRoYXQub2Zmc2V0LmxlZnQgLSBjby5sZWZ0ICkgKSApO1xuXG5cdFx0aG9zZXQgPSBNYXRoLmFicyggdGhhdC5zaXplRGlmZi5oZWlnaHQgK1xuXHRcdFx0KCB0aGF0Ll9oZWxwZXIgP1xuXHRcdFx0XHR0aGF0Lm9mZnNldC50b3AgLSBjb3AudG9wIDpcblx0XHRcdFx0KCB0aGF0Lm9mZnNldC50b3AgLSBjby50b3AgKSApICk7XG5cblx0XHRpZiAoIHdvc2V0ICsgdGhhdC5zaXplLndpZHRoID49IHRoYXQucGFyZW50RGF0YS53aWR0aCApIHtcblx0XHRcdHRoYXQuc2l6ZS53aWR0aCA9IHRoYXQucGFyZW50RGF0YS53aWR0aCAtIHdvc2V0O1xuXHRcdFx0aWYgKCBwUmF0aW8gKSB7XG5cdFx0XHRcdHRoYXQuc2l6ZS5oZWlnaHQgPSB0aGF0LnNpemUud2lkdGggLyB0aGF0LmFzcGVjdFJhdGlvO1xuXHRcdFx0XHRjb250aW51ZVJlc2l6ZSA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggaG9zZXQgKyB0aGF0LnNpemUuaGVpZ2h0ID49IHRoYXQucGFyZW50RGF0YS5oZWlnaHQgKSB7XG5cdFx0XHR0aGF0LnNpemUuaGVpZ2h0ID0gdGhhdC5wYXJlbnREYXRhLmhlaWdodCAtIGhvc2V0O1xuXHRcdFx0aWYgKCBwUmF0aW8gKSB7XG5cdFx0XHRcdHRoYXQuc2l6ZS53aWR0aCA9IHRoYXQuc2l6ZS5oZWlnaHQgKiB0aGF0LmFzcGVjdFJhdGlvO1xuXHRcdFx0XHRjb250aW51ZVJlc2l6ZSA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIWNvbnRpbnVlUmVzaXplICkge1xuXHRcdFx0dGhhdC5wb3NpdGlvbi5sZWZ0ID0gdGhhdC5wcmV2UG9zaXRpb24ubGVmdDtcblx0XHRcdHRoYXQucG9zaXRpb24udG9wID0gdGhhdC5wcmV2UG9zaXRpb24udG9wO1xuXHRcdFx0dGhhdC5zaXplLndpZHRoID0gdGhhdC5wcmV2U2l6ZS53aWR0aDtcblx0XHRcdHRoYXQuc2l6ZS5oZWlnaHQgPSB0aGF0LnByZXZTaXplLmhlaWdodDtcblx0XHR9XG5cdH0sXG5cblx0c3RvcDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHRoYXQgPSAkKCB0aGlzICkucmVzaXphYmxlKCBcImluc3RhbmNlXCIgKSxcblx0XHRcdG8gPSB0aGF0Lm9wdGlvbnMsXG5cdFx0XHRjbyA9IHRoYXQuY29udGFpbmVyT2Zmc2V0LFxuXHRcdFx0Y29wID0gdGhhdC5jb250YWluZXJQb3NpdGlvbixcblx0XHRcdGNlID0gdGhhdC5jb250YWluZXJFbGVtZW50LFxuXHRcdFx0aGVscGVyID0gJCggdGhhdC5oZWxwZXIgKSxcblx0XHRcdGhvID0gaGVscGVyLm9mZnNldCgpLFxuXHRcdFx0dyA9IGhlbHBlci5vdXRlcldpZHRoKCkgLSB0aGF0LnNpemVEaWZmLndpZHRoLFxuXHRcdFx0aCA9IGhlbHBlci5vdXRlckhlaWdodCgpIC0gdGhhdC5zaXplRGlmZi5oZWlnaHQ7XG5cblx0XHRpZiAoIHRoYXQuX2hlbHBlciAmJiAhby5hbmltYXRlICYmICggL3JlbGF0aXZlLyApLnRlc3QoIGNlLmNzcyggXCJwb3NpdGlvblwiICkgKSApIHtcblx0XHRcdCQoIHRoaXMgKS5jc3MoIHtcblx0XHRcdFx0bGVmdDogaG8ubGVmdCAtIGNvcC5sZWZ0IC0gY28ubGVmdCxcblx0XHRcdFx0d2lkdGg6IHcsXG5cdFx0XHRcdGhlaWdodDogaFxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggdGhhdC5faGVscGVyICYmICFvLmFuaW1hdGUgJiYgKCAvc3RhdGljLyApLnRlc3QoIGNlLmNzcyggXCJwb3NpdGlvblwiICkgKSApIHtcblx0XHRcdCQoIHRoaXMgKS5jc3MoIHtcblx0XHRcdFx0bGVmdDogaG8ubGVmdCAtIGNvcC5sZWZ0IC0gY28ubGVmdCxcblx0XHRcdFx0d2lkdGg6IHcsXG5cdFx0XHRcdGhlaWdodDogaFxuXHRcdFx0fSApO1xuXHRcdH1cblx0fVxufSApO1xuXG4kLnVpLnBsdWdpbi5hZGQoIFwicmVzaXphYmxlXCIsIFwiYWxzb1Jlc2l6ZVwiLCB7XG5cblx0c3RhcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB0aGF0ID0gJCggdGhpcyApLnJlc2l6YWJsZSggXCJpbnN0YW5jZVwiICksXG5cdFx0XHRvID0gdGhhdC5vcHRpb25zO1xuXG5cdFx0JCggby5hbHNvUmVzaXplICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZWwgPSAkKCB0aGlzICk7XG5cdFx0XHRlbC5kYXRhKCBcInVpLXJlc2l6YWJsZS1hbHNvcmVzaXplXCIsIHtcblx0XHRcdFx0d2lkdGg6IHBhcnNlRmxvYXQoIGVsLndpZHRoKCkgKSwgaGVpZ2h0OiBwYXJzZUZsb2F0KCBlbC5oZWlnaHQoKSApLFxuXHRcdFx0XHRsZWZ0OiBwYXJzZUZsb2F0KCBlbC5jc3MoIFwibGVmdFwiICkgKSwgdG9wOiBwYXJzZUZsb2F0KCBlbC5jc3MoIFwidG9wXCIgKSApXG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHJlc2l6ZTogZnVuY3Rpb24oIGV2ZW50LCB1aSApIHtcblx0XHR2YXIgdGhhdCA9ICQoIHRoaXMgKS5yZXNpemFibGUoIFwiaW5zdGFuY2VcIiApLFxuXHRcdFx0byA9IHRoYXQub3B0aW9ucyxcblx0XHRcdG9zID0gdGhhdC5vcmlnaW5hbFNpemUsXG5cdFx0XHRvcCA9IHRoYXQub3JpZ2luYWxQb3NpdGlvbixcblx0XHRcdGRlbHRhID0ge1xuXHRcdFx0XHRoZWlnaHQ6ICggdGhhdC5zaXplLmhlaWdodCAtIG9zLmhlaWdodCApIHx8IDAsXG5cdFx0XHRcdHdpZHRoOiAoIHRoYXQuc2l6ZS53aWR0aCAtIG9zLndpZHRoICkgfHwgMCxcblx0XHRcdFx0dG9wOiAoIHRoYXQucG9zaXRpb24udG9wIC0gb3AudG9wICkgfHwgMCxcblx0XHRcdFx0bGVmdDogKCB0aGF0LnBvc2l0aW9uLmxlZnQgLSBvcC5sZWZ0ICkgfHwgMFxuXHRcdFx0fTtcblxuXHRcdFx0JCggby5hbHNvUmVzaXplICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbCA9ICQoIHRoaXMgKSwgc3RhcnQgPSAkKCB0aGlzICkuZGF0YSggXCJ1aS1yZXNpemFibGUtYWxzb3Jlc2l6ZVwiICksIHN0eWxlID0ge30sXG5cdFx0XHRcdFx0Y3NzID0gZWwucGFyZW50cyggdWkub3JpZ2luYWxFbGVtZW50WyAwIF0gKS5sZW5ndGggP1xuXHRcdFx0XHRcdFx0XHRbIFwid2lkdGhcIiwgXCJoZWlnaHRcIiBdIDpcblx0XHRcdFx0XHRcdFx0WyBcIndpZHRoXCIsIFwiaGVpZ2h0XCIsIFwidG9wXCIsIFwibGVmdFwiIF07XG5cblx0XHRcdFx0JC5lYWNoKCBjc3MsIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xuXHRcdFx0XHRcdHZhciBzdW0gPSAoIHN0YXJ0WyBwcm9wIF0gfHwgMCApICsgKCBkZWx0YVsgcHJvcCBdIHx8IDAgKTtcblx0XHRcdFx0XHRpZiAoIHN1bSAmJiBzdW0gPj0gMCApIHtcblx0XHRcdFx0XHRcdHN0eWxlWyBwcm9wIF0gPSBzdW0gfHwgbnVsbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRlbC5jc3MoIHN0eWxlICk7XG5cdFx0XHR9ICk7XG5cdH0sXG5cblx0c3RvcDogZnVuY3Rpb24oKSB7XG5cdFx0JCggdGhpcyApLnJlbW92ZURhdGEoIFwidWktcmVzaXphYmxlLWFsc29yZXNpemVcIiApO1xuXHR9XG59ICk7XG5cbiQudWkucGx1Z2luLmFkZCggXCJyZXNpemFibGVcIiwgXCJnaG9zdFwiLCB7XG5cblx0c3RhcnQ6IGZ1bmN0aW9uKCkge1xuXG5cdFx0dmFyIHRoYXQgPSAkKCB0aGlzICkucmVzaXphYmxlKCBcImluc3RhbmNlXCIgKSwgY3MgPSB0aGF0LnNpemU7XG5cblx0XHR0aGF0Lmdob3N0ID0gdGhhdC5vcmlnaW5hbEVsZW1lbnQuY2xvbmUoKTtcblx0XHR0aGF0Lmdob3N0LmNzcygge1xuXHRcdFx0b3BhY2l0eTogMC4yNSxcblx0XHRcdGRpc3BsYXk6IFwiYmxvY2tcIixcblx0XHRcdHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG5cdFx0XHRoZWlnaHQ6IGNzLmhlaWdodCxcblx0XHRcdHdpZHRoOiBjcy53aWR0aCxcblx0XHRcdG1hcmdpbjogMCxcblx0XHRcdGxlZnQ6IDAsXG5cdFx0XHR0b3A6IDBcblx0XHR9ICk7XG5cblx0XHR0aGF0Ll9hZGRDbGFzcyggdGhhdC5naG9zdCwgXCJ1aS1yZXNpemFibGUtZ2hvc3RcIiApO1xuXG5cdFx0Ly8gREVQUkVDQVRFRFxuXHRcdC8vIFRPRE86IHJlbW92ZSBhZnRlciAxLjEyXG5cdFx0aWYgKCAkLnVpQmFja0NvbXBhdCAhPT0gZmFsc2UgJiYgdHlwZW9mIHRoYXQub3B0aW9ucy5naG9zdCA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gR2hvc3Qgb3B0aW9uXG5cdFx0XHR0aGF0Lmdob3N0LmFkZENsYXNzKCB0aGlzLm9wdGlvbnMuZ2hvc3QgKTtcblx0XHR9XG5cblx0XHR0aGF0Lmdob3N0LmFwcGVuZFRvKCB0aGF0LmhlbHBlciApO1xuXG5cdH0sXG5cblx0cmVzaXplOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdGhhdCA9ICQoIHRoaXMgKS5yZXNpemFibGUoIFwiaW5zdGFuY2VcIiApO1xuXHRcdGlmICggdGhhdC5naG9zdCApIHtcblx0XHRcdHRoYXQuZ2hvc3QuY3NzKCB7XG5cdFx0XHRcdHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG5cdFx0XHRcdGhlaWdodDogdGhhdC5zaXplLmhlaWdodCxcblx0XHRcdFx0d2lkdGg6IHRoYXQuc2l6ZS53aWR0aFxuXHRcdFx0fSApO1xuXHRcdH1cblx0fSxcblxuXHRzdG9wOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdGhhdCA9ICQoIHRoaXMgKS5yZXNpemFibGUoIFwiaW5zdGFuY2VcIiApO1xuXHRcdGlmICggdGhhdC5naG9zdCAmJiB0aGF0LmhlbHBlciApIHtcblx0XHRcdHRoYXQuaGVscGVyLmdldCggMCApLnJlbW92ZUNoaWxkKCB0aGF0Lmdob3N0LmdldCggMCApICk7XG5cdFx0fVxuXHR9XG5cbn0gKTtcblxuJC51aS5wbHVnaW4uYWRkKCBcInJlc2l6YWJsZVwiLCBcImdyaWRcIiwge1xuXG5cdHJlc2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG91dGVyRGltZW5zaW9ucyxcblx0XHRcdHRoYXQgPSAkKCB0aGlzICkucmVzaXphYmxlKCBcImluc3RhbmNlXCIgKSxcblx0XHRcdG8gPSB0aGF0Lm9wdGlvbnMsXG5cdFx0XHRjcyA9IHRoYXQuc2l6ZSxcblx0XHRcdG9zID0gdGhhdC5vcmlnaW5hbFNpemUsXG5cdFx0XHRvcCA9IHRoYXQub3JpZ2luYWxQb3NpdGlvbixcblx0XHRcdGEgPSB0aGF0LmF4aXMsXG5cdFx0XHRncmlkID0gdHlwZW9mIG8uZ3JpZCA9PT0gXCJudW1iZXJcIiA/IFsgby5ncmlkLCBvLmdyaWQgXSA6IG8uZ3JpZCxcblx0XHRcdGdyaWRYID0gKCBncmlkWyAwIF0gfHwgMSApLFxuXHRcdFx0Z3JpZFkgPSAoIGdyaWRbIDEgXSB8fCAxICksXG5cdFx0XHRveCA9IE1hdGgucm91bmQoICggY3Mud2lkdGggLSBvcy53aWR0aCApIC8gZ3JpZFggKSAqIGdyaWRYLFxuXHRcdFx0b3kgPSBNYXRoLnJvdW5kKCAoIGNzLmhlaWdodCAtIG9zLmhlaWdodCApIC8gZ3JpZFkgKSAqIGdyaWRZLFxuXHRcdFx0bmV3V2lkdGggPSBvcy53aWR0aCArIG94LFxuXHRcdFx0bmV3SGVpZ2h0ID0gb3MuaGVpZ2h0ICsgb3ksXG5cdFx0XHRpc01heFdpZHRoID0gby5tYXhXaWR0aCAmJiAoIG8ubWF4V2lkdGggPCBuZXdXaWR0aCApLFxuXHRcdFx0aXNNYXhIZWlnaHQgPSBvLm1heEhlaWdodCAmJiAoIG8ubWF4SGVpZ2h0IDwgbmV3SGVpZ2h0ICksXG5cdFx0XHRpc01pbldpZHRoID0gby5taW5XaWR0aCAmJiAoIG8ubWluV2lkdGggPiBuZXdXaWR0aCApLFxuXHRcdFx0aXNNaW5IZWlnaHQgPSBvLm1pbkhlaWdodCAmJiAoIG8ubWluSGVpZ2h0ID4gbmV3SGVpZ2h0ICk7XG5cblx0XHRvLmdyaWQgPSBncmlkO1xuXG5cdFx0aWYgKCBpc01pbldpZHRoICkge1xuXHRcdFx0bmV3V2lkdGggKz0gZ3JpZFg7XG5cdFx0fVxuXHRcdGlmICggaXNNaW5IZWlnaHQgKSB7XG5cdFx0XHRuZXdIZWlnaHQgKz0gZ3JpZFk7XG5cdFx0fVxuXHRcdGlmICggaXNNYXhXaWR0aCApIHtcblx0XHRcdG5ld1dpZHRoIC09IGdyaWRYO1xuXHRcdH1cblx0XHRpZiAoIGlzTWF4SGVpZ2h0ICkge1xuXHRcdFx0bmV3SGVpZ2h0IC09IGdyaWRZO1xuXHRcdH1cblxuXHRcdGlmICggL14oc2V8c3xlKSQvLnRlc3QoIGEgKSApIHtcblx0XHRcdHRoYXQuc2l6ZS53aWR0aCA9IG5ld1dpZHRoO1xuXHRcdFx0dGhhdC5zaXplLmhlaWdodCA9IG5ld0hlaWdodDtcblx0XHR9IGVsc2UgaWYgKCAvXihuZSkkLy50ZXN0KCBhICkgKSB7XG5cdFx0XHR0aGF0LnNpemUud2lkdGggPSBuZXdXaWR0aDtcblx0XHRcdHRoYXQuc2l6ZS5oZWlnaHQgPSBuZXdIZWlnaHQ7XG5cdFx0XHR0aGF0LnBvc2l0aW9uLnRvcCA9IG9wLnRvcCAtIG95O1xuXHRcdH0gZWxzZSBpZiAoIC9eKHN3KSQvLnRlc3QoIGEgKSApIHtcblx0XHRcdHRoYXQuc2l6ZS53aWR0aCA9IG5ld1dpZHRoO1xuXHRcdFx0dGhhdC5zaXplLmhlaWdodCA9IG5ld0hlaWdodDtcblx0XHRcdHRoYXQucG9zaXRpb24ubGVmdCA9IG9wLmxlZnQgLSBveDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBuZXdIZWlnaHQgLSBncmlkWSA8PSAwIHx8IG5ld1dpZHRoIC0gZ3JpZFggPD0gMCApIHtcblx0XHRcdFx0b3V0ZXJEaW1lbnNpb25zID0gdGhhdC5fZ2V0UGFkZGluZ1BsdXNCb3JkZXJEaW1lbnNpb25zKCB0aGlzICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggbmV3SGVpZ2h0IC0gZ3JpZFkgPiAwICkge1xuXHRcdFx0XHR0aGF0LnNpemUuaGVpZ2h0ID0gbmV3SGVpZ2h0O1xuXHRcdFx0XHR0aGF0LnBvc2l0aW9uLnRvcCA9IG9wLnRvcCAtIG95O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bmV3SGVpZ2h0ID0gZ3JpZFkgLSBvdXRlckRpbWVuc2lvbnMuaGVpZ2h0O1xuXHRcdFx0XHR0aGF0LnNpemUuaGVpZ2h0ID0gbmV3SGVpZ2h0O1xuXHRcdFx0XHR0aGF0LnBvc2l0aW9uLnRvcCA9IG9wLnRvcCArIG9zLmhlaWdodCAtIG5ld0hlaWdodDtcblx0XHRcdH1cblx0XHRcdGlmICggbmV3V2lkdGggLSBncmlkWCA+IDAgKSB7XG5cdFx0XHRcdHRoYXQuc2l6ZS53aWR0aCA9IG5ld1dpZHRoO1xuXHRcdFx0XHR0aGF0LnBvc2l0aW9uLmxlZnQgPSBvcC5sZWZ0IC0gb3g7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRuZXdXaWR0aCA9IGdyaWRYIC0gb3V0ZXJEaW1lbnNpb25zLndpZHRoO1xuXHRcdFx0XHR0aGF0LnNpemUud2lkdGggPSBuZXdXaWR0aDtcblx0XHRcdFx0dGhhdC5wb3NpdGlvbi5sZWZ0ID0gb3AubGVmdCArIG9zLndpZHRoIC0gbmV3V2lkdGg7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cbn0gKTtcblxudmFyIHdpZGdldHNSZXNpemFibGUgPSAkLnVpLnJlc2l6YWJsZTtcblxuXG4vKiFcbiAqIGpRdWVyeSBVSSBTZWxlY3RhYmxlIDEuMTIuMVxuICogaHR0cDovL2pxdWVyeXVpLmNvbVxuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKi9cblxuLy8+PmxhYmVsOiBTZWxlY3RhYmxlXG4vLz4+Z3JvdXA6IEludGVyYWN0aW9uc1xuLy8+PmRlc2NyaXB0aW9uOiBBbGxvd3MgZ3JvdXBzIG9mIGVsZW1lbnRzIHRvIGJlIHNlbGVjdGVkIHdpdGggdGhlIG1vdXNlLlxuLy8+PmRvY3M6IGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL3NlbGVjdGFibGUvXG4vLz4+ZGVtb3M6IGh0dHA6Ly9qcXVlcnl1aS5jb20vc2VsZWN0YWJsZS9cbi8vPj5jc3Muc3RydWN0dXJlOiAuLi8uLi90aGVtZXMvYmFzZS9zZWxlY3RhYmxlLmNzc1xuXG5cblxudmFyIHdpZGdldHNTZWxlY3RhYmxlID0gJC53aWRnZXQoIFwidWkuc2VsZWN0YWJsZVwiLCAkLnVpLm1vdXNlLCB7XG5cdHZlcnNpb246IFwiMS4xMi4xXCIsXG5cdG9wdGlvbnM6IHtcblx0XHRhcHBlbmRUbzogXCJib2R5XCIsXG5cdFx0YXV0b1JlZnJlc2g6IHRydWUsXG5cdFx0ZGlzdGFuY2U6IDAsXG5cdFx0ZmlsdGVyOiBcIipcIixcblx0XHR0b2xlcmFuY2U6IFwidG91Y2hcIixcblxuXHRcdC8vIENhbGxiYWNrc1xuXHRcdHNlbGVjdGVkOiBudWxsLFxuXHRcdHNlbGVjdGluZzogbnVsbCxcblx0XHRzdGFydDogbnVsbCxcblx0XHRzdG9wOiBudWxsLFxuXHRcdHVuc2VsZWN0ZWQ6IG51bGwsXG5cdFx0dW5zZWxlY3Rpbmc6IG51bGxcblx0fSxcblx0X2NyZWF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHRoYXQgPSB0aGlzO1xuXG5cdFx0dGhpcy5fYWRkQ2xhc3MoIFwidWktc2VsZWN0YWJsZVwiICk7XG5cblx0XHR0aGlzLmRyYWdnZWQgPSBmYWxzZTtcblxuXHRcdC8vIENhY2hlIHNlbGVjdGVlIGNoaWxkcmVuIGJhc2VkIG9uIGZpbHRlclxuXHRcdHRoaXMucmVmcmVzaCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhhdC5lbGVtZW50UG9zID0gJCggdGhhdC5lbGVtZW50WyAwIF0gKS5vZmZzZXQoKTtcblx0XHRcdHRoYXQuc2VsZWN0ZWVzID0gJCggdGhhdC5vcHRpb25zLmZpbHRlciwgdGhhdC5lbGVtZW50WyAwIF0gKTtcblx0XHRcdHRoYXQuX2FkZENsYXNzKCB0aGF0LnNlbGVjdGVlcywgXCJ1aS1zZWxlY3RlZVwiICk7XG5cdFx0XHR0aGF0LnNlbGVjdGVlcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyICR0aGlzID0gJCggdGhpcyApLFxuXHRcdFx0XHRcdHNlbGVjdGVlT2Zmc2V0ID0gJHRoaXMub2Zmc2V0KCksXG5cdFx0XHRcdFx0cG9zID0ge1xuXHRcdFx0XHRcdFx0bGVmdDogc2VsZWN0ZWVPZmZzZXQubGVmdCAtIHRoYXQuZWxlbWVudFBvcy5sZWZ0LFxuXHRcdFx0XHRcdFx0dG9wOiBzZWxlY3RlZU9mZnNldC50b3AgLSB0aGF0LmVsZW1lbnRQb3MudG9wXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0JC5kYXRhKCB0aGlzLCBcInNlbGVjdGFibGUtaXRlbVwiLCB7XG5cdFx0XHRcdFx0ZWxlbWVudDogdGhpcyxcblx0XHRcdFx0XHQkZWxlbWVudDogJHRoaXMsXG5cdFx0XHRcdFx0bGVmdDogcG9zLmxlZnQsXG5cdFx0XHRcdFx0dG9wOiBwb3MudG9wLFxuXHRcdFx0XHRcdHJpZ2h0OiBwb3MubGVmdCArICR0aGlzLm91dGVyV2lkdGgoKSxcblx0XHRcdFx0XHRib3R0b206IHBvcy50b3AgKyAkdGhpcy5vdXRlckhlaWdodCgpLFxuXHRcdFx0XHRcdHN0YXJ0c2VsZWN0ZWQ6IGZhbHNlLFxuXHRcdFx0XHRcdHNlbGVjdGVkOiAkdGhpcy5oYXNDbGFzcyggXCJ1aS1zZWxlY3RlZFwiICksXG5cdFx0XHRcdFx0c2VsZWN0aW5nOiAkdGhpcy5oYXNDbGFzcyggXCJ1aS1zZWxlY3RpbmdcIiApLFxuXHRcdFx0XHRcdHVuc2VsZWN0aW5nOiAkdGhpcy5oYXNDbGFzcyggXCJ1aS11bnNlbGVjdGluZ1wiIClcblx0XHRcdFx0fSApO1xuXHRcdFx0fSApO1xuXHRcdH07XG5cdFx0dGhpcy5yZWZyZXNoKCk7XG5cblx0XHR0aGlzLl9tb3VzZUluaXQoKTtcblxuXHRcdHRoaXMuaGVscGVyID0gJCggXCI8ZGl2PlwiICk7XG5cdFx0dGhpcy5fYWRkQ2xhc3MoIHRoaXMuaGVscGVyLCBcInVpLXNlbGVjdGFibGUtaGVscGVyXCIgKTtcblx0fSxcblxuXHRfZGVzdHJveTogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5zZWxlY3RlZXMucmVtb3ZlRGF0YSggXCJzZWxlY3RhYmxlLWl0ZW1cIiApO1xuXHRcdHRoaXMuX21vdXNlRGVzdHJveSgpO1xuXHR9LFxuXG5cdF9tb3VzZVN0YXJ0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0b3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuXHRcdHRoaXMub3BvcyA9IFsgZXZlbnQucGFnZVgsIGV2ZW50LnBhZ2VZIF07XG5cdFx0dGhpcy5lbGVtZW50UG9zID0gJCggdGhpcy5lbGVtZW50WyAwIF0gKS5vZmZzZXQoKTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmRpc2FibGVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMuc2VsZWN0ZWVzID0gJCggb3B0aW9ucy5maWx0ZXIsIHRoaXMuZWxlbWVudFsgMCBdICk7XG5cblx0XHR0aGlzLl90cmlnZ2VyKCBcInN0YXJ0XCIsIGV2ZW50ICk7XG5cblx0XHQkKCBvcHRpb25zLmFwcGVuZFRvICkuYXBwZW5kKCB0aGlzLmhlbHBlciApO1xuXG5cdFx0Ly8gcG9zaXRpb24gaGVscGVyIChsYXNzbylcblx0XHR0aGlzLmhlbHBlci5jc3MoIHtcblx0XHRcdFwibGVmdFwiOiBldmVudC5wYWdlWCxcblx0XHRcdFwidG9wXCI6IGV2ZW50LnBhZ2VZLFxuXHRcdFx0XCJ3aWR0aFwiOiAwLFxuXHRcdFx0XCJoZWlnaHRcIjogMFxuXHRcdH0gKTtcblxuXHRcdGlmICggb3B0aW9ucy5hdXRvUmVmcmVzaCApIHtcblx0XHRcdHRoaXMucmVmcmVzaCgpO1xuXHRcdH1cblxuXHRcdHRoaXMuc2VsZWN0ZWVzLmZpbHRlciggXCIudWktc2VsZWN0ZWRcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGVjdGVlID0gJC5kYXRhKCB0aGlzLCBcInNlbGVjdGFibGUtaXRlbVwiICk7XG5cdFx0XHRzZWxlY3RlZS5zdGFydHNlbGVjdGVkID0gdHJ1ZTtcblx0XHRcdGlmICggIWV2ZW50Lm1ldGFLZXkgJiYgIWV2ZW50LmN0cmxLZXkgKSB7XG5cdFx0XHRcdHRoYXQuX3JlbW92ZUNsYXNzKCBzZWxlY3RlZS4kZWxlbWVudCwgXCJ1aS1zZWxlY3RlZFwiICk7XG5cdFx0XHRcdHNlbGVjdGVlLnNlbGVjdGVkID0gZmFsc2U7XG5cdFx0XHRcdHRoYXQuX2FkZENsYXNzKCBzZWxlY3RlZS4kZWxlbWVudCwgXCJ1aS11bnNlbGVjdGluZ1wiICk7XG5cdFx0XHRcdHNlbGVjdGVlLnVuc2VsZWN0aW5nID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBzZWxlY3RhYmxlIFVOU0VMRUNUSU5HIGNhbGxiYWNrXG5cdFx0XHRcdHRoYXQuX3RyaWdnZXIoIFwidW5zZWxlY3RpbmdcIiwgZXZlbnQsIHtcblx0XHRcdFx0XHR1bnNlbGVjdGluZzogc2VsZWN0ZWUuZWxlbWVudFxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdFx0JCggZXZlbnQudGFyZ2V0ICkucGFyZW50cygpLmFkZEJhY2soKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkb1NlbGVjdCxcblx0XHRcdFx0c2VsZWN0ZWUgPSAkLmRhdGEoIHRoaXMsIFwic2VsZWN0YWJsZS1pdGVtXCIgKTtcblx0XHRcdGlmICggc2VsZWN0ZWUgKSB7XG5cdFx0XHRcdGRvU2VsZWN0ID0gKCAhZXZlbnQubWV0YUtleSAmJiAhZXZlbnQuY3RybEtleSApIHx8XG5cdFx0XHRcdFx0IXNlbGVjdGVlLiRlbGVtZW50Lmhhc0NsYXNzKCBcInVpLXNlbGVjdGVkXCIgKTtcblx0XHRcdFx0dGhhdC5fcmVtb3ZlQ2xhc3MoIHNlbGVjdGVlLiRlbGVtZW50LCBkb1NlbGVjdCA/IFwidWktdW5zZWxlY3RpbmdcIiA6IFwidWktc2VsZWN0ZWRcIiApXG5cdFx0XHRcdFx0Ll9hZGRDbGFzcyggc2VsZWN0ZWUuJGVsZW1lbnQsIGRvU2VsZWN0ID8gXCJ1aS1zZWxlY3RpbmdcIiA6IFwidWktdW5zZWxlY3RpbmdcIiApO1xuXHRcdFx0XHRzZWxlY3RlZS51bnNlbGVjdGluZyA9ICFkb1NlbGVjdDtcblx0XHRcdFx0c2VsZWN0ZWUuc2VsZWN0aW5nID0gZG9TZWxlY3Q7XG5cdFx0XHRcdHNlbGVjdGVlLnNlbGVjdGVkID0gZG9TZWxlY3Q7XG5cblx0XHRcdFx0Ly8gc2VsZWN0YWJsZSAoVU4pU0VMRUNUSU5HIGNhbGxiYWNrXG5cdFx0XHRcdGlmICggZG9TZWxlY3QgKSB7XG5cdFx0XHRcdFx0dGhhdC5fdHJpZ2dlciggXCJzZWxlY3RpbmdcIiwgZXZlbnQsIHtcblx0XHRcdFx0XHRcdHNlbGVjdGluZzogc2VsZWN0ZWUuZWxlbWVudFxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGF0Ll90cmlnZ2VyKCBcInVuc2VsZWN0aW5nXCIsIGV2ZW50LCB7XG5cdFx0XHRcdFx0XHR1bnNlbGVjdGluZzogc2VsZWN0ZWUuZWxlbWVudFxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0sXG5cblx0X21vdXNlRHJhZzogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0dGhpcy5kcmFnZ2VkID0gdHJ1ZTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmRpc2FibGVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciB0bXAsXG5cdFx0XHR0aGF0ID0gdGhpcyxcblx0XHRcdG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG5cdFx0XHR4MSA9IHRoaXMub3Bvc1sgMCBdLFxuXHRcdFx0eTEgPSB0aGlzLm9wb3NbIDEgXSxcblx0XHRcdHgyID0gZXZlbnQucGFnZVgsXG5cdFx0XHR5MiA9IGV2ZW50LnBhZ2VZO1xuXG5cdFx0aWYgKCB4MSA+IHgyICkgeyB0bXAgPSB4MjsgeDIgPSB4MTsgeDEgPSB0bXA7IH1cblx0XHRpZiAoIHkxID4geTIgKSB7IHRtcCA9IHkyOyB5MiA9IHkxOyB5MSA9IHRtcDsgfVxuXHRcdHRoaXMuaGVscGVyLmNzcyggeyBsZWZ0OiB4MSwgdG9wOiB5MSwgd2lkdGg6IHgyIC0geDEsIGhlaWdodDogeTIgLSB5MSB9ICk7XG5cblx0XHR0aGlzLnNlbGVjdGVlcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxlY3RlZSA9ICQuZGF0YSggdGhpcywgXCJzZWxlY3RhYmxlLWl0ZW1cIiApLFxuXHRcdFx0XHRoaXQgPSBmYWxzZSxcblx0XHRcdFx0b2Zmc2V0ID0ge307XG5cblx0XHRcdC8vcHJldmVudCBoZWxwZXIgZnJvbSBiZWluZyBzZWxlY3RlZCBpZiBhcHBlbmRUbzogc2VsZWN0YWJsZVxuXHRcdFx0aWYgKCAhc2VsZWN0ZWUgfHwgc2VsZWN0ZWUuZWxlbWVudCA9PT0gdGhhdC5lbGVtZW50WyAwIF0gKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0b2Zmc2V0LmxlZnQgICA9IHNlbGVjdGVlLmxlZnQgICArIHRoYXQuZWxlbWVudFBvcy5sZWZ0O1xuXHRcdFx0b2Zmc2V0LnJpZ2h0ICA9IHNlbGVjdGVlLnJpZ2h0ICArIHRoYXQuZWxlbWVudFBvcy5sZWZ0O1xuXHRcdFx0b2Zmc2V0LnRvcCAgICA9IHNlbGVjdGVlLnRvcCAgICArIHRoYXQuZWxlbWVudFBvcy50b3A7XG5cdFx0XHRvZmZzZXQuYm90dG9tID0gc2VsZWN0ZWUuYm90dG9tICsgdGhhdC5lbGVtZW50UG9zLnRvcDtcblxuXHRcdFx0aWYgKCBvcHRpb25zLnRvbGVyYW5jZSA9PT0gXCJ0b3VjaFwiICkge1xuXHRcdFx0XHRoaXQgPSAoICEoIG9mZnNldC5sZWZ0ID4geDIgfHwgb2Zmc2V0LnJpZ2h0IDwgeDEgfHwgb2Zmc2V0LnRvcCA+IHkyIHx8XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldC5ib3R0b20gPCB5MSApICk7XG5cdFx0XHR9IGVsc2UgaWYgKCBvcHRpb25zLnRvbGVyYW5jZSA9PT0gXCJmaXRcIiApIHtcblx0XHRcdFx0aGl0ID0gKCBvZmZzZXQubGVmdCA+IHgxICYmIG9mZnNldC5yaWdodCA8IHgyICYmIG9mZnNldC50b3AgPiB5MSAmJlxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQuYm90dG9tIDwgeTIgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoaXQgKSB7XG5cblx0XHRcdFx0Ly8gU0VMRUNUXG5cdFx0XHRcdGlmICggc2VsZWN0ZWUuc2VsZWN0ZWQgKSB7XG5cdFx0XHRcdFx0dGhhdC5fcmVtb3ZlQ2xhc3MoIHNlbGVjdGVlLiRlbGVtZW50LCBcInVpLXNlbGVjdGVkXCIgKTtcblx0XHRcdFx0XHRzZWxlY3RlZS5zZWxlY3RlZCA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggc2VsZWN0ZWUudW5zZWxlY3RpbmcgKSB7XG5cdFx0XHRcdFx0dGhhdC5fcmVtb3ZlQ2xhc3MoIHNlbGVjdGVlLiRlbGVtZW50LCBcInVpLXVuc2VsZWN0aW5nXCIgKTtcblx0XHRcdFx0XHRzZWxlY3RlZS51bnNlbGVjdGluZyA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIXNlbGVjdGVlLnNlbGVjdGluZyApIHtcblx0XHRcdFx0XHR0aGF0Ll9hZGRDbGFzcyggc2VsZWN0ZWUuJGVsZW1lbnQsIFwidWktc2VsZWN0aW5nXCIgKTtcblx0XHRcdFx0XHRzZWxlY3RlZS5zZWxlY3RpbmcgPSB0cnVlO1xuXG5cdFx0XHRcdFx0Ly8gc2VsZWN0YWJsZSBTRUxFQ1RJTkcgY2FsbGJhY2tcblx0XHRcdFx0XHR0aGF0Ll90cmlnZ2VyKCBcInNlbGVjdGluZ1wiLCBldmVudCwge1xuXHRcdFx0XHRcdFx0c2VsZWN0aW5nOiBzZWxlY3RlZS5lbGVtZW50XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIFVOU0VMRUNUXG5cdFx0XHRcdGlmICggc2VsZWN0ZWUuc2VsZWN0aW5nICkge1xuXHRcdFx0XHRcdGlmICggKCBldmVudC5tZXRhS2V5IHx8IGV2ZW50LmN0cmxLZXkgKSAmJiBzZWxlY3RlZS5zdGFydHNlbGVjdGVkICkge1xuXHRcdFx0XHRcdFx0dGhhdC5fcmVtb3ZlQ2xhc3MoIHNlbGVjdGVlLiRlbGVtZW50LCBcInVpLXNlbGVjdGluZ1wiICk7XG5cdFx0XHRcdFx0XHRzZWxlY3RlZS5zZWxlY3RpbmcgPSBmYWxzZTtcblx0XHRcdFx0XHRcdHRoYXQuX2FkZENsYXNzKCBzZWxlY3RlZS4kZWxlbWVudCwgXCJ1aS1zZWxlY3RlZFwiICk7XG5cdFx0XHRcdFx0XHRzZWxlY3RlZS5zZWxlY3RlZCA9IHRydWU7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRoYXQuX3JlbW92ZUNsYXNzKCBzZWxlY3RlZS4kZWxlbWVudCwgXCJ1aS1zZWxlY3RpbmdcIiApO1xuXHRcdFx0XHRcdFx0c2VsZWN0ZWUuc2VsZWN0aW5nID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRpZiAoIHNlbGVjdGVlLnN0YXJ0c2VsZWN0ZWQgKSB7XG5cdFx0XHRcdFx0XHRcdHRoYXQuX2FkZENsYXNzKCBzZWxlY3RlZS4kZWxlbWVudCwgXCJ1aS11bnNlbGVjdGluZ1wiICk7XG5cdFx0XHRcdFx0XHRcdHNlbGVjdGVlLnVuc2VsZWN0aW5nID0gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gc2VsZWN0YWJsZSBVTlNFTEVDVElORyBjYWxsYmFja1xuXHRcdFx0XHRcdFx0dGhhdC5fdHJpZ2dlciggXCJ1bnNlbGVjdGluZ1wiLCBldmVudCwge1xuXHRcdFx0XHRcdFx0XHR1bnNlbGVjdGluZzogc2VsZWN0ZWUuZWxlbWVudFxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIHNlbGVjdGVlLnNlbGVjdGVkICkge1xuXHRcdFx0XHRcdGlmICggIWV2ZW50Lm1ldGFLZXkgJiYgIWV2ZW50LmN0cmxLZXkgJiYgIXNlbGVjdGVlLnN0YXJ0c2VsZWN0ZWQgKSB7XG5cdFx0XHRcdFx0XHR0aGF0Ll9yZW1vdmVDbGFzcyggc2VsZWN0ZWUuJGVsZW1lbnQsIFwidWktc2VsZWN0ZWRcIiApO1xuXHRcdFx0XHRcdFx0c2VsZWN0ZWUuc2VsZWN0ZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRcdFx0dGhhdC5fYWRkQ2xhc3MoIHNlbGVjdGVlLiRlbGVtZW50LCBcInVpLXVuc2VsZWN0aW5nXCIgKTtcblx0XHRcdFx0XHRcdHNlbGVjdGVlLnVuc2VsZWN0aW5nID0gdHJ1ZTtcblxuXHRcdFx0XHRcdFx0Ly8gc2VsZWN0YWJsZSBVTlNFTEVDVElORyBjYWxsYmFja1xuXHRcdFx0XHRcdFx0dGhhdC5fdHJpZ2dlciggXCJ1bnNlbGVjdGluZ1wiLCBldmVudCwge1xuXHRcdFx0XHRcdFx0XHR1bnNlbGVjdGluZzogc2VsZWN0ZWUuZWxlbWVudFxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblxuXHRfbW91c2VTdG9wOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIHRoYXQgPSB0aGlzO1xuXG5cdFx0dGhpcy5kcmFnZ2VkID0gZmFsc2U7XG5cblx0XHQkKCBcIi51aS11bnNlbGVjdGluZ1wiLCB0aGlzLmVsZW1lbnRbIDAgXSApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGVjdGVlID0gJC5kYXRhKCB0aGlzLCBcInNlbGVjdGFibGUtaXRlbVwiICk7XG5cdFx0XHR0aGF0Ll9yZW1vdmVDbGFzcyggc2VsZWN0ZWUuJGVsZW1lbnQsIFwidWktdW5zZWxlY3RpbmdcIiApO1xuXHRcdFx0c2VsZWN0ZWUudW5zZWxlY3RpbmcgPSBmYWxzZTtcblx0XHRcdHNlbGVjdGVlLnN0YXJ0c2VsZWN0ZWQgPSBmYWxzZTtcblx0XHRcdHRoYXQuX3RyaWdnZXIoIFwidW5zZWxlY3RlZFwiLCBldmVudCwge1xuXHRcdFx0XHR1bnNlbGVjdGVkOiBzZWxlY3RlZS5lbGVtZW50XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHRcdCQoIFwiLnVpLXNlbGVjdGluZ1wiLCB0aGlzLmVsZW1lbnRbIDAgXSApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGVjdGVlID0gJC5kYXRhKCB0aGlzLCBcInNlbGVjdGFibGUtaXRlbVwiICk7XG5cdFx0XHR0aGF0Ll9yZW1vdmVDbGFzcyggc2VsZWN0ZWUuJGVsZW1lbnQsIFwidWktc2VsZWN0aW5nXCIgKVxuXHRcdFx0XHQuX2FkZENsYXNzKCBzZWxlY3RlZS4kZWxlbWVudCwgXCJ1aS1zZWxlY3RlZFwiICk7XG5cdFx0XHRzZWxlY3RlZS5zZWxlY3RpbmcgPSBmYWxzZTtcblx0XHRcdHNlbGVjdGVlLnNlbGVjdGVkID0gdHJ1ZTtcblx0XHRcdHNlbGVjdGVlLnN0YXJ0c2VsZWN0ZWQgPSB0cnVlO1xuXHRcdFx0dGhhdC5fdHJpZ2dlciggXCJzZWxlY3RlZFwiLCBldmVudCwge1xuXHRcdFx0XHRzZWxlY3RlZDogc2VsZWN0ZWUuZWxlbWVudFxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0XHR0aGlzLl90cmlnZ2VyKCBcInN0b3BcIiwgZXZlbnQgKTtcblxuXHRcdHRoaXMuaGVscGVyLnJlbW92ZSgpO1xuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cbn0gKTtcblxuXG4vKiFcbiAqIGpRdWVyeSBVSSBTb3J0YWJsZSAxLjEyLjFcbiAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICovXG5cbi8vPj5sYWJlbDogU29ydGFibGVcbi8vPj5ncm91cDogSW50ZXJhY3Rpb25zXG4vLz4+ZGVzY3JpcHRpb246IEVuYWJsZXMgaXRlbXMgaW4gYSBsaXN0IHRvIGJlIHNvcnRlZCB1c2luZyB0aGUgbW91c2UuXG4vLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vc29ydGFibGUvXG4vLz4+ZGVtb3M6IGh0dHA6Ly9qcXVlcnl1aS5jb20vc29ydGFibGUvXG4vLz4+Y3NzLnN0cnVjdHVyZTogLi4vLi4vdGhlbWVzL2Jhc2Uvc29ydGFibGUuY3NzXG5cblxuXG52YXIgd2lkZ2V0c1NvcnRhYmxlID0gJC53aWRnZXQoIFwidWkuc29ydGFibGVcIiwgJC51aS5tb3VzZSwge1xuXHR2ZXJzaW9uOiBcIjEuMTIuMVwiLFxuXHR3aWRnZXRFdmVudFByZWZpeDogXCJzb3J0XCIsXG5cdHJlYWR5OiBmYWxzZSxcblx0b3B0aW9uczoge1xuXHRcdGFwcGVuZFRvOiBcInBhcmVudFwiLFxuXHRcdGF4aXM6IGZhbHNlLFxuXHRcdGNvbm5lY3RXaXRoOiBmYWxzZSxcblx0XHRjb250YWlubWVudDogZmFsc2UsXG5cdFx0Y3Vyc29yOiBcImF1dG9cIixcblx0XHRjdXJzb3JBdDogZmFsc2UsXG5cdFx0ZHJvcE9uRW1wdHk6IHRydWUsXG5cdFx0Zm9yY2VQbGFjZWhvbGRlclNpemU6IGZhbHNlLFxuXHRcdGZvcmNlSGVscGVyU2l6ZTogZmFsc2UsXG5cdFx0Z3JpZDogZmFsc2UsXG5cdFx0aGFuZGxlOiBmYWxzZSxcblx0XHRoZWxwZXI6IFwib3JpZ2luYWxcIixcblx0XHRpdGVtczogXCI+ICpcIixcblx0XHRvcGFjaXR5OiBmYWxzZSxcblx0XHRwbGFjZWhvbGRlcjogZmFsc2UsXG5cdFx0cmV2ZXJ0OiBmYWxzZSxcblx0XHRzY3JvbGw6IHRydWUsXG5cdFx0c2Nyb2xsU2Vuc2l0aXZpdHk6IDIwLFxuXHRcdHNjcm9sbFNwZWVkOiAyMCxcblx0XHRzY29wZTogXCJkZWZhdWx0XCIsXG5cdFx0dG9sZXJhbmNlOiBcImludGVyc2VjdFwiLFxuXHRcdHpJbmRleDogMTAwMCxcblxuXHRcdC8vIENhbGxiYWNrc1xuXHRcdGFjdGl2YXRlOiBudWxsLFxuXHRcdGJlZm9yZVN0b3A6IG51bGwsXG5cdFx0Y2hhbmdlOiBudWxsLFxuXHRcdGRlYWN0aXZhdGU6IG51bGwsXG5cdFx0b3V0OiBudWxsLFxuXHRcdG92ZXI6IG51bGwsXG5cdFx0cmVjZWl2ZTogbnVsbCxcblx0XHRyZW1vdmU6IG51bGwsXG5cdFx0c29ydDogbnVsbCxcblx0XHRzdGFydDogbnVsbCxcblx0XHRzdG9wOiBudWxsLFxuXHRcdHVwZGF0ZTogbnVsbFxuXHR9LFxuXG5cdF9pc092ZXJBeGlzOiBmdW5jdGlvbiggeCwgcmVmZXJlbmNlLCBzaXplICkge1xuXHRcdHJldHVybiAoIHggPj0gcmVmZXJlbmNlICkgJiYgKCB4IDwgKCByZWZlcmVuY2UgKyBzaXplICkgKTtcblx0fSxcblxuXHRfaXNGbG9hdGluZzogZnVuY3Rpb24oIGl0ZW0gKSB7XG5cdFx0cmV0dXJuICggL2xlZnR8cmlnaHQvICkudGVzdCggaXRlbS5jc3MoIFwiZmxvYXRcIiApICkgfHxcblx0XHRcdCggL2lubGluZXx0YWJsZS1jZWxsLyApLnRlc3QoIGl0ZW0uY3NzKCBcImRpc3BsYXlcIiApICk7XG5cdH0sXG5cblx0X2NyZWF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5jb250YWluZXJDYWNoZSA9IHt9O1xuXHRcdHRoaXMuX2FkZENsYXNzKCBcInVpLXNvcnRhYmxlXCIgKTtcblxuXHRcdC8vR2V0IHRoZSBpdGVtc1xuXHRcdHRoaXMucmVmcmVzaCgpO1xuXG5cdFx0Ly9MZXQncyBkZXRlcm1pbmUgdGhlIHBhcmVudCdzIG9mZnNldFxuXHRcdHRoaXMub2Zmc2V0ID0gdGhpcy5lbGVtZW50Lm9mZnNldCgpO1xuXG5cdFx0Ly9Jbml0aWFsaXplIG1vdXNlIGV2ZW50cyBmb3IgaW50ZXJhY3Rpb25cblx0XHR0aGlzLl9tb3VzZUluaXQoKTtcblxuXHRcdHRoaXMuX3NldEhhbmRsZUNsYXNzTmFtZSgpO1xuXG5cdFx0Ly9XZSdyZSByZWFkeSB0byBnb1xuXHRcdHRoaXMucmVhZHkgPSB0cnVlO1xuXG5cdH0sXG5cblx0X3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dGhpcy5fc3VwZXIoIGtleSwgdmFsdWUgKTtcblxuXHRcdGlmICgga2V5ID09PSBcImhhbmRsZVwiICkge1xuXHRcdFx0dGhpcy5fc2V0SGFuZGxlQ2xhc3NOYW1lKCk7XG5cdFx0fVxuXHR9LFxuXG5cdF9zZXRIYW5kbGVDbGFzc05hbWU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB0aGF0ID0gdGhpcztcblx0XHR0aGlzLl9yZW1vdmVDbGFzcyggdGhpcy5lbGVtZW50LmZpbmQoIFwiLnVpLXNvcnRhYmxlLWhhbmRsZVwiICksIFwidWktc29ydGFibGUtaGFuZGxlXCIgKTtcblx0XHQkLmVhY2goIHRoaXMuaXRlbXMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhhdC5fYWRkQ2xhc3MoXG5cdFx0XHRcdHRoaXMuaW5zdGFuY2Uub3B0aW9ucy5oYW5kbGUgP1xuXHRcdFx0XHRcdHRoaXMuaXRlbS5maW5kKCB0aGlzLmluc3RhbmNlLm9wdGlvbnMuaGFuZGxlICkgOlxuXHRcdFx0XHRcdHRoaXMuaXRlbSxcblx0XHRcdFx0XCJ1aS1zb3J0YWJsZS1oYW5kbGVcIlxuXHRcdFx0KTtcblx0XHR9ICk7XG5cdH0sXG5cblx0X2Rlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuX21vdXNlRGVzdHJveSgpO1xuXG5cdFx0Zm9yICggdmFyIGkgPSB0aGlzLml0ZW1zLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tICkge1xuXHRcdFx0dGhpcy5pdGVtc1sgaSBdLml0ZW0ucmVtb3ZlRGF0YSggdGhpcy53aWRnZXROYW1lICsgXCItaXRlbVwiICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0X21vdXNlQ2FwdHVyZTogZnVuY3Rpb24oIGV2ZW50LCBvdmVycmlkZUhhbmRsZSApIHtcblx0XHR2YXIgY3VycmVudEl0ZW0gPSBudWxsLFxuXHRcdFx0dmFsaWRIYW5kbGUgPSBmYWxzZSxcblx0XHRcdHRoYXQgPSB0aGlzO1xuXG5cdFx0aWYgKCB0aGlzLnJldmVydGluZyApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kaXNhYmxlZCB8fCB0aGlzLm9wdGlvbnMudHlwZSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvL1dlIGhhdmUgdG8gcmVmcmVzaCB0aGUgaXRlbXMgZGF0YSBvbmNlIGZpcnN0XG5cdFx0dGhpcy5fcmVmcmVzaEl0ZW1zKCBldmVudCApO1xuXG5cdFx0Ly9GaW5kIG91dCBpZiB0aGUgY2xpY2tlZCBub2RlIChvciBvbmUgb2YgaXRzIHBhcmVudHMpIGlzIGEgYWN0dWFsIGl0ZW0gaW4gdGhpcy5pdGVtc1xuXHRcdCQoIGV2ZW50LnRhcmdldCApLnBhcmVudHMoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggJC5kYXRhKCB0aGlzLCB0aGF0LndpZGdldE5hbWUgKyBcIi1pdGVtXCIgKSA9PT0gdGhhdCApIHtcblx0XHRcdFx0Y3VycmVudEl0ZW0gPSAkKCB0aGlzICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0aWYgKCAkLmRhdGEoIGV2ZW50LnRhcmdldCwgdGhhdC53aWRnZXROYW1lICsgXCItaXRlbVwiICkgPT09IHRoYXQgKSB7XG5cdFx0XHRjdXJyZW50SXRlbSA9ICQoIGV2ZW50LnRhcmdldCApO1xuXHRcdH1cblxuXHRcdGlmICggIWN1cnJlbnRJdGVtICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5oYW5kbGUgJiYgIW92ZXJyaWRlSGFuZGxlICkge1xuXHRcdFx0JCggdGhpcy5vcHRpb25zLmhhbmRsZSwgY3VycmVudEl0ZW0gKS5maW5kKCBcIipcIiApLmFkZEJhY2soKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzID09PSBldmVudC50YXJnZXQgKSB7XG5cdFx0XHRcdFx0dmFsaWRIYW5kbGUgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0XHRpZiAoICF2YWxpZEhhbmRsZSApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMuY3VycmVudEl0ZW0gPSBjdXJyZW50SXRlbTtcblx0XHR0aGlzLl9yZW1vdmVDdXJyZW50c0Zyb21JdGVtcygpO1xuXHRcdHJldHVybiB0cnVlO1xuXG5cdH0sXG5cblx0X21vdXNlU3RhcnQ6IGZ1bmN0aW9uKCBldmVudCwgb3ZlcnJpZGVIYW5kbGUsIG5vQWN0aXZhdGlvbiApIHtcblxuXHRcdHZhciBpLCBib2R5LFxuXHRcdFx0byA9IHRoaXMub3B0aW9ucztcblxuXHRcdHRoaXMuY3VycmVudENvbnRhaW5lciA9IHRoaXM7XG5cblx0XHQvL1dlIG9ubHkgbmVlZCB0byBjYWxsIHJlZnJlc2hQb3NpdGlvbnMsIGJlY2F1c2UgdGhlIHJlZnJlc2hJdGVtcyBjYWxsIGhhcyBiZWVuIG1vdmVkIHRvXG5cdFx0Ly8gbW91c2VDYXB0dXJlXG5cdFx0dGhpcy5yZWZyZXNoUG9zaXRpb25zKCk7XG5cblx0XHQvL0NyZWF0ZSBhbmQgYXBwZW5kIHRoZSB2aXNpYmxlIGhlbHBlclxuXHRcdHRoaXMuaGVscGVyID0gdGhpcy5fY3JlYXRlSGVscGVyKCBldmVudCApO1xuXG5cdFx0Ly9DYWNoZSB0aGUgaGVscGVyIHNpemVcblx0XHR0aGlzLl9jYWNoZUhlbHBlclByb3BvcnRpb25zKCk7XG5cblx0XHQvKlxuXHRcdCAqIC0gUG9zaXRpb24gZ2VuZXJhdGlvbiAtXG5cdFx0ICogVGhpcyBibG9jayBnZW5lcmF0ZXMgZXZlcnl0aGluZyBwb3NpdGlvbiByZWxhdGVkIC0gaXQncyB0aGUgY29yZSBvZiBkcmFnZ2FibGVzLlxuXHRcdCAqL1xuXG5cdFx0Ly9DYWNoZSB0aGUgbWFyZ2lucyBvZiB0aGUgb3JpZ2luYWwgZWxlbWVudFxuXHRcdHRoaXMuX2NhY2hlTWFyZ2lucygpO1xuXG5cdFx0Ly9HZXQgdGhlIG5leHQgc2Nyb2xsaW5nIHBhcmVudFxuXHRcdHRoaXMuc2Nyb2xsUGFyZW50ID0gdGhpcy5oZWxwZXIuc2Nyb2xsUGFyZW50KCk7XG5cblx0XHQvL1RoZSBlbGVtZW50J3MgYWJzb2x1dGUgcG9zaXRpb24gb24gdGhlIHBhZ2UgbWludXMgbWFyZ2luc1xuXHRcdHRoaXMub2Zmc2V0ID0gdGhpcy5jdXJyZW50SXRlbS5vZmZzZXQoKTtcblx0XHR0aGlzLm9mZnNldCA9IHtcblx0XHRcdHRvcDogdGhpcy5vZmZzZXQudG9wIC0gdGhpcy5tYXJnaW5zLnRvcCxcblx0XHRcdGxlZnQ6IHRoaXMub2Zmc2V0LmxlZnQgLSB0aGlzLm1hcmdpbnMubGVmdFxuXHRcdH07XG5cblx0XHQkLmV4dGVuZCggdGhpcy5vZmZzZXQsIHtcblx0XHRcdGNsaWNrOiB7IC8vV2hlcmUgdGhlIGNsaWNrIGhhcHBlbmVkLCByZWxhdGl2ZSB0byB0aGUgZWxlbWVudFxuXHRcdFx0XHRsZWZ0OiBldmVudC5wYWdlWCAtIHRoaXMub2Zmc2V0LmxlZnQsXG5cdFx0XHRcdHRvcDogZXZlbnQucGFnZVkgLSB0aGlzLm9mZnNldC50b3Bcblx0XHRcdH0sXG5cdFx0XHRwYXJlbnQ6IHRoaXMuX2dldFBhcmVudE9mZnNldCgpLFxuXG5cdFx0XHQvLyBUaGlzIGlzIGEgcmVsYXRpdmUgdG8gYWJzb2x1dGUgcG9zaXRpb24gbWludXMgdGhlIGFjdHVhbCBwb3NpdGlvbiBjYWxjdWxhdGlvbiAtXG5cdFx0XHQvLyBvbmx5IHVzZWQgZm9yIHJlbGF0aXZlIHBvc2l0aW9uZWQgaGVscGVyXG5cdFx0XHRyZWxhdGl2ZTogdGhpcy5fZ2V0UmVsYXRpdmVPZmZzZXQoKVxuXHRcdH0gKTtcblxuXHRcdC8vIE9ubHkgYWZ0ZXIgd2UgZ290IHRoZSBvZmZzZXQsIHdlIGNhbiBjaGFuZ2UgdGhlIGhlbHBlcidzIHBvc2l0aW9uIHRvIGFic29sdXRlXG5cdFx0Ly8gVE9ETzogU3RpbGwgbmVlZCB0byBmaWd1cmUgb3V0IGEgd2F5IHRvIG1ha2UgcmVsYXRpdmUgc29ydGluZyBwb3NzaWJsZVxuXHRcdHRoaXMuaGVscGVyLmNzcyggXCJwb3NpdGlvblwiLCBcImFic29sdXRlXCIgKTtcblx0XHR0aGlzLmNzc1Bvc2l0aW9uID0gdGhpcy5oZWxwZXIuY3NzKCBcInBvc2l0aW9uXCIgKTtcblxuXHRcdC8vR2VuZXJhdGUgdGhlIG9yaWdpbmFsIHBvc2l0aW9uXG5cdFx0dGhpcy5vcmlnaW5hbFBvc2l0aW9uID0gdGhpcy5fZ2VuZXJhdGVQb3NpdGlvbiggZXZlbnQgKTtcblx0XHR0aGlzLm9yaWdpbmFsUGFnZVggPSBldmVudC5wYWdlWDtcblx0XHR0aGlzLm9yaWdpbmFsUGFnZVkgPSBldmVudC5wYWdlWTtcblxuXHRcdC8vQWRqdXN0IHRoZSBtb3VzZSBvZmZzZXQgcmVsYXRpdmUgdG8gdGhlIGhlbHBlciBpZiBcImN1cnNvckF0XCIgaXMgc3VwcGxpZWRcblx0XHQoIG8uY3Vyc29yQXQgJiYgdGhpcy5fYWRqdXN0T2Zmc2V0RnJvbUhlbHBlciggby5jdXJzb3JBdCApICk7XG5cblx0XHQvL0NhY2hlIHRoZSBmb3JtZXIgRE9NIHBvc2l0aW9uXG5cdFx0dGhpcy5kb21Qb3NpdGlvbiA9IHtcblx0XHRcdHByZXY6IHRoaXMuY3VycmVudEl0ZW0ucHJldigpWyAwIF0sXG5cdFx0XHRwYXJlbnQ6IHRoaXMuY3VycmVudEl0ZW0ucGFyZW50KClbIDAgXVxuXHRcdH07XG5cblx0XHQvLyBJZiB0aGUgaGVscGVyIGlzIG5vdCB0aGUgb3JpZ2luYWwsIGhpZGUgdGhlIG9yaWdpbmFsIHNvIGl0J3Mgbm90IHBsYXlpbmcgYW55IHJvbGUgZHVyaW5nXG5cdFx0Ly8gdGhlIGRyYWcsIHdvbid0IGNhdXNlIGFueXRoaW5nIGJhZCB0aGlzIHdheVxuXHRcdGlmICggdGhpcy5oZWxwZXJbIDAgXSAhPT0gdGhpcy5jdXJyZW50SXRlbVsgMCBdICkge1xuXHRcdFx0dGhpcy5jdXJyZW50SXRlbS5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0Ly9DcmVhdGUgdGhlIHBsYWNlaG9sZGVyXG5cdFx0dGhpcy5fY3JlYXRlUGxhY2Vob2xkZXIoKTtcblxuXHRcdC8vU2V0IGEgY29udGFpbm1lbnQgaWYgZ2l2ZW4gaW4gdGhlIG9wdGlvbnNcblx0XHRpZiAoIG8uY29udGFpbm1lbnQgKSB7XG5cdFx0XHR0aGlzLl9zZXRDb250YWlubWVudCgpO1xuXHRcdH1cblxuXHRcdGlmICggby5jdXJzb3IgJiYgby5jdXJzb3IgIT09IFwiYXV0b1wiICkgeyAvLyBjdXJzb3Igb3B0aW9uXG5cdFx0XHRib2R5ID0gdGhpcy5kb2N1bWVudC5maW5kKCBcImJvZHlcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRVxuXHRcdFx0dGhpcy5zdG9yZWRDdXJzb3IgPSBib2R5LmNzcyggXCJjdXJzb3JcIiApO1xuXHRcdFx0Ym9keS5jc3MoIFwiY3Vyc29yXCIsIG8uY3Vyc29yICk7XG5cblx0XHRcdHRoaXMuc3RvcmVkU3R5bGVzaGVldCA9XG5cdFx0XHRcdCQoIFwiPHN0eWxlPip7IGN1cnNvcjogXCIgKyBvLmN1cnNvciArIFwiICFpbXBvcnRhbnQ7IH08L3N0eWxlPlwiICkuYXBwZW5kVG8oIGJvZHkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG8ub3BhY2l0eSApIHsgLy8gb3BhY2l0eSBvcHRpb25cblx0XHRcdGlmICggdGhpcy5oZWxwZXIuY3NzKCBcIm9wYWNpdHlcIiApICkge1xuXHRcdFx0XHR0aGlzLl9zdG9yZWRPcGFjaXR5ID0gdGhpcy5oZWxwZXIuY3NzKCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5oZWxwZXIuY3NzKCBcIm9wYWNpdHlcIiwgby5vcGFjaXR5ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvLnpJbmRleCApIHsgLy8gekluZGV4IG9wdGlvblxuXHRcdFx0aWYgKCB0aGlzLmhlbHBlci5jc3MoIFwiekluZGV4XCIgKSApIHtcblx0XHRcdFx0dGhpcy5fc3RvcmVkWkluZGV4ID0gdGhpcy5oZWxwZXIuY3NzKCBcInpJbmRleFwiICk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLmhlbHBlci5jc3MoIFwiekluZGV4XCIsIG8uekluZGV4ICk7XG5cdFx0fVxuXG5cdFx0Ly9QcmVwYXJlIHNjcm9sbGluZ1xuXHRcdGlmICggdGhpcy5zY3JvbGxQYXJlbnRbIDAgXSAhPT0gdGhpcy5kb2N1bWVudFsgMCBdICYmXG5cdFx0XHRcdHRoaXMuc2Nyb2xsUGFyZW50WyAwIF0udGFnTmFtZSAhPT0gXCJIVE1MXCIgKSB7XG5cdFx0XHR0aGlzLm92ZXJmbG93T2Zmc2V0ID0gdGhpcy5zY3JvbGxQYXJlbnQub2Zmc2V0KCk7XG5cdFx0fVxuXG5cdFx0Ly9DYWxsIGNhbGxiYWNrc1xuXHRcdHRoaXMuX3RyaWdnZXIoIFwic3RhcnRcIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCgpICk7XG5cblx0XHQvL1JlY2FjaGUgdGhlIGhlbHBlciBzaXplXG5cdFx0aWYgKCAhdGhpcy5fcHJlc2VydmVIZWxwZXJQcm9wb3J0aW9ucyApIHtcblx0XHRcdHRoaXMuX2NhY2hlSGVscGVyUHJvcG9ydGlvbnMoKTtcblx0XHR9XG5cblx0XHQvL1Bvc3QgXCJhY3RpdmF0ZVwiIGV2ZW50cyB0byBwb3NzaWJsZSBjb250YWluZXJzXG5cdFx0aWYgKCAhbm9BY3RpdmF0aW9uICkge1xuXHRcdFx0Zm9yICggaSA9IHRoaXMuY29udGFpbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSApIHtcblx0XHRcdFx0dGhpcy5jb250YWluZXJzWyBpIF0uX3RyaWdnZXIoIFwiYWN0aXZhdGVcIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCggdGhpcyApICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly9QcmVwYXJlIHBvc3NpYmxlIGRyb3BwYWJsZXNcblx0XHRpZiAoICQudWkuZGRtYW5hZ2VyICkge1xuXHRcdFx0JC51aS5kZG1hbmFnZXIuY3VycmVudCA9IHRoaXM7XG5cdFx0fVxuXG5cdFx0aWYgKCAkLnVpLmRkbWFuYWdlciAmJiAhby5kcm9wQmVoYXZpb3VyICkge1xuXHRcdFx0JC51aS5kZG1hbmFnZXIucHJlcGFyZU9mZnNldHMoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0dGhpcy5kcmFnZ2luZyA9IHRydWU7XG5cblx0XHR0aGlzLl9hZGRDbGFzcyggdGhpcy5oZWxwZXIsIFwidWktc29ydGFibGUtaGVscGVyXCIgKTtcblxuXHRcdC8vIEV4ZWN1dGUgdGhlIGRyYWcgb25jZSAtIHRoaXMgY2F1c2VzIHRoZSBoZWxwZXIgbm90IHRvIGJlIHZpc2libGViZWZvcmUgZ2V0dGluZyBpdHNcblx0XHQvLyBjb3JyZWN0IHBvc2l0aW9uXG5cdFx0dGhpcy5fbW91c2VEcmFnKCBldmVudCApO1xuXHRcdHJldHVybiB0cnVlO1xuXG5cdH0sXG5cblx0X21vdXNlRHJhZzogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBpLCBpdGVtLCBpdGVtRWxlbWVudCwgaW50ZXJzZWN0aW9uLFxuXHRcdFx0byA9IHRoaXMub3B0aW9ucyxcblx0XHRcdHNjcm9sbGVkID0gZmFsc2U7XG5cblx0XHQvL0NvbXB1dGUgdGhlIGhlbHBlcnMgcG9zaXRpb25cblx0XHR0aGlzLnBvc2l0aW9uID0gdGhpcy5fZ2VuZXJhdGVQb3NpdGlvbiggZXZlbnQgKTtcblx0XHR0aGlzLnBvc2l0aW9uQWJzID0gdGhpcy5fY29udmVydFBvc2l0aW9uVG8oIFwiYWJzb2x1dGVcIiApO1xuXG5cdFx0aWYgKCAhdGhpcy5sYXN0UG9zaXRpb25BYnMgKSB7XG5cdFx0XHR0aGlzLmxhc3RQb3NpdGlvbkFicyA9IHRoaXMucG9zaXRpb25BYnM7XG5cdFx0fVxuXG5cdFx0Ly9EbyBzY3JvbGxpbmdcblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zY3JvbGwgKSB7XG5cdFx0XHRpZiAoIHRoaXMuc2Nyb2xsUGFyZW50WyAwIF0gIT09IHRoaXMuZG9jdW1lbnRbIDAgXSAmJlxuXHRcdFx0XHRcdHRoaXMuc2Nyb2xsUGFyZW50WyAwIF0udGFnTmFtZSAhPT0gXCJIVE1MXCIgKSB7XG5cblx0XHRcdFx0aWYgKCAoIHRoaXMub3ZlcmZsb3dPZmZzZXQudG9wICsgdGhpcy5zY3JvbGxQYXJlbnRbIDAgXS5vZmZzZXRIZWlnaHQgKSAtXG5cdFx0XHRcdFx0XHRldmVudC5wYWdlWSA8IG8uc2Nyb2xsU2Vuc2l0aXZpdHkgKSB7XG5cdFx0XHRcdFx0dGhpcy5zY3JvbGxQYXJlbnRbIDAgXS5zY3JvbGxUb3AgPVxuXHRcdFx0XHRcdFx0c2Nyb2xsZWQgPSB0aGlzLnNjcm9sbFBhcmVudFsgMCBdLnNjcm9sbFRvcCArIG8uc2Nyb2xsU3BlZWQ7XG5cdFx0XHRcdH0gZWxzZSBpZiAoIGV2ZW50LnBhZ2VZIC0gdGhpcy5vdmVyZmxvd09mZnNldC50b3AgPCBvLnNjcm9sbFNlbnNpdGl2aXR5ICkge1xuXHRcdFx0XHRcdHRoaXMuc2Nyb2xsUGFyZW50WyAwIF0uc2Nyb2xsVG9wID1cblx0XHRcdFx0XHRcdHNjcm9sbGVkID0gdGhpcy5zY3JvbGxQYXJlbnRbIDAgXS5zY3JvbGxUb3AgLSBvLnNjcm9sbFNwZWVkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCAoIHRoaXMub3ZlcmZsb3dPZmZzZXQubGVmdCArIHRoaXMuc2Nyb2xsUGFyZW50WyAwIF0ub2Zmc2V0V2lkdGggKSAtXG5cdFx0XHRcdFx0XHRldmVudC5wYWdlWCA8IG8uc2Nyb2xsU2Vuc2l0aXZpdHkgKSB7XG5cdFx0XHRcdFx0dGhpcy5zY3JvbGxQYXJlbnRbIDAgXS5zY3JvbGxMZWZ0ID0gc2Nyb2xsZWQgPVxuXHRcdFx0XHRcdFx0dGhpcy5zY3JvbGxQYXJlbnRbIDAgXS5zY3JvbGxMZWZ0ICsgby5zY3JvbGxTcGVlZDtcblx0XHRcdFx0fSBlbHNlIGlmICggZXZlbnQucGFnZVggLSB0aGlzLm92ZXJmbG93T2Zmc2V0LmxlZnQgPCBvLnNjcm9sbFNlbnNpdGl2aXR5ICkge1xuXHRcdFx0XHRcdHRoaXMuc2Nyb2xsUGFyZW50WyAwIF0uc2Nyb2xsTGVmdCA9IHNjcm9sbGVkID1cblx0XHRcdFx0XHRcdHRoaXMuc2Nyb2xsUGFyZW50WyAwIF0uc2Nyb2xsTGVmdCAtIG8uc2Nyb2xsU3BlZWQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRpZiAoIGV2ZW50LnBhZ2VZIC0gdGhpcy5kb2N1bWVudC5zY3JvbGxUb3AoKSA8IG8uc2Nyb2xsU2Vuc2l0aXZpdHkgKSB7XG5cdFx0XHRcdFx0c2Nyb2xsZWQgPSB0aGlzLmRvY3VtZW50LnNjcm9sbFRvcCggdGhpcy5kb2N1bWVudC5zY3JvbGxUb3AoKSAtIG8uc2Nyb2xsU3BlZWQgKTtcblx0XHRcdFx0fSBlbHNlIGlmICggdGhpcy53aW5kb3cuaGVpZ2h0KCkgLSAoIGV2ZW50LnBhZ2VZIC0gdGhpcy5kb2N1bWVudC5zY3JvbGxUb3AoKSApIDxcblx0XHRcdFx0XHRcdG8uc2Nyb2xsU2Vuc2l0aXZpdHkgKSB7XG5cdFx0XHRcdFx0c2Nyb2xsZWQgPSB0aGlzLmRvY3VtZW50LnNjcm9sbFRvcCggdGhpcy5kb2N1bWVudC5zY3JvbGxUb3AoKSArIG8uc2Nyb2xsU3BlZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggZXZlbnQucGFnZVggLSB0aGlzLmRvY3VtZW50LnNjcm9sbExlZnQoKSA8IG8uc2Nyb2xsU2Vuc2l0aXZpdHkgKSB7XG5cdFx0XHRcdFx0c2Nyb2xsZWQgPSB0aGlzLmRvY3VtZW50LnNjcm9sbExlZnQoXG5cdFx0XHRcdFx0XHR0aGlzLmRvY3VtZW50LnNjcm9sbExlZnQoKSAtIG8uc2Nyb2xsU3BlZWRcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKCB0aGlzLndpbmRvdy53aWR0aCgpIC0gKCBldmVudC5wYWdlWCAtIHRoaXMuZG9jdW1lbnQuc2Nyb2xsTGVmdCgpICkgPFxuXHRcdFx0XHRcdFx0by5zY3JvbGxTZW5zaXRpdml0eSApIHtcblx0XHRcdFx0XHRzY3JvbGxlZCA9IHRoaXMuZG9jdW1lbnQuc2Nyb2xsTGVmdChcblx0XHRcdFx0XHRcdHRoaXMuZG9jdW1lbnQuc2Nyb2xsTGVmdCgpICsgby5zY3JvbGxTcGVlZFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNjcm9sbGVkICE9PSBmYWxzZSAmJiAkLnVpLmRkbWFuYWdlciAmJiAhby5kcm9wQmVoYXZpb3VyICkge1xuXHRcdFx0XHQkLnVpLmRkbWFuYWdlci5wcmVwYXJlT2Zmc2V0cyggdGhpcywgZXZlbnQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvL1JlZ2VuZXJhdGUgdGhlIGFic29sdXRlIHBvc2l0aW9uIHVzZWQgZm9yIHBvc2l0aW9uIGNoZWNrc1xuXHRcdHRoaXMucG9zaXRpb25BYnMgPSB0aGlzLl9jb252ZXJ0UG9zaXRpb25UbyggXCJhYnNvbHV0ZVwiICk7XG5cblx0XHQvL1NldCB0aGUgaGVscGVyIHBvc2l0aW9uXG5cdFx0aWYgKCAhdGhpcy5vcHRpb25zLmF4aXMgfHwgdGhpcy5vcHRpb25zLmF4aXMgIT09IFwieVwiICkge1xuXHRcdFx0dGhpcy5oZWxwZXJbIDAgXS5zdHlsZS5sZWZ0ID0gdGhpcy5wb3NpdGlvbi5sZWZ0ICsgXCJweFwiO1xuXHRcdH1cblx0XHRpZiAoICF0aGlzLm9wdGlvbnMuYXhpcyB8fCB0aGlzLm9wdGlvbnMuYXhpcyAhPT0gXCJ4XCIgKSB7XG5cdFx0XHR0aGlzLmhlbHBlclsgMCBdLnN0eWxlLnRvcCA9IHRoaXMucG9zaXRpb24udG9wICsgXCJweFwiO1xuXHRcdH1cblxuXHRcdC8vUmVhcnJhbmdlXG5cdFx0Zm9yICggaSA9IHRoaXMuaXRlbXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0gKSB7XG5cblx0XHRcdC8vQ2FjaGUgdmFyaWFibGVzIGFuZCBpbnRlcnNlY3Rpb24sIGNvbnRpbnVlIGlmIG5vIGludGVyc2VjdGlvblxuXHRcdFx0aXRlbSA9IHRoaXMuaXRlbXNbIGkgXTtcblx0XHRcdGl0ZW1FbGVtZW50ID0gaXRlbS5pdGVtWyAwIF07XG5cdFx0XHRpbnRlcnNlY3Rpb24gPSB0aGlzLl9pbnRlcnNlY3RzV2l0aFBvaW50ZXIoIGl0ZW0gKTtcblx0XHRcdGlmICggIWludGVyc2VjdGlvbiApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgcHV0IHRoZSBwbGFjZWhvbGRlciBpbnNpZGUgdGhlIGN1cnJlbnQgQ29udGFpbmVyLCBza2lwIGFsbFxuXHRcdFx0Ly8gaXRlbXMgZnJvbSBvdGhlciBjb250YWluZXJzLiBUaGlzIHdvcmtzIGJlY2F1c2Ugd2hlbiBtb3Zpbmdcblx0XHRcdC8vIGFuIGl0ZW0gZnJvbSBvbmUgY29udGFpbmVyIHRvIGFub3RoZXIgdGhlXG5cdFx0XHQvLyBjdXJyZW50Q29udGFpbmVyIGlzIHN3aXRjaGVkIGJlZm9yZSB0aGUgcGxhY2Vob2xkZXIgaXMgbW92ZWQuXG5cdFx0XHQvL1xuXHRcdFx0Ly8gV2l0aG91dCB0aGlzLCBtb3ZpbmcgaXRlbXMgaW4gXCJzdWItc29ydGFibGVzXCIgY2FuIGNhdXNlXG5cdFx0XHQvLyB0aGUgcGxhY2Vob2xkZXIgdG8gaml0dGVyIGJldHdlZW4gdGhlIG91dGVyIGFuZCBpbm5lciBjb250YWluZXIuXG5cdFx0XHRpZiAoIGl0ZW0uaW5zdGFuY2UgIT09IHRoaXMuY3VycmVudENvbnRhaW5lciApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbm5vdCBpbnRlcnNlY3Qgd2l0aCBpdHNlbGZcblx0XHRcdC8vIG5vIHVzZWxlc3MgYWN0aW9ucyB0aGF0IGhhdmUgYmVlbiBkb25lIGJlZm9yZVxuXHRcdFx0Ly8gbm8gYWN0aW9uIGlmIHRoZSBpdGVtIG1vdmVkIGlzIHRoZSBwYXJlbnQgb2YgdGhlIGl0ZW0gY2hlY2tlZFxuXHRcdFx0aWYgKCBpdGVtRWxlbWVudCAhPT0gdGhpcy5jdXJyZW50SXRlbVsgMCBdICYmXG5cdFx0XHRcdHRoaXMucGxhY2Vob2xkZXJbIGludGVyc2VjdGlvbiA9PT0gMSA/IFwibmV4dFwiIDogXCJwcmV2XCIgXSgpWyAwIF0gIT09IGl0ZW1FbGVtZW50ICYmXG5cdFx0XHRcdCEkLmNvbnRhaW5zKCB0aGlzLnBsYWNlaG9sZGVyWyAwIF0sIGl0ZW1FbGVtZW50ICkgJiZcblx0XHRcdFx0KCB0aGlzLm9wdGlvbnMudHlwZSA9PT0gXCJzZW1pLWR5bmFtaWNcIiA/XG5cdFx0XHRcdFx0ISQuY29udGFpbnMoIHRoaXMuZWxlbWVudFsgMCBdLCBpdGVtRWxlbWVudCApIDpcblx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdClcblx0XHRcdCkge1xuXG5cdFx0XHRcdHRoaXMuZGlyZWN0aW9uID0gaW50ZXJzZWN0aW9uID09PSAxID8gXCJkb3duXCIgOiBcInVwXCI7XG5cblx0XHRcdFx0aWYgKCB0aGlzLm9wdGlvbnMudG9sZXJhbmNlID09PSBcInBvaW50ZXJcIiB8fCB0aGlzLl9pbnRlcnNlY3RzV2l0aFNpZGVzKCBpdGVtICkgKSB7XG5cdFx0XHRcdFx0dGhpcy5fcmVhcnJhbmdlKCBldmVudCwgaXRlbSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5fdHJpZ2dlciggXCJjaGFuZ2VcIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCgpICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vUG9zdCBldmVudHMgdG8gY29udGFpbmVyc1xuXHRcdHRoaXMuX2NvbnRhY3RDb250YWluZXJzKCBldmVudCApO1xuXG5cdFx0Ly9JbnRlcmNvbm5lY3Qgd2l0aCBkcm9wcGFibGVzXG5cdFx0aWYgKCAkLnVpLmRkbWFuYWdlciApIHtcblx0XHRcdCQudWkuZGRtYW5hZ2VyLmRyYWcoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0Ly9DYWxsIGNhbGxiYWNrc1xuXHRcdHRoaXMuX3RyaWdnZXIoIFwic29ydFwiLCBldmVudCwgdGhpcy5fdWlIYXNoKCkgKTtcblxuXHRcdHRoaXMubGFzdFBvc2l0aW9uQWJzID0gdGhpcy5wb3NpdGlvbkFicztcblx0XHRyZXR1cm4gZmFsc2U7XG5cblx0fSxcblxuXHRfbW91c2VTdG9wOiBmdW5jdGlvbiggZXZlbnQsIG5vUHJvcGFnYXRpb24gKSB7XG5cblx0XHRpZiAoICFldmVudCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvL0lmIHdlIGFyZSB1c2luZyBkcm9wcGFibGVzLCBpbmZvcm0gdGhlIG1hbmFnZXIgYWJvdXQgdGhlIGRyb3Bcblx0XHRpZiAoICQudWkuZGRtYW5hZ2VyICYmICF0aGlzLm9wdGlvbnMuZHJvcEJlaGF2aW91ciApIHtcblx0XHRcdCQudWkuZGRtYW5hZ2VyLmRyb3AoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMucmV2ZXJ0ICkge1xuXHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRjdXIgPSB0aGlzLnBsYWNlaG9sZGVyLm9mZnNldCgpLFxuXHRcdFx0XHRheGlzID0gdGhpcy5vcHRpb25zLmF4aXMsXG5cdFx0XHRcdGFuaW1hdGlvbiA9IHt9O1xuXG5cdFx0XHRpZiAoICFheGlzIHx8IGF4aXMgPT09IFwieFwiICkge1xuXHRcdFx0XHRhbmltYXRpb24ubGVmdCA9IGN1ci5sZWZ0IC0gdGhpcy5vZmZzZXQucGFyZW50LmxlZnQgLSB0aGlzLm1hcmdpbnMubGVmdCArXG5cdFx0XHRcdFx0KCB0aGlzLm9mZnNldFBhcmVudFsgMCBdID09PSB0aGlzLmRvY3VtZW50WyAwIF0uYm9keSA/XG5cdFx0XHRcdFx0XHQwIDpcblx0XHRcdFx0XHRcdHRoaXMub2Zmc2V0UGFyZW50WyAwIF0uc2Nyb2xsTGVmdFxuXHRcdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFheGlzIHx8IGF4aXMgPT09IFwieVwiICkge1xuXHRcdFx0XHRhbmltYXRpb24udG9wID0gY3VyLnRvcCAtIHRoaXMub2Zmc2V0LnBhcmVudC50b3AgLSB0aGlzLm1hcmdpbnMudG9wICtcblx0XHRcdFx0XHQoIHRoaXMub2Zmc2V0UGFyZW50WyAwIF0gPT09IHRoaXMuZG9jdW1lbnRbIDAgXS5ib2R5ID9cblx0XHRcdFx0XHRcdDAgOlxuXHRcdFx0XHRcdFx0dGhpcy5vZmZzZXRQYXJlbnRbIDAgXS5zY3JvbGxUb3Bcblx0XHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5yZXZlcnRpbmcgPSB0cnVlO1xuXHRcdFx0JCggdGhpcy5oZWxwZXIgKS5hbmltYXRlKFxuXHRcdFx0XHRhbmltYXRpb24sXG5cdFx0XHRcdHBhcnNlSW50KCB0aGlzLm9wdGlvbnMucmV2ZXJ0LCAxMCApIHx8IDUwMCxcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0dGhhdC5fY2xlYXIoIGV2ZW50ICk7XG5cdFx0XHRcdH1cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuX2NsZWFyKCBldmVudCwgbm9Qcm9wYWdhdGlvbiApO1xuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblxuXHR9LFxuXG5cdGNhbmNlbDogZnVuY3Rpb24oKSB7XG5cblx0XHRpZiAoIHRoaXMuZHJhZ2dpbmcgKSB7XG5cblx0XHRcdHRoaXMuX21vdXNlVXAoIG5ldyAkLkV2ZW50KCBcIm1vdXNldXBcIiwgeyB0YXJnZXQ6IG51bGwgfSApICk7XG5cblx0XHRcdGlmICggdGhpcy5vcHRpb25zLmhlbHBlciA9PT0gXCJvcmlnaW5hbFwiICkge1xuXHRcdFx0XHR0aGlzLmN1cnJlbnRJdGVtLmNzcyggdGhpcy5fc3RvcmVkQ1NTICk7XG5cdFx0XHRcdHRoaXMuX3JlbW92ZUNsYXNzKCB0aGlzLmN1cnJlbnRJdGVtLCBcInVpLXNvcnRhYmxlLWhlbHBlclwiICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLmN1cnJlbnRJdGVtLnNob3coKTtcblx0XHRcdH1cblxuXHRcdFx0Ly9Qb3N0IGRlYWN0aXZhdGluZyBldmVudHMgdG8gY29udGFpbmVyc1xuXHRcdFx0Zm9yICggdmFyIGkgPSB0aGlzLmNvbnRhaW5lcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0gKSB7XG5cdFx0XHRcdHRoaXMuY29udGFpbmVyc1sgaSBdLl90cmlnZ2VyKCBcImRlYWN0aXZhdGVcIiwgbnVsbCwgdGhpcy5fdWlIYXNoKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCB0aGlzLmNvbnRhaW5lcnNbIGkgXS5jb250YWluZXJDYWNoZS5vdmVyICkge1xuXHRcdFx0XHRcdHRoaXMuY29udGFpbmVyc1sgaSBdLl90cmlnZ2VyKCBcIm91dFwiLCBudWxsLCB0aGlzLl91aUhhc2goIHRoaXMgKSApO1xuXHRcdFx0XHRcdHRoaXMuY29udGFpbmVyc1sgaSBdLmNvbnRhaW5lckNhY2hlLm92ZXIgPSAwO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMucGxhY2Vob2xkZXIgKSB7XG5cblx0XHRcdC8vJCh0aGlzLnBsYWNlaG9sZGVyWzBdKS5yZW1vdmUoKTsgd291bGQgaGF2ZSBiZWVuIHRoZSBqUXVlcnkgd2F5IC0gdW5mb3J0dW5hdGVseSxcblx0XHRcdC8vIGl0IHVuYmluZHMgQUxMIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCBub2RlIVxuXHRcdFx0aWYgKCB0aGlzLnBsYWNlaG9sZGVyWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wbGFjZWhvbGRlclsgMCBdLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRoaXMucGxhY2Vob2xkZXJbIDAgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCB0aGlzLm9wdGlvbnMuaGVscGVyICE9PSBcIm9yaWdpbmFsXCIgJiYgdGhpcy5oZWxwZXIgJiZcblx0XHRcdFx0XHR0aGlzLmhlbHBlclsgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMuaGVscGVyLnJlbW92ZSgpO1xuXHRcdFx0fVxuXG5cdFx0XHQkLmV4dGVuZCggdGhpcywge1xuXHRcdFx0XHRoZWxwZXI6IG51bGwsXG5cdFx0XHRcdGRyYWdnaW5nOiBmYWxzZSxcblx0XHRcdFx0cmV2ZXJ0aW5nOiBmYWxzZSxcblx0XHRcdFx0X25vRmluYWxTb3J0OiBudWxsXG5cdFx0XHR9ICk7XG5cblx0XHRcdGlmICggdGhpcy5kb21Qb3NpdGlvbi5wcmV2ICkge1xuXHRcdFx0XHQkKCB0aGlzLmRvbVBvc2l0aW9uLnByZXYgKS5hZnRlciggdGhpcy5jdXJyZW50SXRlbSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0JCggdGhpcy5kb21Qb3NpdGlvbi5wYXJlbnQgKS5wcmVwZW5kKCB0aGlzLmN1cnJlbnRJdGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCBvICkge1xuXG5cdFx0dmFyIGl0ZW1zID0gdGhpcy5fZ2V0SXRlbXNBc2pRdWVyeSggbyAmJiBvLmNvbm5lY3RlZCApLFxuXHRcdFx0c3RyID0gW107XG5cdFx0byA9IG8gfHwge307XG5cblx0XHQkKCBpdGVtcyApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHJlcyA9ICggJCggby5pdGVtIHx8IHRoaXMgKS5hdHRyKCBvLmF0dHJpYnV0ZSB8fCBcImlkXCIgKSB8fCBcIlwiIClcblx0XHRcdFx0Lm1hdGNoKCBvLmV4cHJlc3Npb24gfHwgKCAvKC4rKVtcXC09X10oLispLyApICk7XG5cdFx0XHRpZiAoIHJlcyApIHtcblx0XHRcdFx0c3RyLnB1c2goXG5cdFx0XHRcdFx0KCBvLmtleSB8fCByZXNbIDEgXSArIFwiW11cIiApICtcblx0XHRcdFx0XHRcIj1cIiArICggby5rZXkgJiYgby5leHByZXNzaW9uID8gcmVzWyAxIF0gOiByZXNbIDIgXSApICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdFx0aWYgKCAhc3RyLmxlbmd0aCAmJiBvLmtleSApIHtcblx0XHRcdHN0ci5wdXNoKCBvLmtleSArIFwiPVwiICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHN0ci5qb2luKCBcIiZcIiApO1xuXG5cdH0sXG5cblx0dG9BcnJheTogZnVuY3Rpb24oIG8gKSB7XG5cblx0XHR2YXIgaXRlbXMgPSB0aGlzLl9nZXRJdGVtc0FzalF1ZXJ5KCBvICYmIG8uY29ubmVjdGVkICksXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdG8gPSBvIHx8IHt9O1xuXG5cdFx0aXRlbXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXQucHVzaCggJCggby5pdGVtIHx8IHRoaXMgKS5hdHRyKCBvLmF0dHJpYnV0ZSB8fCBcImlkXCIgKSB8fCBcIlwiICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiByZXQ7XG5cblx0fSxcblxuXHQvKiBCZSBjYXJlZnVsIHdpdGggdGhlIGZvbGxvd2luZyBjb3JlIGZ1bmN0aW9ucyAqL1xuXHRfaW50ZXJzZWN0c1dpdGg6IGZ1bmN0aW9uKCBpdGVtICkge1xuXG5cdFx0dmFyIHgxID0gdGhpcy5wb3NpdGlvbkFicy5sZWZ0LFxuXHRcdFx0eDIgPSB4MSArIHRoaXMuaGVscGVyUHJvcG9ydGlvbnMud2lkdGgsXG5cdFx0XHR5MSA9IHRoaXMucG9zaXRpb25BYnMudG9wLFxuXHRcdFx0eTIgPSB5MSArIHRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0LFxuXHRcdFx0bCA9IGl0ZW0ubGVmdCxcblx0XHRcdHIgPSBsICsgaXRlbS53aWR0aCxcblx0XHRcdHQgPSBpdGVtLnRvcCxcblx0XHRcdGIgPSB0ICsgaXRlbS5oZWlnaHQsXG5cdFx0XHRkeUNsaWNrID0gdGhpcy5vZmZzZXQuY2xpY2sudG9wLFxuXHRcdFx0ZHhDbGljayA9IHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQsXG5cdFx0XHRpc092ZXJFbGVtZW50SGVpZ2h0ID0gKCB0aGlzLm9wdGlvbnMuYXhpcyA9PT0gXCJ4XCIgKSB8fCAoICggeTEgKyBkeUNsaWNrICkgPiB0ICYmXG5cdFx0XHRcdCggeTEgKyBkeUNsaWNrICkgPCBiICksXG5cdFx0XHRpc092ZXJFbGVtZW50V2lkdGggPSAoIHRoaXMub3B0aW9ucy5heGlzID09PSBcInlcIiApIHx8ICggKCB4MSArIGR4Q2xpY2sgKSA+IGwgJiZcblx0XHRcdFx0KCB4MSArIGR4Q2xpY2sgKSA8IHIgKSxcblx0XHRcdGlzT3ZlckVsZW1lbnQgPSBpc092ZXJFbGVtZW50SGVpZ2h0ICYmIGlzT3ZlckVsZW1lbnRXaWR0aDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnRvbGVyYW5jZSA9PT0gXCJwb2ludGVyXCIgfHxcblx0XHRcdHRoaXMub3B0aW9ucy5mb3JjZVBvaW50ZXJGb3JDb250YWluZXJzIHx8XG5cdFx0XHQoIHRoaXMub3B0aW9ucy50b2xlcmFuY2UgIT09IFwicG9pbnRlclwiICYmXG5cdFx0XHRcdHRoaXMuaGVscGVyUHJvcG9ydGlvbnNbIHRoaXMuZmxvYXRpbmcgPyBcIndpZHRoXCIgOiBcImhlaWdodFwiIF0gPlxuXHRcdFx0XHRpdGVtWyB0aGlzLmZsb2F0aW5nID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIiBdIClcblx0XHQpIHtcblx0XHRcdHJldHVybiBpc092ZXJFbGVtZW50O1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJldHVybiAoIGwgPCB4MSArICggdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCAvIDIgKSAmJiAvLyBSaWdodCBIYWxmXG5cdFx0XHRcdHgyIC0gKCB0aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoIC8gMiApIDwgciAmJiAvLyBMZWZ0IEhhbGZcblx0XHRcdFx0dCA8IHkxICsgKCB0aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodCAvIDIgKSAmJiAvLyBCb3R0b20gSGFsZlxuXHRcdFx0XHR5MiAtICggdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQgLyAyICkgPCBiICk7IC8vIFRvcCBIYWxmXG5cblx0XHR9XG5cdH0sXG5cblx0X2ludGVyc2VjdHNXaXRoUG9pbnRlcjogZnVuY3Rpb24oIGl0ZW0gKSB7XG5cdFx0dmFyIHZlcnRpY2FsRGlyZWN0aW9uLCBob3Jpem9udGFsRGlyZWN0aW9uLFxuXHRcdFx0aXNPdmVyRWxlbWVudEhlaWdodCA9ICggdGhpcy5vcHRpb25zLmF4aXMgPT09IFwieFwiICkgfHxcblx0XHRcdFx0dGhpcy5faXNPdmVyQXhpcyhcblx0XHRcdFx0XHR0aGlzLnBvc2l0aW9uQWJzLnRvcCArIHRoaXMub2Zmc2V0LmNsaWNrLnRvcCwgaXRlbS50b3AsIGl0ZW0uaGVpZ2h0ICksXG5cdFx0XHRpc092ZXJFbGVtZW50V2lkdGggPSAoIHRoaXMub3B0aW9ucy5heGlzID09PSBcInlcIiApIHx8XG5cdFx0XHRcdHRoaXMuX2lzT3ZlckF4aXMoXG5cdFx0XHRcdFx0dGhpcy5wb3NpdGlvbkFicy5sZWZ0ICsgdGhpcy5vZmZzZXQuY2xpY2subGVmdCwgaXRlbS5sZWZ0LCBpdGVtLndpZHRoICksXG5cdFx0XHRpc092ZXJFbGVtZW50ID0gaXNPdmVyRWxlbWVudEhlaWdodCAmJiBpc092ZXJFbGVtZW50V2lkdGg7XG5cblx0XHRpZiAoICFpc092ZXJFbGVtZW50ICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHZlcnRpY2FsRGlyZWN0aW9uID0gdGhpcy5fZ2V0RHJhZ1ZlcnRpY2FsRGlyZWN0aW9uKCk7XG5cdFx0aG9yaXpvbnRhbERpcmVjdGlvbiA9IHRoaXMuX2dldERyYWdIb3Jpem9udGFsRGlyZWN0aW9uKCk7XG5cblx0XHRyZXR1cm4gdGhpcy5mbG9hdGluZyA/XG5cdFx0XHQoICggaG9yaXpvbnRhbERpcmVjdGlvbiA9PT0gXCJyaWdodFwiIHx8IHZlcnRpY2FsRGlyZWN0aW9uID09PSBcImRvd25cIiApID8gMiA6IDEgKVxuXHRcdFx0OiAoIHZlcnRpY2FsRGlyZWN0aW9uICYmICggdmVydGljYWxEaXJlY3Rpb24gPT09IFwiZG93blwiID8gMiA6IDEgKSApO1xuXG5cdH0sXG5cblx0X2ludGVyc2VjdHNXaXRoU2lkZXM6IGZ1bmN0aW9uKCBpdGVtICkge1xuXG5cdFx0dmFyIGlzT3ZlckJvdHRvbUhhbGYgPSB0aGlzLl9pc092ZXJBeGlzKCB0aGlzLnBvc2l0aW9uQWJzLnRvcCArXG5cdFx0XHRcdHRoaXMub2Zmc2V0LmNsaWNrLnRvcCwgaXRlbS50b3AgKyAoIGl0ZW0uaGVpZ2h0IC8gMiApLCBpdGVtLmhlaWdodCApLFxuXHRcdFx0aXNPdmVyUmlnaHRIYWxmID0gdGhpcy5faXNPdmVyQXhpcyggdGhpcy5wb3NpdGlvbkFicy5sZWZ0ICtcblx0XHRcdFx0dGhpcy5vZmZzZXQuY2xpY2subGVmdCwgaXRlbS5sZWZ0ICsgKCBpdGVtLndpZHRoIC8gMiApLCBpdGVtLndpZHRoICksXG5cdFx0XHR2ZXJ0aWNhbERpcmVjdGlvbiA9IHRoaXMuX2dldERyYWdWZXJ0aWNhbERpcmVjdGlvbigpLFxuXHRcdFx0aG9yaXpvbnRhbERpcmVjdGlvbiA9IHRoaXMuX2dldERyYWdIb3Jpem9udGFsRGlyZWN0aW9uKCk7XG5cblx0XHRpZiAoIHRoaXMuZmxvYXRpbmcgJiYgaG9yaXpvbnRhbERpcmVjdGlvbiApIHtcblx0XHRcdHJldHVybiAoICggaG9yaXpvbnRhbERpcmVjdGlvbiA9PT0gXCJyaWdodFwiICYmIGlzT3ZlclJpZ2h0SGFsZiApIHx8XG5cdFx0XHRcdCggaG9yaXpvbnRhbERpcmVjdGlvbiA9PT0gXCJsZWZ0XCIgJiYgIWlzT3ZlclJpZ2h0SGFsZiApICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiB2ZXJ0aWNhbERpcmVjdGlvbiAmJiAoICggdmVydGljYWxEaXJlY3Rpb24gPT09IFwiZG93blwiICYmIGlzT3ZlckJvdHRvbUhhbGYgKSB8fFxuXHRcdFx0XHQoIHZlcnRpY2FsRGlyZWN0aW9uID09PSBcInVwXCIgJiYgIWlzT3ZlckJvdHRvbUhhbGYgKSApO1xuXHRcdH1cblxuXHR9LFxuXG5cdF9nZXREcmFnVmVydGljYWxEaXJlY3Rpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBkZWx0YSA9IHRoaXMucG9zaXRpb25BYnMudG9wIC0gdGhpcy5sYXN0UG9zaXRpb25BYnMudG9wO1xuXHRcdHJldHVybiBkZWx0YSAhPT0gMCAmJiAoIGRlbHRhID4gMCA/IFwiZG93blwiIDogXCJ1cFwiICk7XG5cdH0sXG5cblx0X2dldERyYWdIb3Jpem9udGFsRGlyZWN0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZGVsdGEgPSB0aGlzLnBvc2l0aW9uQWJzLmxlZnQgLSB0aGlzLmxhc3RQb3NpdGlvbkFicy5sZWZ0O1xuXHRcdHJldHVybiBkZWx0YSAhPT0gMCAmJiAoIGRlbHRhID4gMCA/IFwicmlnaHRcIiA6IFwibGVmdFwiICk7XG5cdH0sXG5cblx0cmVmcmVzaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHRoaXMuX3JlZnJlc2hJdGVtcyggZXZlbnQgKTtcblx0XHR0aGlzLl9zZXRIYW5kbGVDbGFzc05hbWUoKTtcblx0XHR0aGlzLnJlZnJlc2hQb3NpdGlvbnMoKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRfY29ubmVjdFdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXHRcdHJldHVybiBvcHRpb25zLmNvbm5lY3RXaXRoLmNvbnN0cnVjdG9yID09PSBTdHJpbmcgP1xuXHRcdFx0WyBvcHRpb25zLmNvbm5lY3RXaXRoIF0gOlxuXHRcdFx0b3B0aW9ucy5jb25uZWN0V2l0aDtcblx0fSxcblxuXHRfZ2V0SXRlbXNBc2pRdWVyeTogZnVuY3Rpb24oIGNvbm5lY3RlZCApIHtcblxuXHRcdHZhciBpLCBqLCBjdXIsIGluc3QsXG5cdFx0XHRpdGVtcyA9IFtdLFxuXHRcdFx0cXVlcmllcyA9IFtdLFxuXHRcdFx0Y29ubmVjdFdpdGggPSB0aGlzLl9jb25uZWN0V2l0aCgpO1xuXG5cdFx0aWYgKCBjb25uZWN0V2l0aCAmJiBjb25uZWN0ZWQgKSB7XG5cdFx0XHRmb3IgKCBpID0gY29ubmVjdFdpdGgubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0gKSB7XG5cdFx0XHRcdGN1ciA9ICQoIGNvbm5lY3RXaXRoWyBpIF0sIHRoaXMuZG9jdW1lbnRbIDAgXSApO1xuXHRcdFx0XHRmb3IgKCBqID0gY3VyLmxlbmd0aCAtIDE7IGogPj0gMDsgai0tICkge1xuXHRcdFx0XHRcdGluc3QgPSAkLmRhdGEoIGN1clsgaiBdLCB0aGlzLndpZGdldEZ1bGxOYW1lICk7XG5cdFx0XHRcdFx0aWYgKCBpbnN0ICYmIGluc3QgIT09IHRoaXMgJiYgIWluc3Qub3B0aW9ucy5kaXNhYmxlZCApIHtcblx0XHRcdFx0XHRcdHF1ZXJpZXMucHVzaCggWyAkLmlzRnVuY3Rpb24oIGluc3Qub3B0aW9ucy5pdGVtcyApID9cblx0XHRcdFx0XHRcdFx0aW5zdC5vcHRpb25zLml0ZW1zLmNhbGwoIGluc3QuZWxlbWVudCApIDpcblx0XHRcdFx0XHRcdFx0JCggaW5zdC5vcHRpb25zLml0ZW1zLCBpbnN0LmVsZW1lbnQgKVxuXHRcdFx0XHRcdFx0XHRcdC5ub3QoIFwiLnVpLXNvcnRhYmxlLWhlbHBlclwiIClcblx0XHRcdFx0XHRcdFx0XHQubm90KCBcIi51aS1zb3J0YWJsZS1wbGFjZWhvbGRlclwiICksIGluc3QgXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHF1ZXJpZXMucHVzaCggWyAkLmlzRnVuY3Rpb24oIHRoaXMub3B0aW9ucy5pdGVtcyApID9cblx0XHRcdHRoaXMub3B0aW9ucy5pdGVtc1xuXHRcdFx0XHQuY2FsbCggdGhpcy5lbGVtZW50LCBudWxsLCB7IG9wdGlvbnM6IHRoaXMub3B0aW9ucywgaXRlbTogdGhpcy5jdXJyZW50SXRlbSB9ICkgOlxuXHRcdFx0JCggdGhpcy5vcHRpb25zLml0ZW1zLCB0aGlzLmVsZW1lbnQgKVxuXHRcdFx0XHQubm90KCBcIi51aS1zb3J0YWJsZS1oZWxwZXJcIiApXG5cdFx0XHRcdC5ub3QoIFwiLnVpLXNvcnRhYmxlLXBsYWNlaG9sZGVyXCIgKSwgdGhpcyBdICk7XG5cblx0XHRmdW5jdGlvbiBhZGRJdGVtcygpIHtcblx0XHRcdGl0ZW1zLnB1c2goIHRoaXMgKTtcblx0XHR9XG5cdFx0Zm9yICggaSA9IHF1ZXJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0gKSB7XG5cdFx0XHRxdWVyaWVzWyBpIF1bIDAgXS5lYWNoKCBhZGRJdGVtcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiAkKCBpdGVtcyApO1xuXG5cdH0sXG5cblx0X3JlbW92ZUN1cnJlbnRzRnJvbUl0ZW1zOiBmdW5jdGlvbigpIHtcblxuXHRcdHZhciBsaXN0ID0gdGhpcy5jdXJyZW50SXRlbS5maW5kKCBcIjpkYXRhKFwiICsgdGhpcy53aWRnZXROYW1lICsgXCItaXRlbSlcIiApO1xuXG5cdFx0dGhpcy5pdGVtcyA9ICQuZ3JlcCggdGhpcy5pdGVtcywgZnVuY3Rpb24oIGl0ZW0gKSB7XG5cdFx0XHRmb3IgKCB2YXIgaiA9IDA7IGogPCBsaXN0Lmxlbmd0aDsgaisrICkge1xuXHRcdFx0XHRpZiAoIGxpc3RbIGogXSA9PT0gaXRlbS5pdGVtWyAwIF0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9ICk7XG5cblx0fSxcblxuXHRfcmVmcmVzaEl0ZW1zOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHR0aGlzLml0ZW1zID0gW107XG5cdFx0dGhpcy5jb250YWluZXJzID0gWyB0aGlzIF07XG5cblx0XHR2YXIgaSwgaiwgY3VyLCBpbnN0LCB0YXJnZXREYXRhLCBfcXVlcmllcywgaXRlbSwgcXVlcmllc0xlbmd0aCxcblx0XHRcdGl0ZW1zID0gdGhpcy5pdGVtcyxcblx0XHRcdHF1ZXJpZXMgPSBbIFsgJC5pc0Z1bmN0aW9uKCB0aGlzLm9wdGlvbnMuaXRlbXMgKSA/XG5cdFx0XHRcdHRoaXMub3B0aW9ucy5pdGVtcy5jYWxsKCB0aGlzLmVsZW1lbnRbIDAgXSwgZXZlbnQsIHsgaXRlbTogdGhpcy5jdXJyZW50SXRlbSB9ICkgOlxuXHRcdFx0XHQkKCB0aGlzLm9wdGlvbnMuaXRlbXMsIHRoaXMuZWxlbWVudCApLCB0aGlzIF0gXSxcblx0XHRcdGNvbm5lY3RXaXRoID0gdGhpcy5fY29ubmVjdFdpdGgoKTtcblxuXHRcdC8vU2hvdWxkbid0IGJlIHJ1biB0aGUgZmlyc3QgdGltZSB0aHJvdWdoIGR1ZSB0byBtYXNzaXZlIHNsb3ctZG93blxuXHRcdGlmICggY29ubmVjdFdpdGggJiYgdGhpcy5yZWFkeSApIHtcblx0XHRcdGZvciAoIGkgPSBjb25uZWN0V2l0aC5sZW5ndGggLSAxOyBpID49IDA7IGktLSApIHtcblx0XHRcdFx0Y3VyID0gJCggY29ubmVjdFdpdGhbIGkgXSwgdGhpcy5kb2N1bWVudFsgMCBdICk7XG5cdFx0XHRcdGZvciAoIGogPSBjdXIubGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0gKSB7XG5cdFx0XHRcdFx0aW5zdCA9ICQuZGF0YSggY3VyWyBqIF0sIHRoaXMud2lkZ2V0RnVsbE5hbWUgKTtcblx0XHRcdFx0XHRpZiAoIGluc3QgJiYgaW5zdCAhPT0gdGhpcyAmJiAhaW5zdC5vcHRpb25zLmRpc2FibGVkICkge1xuXHRcdFx0XHRcdFx0cXVlcmllcy5wdXNoKCBbICQuaXNGdW5jdGlvbiggaW5zdC5vcHRpb25zLml0ZW1zICkgP1xuXHRcdFx0XHRcdFx0XHRpbnN0Lm9wdGlvbnMuaXRlbXNcblx0XHRcdFx0XHRcdFx0XHQuY2FsbCggaW5zdC5lbGVtZW50WyAwIF0sIGV2ZW50LCB7IGl0ZW06IHRoaXMuY3VycmVudEl0ZW0gfSApIDpcblx0XHRcdFx0XHRcdFx0JCggaW5zdC5vcHRpb25zLml0ZW1zLCBpbnN0LmVsZW1lbnQgKSwgaW5zdCBdICk7XG5cdFx0XHRcdFx0XHR0aGlzLmNvbnRhaW5lcnMucHVzaCggaW5zdCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZvciAoIGkgPSBxdWVyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tICkge1xuXHRcdFx0dGFyZ2V0RGF0YSA9IHF1ZXJpZXNbIGkgXVsgMSBdO1xuXHRcdFx0X3F1ZXJpZXMgPSBxdWVyaWVzWyBpIF1bIDAgXTtcblxuXHRcdFx0Zm9yICggaiA9IDAsIHF1ZXJpZXNMZW5ndGggPSBfcXVlcmllcy5sZW5ndGg7IGogPCBxdWVyaWVzTGVuZ3RoOyBqKysgKSB7XG5cdFx0XHRcdGl0ZW0gPSAkKCBfcXVlcmllc1sgaiBdICk7XG5cblx0XHRcdFx0Ly8gRGF0YSBmb3IgdGFyZ2V0IGNoZWNraW5nIChtb3VzZSBtYW5hZ2VyKVxuXHRcdFx0XHRpdGVtLmRhdGEoIHRoaXMud2lkZ2V0TmFtZSArIFwiLWl0ZW1cIiwgdGFyZ2V0RGF0YSApO1xuXG5cdFx0XHRcdGl0ZW1zLnB1c2goIHtcblx0XHRcdFx0XHRpdGVtOiBpdGVtLFxuXHRcdFx0XHRcdGluc3RhbmNlOiB0YXJnZXREYXRhLFxuXHRcdFx0XHRcdHdpZHRoOiAwLCBoZWlnaHQ6IDAsXG5cdFx0XHRcdFx0bGVmdDogMCwgdG9wOiAwXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0fSxcblxuXHRyZWZyZXNoUG9zaXRpb25zOiBmdW5jdGlvbiggZmFzdCApIHtcblxuXHRcdC8vIERldGVybWluZSB3aGV0aGVyIGl0ZW1zIGFyZSBiZWluZyBkaXNwbGF5ZWQgaG9yaXpvbnRhbGx5XG5cdFx0dGhpcy5mbG9hdGluZyA9IHRoaXMuaXRlbXMubGVuZ3RoID9cblx0XHRcdHRoaXMub3B0aW9ucy5heGlzID09PSBcInhcIiB8fCB0aGlzLl9pc0Zsb2F0aW5nKCB0aGlzLml0ZW1zWyAwIF0uaXRlbSApIDpcblx0XHRcdGZhbHNlO1xuXG5cdFx0Ly9UaGlzIGhhcyB0byBiZSByZWRvbmUgYmVjYXVzZSBkdWUgdG8gdGhlIGl0ZW0gYmVpbmcgbW92ZWQgb3V0L2ludG8gdGhlIG9mZnNldFBhcmVudCxcblx0XHQvLyB0aGUgb2Zmc2V0UGFyZW50J3MgcG9zaXRpb24gd2lsbCBjaGFuZ2Vcblx0XHRpZiAoIHRoaXMub2Zmc2V0UGFyZW50ICYmIHRoaXMuaGVscGVyICkge1xuXHRcdFx0dGhpcy5vZmZzZXQucGFyZW50ID0gdGhpcy5fZ2V0UGFyZW50T2Zmc2V0KCk7XG5cdFx0fVxuXG5cdFx0dmFyIGksIGl0ZW0sIHQsIHA7XG5cblx0XHRmb3IgKCBpID0gdGhpcy5pdGVtcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSApIHtcblx0XHRcdGl0ZW0gPSB0aGlzLml0ZW1zWyBpIF07XG5cblx0XHRcdC8vV2UgaWdub3JlIGNhbGN1bGF0aW5nIHBvc2l0aW9ucyBvZiBhbGwgY29ubmVjdGVkIGNvbnRhaW5lcnMgd2hlbiB3ZSdyZSBub3Qgb3ZlciB0aGVtXG5cdFx0XHRpZiAoIGl0ZW0uaW5zdGFuY2UgIT09IHRoaXMuY3VycmVudENvbnRhaW5lciAmJiB0aGlzLmN1cnJlbnRDb250YWluZXIgJiZcblx0XHRcdFx0XHRpdGVtLml0ZW1bIDAgXSAhPT0gdGhpcy5jdXJyZW50SXRlbVsgMCBdICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0dCA9IHRoaXMub3B0aW9ucy50b2xlcmFuY2VFbGVtZW50ID9cblx0XHRcdFx0JCggdGhpcy5vcHRpb25zLnRvbGVyYW5jZUVsZW1lbnQsIGl0ZW0uaXRlbSApIDpcblx0XHRcdFx0aXRlbS5pdGVtO1xuXG5cdFx0XHRpZiAoICFmYXN0ICkge1xuXHRcdFx0XHRpdGVtLndpZHRoID0gdC5vdXRlcldpZHRoKCk7XG5cdFx0XHRcdGl0ZW0uaGVpZ2h0ID0gdC5vdXRlckhlaWdodCgpO1xuXHRcdFx0fVxuXG5cdFx0XHRwID0gdC5vZmZzZXQoKTtcblx0XHRcdGl0ZW0ubGVmdCA9IHAubGVmdDtcblx0XHRcdGl0ZW0udG9wID0gcC50b3A7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuY3VzdG9tICYmIHRoaXMub3B0aW9ucy5jdXN0b20ucmVmcmVzaENvbnRhaW5lcnMgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuY3VzdG9tLnJlZnJlc2hDb250YWluZXJzLmNhbGwoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSA9IHRoaXMuY29udGFpbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSApIHtcblx0XHRcdFx0cCA9IHRoaXMuY29udGFpbmVyc1sgaSBdLmVsZW1lbnQub2Zmc2V0KCk7XG5cdFx0XHRcdHRoaXMuY29udGFpbmVyc1sgaSBdLmNvbnRhaW5lckNhY2hlLmxlZnQgPSBwLmxlZnQ7XG5cdFx0XHRcdHRoaXMuY29udGFpbmVyc1sgaSBdLmNvbnRhaW5lckNhY2hlLnRvcCA9IHAudG9wO1xuXHRcdFx0XHR0aGlzLmNvbnRhaW5lcnNbIGkgXS5jb250YWluZXJDYWNoZS53aWR0aCA9XG5cdFx0XHRcdFx0dGhpcy5jb250YWluZXJzWyBpIF0uZWxlbWVudC5vdXRlcldpZHRoKCk7XG5cdFx0XHRcdHRoaXMuY29udGFpbmVyc1sgaSBdLmNvbnRhaW5lckNhY2hlLmhlaWdodCA9XG5cdFx0XHRcdFx0dGhpcy5jb250YWluZXJzWyBpIF0uZWxlbWVudC5vdXRlckhlaWdodCgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdF9jcmVhdGVQbGFjZWhvbGRlcjogZnVuY3Rpb24oIHRoYXQgKSB7XG5cdFx0dGhhdCA9IHRoYXQgfHwgdGhpcztcblx0XHR2YXIgY2xhc3NOYW1lLFxuXHRcdFx0byA9IHRoYXQub3B0aW9ucztcblxuXHRcdGlmICggIW8ucGxhY2Vob2xkZXIgfHwgby5wbGFjZWhvbGRlci5jb25zdHJ1Y3RvciA9PT0gU3RyaW5nICkge1xuXHRcdFx0Y2xhc3NOYW1lID0gby5wbGFjZWhvbGRlcjtcblx0XHRcdG8ucGxhY2Vob2xkZXIgPSB7XG5cdFx0XHRcdGVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0dmFyIG5vZGVOYW1lID0gdGhhdC5jdXJyZW50SXRlbVsgMCBdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHRlbGVtZW50ID0gJCggXCI8XCIgKyBub2RlTmFtZSArIFwiPlwiLCB0aGF0LmRvY3VtZW50WyAwIF0gKTtcblxuXHRcdFx0XHRcdFx0dGhhdC5fYWRkQ2xhc3MoIGVsZW1lbnQsIFwidWktc29ydGFibGUtcGxhY2Vob2xkZXJcIixcblx0XHRcdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdGhhdC5jdXJyZW50SXRlbVsgMCBdLmNsYXNzTmFtZSApXG5cdFx0XHRcdFx0XHRcdC5fcmVtb3ZlQ2xhc3MoIGVsZW1lbnQsIFwidWktc29ydGFibGUtaGVscGVyXCIgKTtcblxuXHRcdFx0XHRcdGlmICggbm9kZU5hbWUgPT09IFwidGJvZHlcIiApIHtcblx0XHRcdFx0XHRcdHRoYXQuX2NyZWF0ZVRyUGxhY2Vob2xkZXIoXG5cdFx0XHRcdFx0XHRcdHRoYXQuY3VycmVudEl0ZW0uZmluZCggXCJ0clwiICkuZXEoIDAgKSxcblx0XHRcdFx0XHRcdFx0JCggXCI8dHI+XCIsIHRoYXQuZG9jdW1lbnRbIDAgXSApLmFwcGVuZFRvKCBlbGVtZW50IClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwidHJcIiApIHtcblx0XHRcdFx0XHRcdHRoYXQuX2NyZWF0ZVRyUGxhY2Vob2xkZXIoIHRoYXQuY3VycmVudEl0ZW0sIGVsZW1lbnQgKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbWdcIiApIHtcblx0XHRcdFx0XHRcdGVsZW1lbnQuYXR0ciggXCJzcmNcIiwgdGhhdC5jdXJyZW50SXRlbS5hdHRyKCBcInNyY1wiICkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoICFjbGFzc05hbWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtZW50LmNzcyggXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gZWxlbWVudDtcblx0XHRcdFx0fSxcblx0XHRcdFx0dXBkYXRlOiBmdW5jdGlvbiggY29udGFpbmVyLCBwICkge1xuXG5cdFx0XHRcdFx0Ly8gMS4gSWYgYSBjbGFzc05hbWUgaXMgc2V0IGFzICdwbGFjZWhvbGRlciBvcHRpb24sIHdlIGRvbid0IGZvcmNlIHNpemVzIC1cblx0XHRcdFx0XHQvLyB0aGUgY2xhc3MgaXMgcmVzcG9uc2libGUgZm9yIHRoYXRcblx0XHRcdFx0XHQvLyAyLiBUaGUgb3B0aW9uICdmb3JjZVBsYWNlaG9sZGVyU2l6ZSBjYW4gYmUgZW5hYmxlZCB0byBmb3JjZSBpdCBldmVuIGlmIGFcblx0XHRcdFx0XHQvLyBjbGFzcyBuYW1lIGlzIHNwZWNpZmllZFxuXHRcdFx0XHRcdGlmICggY2xhc3NOYW1lICYmICFvLmZvcmNlUGxhY2Vob2xkZXJTaXplICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vSWYgdGhlIGVsZW1lbnQgZG9lc24ndCBoYXZlIGEgYWN0dWFsIGhlaWdodCBieSBpdHNlbGYgKHdpdGhvdXQgc3R5bGVzIGNvbWluZ1xuXHRcdFx0XHRcdC8vIGZyb20gYSBzdHlsZXNoZWV0KSwgaXQgcmVjZWl2ZXMgdGhlIGlubGluZSBoZWlnaHQgZnJvbSB0aGUgZHJhZ2dlZCBpdGVtXG5cdFx0XHRcdFx0aWYgKCAhcC5oZWlnaHQoKSApIHtcblx0XHRcdFx0XHRcdHAuaGVpZ2h0KFxuXHRcdFx0XHRcdFx0XHR0aGF0LmN1cnJlbnRJdGVtLmlubmVySGVpZ2h0KCkgLVxuXHRcdFx0XHRcdFx0XHRwYXJzZUludCggdGhhdC5jdXJyZW50SXRlbS5jc3MoIFwicGFkZGluZ1RvcFwiICkgfHwgMCwgMTAgKSAtXG5cdFx0XHRcdFx0XHRcdHBhcnNlSW50KCB0aGF0LmN1cnJlbnRJdGVtLmNzcyggXCJwYWRkaW5nQm90dG9tXCIgKSB8fCAwLCAxMCApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggIXAud2lkdGgoKSApIHtcblx0XHRcdFx0XHRcdHAud2lkdGgoXG5cdFx0XHRcdFx0XHRcdHRoYXQuY3VycmVudEl0ZW0uaW5uZXJXaWR0aCgpIC1cblx0XHRcdFx0XHRcdFx0cGFyc2VJbnQoIHRoYXQuY3VycmVudEl0ZW0uY3NzKCBcInBhZGRpbmdMZWZ0XCIgKSB8fCAwLCAxMCApIC1cblx0XHRcdFx0XHRcdFx0cGFyc2VJbnQoIHRoYXQuY3VycmVudEl0ZW0uY3NzKCBcInBhZGRpbmdSaWdodFwiICkgfHwgMCwgMTAgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvL0NyZWF0ZSB0aGUgcGxhY2Vob2xkZXJcblx0XHR0aGF0LnBsYWNlaG9sZGVyID0gJCggby5wbGFjZWhvbGRlci5lbGVtZW50LmNhbGwoIHRoYXQuZWxlbWVudCwgdGhhdC5jdXJyZW50SXRlbSApICk7XG5cblx0XHQvL0FwcGVuZCBpdCBhZnRlciB0aGUgYWN0dWFsIGN1cnJlbnQgaXRlbVxuXHRcdHRoYXQuY3VycmVudEl0ZW0uYWZ0ZXIoIHRoYXQucGxhY2Vob2xkZXIgKTtcblxuXHRcdC8vVXBkYXRlIHRoZSBzaXplIG9mIHRoZSBwbGFjZWhvbGRlciAoVE9ETzogTG9naWMgdG8gZnV6enksIHNlZSBsaW5lIDMxNi8zMTcpXG5cdFx0by5wbGFjZWhvbGRlci51cGRhdGUoIHRoYXQsIHRoYXQucGxhY2Vob2xkZXIgKTtcblxuXHR9LFxuXG5cdF9jcmVhdGVUclBsYWNlaG9sZGVyOiBmdW5jdGlvbiggc291cmNlVHIsIHRhcmdldFRyICkge1xuXHRcdHZhciB0aGF0ID0gdGhpcztcblxuXHRcdHNvdXJjZVRyLmNoaWxkcmVuKCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHQkKCBcIjx0ZD4mIzE2MDs8L3RkPlwiLCB0aGF0LmRvY3VtZW50WyAwIF0gKVxuXHRcdFx0XHQuYXR0ciggXCJjb2xzcGFuXCIsICQoIHRoaXMgKS5hdHRyKCBcImNvbHNwYW5cIiApIHx8IDEgKVxuXHRcdFx0XHQuYXBwZW5kVG8oIHRhcmdldFRyICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdF9jb250YWN0Q29udGFpbmVyczogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBpLCBqLCBkaXN0LCBpdGVtV2l0aExlYXN0RGlzdGFuY2UsIHBvc1Byb3BlcnR5LCBzaXplUHJvcGVydHksIGN1ciwgbmVhckJvdHRvbSxcblx0XHRcdGZsb2F0aW5nLCBheGlzLFxuXHRcdFx0aW5uZXJtb3N0Q29udGFpbmVyID0gbnVsbCxcblx0XHRcdGlubmVybW9zdEluZGV4ID0gbnVsbDtcblxuXHRcdC8vIEdldCBpbm5lcm1vc3QgY29udGFpbmVyIHRoYXQgaW50ZXJzZWN0cyB3aXRoIGl0ZW1cblx0XHRmb3IgKCBpID0gdGhpcy5jb250YWluZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tICkge1xuXG5cdFx0XHQvLyBOZXZlciBjb25zaWRlciBhIGNvbnRhaW5lciB0aGF0J3MgbG9jYXRlZCB3aXRoaW4gdGhlIGl0ZW0gaXRzZWxmXG5cdFx0XHRpZiAoICQuY29udGFpbnMoIHRoaXMuY3VycmVudEl0ZW1bIDAgXSwgdGhpcy5jb250YWluZXJzWyBpIF0uZWxlbWVudFsgMCBdICkgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRoaXMuX2ludGVyc2VjdHNXaXRoKCB0aGlzLmNvbnRhaW5lcnNbIGkgXS5jb250YWluZXJDYWNoZSApICkge1xuXG5cdFx0XHRcdC8vIElmIHdlJ3ZlIGFscmVhZHkgZm91bmQgYSBjb250YWluZXIgYW5kIGl0J3MgbW9yZSBcImlubmVyXCIgdGhhbiB0aGlzLCB0aGVuIGNvbnRpbnVlXG5cdFx0XHRcdGlmICggaW5uZXJtb3N0Q29udGFpbmVyICYmXG5cdFx0XHRcdFx0XHQkLmNvbnRhaW5zKFxuXHRcdFx0XHRcdFx0XHR0aGlzLmNvbnRhaW5lcnNbIGkgXS5lbGVtZW50WyAwIF0sXG5cdFx0XHRcdFx0XHRcdGlubmVybW9zdENvbnRhaW5lci5lbGVtZW50WyAwIF0gKSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlubmVybW9zdENvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyc1sgaSBdO1xuXHRcdFx0XHRpbm5lcm1vc3RJbmRleCA9IGk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gY29udGFpbmVyIGRvZXNuJ3QgaW50ZXJzZWN0LiB0cmlnZ2VyIFwib3V0XCIgZXZlbnQgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdGlmICggdGhpcy5jb250YWluZXJzWyBpIF0uY29udGFpbmVyQ2FjaGUub3ZlciApIHtcblx0XHRcdFx0XHR0aGlzLmNvbnRhaW5lcnNbIGkgXS5fdHJpZ2dlciggXCJvdXRcIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCggdGhpcyApICk7XG5cdFx0XHRcdFx0dGhpcy5jb250YWluZXJzWyBpIF0uY29udGFpbmVyQ2FjaGUub3ZlciA9IDA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIElmIG5vIGludGVyc2VjdGluZyBjb250YWluZXJzIGZvdW5kLCByZXR1cm5cblx0XHRpZiAoICFpbm5lcm1vc3RDb250YWluZXIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTW92ZSB0aGUgaXRlbSBpbnRvIHRoZSBjb250YWluZXIgaWYgaXQncyBub3QgdGhlcmUgYWxyZWFkeVxuXHRcdGlmICggdGhpcy5jb250YWluZXJzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGlmICggIXRoaXMuY29udGFpbmVyc1sgaW5uZXJtb3N0SW5kZXggXS5jb250YWluZXJDYWNoZS5vdmVyICkge1xuXHRcdFx0XHR0aGlzLmNvbnRhaW5lcnNbIGlubmVybW9zdEluZGV4IF0uX3RyaWdnZXIoIFwib3ZlclwiLCBldmVudCwgdGhpcy5fdWlIYXNoKCB0aGlzICkgKTtcblx0XHRcdFx0dGhpcy5jb250YWluZXJzWyBpbm5lcm1vc3RJbmRleCBdLmNvbnRhaW5lckNhY2hlLm92ZXIgPSAxO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFdoZW4gZW50ZXJpbmcgYSBuZXcgY29udGFpbmVyLCB3ZSB3aWxsIGZpbmQgdGhlIGl0ZW0gd2l0aCB0aGUgbGVhc3QgZGlzdGFuY2UgYW5kXG5cdFx0XHQvLyBhcHBlbmQgb3VyIGl0ZW0gbmVhciBpdFxuXHRcdFx0ZGlzdCA9IDEwMDAwO1xuXHRcdFx0aXRlbVdpdGhMZWFzdERpc3RhbmNlID0gbnVsbDtcblx0XHRcdGZsb2F0aW5nID0gaW5uZXJtb3N0Q29udGFpbmVyLmZsb2F0aW5nIHx8IHRoaXMuX2lzRmxvYXRpbmcoIHRoaXMuY3VycmVudEl0ZW0gKTtcblx0XHRcdHBvc1Byb3BlcnR5ID0gZmxvYXRpbmcgPyBcImxlZnRcIiA6IFwidG9wXCI7XG5cdFx0XHRzaXplUHJvcGVydHkgPSBmbG9hdGluZyA/IFwid2lkdGhcIiA6IFwiaGVpZ2h0XCI7XG5cdFx0XHRheGlzID0gZmxvYXRpbmcgPyBcInBhZ2VYXCIgOiBcInBhZ2VZXCI7XG5cblx0XHRcdGZvciAoIGogPSB0aGlzLml0ZW1zLmxlbmd0aCAtIDE7IGogPj0gMDsgai0tICkge1xuXHRcdFx0XHRpZiAoICEkLmNvbnRhaW5zKFxuXHRcdFx0XHRcdFx0dGhpcy5jb250YWluZXJzWyBpbm5lcm1vc3RJbmRleCBdLmVsZW1lbnRbIDAgXSwgdGhpcy5pdGVtc1sgaiBdLml0ZW1bIDAgXSApXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggdGhpcy5pdGVtc1sgaiBdLml0ZW1bIDAgXSA9PT0gdGhpcy5jdXJyZW50SXRlbVsgMCBdICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y3VyID0gdGhpcy5pdGVtc1sgaiBdLml0ZW0ub2Zmc2V0KClbIHBvc1Byb3BlcnR5IF07XG5cdFx0XHRcdG5lYXJCb3R0b20gPSBmYWxzZTtcblx0XHRcdFx0aWYgKCBldmVudFsgYXhpcyBdIC0gY3VyID4gdGhpcy5pdGVtc1sgaiBdWyBzaXplUHJvcGVydHkgXSAvIDIgKSB7XG5cdFx0XHRcdFx0bmVhckJvdHRvbSA9IHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIE1hdGguYWJzKCBldmVudFsgYXhpcyBdIC0gY3VyICkgPCBkaXN0ICkge1xuXHRcdFx0XHRcdGRpc3QgPSBNYXRoLmFicyggZXZlbnRbIGF4aXMgXSAtIGN1ciApO1xuXHRcdFx0XHRcdGl0ZW1XaXRoTGVhc3REaXN0YW5jZSA9IHRoaXMuaXRlbXNbIGogXTtcblx0XHRcdFx0XHR0aGlzLmRpcmVjdGlvbiA9IG5lYXJCb3R0b20gPyBcInVwXCIgOiBcImRvd25cIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvL0NoZWNrIGlmIGRyb3BPbkVtcHR5IGlzIGVuYWJsZWRcblx0XHRcdGlmICggIWl0ZW1XaXRoTGVhc3REaXN0YW5jZSAmJiAhdGhpcy5vcHRpb25zLmRyb3BPbkVtcHR5ICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGhpcy5jdXJyZW50Q29udGFpbmVyID09PSB0aGlzLmNvbnRhaW5lcnNbIGlubmVybW9zdEluZGV4IF0gKSB7XG5cdFx0XHRcdGlmICggIXRoaXMuY3VycmVudENvbnRhaW5lci5jb250YWluZXJDYWNoZS5vdmVyICkge1xuXHRcdFx0XHRcdHRoaXMuY29udGFpbmVyc1sgaW5uZXJtb3N0SW5kZXggXS5fdHJpZ2dlciggXCJvdmVyXCIsIGV2ZW50LCB0aGlzLl91aUhhc2goKSApO1xuXHRcdFx0XHRcdHRoaXMuY3VycmVudENvbnRhaW5lci5jb250YWluZXJDYWNoZS5vdmVyID0gMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGl0ZW1XaXRoTGVhc3REaXN0YW5jZSA/XG5cdFx0XHRcdHRoaXMuX3JlYXJyYW5nZSggZXZlbnQsIGl0ZW1XaXRoTGVhc3REaXN0YW5jZSwgbnVsbCwgdHJ1ZSApIDpcblx0XHRcdFx0dGhpcy5fcmVhcnJhbmdlKCBldmVudCwgbnVsbCwgdGhpcy5jb250YWluZXJzWyBpbm5lcm1vc3RJbmRleCBdLmVsZW1lbnQsIHRydWUgKTtcblx0XHRcdHRoaXMuX3RyaWdnZXIoIFwiY2hhbmdlXCIsIGV2ZW50LCB0aGlzLl91aUhhc2goKSApO1xuXHRcdFx0dGhpcy5jb250YWluZXJzWyBpbm5lcm1vc3RJbmRleCBdLl90cmlnZ2VyKCBcImNoYW5nZVwiLCBldmVudCwgdGhpcy5fdWlIYXNoKCB0aGlzICkgKTtcblx0XHRcdHRoaXMuY3VycmVudENvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyc1sgaW5uZXJtb3N0SW5kZXggXTtcblxuXHRcdFx0Ly9VcGRhdGUgdGhlIHBsYWNlaG9sZGVyXG5cdFx0XHR0aGlzLm9wdGlvbnMucGxhY2Vob2xkZXIudXBkYXRlKCB0aGlzLmN1cnJlbnRDb250YWluZXIsIHRoaXMucGxhY2Vob2xkZXIgKTtcblxuXHRcdFx0dGhpcy5jb250YWluZXJzWyBpbm5lcm1vc3RJbmRleCBdLl90cmlnZ2VyKCBcIm92ZXJcIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCggdGhpcyApICk7XG5cdFx0XHR0aGlzLmNvbnRhaW5lcnNbIGlubmVybW9zdEluZGV4IF0uY29udGFpbmVyQ2FjaGUub3ZlciA9IDE7XG5cdFx0fVxuXG5cdH0sXG5cblx0X2NyZWF0ZUhlbHBlcjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0dmFyIG8gPSB0aGlzLm9wdGlvbnMsXG5cdFx0XHRoZWxwZXIgPSAkLmlzRnVuY3Rpb24oIG8uaGVscGVyICkgP1xuXHRcdFx0XHQkKCBvLmhlbHBlci5hcHBseSggdGhpcy5lbGVtZW50WyAwIF0sIFsgZXZlbnQsIHRoaXMuY3VycmVudEl0ZW0gXSApICkgOlxuXHRcdFx0XHQoIG8uaGVscGVyID09PSBcImNsb25lXCIgPyB0aGlzLmN1cnJlbnRJdGVtLmNsb25lKCkgOiB0aGlzLmN1cnJlbnRJdGVtICk7XG5cblx0XHQvL0FkZCB0aGUgaGVscGVyIHRvIHRoZSBET00gaWYgdGhhdCBkaWRuJ3QgaGFwcGVuIGFscmVhZHlcblx0XHRpZiAoICFoZWxwZXIucGFyZW50cyggXCJib2R5XCIgKS5sZW5ndGggKSB7XG5cdFx0XHQkKCBvLmFwcGVuZFRvICE9PSBcInBhcmVudFwiID9cblx0XHRcdFx0by5hcHBlbmRUbyA6XG5cdFx0XHRcdHRoaXMuY3VycmVudEl0ZW1bIDAgXS5wYXJlbnROb2RlIClbIDAgXS5hcHBlbmRDaGlsZCggaGVscGVyWyAwIF0gKTtcblx0XHR9XG5cblx0XHRpZiAoIGhlbHBlclsgMCBdID09PSB0aGlzLmN1cnJlbnRJdGVtWyAwIF0gKSB7XG5cdFx0XHR0aGlzLl9zdG9yZWRDU1MgPSB7XG5cdFx0XHRcdHdpZHRoOiB0aGlzLmN1cnJlbnRJdGVtWyAwIF0uc3R5bGUud2lkdGgsXG5cdFx0XHRcdGhlaWdodDogdGhpcy5jdXJyZW50SXRlbVsgMCBdLnN0eWxlLmhlaWdodCxcblx0XHRcdFx0cG9zaXRpb246IHRoaXMuY3VycmVudEl0ZW0uY3NzKCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdFx0dG9wOiB0aGlzLmN1cnJlbnRJdGVtLmNzcyggXCJ0b3BcIiApLFxuXHRcdFx0XHRsZWZ0OiB0aGlzLmN1cnJlbnRJdGVtLmNzcyggXCJsZWZ0XCIgKVxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRpZiAoICFoZWxwZXJbIDAgXS5zdHlsZS53aWR0aCB8fCBvLmZvcmNlSGVscGVyU2l6ZSApIHtcblx0XHRcdGhlbHBlci53aWR0aCggdGhpcy5jdXJyZW50SXRlbS53aWR0aCgpICk7XG5cdFx0fVxuXHRcdGlmICggIWhlbHBlclsgMCBdLnN0eWxlLmhlaWdodCB8fCBvLmZvcmNlSGVscGVyU2l6ZSApIHtcblx0XHRcdGhlbHBlci5oZWlnaHQoIHRoaXMuY3VycmVudEl0ZW0uaGVpZ2h0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGVscGVyO1xuXG5cdH0sXG5cblx0X2FkanVzdE9mZnNldEZyb21IZWxwZXI6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0aWYgKCB0eXBlb2Ygb2JqID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gb2JqLnNwbGl0KCBcIiBcIiApO1xuXHRcdH1cblx0XHRpZiAoICQuaXNBcnJheSggb2JqICkgKSB7XG5cdFx0XHRvYmogPSB7IGxlZnQ6ICtvYmpbIDAgXSwgdG9wOiArb2JqWyAxIF0gfHwgMCB9O1xuXHRcdH1cblx0XHRpZiAoIFwibGVmdFwiIGluIG9iaiApIHtcblx0XHRcdHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPSBvYmoubGVmdCArIHRoaXMubWFyZ2lucy5sZWZ0O1xuXHRcdH1cblx0XHRpZiAoIFwicmlnaHRcIiBpbiBvYmogKSB7XG5cdFx0XHR0aGlzLm9mZnNldC5jbGljay5sZWZ0ID0gdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCAtIG9iai5yaWdodCArIHRoaXMubWFyZ2lucy5sZWZ0O1xuXHRcdH1cblx0XHRpZiAoIFwidG9wXCIgaW4gb2JqICkge1xuXHRcdFx0dGhpcy5vZmZzZXQuY2xpY2sudG9wID0gb2JqLnRvcCArIHRoaXMubWFyZ2lucy50b3A7XG5cdFx0fVxuXHRcdGlmICggXCJib3R0b21cIiBpbiBvYmogKSB7XG5cdFx0XHR0aGlzLm9mZnNldC5jbGljay50b3AgPSB0aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodCAtIG9iai5ib3R0b20gKyB0aGlzLm1hcmdpbnMudG9wO1xuXHRcdH1cblx0fSxcblxuXHRfZ2V0UGFyZW50T2Zmc2V0OiBmdW5jdGlvbigpIHtcblxuXHRcdC8vR2V0IHRoZSBvZmZzZXRQYXJlbnQgYW5kIGNhY2hlIGl0cyBwb3NpdGlvblxuXHRcdHRoaXMub2Zmc2V0UGFyZW50ID0gdGhpcy5oZWxwZXIub2Zmc2V0UGFyZW50KCk7XG5cdFx0dmFyIHBvID0gdGhpcy5vZmZzZXRQYXJlbnQub2Zmc2V0KCk7XG5cblx0XHQvLyBUaGlzIGlzIGEgc3BlY2lhbCBjYXNlIHdoZXJlIHdlIG5lZWQgdG8gbW9kaWZ5IGEgb2Zmc2V0IGNhbGN1bGF0ZWQgb24gc3RhcnQsIHNpbmNlIHRoZVxuXHRcdC8vIGZvbGxvd2luZyBoYXBwZW5lZDpcblx0XHQvLyAxLiBUaGUgcG9zaXRpb24gb2YgdGhlIGhlbHBlciBpcyBhYnNvbHV0ZSwgc28gaXQncyBwb3NpdGlvbiBpcyBjYWxjdWxhdGVkIGJhc2VkIG9uIHRoZVxuXHRcdC8vIG5leHQgcG9zaXRpb25lZCBwYXJlbnRcblx0XHQvLyAyLiBUaGUgYWN0dWFsIG9mZnNldCBwYXJlbnQgaXMgYSBjaGlsZCBvZiB0aGUgc2Nyb2xsIHBhcmVudCwgYW5kIHRoZSBzY3JvbGwgcGFyZW50IGlzbid0XG5cdFx0Ly8gdGhlIGRvY3VtZW50LCB3aGljaCBtZWFucyB0aGF0IHRoZSBzY3JvbGwgaXMgaW5jbHVkZWQgaW4gdGhlIGluaXRpYWwgY2FsY3VsYXRpb24gb2YgdGhlXG5cdFx0Ly8gb2Zmc2V0IG9mIHRoZSBwYXJlbnQsIGFuZCBuZXZlciByZWNhbGN1bGF0ZWQgdXBvbiBkcmFnXG5cdFx0aWYgKCB0aGlzLmNzc1Bvc2l0aW9uID09PSBcImFic29sdXRlXCIgJiYgdGhpcy5zY3JvbGxQYXJlbnRbIDAgXSAhPT0gdGhpcy5kb2N1bWVudFsgMCBdICYmXG5cdFx0XHRcdCQuY29udGFpbnMoIHRoaXMuc2Nyb2xsUGFyZW50WyAwIF0sIHRoaXMub2Zmc2V0UGFyZW50WyAwIF0gKSApIHtcblx0XHRcdHBvLmxlZnQgKz0gdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsTGVmdCgpO1xuXHRcdFx0cG8udG9wICs9IHRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpO1xuXHRcdH1cblxuXHRcdC8vIFRoaXMgbmVlZHMgdG8gYmUgYWN0dWFsbHkgZG9uZSBmb3IgYWxsIGJyb3dzZXJzLCBzaW5jZSBwYWdlWC9wYWdlWSBpbmNsdWRlcyB0aGlzXG5cdFx0Ly8gaW5mb3JtYXRpb24gd2l0aCBhbiB1Z2x5IElFIGZpeFxuXHRcdGlmICggdGhpcy5vZmZzZXRQYXJlbnRbIDAgXSA9PT0gdGhpcy5kb2N1bWVudFsgMCBdLmJvZHkgfHxcblx0XHRcdFx0KCB0aGlzLm9mZnNldFBhcmVudFsgMCBdLnRhZ05hbWUgJiZcblx0XHRcdFx0dGhpcy5vZmZzZXRQYXJlbnRbIDAgXS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaHRtbFwiICYmICQudWkuaWUgKSApIHtcblx0XHRcdHBvID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBwby50b3AgKyAoIHBhcnNlSW50KCB0aGlzLm9mZnNldFBhcmVudC5jc3MoIFwiYm9yZGVyVG9wV2lkdGhcIiApLCAxMCApIHx8IDAgKSxcblx0XHRcdGxlZnQ6IHBvLmxlZnQgKyAoIHBhcnNlSW50KCB0aGlzLm9mZnNldFBhcmVudC5jc3MoIFwiYm9yZGVyTGVmdFdpZHRoXCIgKSwgMTAgKSB8fCAwIClcblx0XHR9O1xuXG5cdH0sXG5cblx0X2dldFJlbGF0aXZlT2Zmc2V0OiBmdW5jdGlvbigpIHtcblxuXHRcdGlmICggdGhpcy5jc3NQb3NpdGlvbiA9PT0gXCJyZWxhdGl2ZVwiICkge1xuXHRcdFx0dmFyIHAgPSB0aGlzLmN1cnJlbnRJdGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR0b3A6IHAudG9wIC0gKCBwYXJzZUludCggdGhpcy5oZWxwZXIuY3NzKCBcInRvcFwiICksIDEwICkgfHwgMCApICtcblx0XHRcdFx0XHR0aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxUb3AoKSxcblx0XHRcdFx0bGVmdDogcC5sZWZ0IC0gKCBwYXJzZUludCggdGhpcy5oZWxwZXIuY3NzKCBcImxlZnRcIiApLCAxMCApIHx8IDAgKSArXG5cdFx0XHRcdFx0dGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsTGVmdCgpXG5cdFx0XHR9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0fSxcblxuXHRfY2FjaGVNYXJnaW5zOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLm1hcmdpbnMgPSB7XG5cdFx0XHRsZWZ0OiAoIHBhcnNlSW50KCB0aGlzLmN1cnJlbnRJdGVtLmNzcyggXCJtYXJnaW5MZWZ0XCIgKSwgMTAgKSB8fCAwICksXG5cdFx0XHR0b3A6ICggcGFyc2VJbnQoIHRoaXMuY3VycmVudEl0ZW0uY3NzKCBcIm1hcmdpblRvcFwiICksIDEwICkgfHwgMCApXG5cdFx0fTtcblx0fSxcblxuXHRfY2FjaGVIZWxwZXJQcm9wb3J0aW9uczogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5oZWxwZXJQcm9wb3J0aW9ucyA9IHtcblx0XHRcdHdpZHRoOiB0aGlzLmhlbHBlci5vdXRlcldpZHRoKCksXG5cdFx0XHRoZWlnaHQ6IHRoaXMuaGVscGVyLm91dGVySGVpZ2h0KClcblx0XHR9O1xuXHR9LFxuXG5cdF9zZXRDb250YWlubWVudDogZnVuY3Rpb24oKSB7XG5cblx0XHR2YXIgY2UsIGNvLCBvdmVyLFxuXHRcdFx0byA9IHRoaXMub3B0aW9ucztcblx0XHRpZiAoIG8uY29udGFpbm1lbnQgPT09IFwicGFyZW50XCIgKSB7XG5cdFx0XHRvLmNvbnRhaW5tZW50ID0gdGhpcy5oZWxwZXJbIDAgXS5wYXJlbnROb2RlO1xuXHRcdH1cblx0XHRpZiAoIG8uY29udGFpbm1lbnQgPT09IFwiZG9jdW1lbnRcIiB8fCBvLmNvbnRhaW5tZW50ID09PSBcIndpbmRvd1wiICkge1xuXHRcdFx0dGhpcy5jb250YWlubWVudCA9IFtcblx0XHRcdFx0MCAtIHRoaXMub2Zmc2V0LnJlbGF0aXZlLmxlZnQgLSB0aGlzLm9mZnNldC5wYXJlbnQubGVmdCxcblx0XHRcdFx0MCAtIHRoaXMub2Zmc2V0LnJlbGF0aXZlLnRvcCAtIHRoaXMub2Zmc2V0LnBhcmVudC50b3AsXG5cdFx0XHRcdG8uY29udGFpbm1lbnQgPT09IFwiZG9jdW1lbnRcIiA/XG5cdFx0XHRcdFx0dGhpcy5kb2N1bWVudC53aWR0aCgpIDpcblx0XHRcdFx0XHR0aGlzLndpbmRvdy53aWR0aCgpIC0gdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCAtIHRoaXMubWFyZ2lucy5sZWZ0LFxuXHRcdFx0XHQoIG8uY29udGFpbm1lbnQgPT09IFwiZG9jdW1lbnRcIiA/XG5cdFx0XHRcdFx0KCB0aGlzLmRvY3VtZW50LmhlaWdodCgpIHx8IGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZS5zY3JvbGxIZWlnaHQgKSA6XG5cdFx0XHRcdFx0dGhpcy53aW5kb3cuaGVpZ2h0KCkgfHwgdGhpcy5kb2N1bWVudFsgMCBdLmJvZHkucGFyZW50Tm9kZS5zY3JvbGxIZWlnaHRcblx0XHRcdFx0KSAtIHRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0IC0gdGhpcy5tYXJnaW5zLnRvcFxuXHRcdFx0XTtcblx0XHR9XG5cblx0XHRpZiAoICEoIC9eKGRvY3VtZW50fHdpbmRvd3xwYXJlbnQpJC8gKS50ZXN0KCBvLmNvbnRhaW5tZW50ICkgKSB7XG5cdFx0XHRjZSA9ICQoIG8uY29udGFpbm1lbnQgKVsgMCBdO1xuXHRcdFx0Y28gPSAkKCBvLmNvbnRhaW5tZW50ICkub2Zmc2V0KCk7XG5cdFx0XHRvdmVyID0gKCAkKCBjZSApLmNzcyggXCJvdmVyZmxvd1wiICkgIT09IFwiaGlkZGVuXCIgKTtcblxuXHRcdFx0dGhpcy5jb250YWlubWVudCA9IFtcblx0XHRcdFx0Y28ubGVmdCArICggcGFyc2VJbnQoICQoIGNlICkuY3NzKCBcImJvcmRlckxlZnRXaWR0aFwiICksIDEwICkgfHwgMCApICtcblx0XHRcdFx0XHQoIHBhcnNlSW50KCAkKCBjZSApLmNzcyggXCJwYWRkaW5nTGVmdFwiICksIDEwICkgfHwgMCApIC0gdGhpcy5tYXJnaW5zLmxlZnQsXG5cdFx0XHRcdGNvLnRvcCArICggcGFyc2VJbnQoICQoIGNlICkuY3NzKCBcImJvcmRlclRvcFdpZHRoXCIgKSwgMTAgKSB8fCAwICkgK1xuXHRcdFx0XHRcdCggcGFyc2VJbnQoICQoIGNlICkuY3NzKCBcInBhZGRpbmdUb3BcIiApLCAxMCApIHx8IDAgKSAtIHRoaXMubWFyZ2lucy50b3AsXG5cdFx0XHRcdGNvLmxlZnQgKyAoIG92ZXIgPyBNYXRoLm1heCggY2Uuc2Nyb2xsV2lkdGgsIGNlLm9mZnNldFdpZHRoICkgOiBjZS5vZmZzZXRXaWR0aCApIC1cblx0XHRcdFx0XHQoIHBhcnNlSW50KCAkKCBjZSApLmNzcyggXCJib3JkZXJMZWZ0V2lkdGhcIiApLCAxMCApIHx8IDAgKSAtXG5cdFx0XHRcdFx0KCBwYXJzZUludCggJCggY2UgKS5jc3MoIFwicGFkZGluZ1JpZ2h0XCIgKSwgMTAgKSB8fCAwICkgLVxuXHRcdFx0XHRcdHRoaXMuaGVscGVyUHJvcG9ydGlvbnMud2lkdGggLSB0aGlzLm1hcmdpbnMubGVmdCxcblx0XHRcdFx0Y28udG9wICsgKCBvdmVyID8gTWF0aC5tYXgoIGNlLnNjcm9sbEhlaWdodCwgY2Uub2Zmc2V0SGVpZ2h0ICkgOiBjZS5vZmZzZXRIZWlnaHQgKSAtXG5cdFx0XHRcdFx0KCBwYXJzZUludCggJCggY2UgKS5jc3MoIFwiYm9yZGVyVG9wV2lkdGhcIiApLCAxMCApIHx8IDAgKSAtXG5cdFx0XHRcdFx0KCBwYXJzZUludCggJCggY2UgKS5jc3MoIFwicGFkZGluZ0JvdHRvbVwiICksIDEwICkgfHwgMCApIC1cblx0XHRcdFx0XHR0aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodCAtIHRoaXMubWFyZ2lucy50b3Bcblx0XHRcdF07XG5cdFx0fVxuXG5cdH0sXG5cblx0X2NvbnZlcnRQb3NpdGlvblRvOiBmdW5jdGlvbiggZCwgcG9zICkge1xuXG5cdFx0aWYgKCAhcG9zICkge1xuXHRcdFx0cG9zID0gdGhpcy5wb3NpdGlvbjtcblx0XHR9XG5cdFx0dmFyIG1vZCA9IGQgPT09IFwiYWJzb2x1dGVcIiA/IDEgOiAtMSxcblx0XHRcdHNjcm9sbCA9IHRoaXMuY3NzUG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiAmJlxuXHRcdFx0XHQhKCB0aGlzLnNjcm9sbFBhcmVudFsgMCBdICE9PSB0aGlzLmRvY3VtZW50WyAwIF0gJiZcblx0XHRcdFx0JC5jb250YWlucyggdGhpcy5zY3JvbGxQYXJlbnRbIDAgXSwgdGhpcy5vZmZzZXRQYXJlbnRbIDAgXSApICkgP1xuXHRcdFx0XHRcdHRoaXMub2Zmc2V0UGFyZW50IDpcblx0XHRcdFx0XHR0aGlzLnNjcm9sbFBhcmVudCxcblx0XHRcdHNjcm9sbElzUm9vdE5vZGUgPSAoIC8oaHRtbHxib2R5KS9pICkudGVzdCggc2Nyb2xsWyAwIF0udGFnTmFtZSApO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogKFxuXG5cdFx0XHRcdC8vIFRoZSBhYnNvbHV0ZSBtb3VzZSBwb3NpdGlvblxuXHRcdFx0XHRwb3MudG9wXHQrXG5cblx0XHRcdFx0Ly8gT25seSBmb3IgcmVsYXRpdmUgcG9zaXRpb25lZCBub2RlczogUmVsYXRpdmUgb2Zmc2V0IGZyb20gZWxlbWVudCB0byBvZmZzZXQgcGFyZW50XG5cdFx0XHRcdHRoaXMub2Zmc2V0LnJlbGF0aXZlLnRvcCAqIG1vZCArXG5cblx0XHRcdFx0Ly8gVGhlIG9mZnNldFBhcmVudCdzIG9mZnNldCB3aXRob3V0IGJvcmRlcnMgKG9mZnNldCArIGJvcmRlcilcblx0XHRcdFx0dGhpcy5vZmZzZXQucGFyZW50LnRvcCAqIG1vZCAtXG5cdFx0XHRcdCggKCB0aGlzLmNzc1Bvc2l0aW9uID09PSBcImZpeGVkXCIgP1xuXHRcdFx0XHRcdC10aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxUb3AoKSA6XG5cdFx0XHRcdFx0KCBzY3JvbGxJc1Jvb3ROb2RlID8gMCA6IHNjcm9sbC5zY3JvbGxUb3AoKSApICkgKiBtb2QgKVxuXHRcdFx0KSxcblx0XHRcdGxlZnQ6IChcblxuXHRcdFx0XHQvLyBUaGUgYWJzb2x1dGUgbW91c2UgcG9zaXRpb25cblx0XHRcdFx0cG9zLmxlZnQgK1xuXG5cdFx0XHRcdC8vIE9ubHkgZm9yIHJlbGF0aXZlIHBvc2l0aW9uZWQgbm9kZXM6IFJlbGF0aXZlIG9mZnNldCBmcm9tIGVsZW1lbnQgdG8gb2Zmc2V0IHBhcmVudFxuXHRcdFx0XHR0aGlzLm9mZnNldC5yZWxhdGl2ZS5sZWZ0ICogbW9kICtcblxuXHRcdFx0XHQvLyBUaGUgb2Zmc2V0UGFyZW50J3Mgb2Zmc2V0IHdpdGhvdXQgYm9yZGVycyAob2Zmc2V0ICsgYm9yZGVyKVxuXHRcdFx0XHR0aGlzLm9mZnNldC5wYXJlbnQubGVmdCAqIG1vZFx0LVxuXHRcdFx0XHQoICggdGhpcy5jc3NQb3NpdGlvbiA9PT0gXCJmaXhlZFwiID9cblx0XHRcdFx0XHQtdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsTGVmdCgpIDogc2Nyb2xsSXNSb290Tm9kZSA/IDAgOlxuXHRcdFx0XHRcdHNjcm9sbC5zY3JvbGxMZWZ0KCkgKSAqIG1vZCApXG5cdFx0XHQpXG5cdFx0fTtcblxuXHR9LFxuXG5cdF9nZW5lcmF0ZVBvc2l0aW9uOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHR2YXIgdG9wLCBsZWZ0LFxuXHRcdFx0byA9IHRoaXMub3B0aW9ucyxcblx0XHRcdHBhZ2VYID0gZXZlbnQucGFnZVgsXG5cdFx0XHRwYWdlWSA9IGV2ZW50LnBhZ2VZLFxuXHRcdFx0c2Nyb2xsID0gdGhpcy5jc3NQb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiICYmXG5cdFx0XHRcdCEoIHRoaXMuc2Nyb2xsUGFyZW50WyAwIF0gIT09IHRoaXMuZG9jdW1lbnRbIDAgXSAmJlxuXHRcdFx0XHQkLmNvbnRhaW5zKCB0aGlzLnNjcm9sbFBhcmVudFsgMCBdLCB0aGlzLm9mZnNldFBhcmVudFsgMCBdICkgKSA/XG5cdFx0XHRcdFx0dGhpcy5vZmZzZXRQYXJlbnQgOlxuXHRcdFx0XHRcdHRoaXMuc2Nyb2xsUGFyZW50LFxuXHRcdFx0XHRzY3JvbGxJc1Jvb3ROb2RlID0gKCAvKGh0bWx8Ym9keSkvaSApLnRlc3QoIHNjcm9sbFsgMCBdLnRhZ05hbWUgKTtcblxuXHRcdC8vIFRoaXMgaXMgYW5vdGhlciB2ZXJ5IHdlaXJkIHNwZWNpYWwgY2FzZSB0aGF0IG9ubHkgaGFwcGVucyBmb3IgcmVsYXRpdmUgZWxlbWVudHM6XG5cdFx0Ly8gMS4gSWYgdGhlIGNzcyBwb3NpdGlvbiBpcyByZWxhdGl2ZVxuXHRcdC8vIDIuIGFuZCB0aGUgc2Nyb2xsIHBhcmVudCBpcyB0aGUgZG9jdW1lbnQgb3Igc2ltaWxhciB0byB0aGUgb2Zmc2V0IHBhcmVudFxuXHRcdC8vIHdlIGhhdmUgdG8gcmVmcmVzaCB0aGUgcmVsYXRpdmUgb2Zmc2V0IGR1cmluZyB0aGUgc2Nyb2xsIHNvIHRoZXJlIGFyZSBubyBqdW1wc1xuXHRcdGlmICggdGhpcy5jc3NQb3NpdGlvbiA9PT0gXCJyZWxhdGl2ZVwiICYmICEoIHRoaXMuc2Nyb2xsUGFyZW50WyAwIF0gIT09IHRoaXMuZG9jdW1lbnRbIDAgXSAmJlxuXHRcdFx0XHR0aGlzLnNjcm9sbFBhcmVudFsgMCBdICE9PSB0aGlzLm9mZnNldFBhcmVudFsgMCBdICkgKSB7XG5cdFx0XHR0aGlzLm9mZnNldC5yZWxhdGl2ZSA9IHRoaXMuX2dldFJlbGF0aXZlT2Zmc2V0KCk7XG5cdFx0fVxuXG5cdFx0Lypcblx0XHQgKiAtIFBvc2l0aW9uIGNvbnN0cmFpbmluZyAtXG5cdFx0ICogQ29uc3RyYWluIHRoZSBwb3NpdGlvbiB0byBhIG1peCBvZiBncmlkLCBjb250YWlubWVudC5cblx0XHQgKi9cblxuXHRcdGlmICggdGhpcy5vcmlnaW5hbFBvc2l0aW9uICkgeyAvL0lmIHdlIGFyZSBub3QgZHJhZ2dpbmcgeWV0LCB3ZSB3b24ndCBjaGVjayBmb3Igb3B0aW9uc1xuXG5cdFx0XHRpZiAoIHRoaXMuY29udGFpbm1lbnQgKSB7XG5cdFx0XHRcdGlmICggZXZlbnQucGFnZVggLSB0aGlzLm9mZnNldC5jbGljay5sZWZ0IDwgdGhpcy5jb250YWlubWVudFsgMCBdICkge1xuXHRcdFx0XHRcdHBhZ2VYID0gdGhpcy5jb250YWlubWVudFsgMCBdICsgdGhpcy5vZmZzZXQuY2xpY2subGVmdDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGV2ZW50LnBhZ2VZIC0gdGhpcy5vZmZzZXQuY2xpY2sudG9wIDwgdGhpcy5jb250YWlubWVudFsgMSBdICkge1xuXHRcdFx0XHRcdHBhZ2VZID0gdGhpcy5jb250YWlubWVudFsgMSBdICsgdGhpcy5vZmZzZXQuY2xpY2sudG9wO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggZXZlbnQucGFnZVggLSB0aGlzLm9mZnNldC5jbGljay5sZWZ0ID4gdGhpcy5jb250YWlubWVudFsgMiBdICkge1xuXHRcdFx0XHRcdHBhZ2VYID0gdGhpcy5jb250YWlubWVudFsgMiBdICsgdGhpcy5vZmZzZXQuY2xpY2subGVmdDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGV2ZW50LnBhZ2VZIC0gdGhpcy5vZmZzZXQuY2xpY2sudG9wID4gdGhpcy5jb250YWlubWVudFsgMyBdICkge1xuXHRcdFx0XHRcdHBhZ2VZID0gdGhpcy5jb250YWlubWVudFsgMyBdICsgdGhpcy5vZmZzZXQuY2xpY2sudG9wO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggby5ncmlkICkge1xuXHRcdFx0XHR0b3AgPSB0aGlzLm9yaWdpbmFsUGFnZVkgKyBNYXRoLnJvdW5kKCAoIHBhZ2VZIC0gdGhpcy5vcmlnaW5hbFBhZ2VZICkgL1xuXHRcdFx0XHRcdG8uZ3JpZFsgMSBdICkgKiBvLmdyaWRbIDEgXTtcblx0XHRcdFx0cGFnZVkgPSB0aGlzLmNvbnRhaW5tZW50ID9cblx0XHRcdFx0XHQoICggdG9wIC0gdGhpcy5vZmZzZXQuY2xpY2sudG9wID49IHRoaXMuY29udGFpbm1lbnRbIDEgXSAmJlxuXHRcdFx0XHRcdFx0dG9wIC0gdGhpcy5vZmZzZXQuY2xpY2sudG9wIDw9IHRoaXMuY29udGFpbm1lbnRbIDMgXSApID9cblx0XHRcdFx0XHRcdFx0dG9wIDpcblx0XHRcdFx0XHRcdFx0KCAoIHRvcCAtIHRoaXMub2Zmc2V0LmNsaWNrLnRvcCA+PSB0aGlzLmNvbnRhaW5tZW50WyAxIF0gKSA/XG5cdFx0XHRcdFx0XHRcdFx0dG9wIC0gby5ncmlkWyAxIF0gOiB0b3AgKyBvLmdyaWRbIDEgXSApICkgOlxuXHRcdFx0XHRcdFx0XHRcdHRvcDtcblxuXHRcdFx0XHRsZWZ0ID0gdGhpcy5vcmlnaW5hbFBhZ2VYICsgTWF0aC5yb3VuZCggKCBwYWdlWCAtIHRoaXMub3JpZ2luYWxQYWdlWCApIC9cblx0XHRcdFx0XHRvLmdyaWRbIDAgXSApICogby5ncmlkWyAwIF07XG5cdFx0XHRcdHBhZ2VYID0gdGhpcy5jb250YWlubWVudCA/XG5cdFx0XHRcdFx0KCAoIGxlZnQgLSB0aGlzLm9mZnNldC5jbGljay5sZWZ0ID49IHRoaXMuY29udGFpbm1lbnRbIDAgXSAmJlxuXHRcdFx0XHRcdFx0bGVmdCAtIHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQgPD0gdGhpcy5jb250YWlubWVudFsgMiBdICkgP1xuXHRcdFx0XHRcdFx0XHRsZWZ0IDpcblx0XHRcdFx0XHRcdFx0KCAoIGxlZnQgLSB0aGlzLm9mZnNldC5jbGljay5sZWZ0ID49IHRoaXMuY29udGFpbm1lbnRbIDAgXSApID9cblx0XHRcdFx0XHRcdFx0XHRsZWZ0IC0gby5ncmlkWyAwIF0gOiBsZWZ0ICsgby5ncmlkWyAwIF0gKSApIDpcblx0XHRcdFx0XHRcdFx0XHRsZWZ0O1xuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogKFxuXG5cdFx0XHRcdC8vIFRoZSBhYnNvbHV0ZSBtb3VzZSBwb3NpdGlvblxuXHRcdFx0XHRwYWdlWSAtXG5cblx0XHRcdFx0Ly8gQ2xpY2sgb2Zmc2V0IChyZWxhdGl2ZSB0byB0aGUgZWxlbWVudClcblx0XHRcdFx0dGhpcy5vZmZzZXQuY2xpY2sudG9wIC1cblxuXHRcdFx0XHQvLyBPbmx5IGZvciByZWxhdGl2ZSBwb3NpdGlvbmVkIG5vZGVzOiBSZWxhdGl2ZSBvZmZzZXQgZnJvbSBlbGVtZW50IHRvIG9mZnNldCBwYXJlbnRcblx0XHRcdFx0dGhpcy5vZmZzZXQucmVsYXRpdmUudG9wIC1cblxuXHRcdFx0XHQvLyBUaGUgb2Zmc2V0UGFyZW50J3Mgb2Zmc2V0IHdpdGhvdXQgYm9yZGVycyAob2Zmc2V0ICsgYm9yZGVyKVxuXHRcdFx0XHR0aGlzLm9mZnNldC5wYXJlbnQudG9wICtcblx0XHRcdFx0KCAoIHRoaXMuY3NzUG9zaXRpb24gPT09IFwiZml4ZWRcIiA/XG5cdFx0XHRcdFx0LXRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpIDpcblx0XHRcdFx0XHQoIHNjcm9sbElzUm9vdE5vZGUgPyAwIDogc2Nyb2xsLnNjcm9sbFRvcCgpICkgKSApXG5cdFx0XHQpLFxuXHRcdFx0bGVmdDogKFxuXG5cdFx0XHRcdC8vIFRoZSBhYnNvbHV0ZSBtb3VzZSBwb3NpdGlvblxuXHRcdFx0XHRwYWdlWCAtXG5cblx0XHRcdFx0Ly8gQ2xpY2sgb2Zmc2V0IChyZWxhdGl2ZSB0byB0aGUgZWxlbWVudClcblx0XHRcdFx0dGhpcy5vZmZzZXQuY2xpY2subGVmdCAtXG5cblx0XHRcdFx0Ly8gT25seSBmb3IgcmVsYXRpdmUgcG9zaXRpb25lZCBub2RlczogUmVsYXRpdmUgb2Zmc2V0IGZyb20gZWxlbWVudCB0byBvZmZzZXQgcGFyZW50XG5cdFx0XHRcdHRoaXMub2Zmc2V0LnJlbGF0aXZlLmxlZnQgLVxuXG5cdFx0XHRcdC8vIFRoZSBvZmZzZXRQYXJlbnQncyBvZmZzZXQgd2l0aG91dCBib3JkZXJzIChvZmZzZXQgKyBib3JkZXIpXG5cdFx0XHRcdHRoaXMub2Zmc2V0LnBhcmVudC5sZWZ0ICtcblx0XHRcdFx0KCAoIHRoaXMuY3NzUG9zaXRpb24gPT09IFwiZml4ZWRcIiA/XG5cdFx0XHRcdFx0LXRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbExlZnQoKSA6XG5cdFx0XHRcdFx0c2Nyb2xsSXNSb290Tm9kZSA/IDAgOiBzY3JvbGwuc2Nyb2xsTGVmdCgpICkgKVxuXHRcdFx0KVxuXHRcdH07XG5cblx0fSxcblxuXHRfcmVhcnJhbmdlOiBmdW5jdGlvbiggZXZlbnQsIGksIGEsIGhhcmRSZWZyZXNoICkge1xuXG5cdFx0YSA/IGFbIDAgXS5hcHBlbmRDaGlsZCggdGhpcy5wbGFjZWhvbGRlclsgMCBdICkgOlxuXHRcdFx0aS5pdGVtWyAwIF0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIHRoaXMucGxhY2Vob2xkZXJbIDAgXSxcblx0XHRcdFx0KCB0aGlzLmRpcmVjdGlvbiA9PT0gXCJkb3duXCIgPyBpLml0ZW1bIDAgXSA6IGkuaXRlbVsgMCBdLm5leHRTaWJsaW5nICkgKTtcblxuXHRcdC8vVmFyaW91cyB0aGluZ3MgZG9uZSBoZXJlIHRvIGltcHJvdmUgdGhlIHBlcmZvcm1hbmNlOlxuXHRcdC8vIDEuIHdlIGNyZWF0ZSBhIHNldFRpbWVvdXQsIHRoYXQgY2FsbHMgcmVmcmVzaFBvc2l0aW9uc1xuXHRcdC8vIDIuIG9uIHRoZSBpbnN0YW5jZSwgd2UgaGF2ZSBhIGNvdW50ZXIgdmFyaWFibGUsIHRoYXQgZ2V0J3MgaGlnaGVyIGFmdGVyIGV2ZXJ5IGFwcGVuZFxuXHRcdC8vIDMuIG9uIHRoZSBsb2NhbCBzY29wZSwgd2UgY29weSB0aGUgY291bnRlciB2YXJpYWJsZSwgYW5kIGNoZWNrIGluIHRoZSB0aW1lb3V0LFxuXHRcdC8vIGlmIGl0J3Mgc3RpbGwgdGhlIHNhbWVcblx0XHQvLyA0LiB0aGlzIGxldHMgb25seSB0aGUgbGFzdCBhZGRpdGlvbiB0byB0aGUgdGltZW91dCBzdGFjayB0aHJvdWdoXG5cdFx0dGhpcy5jb3VudGVyID0gdGhpcy5jb3VudGVyID8gKyt0aGlzLmNvdW50ZXIgOiAxO1xuXHRcdHZhciBjb3VudGVyID0gdGhpcy5jb3VudGVyO1xuXG5cdFx0dGhpcy5fZGVsYXkoIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb3VudGVyID09PSB0aGlzLmNvdW50ZXIgKSB7XG5cblx0XHRcdFx0Ly9QcmVjb21wdXRlIGFmdGVyIGVhY2ggRE9NIGluc2VydGlvbiwgTk9UIG9uIG1vdXNlbW92ZVxuXHRcdFx0XHR0aGlzLnJlZnJlc2hQb3NpdGlvbnMoICFoYXJkUmVmcmVzaCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHR9LFxuXG5cdF9jbGVhcjogZnVuY3Rpb24oIGV2ZW50LCBub1Byb3BhZ2F0aW9uICkge1xuXG5cdFx0dGhpcy5yZXZlcnRpbmcgPSBmYWxzZTtcblxuXHRcdC8vIFdlIGRlbGF5IGFsbCBldmVudHMgdGhhdCBoYXZlIHRvIGJlIHRyaWdnZXJlZCB0byBhZnRlciB0aGUgcG9pbnQgd2hlcmUgdGhlIHBsYWNlaG9sZGVyXG5cdFx0Ly8gaGFzIGJlZW4gcmVtb3ZlZCBhbmQgZXZlcnl0aGluZyBlbHNlIG5vcm1hbGl6ZWQgYWdhaW5cblx0XHR2YXIgaSxcblx0XHRcdGRlbGF5ZWRUcmlnZ2VycyA9IFtdO1xuXG5cdFx0Ly8gV2UgZmlyc3QgaGF2ZSB0byB1cGRhdGUgdGhlIGRvbSBwb3NpdGlvbiBvZiB0aGUgYWN0dWFsIGN1cnJlbnRJdGVtXG5cdFx0Ly8gTm90ZTogZG9uJ3QgZG8gaXQgaWYgdGhlIGN1cnJlbnQgaXRlbSBpcyBhbHJlYWR5IHJlbW92ZWQgKGJ5IGEgdXNlciksIG9yIGl0IGdldHNcblx0XHQvLyByZWFwcGVuZGVkIChzZWUgIzQwODgpXG5cdFx0aWYgKCAhdGhpcy5fbm9GaW5hbFNvcnQgJiYgdGhpcy5jdXJyZW50SXRlbS5wYXJlbnQoKS5sZW5ndGggKSB7XG5cdFx0XHR0aGlzLnBsYWNlaG9sZGVyLmJlZm9yZSggdGhpcy5jdXJyZW50SXRlbSApO1xuXHRcdH1cblx0XHR0aGlzLl9ub0ZpbmFsU29ydCA9IG51bGw7XG5cblx0XHRpZiAoIHRoaXMuaGVscGVyWyAwIF0gPT09IHRoaXMuY3VycmVudEl0ZW1bIDAgXSApIHtcblx0XHRcdGZvciAoIGkgaW4gdGhpcy5fc3RvcmVkQ1NTICkge1xuXHRcdFx0XHRpZiAoIHRoaXMuX3N0b3JlZENTU1sgaSBdID09PSBcImF1dG9cIiB8fCB0aGlzLl9zdG9yZWRDU1NbIGkgXSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0XHR0aGlzLl9zdG9yZWRDU1NbIGkgXSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHRoaXMuY3VycmVudEl0ZW0uY3NzKCB0aGlzLl9zdG9yZWRDU1MgKTtcblx0XHRcdHRoaXMuX3JlbW92ZUNsYXNzKCB0aGlzLmN1cnJlbnRJdGVtLCBcInVpLXNvcnRhYmxlLWhlbHBlclwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuY3VycmVudEl0ZW0uc2hvdygpO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5mcm9tT3V0c2lkZSAmJiAhbm9Qcm9wYWdhdGlvbiApIHtcblx0XHRcdGRlbGF5ZWRUcmlnZ2Vycy5wdXNoKCBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHRoaXMuX3RyaWdnZXIoIFwicmVjZWl2ZVwiLCBldmVudCwgdGhpcy5fdWlIYXNoKCB0aGlzLmZyb21PdXRzaWRlICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cdFx0aWYgKCAoIHRoaXMuZnJvbU91dHNpZGUgfHxcblx0XHRcdFx0dGhpcy5kb21Qb3NpdGlvbi5wcmV2ICE9PVxuXHRcdFx0XHR0aGlzLmN1cnJlbnRJdGVtLnByZXYoKS5ub3QoIFwiLnVpLXNvcnRhYmxlLWhlbHBlclwiIClbIDAgXSB8fFxuXHRcdFx0XHR0aGlzLmRvbVBvc2l0aW9uLnBhcmVudCAhPT0gdGhpcy5jdXJyZW50SXRlbS5wYXJlbnQoKVsgMCBdICkgJiYgIW5vUHJvcGFnYXRpb24gKSB7XG5cblx0XHRcdC8vIFRyaWdnZXIgdXBkYXRlIGNhbGxiYWNrIGlmIHRoZSBET00gcG9zaXRpb24gaGFzIGNoYW5nZWRcblx0XHRcdGRlbGF5ZWRUcmlnZ2Vycy5wdXNoKCBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHRoaXMuX3RyaWdnZXIoIFwidXBkYXRlXCIsIGV2ZW50LCB0aGlzLl91aUhhc2goKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIENoZWNrIGlmIHRoZSBpdGVtcyBDb250YWluZXIgaGFzIENoYW5nZWQgYW5kIHRyaWdnZXIgYXBwcm9wcmlhdGVcblx0XHQvLyBldmVudHMuXG5cdFx0aWYgKCB0aGlzICE9PSB0aGlzLmN1cnJlbnRDb250YWluZXIgKSB7XG5cdFx0XHRpZiAoICFub1Byb3BhZ2F0aW9uICkge1xuXHRcdFx0XHRkZWxheWVkVHJpZ2dlcnMucHVzaCggZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRcdHRoaXMuX3RyaWdnZXIoIFwicmVtb3ZlXCIsIGV2ZW50LCB0aGlzLl91aUhhc2goKSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdGRlbGF5ZWRUcmlnZ2Vycy5wdXNoKCAoIGZ1bmN0aW9uKCBjICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRjLl90cmlnZ2VyKCBcInJlY2VpdmVcIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCggdGhpcyApICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fSApLmNhbGwoIHRoaXMsIHRoaXMuY3VycmVudENvbnRhaW5lciApICk7XG5cdFx0XHRcdGRlbGF5ZWRUcmlnZ2Vycy5wdXNoKCAoIGZ1bmN0aW9uKCBjICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRjLl90cmlnZ2VyKCBcInVwZGF0ZVwiLCBldmVudCwgdGhpcy5fdWlIYXNoKCB0aGlzICkgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9ICkuY2FsbCggdGhpcywgdGhpcy5jdXJyZW50Q29udGFpbmVyICkgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvL1Bvc3QgZXZlbnRzIHRvIGNvbnRhaW5lcnNcblx0XHRmdW5jdGlvbiBkZWxheUV2ZW50KCB0eXBlLCBpbnN0YW5jZSwgY29udGFpbmVyICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0Y29udGFpbmVyLl90cmlnZ2VyKCB0eXBlLCBldmVudCwgaW5zdGFuY2UuX3VpSGFzaCggaW5zdGFuY2UgKSApO1xuXHRcdFx0fTtcblx0XHR9XG5cdFx0Zm9yICggaSA9IHRoaXMuY29udGFpbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSApIHtcblx0XHRcdGlmICggIW5vUHJvcGFnYXRpb24gKSB7XG5cdFx0XHRcdGRlbGF5ZWRUcmlnZ2Vycy5wdXNoKCBkZWxheUV2ZW50KCBcImRlYWN0aXZhdGVcIiwgdGhpcywgdGhpcy5jb250YWluZXJzWyBpIF0gKSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCB0aGlzLmNvbnRhaW5lcnNbIGkgXS5jb250YWluZXJDYWNoZS5vdmVyICkge1xuXHRcdFx0XHRkZWxheWVkVHJpZ2dlcnMucHVzaCggZGVsYXlFdmVudCggXCJvdXRcIiwgdGhpcywgdGhpcy5jb250YWluZXJzWyBpIF0gKSApO1xuXHRcdFx0XHR0aGlzLmNvbnRhaW5lcnNbIGkgXS5jb250YWluZXJDYWNoZS5vdmVyID0gMDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvL0RvIHdoYXQgd2FzIG9yaWdpbmFsbHkgaW4gcGx1Z2luc1xuXHRcdGlmICggdGhpcy5zdG9yZWRDdXJzb3IgKSB7XG5cdFx0XHR0aGlzLmRvY3VtZW50LmZpbmQoIFwiYm9keVwiICkuY3NzKCBcImN1cnNvclwiLCB0aGlzLnN0b3JlZEN1cnNvciApO1xuXHRcdFx0dGhpcy5zdG9yZWRTdHlsZXNoZWV0LnJlbW92ZSgpO1xuXHRcdH1cblx0XHRpZiAoIHRoaXMuX3N0b3JlZE9wYWNpdHkgKSB7XG5cdFx0XHR0aGlzLmhlbHBlci5jc3MoIFwib3BhY2l0eVwiLCB0aGlzLl9zdG9yZWRPcGFjaXR5ICk7XG5cdFx0fVxuXHRcdGlmICggdGhpcy5fc3RvcmVkWkluZGV4ICkge1xuXHRcdFx0dGhpcy5oZWxwZXIuY3NzKCBcInpJbmRleFwiLCB0aGlzLl9zdG9yZWRaSW5kZXggPT09IFwiYXV0b1wiID8gXCJcIiA6IHRoaXMuX3N0b3JlZFpJbmRleCApO1xuXHRcdH1cblxuXHRcdHRoaXMuZHJhZ2dpbmcgPSBmYWxzZTtcblxuXHRcdGlmICggIW5vUHJvcGFnYXRpb24gKSB7XG5cdFx0XHR0aGlzLl90cmlnZ2VyKCBcImJlZm9yZVN0b3BcIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCgpICk7XG5cdFx0fVxuXG5cdFx0Ly8kKHRoaXMucGxhY2Vob2xkZXJbMF0pLnJlbW92ZSgpOyB3b3VsZCBoYXZlIGJlZW4gdGhlIGpRdWVyeSB3YXkgLSB1bmZvcnR1bmF0ZWx5LFxuXHRcdC8vIGl0IHVuYmluZHMgQUxMIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCBub2RlIVxuXHRcdHRoaXMucGxhY2Vob2xkZXJbIDAgXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0aGlzLnBsYWNlaG9sZGVyWyAwIF0gKTtcblxuXHRcdGlmICggIXRoaXMuY2FuY2VsSGVscGVyUmVtb3ZhbCApIHtcblx0XHRcdGlmICggdGhpcy5oZWxwZXJbIDAgXSAhPT0gdGhpcy5jdXJyZW50SXRlbVsgMCBdICkge1xuXHRcdFx0XHR0aGlzLmhlbHBlci5yZW1vdmUoKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuaGVscGVyID0gbnVsbDtcblx0XHR9XG5cblx0XHRpZiAoICFub1Byb3BhZ2F0aW9uICkge1xuXHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxheWVkVHJpZ2dlcnMubGVuZ3RoOyBpKysgKSB7XG5cblx0XHRcdFx0Ly8gVHJpZ2dlciBhbGwgZGVsYXllZCBldmVudHNcblx0XHRcdFx0ZGVsYXllZFRyaWdnZXJzWyBpIF0uY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX3RyaWdnZXIoIFwic3RvcFwiLCBldmVudCwgdGhpcy5fdWlIYXNoKCkgKTtcblx0XHR9XG5cblx0XHR0aGlzLmZyb21PdXRzaWRlID0gZmFsc2U7XG5cdFx0cmV0dXJuICF0aGlzLmNhbmNlbEhlbHBlclJlbW92YWw7XG5cblx0fSxcblxuXHRfdHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAkLldpZGdldC5wcm90b3R5cGUuX3RyaWdnZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApID09PSBmYWxzZSApIHtcblx0XHRcdHRoaXMuY2FuY2VsKCk7XG5cdFx0fVxuXHR9LFxuXG5cdF91aUhhc2g6IGZ1bmN0aW9uKCBfaW5zdCApIHtcblx0XHR2YXIgaW5zdCA9IF9pbnN0IHx8IHRoaXM7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGhlbHBlcjogaW5zdC5oZWxwZXIsXG5cdFx0XHRwbGFjZWhvbGRlcjogaW5zdC5wbGFjZWhvbGRlciB8fCAkKCBbXSApLFxuXHRcdFx0cG9zaXRpb246IGluc3QucG9zaXRpb24sXG5cdFx0XHRvcmlnaW5hbFBvc2l0aW9uOiBpbnN0Lm9yaWdpbmFsUG9zaXRpb24sXG5cdFx0XHRvZmZzZXQ6IGluc3QucG9zaXRpb25BYnMsXG5cdFx0XHRpdGVtOiBpbnN0LmN1cnJlbnRJdGVtLFxuXHRcdFx0c2VuZGVyOiBfaW5zdCA/IF9pbnN0LmVsZW1lbnQgOiBudWxsXG5cdFx0fTtcblx0fVxuXG59ICk7XG5cblxuLyohXG4gKiBqUXVlcnkgVUkgQWNjb3JkaW9uIDEuMTIuMVxuICogaHR0cDovL2pxdWVyeXVpLmNvbVxuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKi9cblxuLy8+PmxhYmVsOiBBY2NvcmRpb25cbi8vPj5ncm91cDogV2lkZ2V0c1xuLy8ganNjczpkaXNhYmxlIG1heGltdW1MaW5lTGVuZ3RoXG4vLz4+ZGVzY3JpcHRpb246IERpc3BsYXlzIGNvbGxhcHNpYmxlIGNvbnRlbnQgcGFuZWxzIGZvciBwcmVzZW50aW5nIGluZm9ybWF0aW9uIGluIGEgbGltaXRlZCBhbW91bnQgb2Ygc3BhY2UuXG4vLyBqc2NzOmVuYWJsZSBtYXhpbXVtTGluZUxlbmd0aFxuLy8+PmRvY3M6IGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL2FjY29yZGlvbi9cbi8vPj5kZW1vczogaHR0cDovL2pxdWVyeXVpLmNvbS9hY2NvcmRpb24vXG4vLz4+Y3NzLnN0cnVjdHVyZTogLi4vLi4vdGhlbWVzL2Jhc2UvY29yZS5jc3Ncbi8vPj5jc3Muc3RydWN0dXJlOiAuLi8uLi90aGVtZXMvYmFzZS9hY2NvcmRpb24uY3NzXG4vLz4+Y3NzLnRoZW1lOiAuLi8uLi90aGVtZXMvYmFzZS90aGVtZS5jc3NcblxuXG5cbnZhciB3aWRnZXRzQWNjb3JkaW9uID0gJC53aWRnZXQoIFwidWkuYWNjb3JkaW9uXCIsIHtcblx0dmVyc2lvbjogXCIxLjEyLjFcIixcblx0b3B0aW9uczoge1xuXHRcdGFjdGl2ZTogMCxcblx0XHRhbmltYXRlOiB7fSxcblx0XHRjbGFzc2VzOiB7XG5cdFx0XHRcInVpLWFjY29yZGlvbi1oZWFkZXJcIjogXCJ1aS1jb3JuZXItdG9wXCIsXG5cdFx0XHRcInVpLWFjY29yZGlvbi1oZWFkZXItY29sbGFwc2VkXCI6IFwidWktY29ybmVyLWFsbFwiLFxuXHRcdFx0XCJ1aS1hY2NvcmRpb24tY29udGVudFwiOiBcInVpLWNvcm5lci1ib3R0b21cIlxuXHRcdH0sXG5cdFx0Y29sbGFwc2libGU6IGZhbHNlLFxuXHRcdGV2ZW50OiBcImNsaWNrXCIsXG5cdFx0aGVhZGVyOiBcIj4gbGkgPiA6Zmlyc3QtY2hpbGQsID4gOm5vdChsaSk6ZXZlblwiLFxuXHRcdGhlaWdodFN0eWxlOiBcImF1dG9cIixcblx0XHRpY29uczoge1xuXHRcdFx0YWN0aXZlSGVhZGVyOiBcInVpLWljb24tdHJpYW5nbGUtMS1zXCIsXG5cdFx0XHRoZWFkZXI6IFwidWktaWNvbi10cmlhbmdsZS0xLWVcIlxuXHRcdH0sXG5cblx0XHQvLyBDYWxsYmFja3Ncblx0XHRhY3RpdmF0ZTogbnVsbCxcblx0XHRiZWZvcmVBY3RpdmF0ZTogbnVsbFxuXHR9LFxuXG5cdGhpZGVQcm9wczoge1xuXHRcdGJvcmRlclRvcFdpZHRoOiBcImhpZGVcIixcblx0XHRib3JkZXJCb3R0b21XaWR0aDogXCJoaWRlXCIsXG5cdFx0cGFkZGluZ1RvcDogXCJoaWRlXCIsXG5cdFx0cGFkZGluZ0JvdHRvbTogXCJoaWRlXCIsXG5cdFx0aGVpZ2h0OiBcImhpZGVcIlxuXHR9LFxuXG5cdHNob3dQcm9wczoge1xuXHRcdGJvcmRlclRvcFdpZHRoOiBcInNob3dcIixcblx0XHRib3JkZXJCb3R0b21XaWR0aDogXCJzaG93XCIsXG5cdFx0cGFkZGluZ1RvcDogXCJzaG93XCIsXG5cdFx0cGFkZGluZ0JvdHRvbTogXCJzaG93XCIsXG5cdFx0aGVpZ2h0OiBcInNob3dcIlxuXHR9LFxuXG5cdF9jcmVhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG5cdFx0dGhpcy5wcmV2U2hvdyA9IHRoaXMucHJldkhpZGUgPSAkKCk7XG5cdFx0dGhpcy5fYWRkQ2xhc3MoIFwidWktYWNjb3JkaW9uXCIsIFwidWktd2lkZ2V0IHVpLWhlbHBlci1yZXNldFwiICk7XG5cdFx0dGhpcy5lbGVtZW50LmF0dHIoIFwicm9sZVwiLCBcInRhYmxpc3RcIiApO1xuXG5cdFx0Ly8gRG9uJ3QgYWxsb3cgY29sbGFwc2libGU6IGZhbHNlIGFuZCBhY3RpdmU6IGZhbHNlIC8gbnVsbFxuXHRcdGlmICggIW9wdGlvbnMuY29sbGFwc2libGUgJiYgKCBvcHRpb25zLmFjdGl2ZSA9PT0gZmFsc2UgfHwgb3B0aW9ucy5hY3RpdmUgPT0gbnVsbCApICkge1xuXHRcdFx0b3B0aW9ucy5hY3RpdmUgPSAwO1xuXHRcdH1cblxuXHRcdHRoaXMuX3Byb2Nlc3NQYW5lbHMoKTtcblxuXHRcdC8vIGhhbmRsZSBuZWdhdGl2ZSB2YWx1ZXNcblx0XHRpZiAoIG9wdGlvbnMuYWN0aXZlIDwgMCApIHtcblx0XHRcdG9wdGlvbnMuYWN0aXZlICs9IHRoaXMuaGVhZGVycy5sZW5ndGg7XG5cdFx0fVxuXHRcdHRoaXMuX3JlZnJlc2goKTtcblx0fSxcblxuXHRfZ2V0Q3JlYXRlRXZlbnREYXRhOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0aGVhZGVyOiB0aGlzLmFjdGl2ZSxcblx0XHRcdHBhbmVsOiAhdGhpcy5hY3RpdmUubGVuZ3RoID8gJCgpIDogdGhpcy5hY3RpdmUubmV4dCgpXG5cdFx0fTtcblx0fSxcblxuXHRfY3JlYXRlSWNvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpY29uLCBjaGlsZHJlbixcblx0XHRcdGljb25zID0gdGhpcy5vcHRpb25zLmljb25zO1xuXG5cdFx0aWYgKCBpY29ucyApIHtcblx0XHRcdGljb24gPSAkKCBcIjxzcGFuPlwiICk7XG5cdFx0XHR0aGlzLl9hZGRDbGFzcyggaWNvbiwgXCJ1aS1hY2NvcmRpb24taGVhZGVyLWljb25cIiwgXCJ1aS1pY29uIFwiICsgaWNvbnMuaGVhZGVyICk7XG5cdFx0XHRpY29uLnByZXBlbmRUbyggdGhpcy5oZWFkZXJzICk7XG5cdFx0XHRjaGlsZHJlbiA9IHRoaXMuYWN0aXZlLmNoaWxkcmVuKCBcIi51aS1hY2NvcmRpb24taGVhZGVyLWljb25cIiApO1xuXHRcdFx0dGhpcy5fcmVtb3ZlQ2xhc3MoIGNoaWxkcmVuLCBpY29ucy5oZWFkZXIgKVxuXHRcdFx0XHQuX2FkZENsYXNzKCBjaGlsZHJlbiwgbnVsbCwgaWNvbnMuYWN0aXZlSGVhZGVyIClcblx0XHRcdFx0Ll9hZGRDbGFzcyggdGhpcy5oZWFkZXJzLCBcInVpLWFjY29yZGlvbi1pY29uc1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdF9kZXN0cm95SWNvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuX3JlbW92ZUNsYXNzKCB0aGlzLmhlYWRlcnMsIFwidWktYWNjb3JkaW9uLWljb25zXCIgKTtcblx0XHR0aGlzLmhlYWRlcnMuY2hpbGRyZW4oIFwiLnVpLWFjY29yZGlvbi1oZWFkZXItaWNvblwiICkucmVtb3ZlKCk7XG5cdH0sXG5cblx0X2Rlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjb250ZW50cztcblxuXHRcdC8vIENsZWFuIHVwIG1haW4gZWxlbWVudFxuXHRcdHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyKCBcInJvbGVcIiApO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgaGVhZGVyc1xuXHRcdHRoaXMuaGVhZGVyc1xuXHRcdFx0LnJlbW92ZUF0dHIoIFwicm9sZSBhcmlhLWV4cGFuZGVkIGFyaWEtc2VsZWN0ZWQgYXJpYS1jb250cm9scyB0YWJJbmRleFwiIClcblx0XHRcdC5yZW1vdmVVbmlxdWVJZCgpO1xuXG5cdFx0dGhpcy5fZGVzdHJveUljb25zKCk7XG5cblx0XHQvLyBDbGVhbiB1cCBjb250ZW50IHBhbmVsc1xuXHRcdGNvbnRlbnRzID0gdGhpcy5oZWFkZXJzLm5leHQoKVxuXHRcdFx0LmNzcyggXCJkaXNwbGF5XCIsIFwiXCIgKVxuXHRcdFx0LnJlbW92ZUF0dHIoIFwicm9sZSBhcmlhLWhpZGRlbiBhcmlhLWxhYmVsbGVkYnlcIiApXG5cdFx0XHQucmVtb3ZlVW5pcXVlSWQoKTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmhlaWdodFN0eWxlICE9PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdGNvbnRlbnRzLmNzcyggXCJoZWlnaHRcIiwgXCJcIiApO1xuXHRcdH1cblx0fSxcblxuXHRfc2V0T3B0aW9uOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHRpZiAoIGtleSA9PT0gXCJhY3RpdmVcIiApIHtcblxuXHRcdFx0Ly8gX2FjdGl2YXRlKCkgd2lsbCBoYW5kbGUgaW52YWxpZCB2YWx1ZXMgYW5kIHVwZGF0ZSB0aGlzLm9wdGlvbnNcblx0XHRcdHRoaXMuX2FjdGl2YXRlKCB2YWx1ZSApO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ID09PSBcImV2ZW50XCIgKSB7XG5cdFx0XHRpZiAoIHRoaXMub3B0aW9ucy5ldmVudCApIHtcblx0XHRcdFx0dGhpcy5fb2ZmKCB0aGlzLmhlYWRlcnMsIHRoaXMub3B0aW9ucy5ldmVudCApO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5fc2V0dXBFdmVudHMoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fc3VwZXIoIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNldHRpbmcgY29sbGFwc2libGU6IGZhbHNlIHdoaWxlIGNvbGxhcHNlZDsgb3BlbiBmaXJzdCBwYW5lbFxuXHRcdGlmICgga2V5ID09PSBcImNvbGxhcHNpYmxlXCIgJiYgIXZhbHVlICYmIHRoaXMub3B0aW9ucy5hY3RpdmUgPT09IGZhbHNlICkge1xuXHRcdFx0dGhpcy5fYWN0aXZhdGUoIDAgKTtcblx0XHR9XG5cblx0XHRpZiAoIGtleSA9PT0gXCJpY29uc1wiICkge1xuXHRcdFx0dGhpcy5fZGVzdHJveUljb25zKCk7XG5cdFx0XHRpZiAoIHZhbHVlICkge1xuXHRcdFx0XHR0aGlzLl9jcmVhdGVJY29ucygpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRfc2V0T3B0aW9uRGlzYWJsZWQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR0aGlzLl9zdXBlciggdmFsdWUgKTtcblxuXHRcdHRoaXMuZWxlbWVudC5hdHRyKCBcImFyaWEtZGlzYWJsZWRcIiwgdmFsdWUgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFOCBPbmx5XG5cdFx0Ly8gIzUzMzIgLyAjNjA1OSAtIG9wYWNpdHkgZG9lc24ndCBjYXNjYWRlIHRvIHBvc2l0aW9uZWQgZWxlbWVudHMgaW4gSUVcblx0XHQvLyBzbyB3ZSBuZWVkIHRvIGFkZCB0aGUgZGlzYWJsZWQgY2xhc3MgdG8gdGhlIGhlYWRlcnMgYW5kIHBhbmVsc1xuXHRcdHRoaXMuX3RvZ2dsZUNsYXNzKCBudWxsLCBcInVpLXN0YXRlLWRpc2FibGVkXCIsICEhdmFsdWUgKTtcblx0XHR0aGlzLl90b2dnbGVDbGFzcyggdGhpcy5oZWFkZXJzLmFkZCggdGhpcy5oZWFkZXJzLm5leHQoKSApLCBudWxsLCBcInVpLXN0YXRlLWRpc2FibGVkXCIsXG5cdFx0XHQhIXZhbHVlICk7XG5cdH0sXG5cblx0X2tleWRvd246IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRpZiAoIGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBrZXlDb2RlID0gJC51aS5rZXlDb2RlLFxuXHRcdFx0bGVuZ3RoID0gdGhpcy5oZWFkZXJzLmxlbmd0aCxcblx0XHRcdGN1cnJlbnRJbmRleCA9IHRoaXMuaGVhZGVycy5pbmRleCggZXZlbnQudGFyZ2V0ICksXG5cdFx0XHR0b0ZvY3VzID0gZmFsc2U7XG5cblx0XHRzd2l0Y2ggKCBldmVudC5rZXlDb2RlICkge1xuXHRcdGNhc2Uga2V5Q29kZS5SSUdIVDpcblx0XHRjYXNlIGtleUNvZGUuRE9XTjpcblx0XHRcdHRvRm9jdXMgPSB0aGlzLmhlYWRlcnNbICggY3VycmVudEluZGV4ICsgMSApICUgbGVuZ3RoIF07XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIGtleUNvZGUuTEVGVDpcblx0XHRjYXNlIGtleUNvZGUuVVA6XG5cdFx0XHR0b0ZvY3VzID0gdGhpcy5oZWFkZXJzWyAoIGN1cnJlbnRJbmRleCAtIDEgKyBsZW5ndGggKSAlIGxlbmd0aCBdO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBrZXlDb2RlLlNQQUNFOlxuXHRcdGNhc2Uga2V5Q29kZS5FTlRFUjpcblx0XHRcdHRoaXMuX2V2ZW50SGFuZGxlciggZXZlbnQgKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2Uga2V5Q29kZS5IT01FOlxuXHRcdFx0dG9Gb2N1cyA9IHRoaXMuaGVhZGVyc1sgMCBdO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBrZXlDb2RlLkVORDpcblx0XHRcdHRvRm9jdXMgPSB0aGlzLmhlYWRlcnNbIGxlbmd0aCAtIDEgXTtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblxuXHRcdGlmICggdG9Gb2N1cyApIHtcblx0XHRcdCQoIGV2ZW50LnRhcmdldCApLmF0dHIoIFwidGFiSW5kZXhcIiwgLTEgKTtcblx0XHRcdCQoIHRvRm9jdXMgKS5hdHRyKCBcInRhYkluZGV4XCIsIDAgKTtcblx0XHRcdCQoIHRvRm9jdXMgKS50cmlnZ2VyKCBcImZvY3VzXCIgKTtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9LFxuXG5cdF9wYW5lbEtleURvd246IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRpZiAoIGV2ZW50LmtleUNvZGUgPT09ICQudWkua2V5Q29kZS5VUCAmJiBldmVudC5jdHJsS2V5ICkge1xuXHRcdFx0JCggZXZlbnQuY3VycmVudFRhcmdldCApLnByZXYoKS50cmlnZ2VyKCBcImZvY3VzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0cmVmcmVzaDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cdFx0dGhpcy5fcHJvY2Vzc1BhbmVscygpO1xuXG5cdFx0Ly8gV2FzIGNvbGxhcHNlZCBvciBubyBwYW5lbFxuXHRcdGlmICggKCBvcHRpb25zLmFjdGl2ZSA9PT0gZmFsc2UgJiYgb3B0aW9ucy5jb2xsYXBzaWJsZSA9PT0gdHJ1ZSApIHx8XG5cdFx0XHRcdCF0aGlzLmhlYWRlcnMubGVuZ3RoICkge1xuXHRcdFx0b3B0aW9ucy5hY3RpdmUgPSBmYWxzZTtcblx0XHRcdHRoaXMuYWN0aXZlID0gJCgpO1xuXG5cdFx0Ly8gYWN0aXZlIGZhbHNlIG9ubHkgd2hlbiBjb2xsYXBzaWJsZSBpcyB0cnVlXG5cdFx0fSBlbHNlIGlmICggb3B0aW9ucy5hY3RpdmUgPT09IGZhbHNlICkge1xuXHRcdFx0dGhpcy5fYWN0aXZhdGUoIDAgKTtcblxuXHRcdC8vIHdhcyBhY3RpdmUsIGJ1dCBhY3RpdmUgcGFuZWwgaXMgZ29uZVxuXHRcdH0gZWxzZSBpZiAoIHRoaXMuYWN0aXZlLmxlbmd0aCAmJiAhJC5jb250YWlucyggdGhpcy5lbGVtZW50WyAwIF0sIHRoaXMuYWN0aXZlWyAwIF0gKSApIHtcblxuXHRcdFx0Ly8gYWxsIHJlbWFpbmluZyBwYW5lbCBhcmUgZGlzYWJsZWRcblx0XHRcdGlmICggdGhpcy5oZWFkZXJzLmxlbmd0aCA9PT0gdGhpcy5oZWFkZXJzLmZpbmQoIFwiLnVpLXN0YXRlLWRpc2FibGVkXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdG9wdGlvbnMuYWN0aXZlID0gZmFsc2U7XG5cdFx0XHRcdHRoaXMuYWN0aXZlID0gJCgpO1xuXG5cdFx0XHQvLyBhY3RpdmF0ZSBwcmV2aW91cyBwYW5lbFxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5fYWN0aXZhdGUoIE1hdGgubWF4KCAwLCBvcHRpb25zLmFjdGl2ZSAtIDEgKSApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gd2FzIGFjdGl2ZSwgYWN0aXZlIHBhbmVsIHN0aWxsIGV4aXN0c1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIG1ha2Ugc3VyZSBhY3RpdmUgaW5kZXggaXMgY29ycmVjdFxuXHRcdFx0b3B0aW9ucy5hY3RpdmUgPSB0aGlzLmhlYWRlcnMuaW5kZXgoIHRoaXMuYWN0aXZlICk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fZGVzdHJveUljb25zKCk7XG5cblx0XHR0aGlzLl9yZWZyZXNoKCk7XG5cdH0sXG5cblx0X3Byb2Nlc3NQYW5lbHM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwcmV2SGVhZGVycyA9IHRoaXMuaGVhZGVycyxcblx0XHRcdHByZXZQYW5lbHMgPSB0aGlzLnBhbmVscztcblxuXHRcdHRoaXMuaGVhZGVycyA9IHRoaXMuZWxlbWVudC5maW5kKCB0aGlzLm9wdGlvbnMuaGVhZGVyICk7XG5cdFx0dGhpcy5fYWRkQ2xhc3MoIHRoaXMuaGVhZGVycywgXCJ1aS1hY2NvcmRpb24taGVhZGVyIHVpLWFjY29yZGlvbi1oZWFkZXItY29sbGFwc2VkXCIsXG5cdFx0XHRcInVpLXN0YXRlLWRlZmF1bHRcIiApO1xuXG5cdFx0dGhpcy5wYW5lbHMgPSB0aGlzLmhlYWRlcnMubmV4dCgpLmZpbHRlciggXCI6bm90KC51aS1hY2NvcmRpb24tY29udGVudC1hY3RpdmUpXCIgKS5oaWRlKCk7XG5cdFx0dGhpcy5fYWRkQ2xhc3MoIHRoaXMucGFuZWxzLCBcInVpLWFjY29yZGlvbi1jb250ZW50XCIsIFwidWktaGVscGVyLXJlc2V0IHVpLXdpZGdldC1jb250ZW50XCIgKTtcblxuXHRcdC8vIEF2b2lkIG1lbW9yeSBsZWFrcyAoIzEwMDU2KVxuXHRcdGlmICggcHJldlBhbmVscyApIHtcblx0XHRcdHRoaXMuX29mZiggcHJldkhlYWRlcnMubm90KCB0aGlzLmhlYWRlcnMgKSApO1xuXHRcdFx0dGhpcy5fb2ZmKCBwcmV2UGFuZWxzLm5vdCggdGhpcy5wYW5lbHMgKSApO1xuXHRcdH1cblx0fSxcblxuXHRfcmVmcmVzaDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1heEhlaWdodCxcblx0XHRcdG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG5cdFx0XHRoZWlnaHRTdHlsZSA9IG9wdGlvbnMuaGVpZ2h0U3R5bGUsXG5cdFx0XHRwYXJlbnQgPSB0aGlzLmVsZW1lbnQucGFyZW50KCk7XG5cblx0XHR0aGlzLmFjdGl2ZSA9IHRoaXMuX2ZpbmRBY3RpdmUoIG9wdGlvbnMuYWN0aXZlICk7XG5cdFx0dGhpcy5fYWRkQ2xhc3MoIHRoaXMuYWN0aXZlLCBcInVpLWFjY29yZGlvbi1oZWFkZXItYWN0aXZlXCIsIFwidWktc3RhdGUtYWN0aXZlXCIgKVxuXHRcdFx0Ll9yZW1vdmVDbGFzcyggdGhpcy5hY3RpdmUsIFwidWktYWNjb3JkaW9uLWhlYWRlci1jb2xsYXBzZWRcIiApO1xuXHRcdHRoaXMuX2FkZENsYXNzKCB0aGlzLmFjdGl2ZS5uZXh0KCksIFwidWktYWNjb3JkaW9uLWNvbnRlbnQtYWN0aXZlXCIgKTtcblx0XHR0aGlzLmFjdGl2ZS5uZXh0KCkuc2hvdygpO1xuXG5cdFx0dGhpcy5oZWFkZXJzXG5cdFx0XHQuYXR0ciggXCJyb2xlXCIsIFwidGFiXCIgKVxuXHRcdFx0LmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgaGVhZGVyID0gJCggdGhpcyApLFxuXHRcdFx0XHRcdGhlYWRlcklkID0gaGVhZGVyLnVuaXF1ZUlkKCkuYXR0ciggXCJpZFwiICksXG5cdFx0XHRcdFx0cGFuZWwgPSBoZWFkZXIubmV4dCgpLFxuXHRcdFx0XHRcdHBhbmVsSWQgPSBwYW5lbC51bmlxdWVJZCgpLmF0dHIoIFwiaWRcIiApO1xuXHRcdFx0XHRoZWFkZXIuYXR0ciggXCJhcmlhLWNvbnRyb2xzXCIsIHBhbmVsSWQgKTtcblx0XHRcdFx0cGFuZWwuYXR0ciggXCJhcmlhLWxhYmVsbGVkYnlcIiwgaGVhZGVySWQgKTtcblx0XHRcdH0gKVxuXHRcdFx0Lm5leHQoKVxuXHRcdFx0XHQuYXR0ciggXCJyb2xlXCIsIFwidGFicGFuZWxcIiApO1xuXG5cdFx0dGhpcy5oZWFkZXJzXG5cdFx0XHQubm90KCB0aGlzLmFjdGl2ZSApXG5cdFx0XHRcdC5hdHRyKCB7XG5cdFx0XHRcdFx0XCJhcmlhLXNlbGVjdGVkXCI6IFwiZmFsc2VcIixcblx0XHRcdFx0XHRcImFyaWEtZXhwYW5kZWRcIjogXCJmYWxzZVwiLFxuXHRcdFx0XHRcdHRhYkluZGV4OiAtMVxuXHRcdFx0XHR9IClcblx0XHRcdFx0Lm5leHQoKVxuXHRcdFx0XHRcdC5hdHRyKCB7XG5cdFx0XHRcdFx0XHRcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiXG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdFx0LmhpZGUoKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSBhdCBsZWFzdCBvbmUgaGVhZGVyIGlzIGluIHRoZSB0YWIgb3JkZXJcblx0XHRpZiAoICF0aGlzLmFjdGl2ZS5sZW5ndGggKSB7XG5cdFx0XHR0aGlzLmhlYWRlcnMuZXEoIDAgKS5hdHRyKCBcInRhYkluZGV4XCIsIDAgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5hY3RpdmUuYXR0cigge1xuXHRcdFx0XHRcImFyaWEtc2VsZWN0ZWRcIjogXCJ0cnVlXCIsXG5cdFx0XHRcdFwiYXJpYS1leHBhbmRlZFwiOiBcInRydWVcIixcblx0XHRcdFx0dGFiSW5kZXg6IDBcblx0XHRcdH0gKVxuXHRcdFx0XHQubmV4dCgpXG5cdFx0XHRcdFx0LmF0dHIoIHtcblx0XHRcdFx0XHRcdFwiYXJpYS1oaWRkZW5cIjogXCJmYWxzZVwiXG5cdFx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHRoaXMuX2NyZWF0ZUljb25zKCk7XG5cblx0XHR0aGlzLl9zZXR1cEV2ZW50cyggb3B0aW9ucy5ldmVudCApO1xuXG5cdFx0aWYgKCBoZWlnaHRTdHlsZSA9PT0gXCJmaWxsXCIgKSB7XG5cdFx0XHRtYXhIZWlnaHQgPSBwYXJlbnQuaGVpZ2h0KCk7XG5cdFx0XHR0aGlzLmVsZW1lbnQuc2libGluZ3MoIFwiOnZpc2libGVcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9ICQoIHRoaXMgKSxcblx0XHRcdFx0XHRwb3NpdGlvbiA9IGVsZW0uY3NzKCBcInBvc2l0aW9uXCIgKTtcblxuXHRcdFx0XHRpZiAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0bWF4SGVpZ2h0IC09IGVsZW0ub3V0ZXJIZWlnaHQoIHRydWUgKTtcblx0XHRcdH0gKTtcblxuXHRcdFx0dGhpcy5oZWFkZXJzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRtYXhIZWlnaHQgLT0gJCggdGhpcyApLm91dGVySGVpZ2h0KCB0cnVlICk7XG5cdFx0XHR9ICk7XG5cblx0XHRcdHRoaXMuaGVhZGVycy5uZXh0KClcblx0XHRcdFx0LmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdCQoIHRoaXMgKS5oZWlnaHQoIE1hdGgubWF4KCAwLCBtYXhIZWlnaHQgLVxuXHRcdFx0XHRcdFx0JCggdGhpcyApLmlubmVySGVpZ2h0KCkgKyAkKCB0aGlzICkuaGVpZ2h0KCkgKSApO1xuXHRcdFx0XHR9IClcblx0XHRcdFx0LmNzcyggXCJvdmVyZmxvd1wiLCBcImF1dG9cIiApO1xuXHRcdH0gZWxzZSBpZiAoIGhlaWdodFN0eWxlID09PSBcImF1dG9cIiApIHtcblx0XHRcdG1heEhlaWdodCA9IDA7XG5cdFx0XHR0aGlzLmhlYWRlcnMubmV4dCgpXG5cdFx0XHRcdC5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHR2YXIgaXNWaXNpYmxlID0gJCggdGhpcyApLmlzKCBcIjp2aXNpYmxlXCIgKTtcblx0XHRcdFx0XHRpZiAoICFpc1Zpc2libGUgKSB7XG5cdFx0XHRcdFx0XHQkKCB0aGlzICkuc2hvdygpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtYXhIZWlnaHQgPSBNYXRoLm1heCggbWF4SGVpZ2h0LCAkKCB0aGlzICkuY3NzKCBcImhlaWdodFwiLCBcIlwiICkuaGVpZ2h0KCkgKTtcblx0XHRcdFx0XHRpZiAoICFpc1Zpc2libGUgKSB7XG5cdFx0XHRcdFx0XHQkKCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApXG5cdFx0XHRcdC5oZWlnaHQoIG1heEhlaWdodCApO1xuXHRcdH1cblx0fSxcblxuXHRfYWN0aXZhdGU6IGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHR2YXIgYWN0aXZlID0gdGhpcy5fZmluZEFjdGl2ZSggaW5kZXggKVsgMCBdO1xuXG5cdFx0Ly8gVHJ5aW5nIHRvIGFjdGl2YXRlIHRoZSBhbHJlYWR5IGFjdGl2ZSBwYW5lbFxuXHRcdGlmICggYWN0aXZlID09PSB0aGlzLmFjdGl2ZVsgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFRyeWluZyB0byBjb2xsYXBzZSwgc2ltdWxhdGUgYSBjbGljayBvbiB0aGUgY3VycmVudGx5IGFjdGl2ZSBoZWFkZXJcblx0XHRhY3RpdmUgPSBhY3RpdmUgfHwgdGhpcy5hY3RpdmVbIDAgXTtcblxuXHRcdHRoaXMuX2V2ZW50SGFuZGxlcigge1xuXHRcdFx0dGFyZ2V0OiBhY3RpdmUsXG5cdFx0XHRjdXJyZW50VGFyZ2V0OiBhY3RpdmUsXG5cdFx0XHRwcmV2ZW50RGVmYXVsdDogJC5ub29wXG5cdFx0fSApO1xuXHR9LFxuXG5cdF9maW5kQWN0aXZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJudW1iZXJcIiA/IHRoaXMuaGVhZGVycy5lcSggc2VsZWN0b3IgKSA6ICQoKTtcblx0fSxcblxuXHRfc2V0dXBFdmVudHM6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgZXZlbnRzID0ge1xuXHRcdFx0a2V5ZG93bjogXCJfa2V5ZG93blwiXG5cdFx0fTtcblx0XHRpZiAoIGV2ZW50ICkge1xuXHRcdFx0JC5lYWNoKCBldmVudC5zcGxpdCggXCIgXCIgKSwgZnVuY3Rpb24oIGluZGV4LCBldmVudE5hbWUgKSB7XG5cdFx0XHRcdGV2ZW50c1sgZXZlbnROYW1lIF0gPSBcIl9ldmVudEhhbmRsZXJcIjtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR0aGlzLl9vZmYoIHRoaXMuaGVhZGVycy5hZGQoIHRoaXMuaGVhZGVycy5uZXh0KCkgKSApO1xuXHRcdHRoaXMuX29uKCB0aGlzLmhlYWRlcnMsIGV2ZW50cyApO1xuXHRcdHRoaXMuX29uKCB0aGlzLmhlYWRlcnMubmV4dCgpLCB7IGtleWRvd246IFwiX3BhbmVsS2V5RG93blwiIH0gKTtcblx0XHR0aGlzLl9ob3ZlcmFibGUoIHRoaXMuaGVhZGVycyApO1xuXHRcdHRoaXMuX2ZvY3VzYWJsZSggdGhpcy5oZWFkZXJzICk7XG5cdH0sXG5cblx0X2V2ZW50SGFuZGxlcjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBhY3RpdmVDaGlsZHJlbiwgY2xpY2tlZENoaWxkcmVuLFxuXHRcdFx0b3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcblx0XHRcdGFjdGl2ZSA9IHRoaXMuYWN0aXZlLFxuXHRcdFx0Y2xpY2tlZCA9ICQoIGV2ZW50LmN1cnJlbnRUYXJnZXQgKSxcblx0XHRcdGNsaWNrZWRJc0FjdGl2ZSA9IGNsaWNrZWRbIDAgXSA9PT0gYWN0aXZlWyAwIF0sXG5cdFx0XHRjb2xsYXBzaW5nID0gY2xpY2tlZElzQWN0aXZlICYmIG9wdGlvbnMuY29sbGFwc2libGUsXG5cdFx0XHR0b1Nob3cgPSBjb2xsYXBzaW5nID8gJCgpIDogY2xpY2tlZC5uZXh0KCksXG5cdFx0XHR0b0hpZGUgPSBhY3RpdmUubmV4dCgpLFxuXHRcdFx0ZXZlbnREYXRhID0ge1xuXHRcdFx0XHRvbGRIZWFkZXI6IGFjdGl2ZSxcblx0XHRcdFx0b2xkUGFuZWw6IHRvSGlkZSxcblx0XHRcdFx0bmV3SGVhZGVyOiBjb2xsYXBzaW5nID8gJCgpIDogY2xpY2tlZCxcblx0XHRcdFx0bmV3UGFuZWw6IHRvU2hvd1xuXHRcdFx0fTtcblxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRpZiAoXG5cblx0XHRcdFx0Ly8gY2xpY2sgb24gYWN0aXZlIGhlYWRlciwgYnV0IG5vdCBjb2xsYXBzaWJsZVxuXHRcdFx0XHQoIGNsaWNrZWRJc0FjdGl2ZSAmJiAhb3B0aW9ucy5jb2xsYXBzaWJsZSApIHx8XG5cblx0XHRcdFx0Ly8gYWxsb3cgY2FuY2VsaW5nIGFjdGl2YXRpb25cblx0XHRcdFx0KCB0aGlzLl90cmlnZ2VyKCBcImJlZm9yZUFjdGl2YXRlXCIsIGV2ZW50LCBldmVudERhdGEgKSA9PT0gZmFsc2UgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRvcHRpb25zLmFjdGl2ZSA9IGNvbGxhcHNpbmcgPyBmYWxzZSA6IHRoaXMuaGVhZGVycy5pbmRleCggY2xpY2tlZCApO1xuXG5cdFx0Ly8gV2hlbiB0aGUgY2FsbCB0byAuX3RvZ2dsZSgpIGNvbWVzIGFmdGVyIHRoZSBjbGFzcyBjaGFuZ2VzXG5cdFx0Ly8gaXQgY2F1c2VzIGEgdmVyeSBvZGQgYnVnIGluIElFIDggKHNlZSAjNjcyMClcblx0XHR0aGlzLmFjdGl2ZSA9IGNsaWNrZWRJc0FjdGl2ZSA/ICQoKSA6IGNsaWNrZWQ7XG5cdFx0dGhpcy5fdG9nZ2xlKCBldmVudERhdGEgKTtcblxuXHRcdC8vIFN3aXRjaCBjbGFzc2VzXG5cdFx0Ly8gY29ybmVyIGNsYXNzZXMgb24gdGhlIHByZXZpb3VzbHkgYWN0aXZlIGhlYWRlciBzdGF5IGFmdGVyIHRoZSBhbmltYXRpb25cblx0XHR0aGlzLl9yZW1vdmVDbGFzcyggYWN0aXZlLCBcInVpLWFjY29yZGlvbi1oZWFkZXItYWN0aXZlXCIsIFwidWktc3RhdGUtYWN0aXZlXCIgKTtcblx0XHRpZiAoIG9wdGlvbnMuaWNvbnMgKSB7XG5cdFx0XHRhY3RpdmVDaGlsZHJlbiA9IGFjdGl2ZS5jaGlsZHJlbiggXCIudWktYWNjb3JkaW9uLWhlYWRlci1pY29uXCIgKTtcblx0XHRcdHRoaXMuX3JlbW92ZUNsYXNzKCBhY3RpdmVDaGlsZHJlbiwgbnVsbCwgb3B0aW9ucy5pY29ucy5hY3RpdmVIZWFkZXIgKVxuXHRcdFx0XHQuX2FkZENsYXNzKCBhY3RpdmVDaGlsZHJlbiwgbnVsbCwgb3B0aW9ucy5pY29ucy5oZWFkZXIgKTtcblx0XHR9XG5cblx0XHRpZiAoICFjbGlja2VkSXNBY3RpdmUgKSB7XG5cdFx0XHR0aGlzLl9yZW1vdmVDbGFzcyggY2xpY2tlZCwgXCJ1aS1hY2NvcmRpb24taGVhZGVyLWNvbGxhcHNlZFwiIClcblx0XHRcdFx0Ll9hZGRDbGFzcyggY2xpY2tlZCwgXCJ1aS1hY2NvcmRpb24taGVhZGVyLWFjdGl2ZVwiLCBcInVpLXN0YXRlLWFjdGl2ZVwiICk7XG5cdFx0XHRpZiAoIG9wdGlvbnMuaWNvbnMgKSB7XG5cdFx0XHRcdGNsaWNrZWRDaGlsZHJlbiA9IGNsaWNrZWQuY2hpbGRyZW4oIFwiLnVpLWFjY29yZGlvbi1oZWFkZXItaWNvblwiICk7XG5cdFx0XHRcdHRoaXMuX3JlbW92ZUNsYXNzKCBjbGlja2VkQ2hpbGRyZW4sIG51bGwsIG9wdGlvbnMuaWNvbnMuaGVhZGVyIClcblx0XHRcdFx0XHQuX2FkZENsYXNzKCBjbGlja2VkQ2hpbGRyZW4sIG51bGwsIG9wdGlvbnMuaWNvbnMuYWN0aXZlSGVhZGVyICk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX2FkZENsYXNzKCBjbGlja2VkLm5leHQoKSwgXCJ1aS1hY2NvcmRpb24tY29udGVudC1hY3RpdmVcIiApO1xuXHRcdH1cblx0fSxcblxuXHRfdG9nZ2xlOiBmdW5jdGlvbiggZGF0YSApIHtcblx0XHR2YXIgdG9TaG93ID0gZGF0YS5uZXdQYW5lbCxcblx0XHRcdHRvSGlkZSA9IHRoaXMucHJldlNob3cubGVuZ3RoID8gdGhpcy5wcmV2U2hvdyA6IGRhdGEub2xkUGFuZWw7XG5cblx0XHQvLyBIYW5kbGUgYWN0aXZhdGluZyBhIHBhbmVsIGR1cmluZyB0aGUgYW5pbWF0aW9uIGZvciBhbm90aGVyIGFjdGl2YXRpb25cblx0XHR0aGlzLnByZXZTaG93LmFkZCggdGhpcy5wcmV2SGlkZSApLnN0b3AoIHRydWUsIHRydWUgKTtcblx0XHR0aGlzLnByZXZTaG93ID0gdG9TaG93O1xuXHRcdHRoaXMucHJldkhpZGUgPSB0b0hpZGU7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5hbmltYXRlICkge1xuXHRcdFx0dGhpcy5fYW5pbWF0ZSggdG9TaG93LCB0b0hpZGUsIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dG9IaWRlLmhpZGUoKTtcblx0XHRcdHRvU2hvdy5zaG93KCk7XG5cdFx0XHR0aGlzLl90b2dnbGVDb21wbGV0ZSggZGF0YSApO1xuXHRcdH1cblxuXHRcdHRvSGlkZS5hdHRyKCB7XG5cdFx0XHRcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiXG5cdFx0fSApO1xuXHRcdHRvSGlkZS5wcmV2KCkuYXR0cigge1xuXHRcdFx0XCJhcmlhLXNlbGVjdGVkXCI6IFwiZmFsc2VcIixcblx0XHRcdFwiYXJpYS1leHBhbmRlZFwiOiBcImZhbHNlXCJcblx0XHR9ICk7XG5cblx0XHQvLyBpZiB3ZSdyZSBzd2l0Y2hpbmcgcGFuZWxzLCByZW1vdmUgdGhlIG9sZCBoZWFkZXIgZnJvbSB0aGUgdGFiIG9yZGVyXG5cdFx0Ly8gaWYgd2UncmUgb3BlbmluZyBmcm9tIGNvbGxhcHNlZCBzdGF0ZSwgcmVtb3ZlIHRoZSBwcmV2aW91cyBoZWFkZXIgZnJvbSB0aGUgdGFiIG9yZGVyXG5cdFx0Ly8gaWYgd2UncmUgY29sbGFwc2luZywgdGhlbiBrZWVwIHRoZSBjb2xsYXBzaW5nIGhlYWRlciBpbiB0aGUgdGFiIG9yZGVyXG5cdFx0aWYgKCB0b1Nob3cubGVuZ3RoICYmIHRvSGlkZS5sZW5ndGggKSB7XG5cdFx0XHR0b0hpZGUucHJldigpLmF0dHIoIHtcblx0XHRcdFx0XCJ0YWJJbmRleFwiOiAtMSxcblx0XHRcdFx0XCJhcmlhLWV4cGFuZGVkXCI6IFwiZmFsc2VcIlxuXHRcdFx0fSApO1xuXHRcdH0gZWxzZSBpZiAoIHRvU2hvdy5sZW5ndGggKSB7XG5cdFx0XHR0aGlzLmhlYWRlcnMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCAkKCB0aGlzICkuYXR0ciggXCJ0YWJJbmRleFwiICksIDEwICkgPT09IDA7XG5cdFx0XHR9IClcblx0XHRcdFx0LmF0dHIoIFwidGFiSW5kZXhcIiwgLTEgKTtcblx0XHR9XG5cblx0XHR0b1Nob3dcblx0XHRcdC5hdHRyKCBcImFyaWEtaGlkZGVuXCIsIFwiZmFsc2VcIiApXG5cdFx0XHQucHJldigpXG5cdFx0XHRcdC5hdHRyKCB7XG5cdFx0XHRcdFx0XCJhcmlhLXNlbGVjdGVkXCI6IFwidHJ1ZVwiLFxuXHRcdFx0XHRcdFwiYXJpYS1leHBhbmRlZFwiOiBcInRydWVcIixcblx0XHRcdFx0XHR0YWJJbmRleDogMFxuXHRcdFx0XHR9ICk7XG5cdH0sXG5cblx0X2FuaW1hdGU6IGZ1bmN0aW9uKCB0b1Nob3csIHRvSGlkZSwgZGF0YSApIHtcblx0XHR2YXIgdG90YWwsIGVhc2luZywgZHVyYXRpb24sXG5cdFx0XHR0aGF0ID0gdGhpcyxcblx0XHRcdGFkanVzdCA9IDAsXG5cdFx0XHRib3hTaXppbmcgPSB0b1Nob3cuY3NzKCBcImJveC1zaXppbmdcIiApLFxuXHRcdFx0ZG93biA9IHRvU2hvdy5sZW5ndGggJiZcblx0XHRcdFx0KCAhdG9IaWRlLmxlbmd0aCB8fCAoIHRvU2hvdy5pbmRleCgpIDwgdG9IaWRlLmluZGV4KCkgKSApLFxuXHRcdFx0YW5pbWF0ZSA9IHRoaXMub3B0aW9ucy5hbmltYXRlIHx8IHt9LFxuXHRcdFx0b3B0aW9ucyA9IGRvd24gJiYgYW5pbWF0ZS5kb3duIHx8IGFuaW1hdGUsXG5cdFx0XHRjb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR0aGF0Ll90b2dnbGVDb21wbGV0ZSggZGF0YSApO1xuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIG9wdGlvbnMgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRkdXJhdGlvbiA9IG9wdGlvbnM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRlYXNpbmcgPSBvcHRpb25zO1xuXHRcdH1cblxuXHRcdC8vIGZhbGwgYmFjayBmcm9tIG9wdGlvbnMgdG8gYW5pbWF0aW9uIGluIGNhc2Ugb2YgcGFydGlhbCBkb3duIHNldHRpbmdzXG5cdFx0ZWFzaW5nID0gZWFzaW5nIHx8IG9wdGlvbnMuZWFzaW5nIHx8IGFuaW1hdGUuZWFzaW5nO1xuXHRcdGR1cmF0aW9uID0gZHVyYXRpb24gfHwgb3B0aW9ucy5kdXJhdGlvbiB8fCBhbmltYXRlLmR1cmF0aW9uO1xuXG5cdFx0aWYgKCAhdG9IaWRlLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0b1Nob3cuYW5pbWF0ZSggdGhpcy5zaG93UHJvcHMsIGR1cmF0aW9uLCBlYXNpbmcsIGNvbXBsZXRlICk7XG5cdFx0fVxuXHRcdGlmICggIXRvU2hvdy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdG9IaWRlLmFuaW1hdGUoIHRoaXMuaGlkZVByb3BzLCBkdXJhdGlvbiwgZWFzaW5nLCBjb21wbGV0ZSApO1xuXHRcdH1cblxuXHRcdHRvdGFsID0gdG9TaG93LnNob3coKS5vdXRlckhlaWdodCgpO1xuXHRcdHRvSGlkZS5hbmltYXRlKCB0aGlzLmhpZGVQcm9wcywge1xuXHRcdFx0ZHVyYXRpb246IGR1cmF0aW9uLFxuXHRcdFx0ZWFzaW5nOiBlYXNpbmcsXG5cdFx0XHRzdGVwOiBmdW5jdGlvbiggbm93LCBmeCApIHtcblx0XHRcdFx0Zngubm93ID0gTWF0aC5yb3VuZCggbm93ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHRvU2hvd1xuXHRcdFx0LmhpZGUoKVxuXHRcdFx0LmFuaW1hdGUoIHRoaXMuc2hvd1Byb3BzLCB7XG5cdFx0XHRcdGR1cmF0aW9uOiBkdXJhdGlvbixcblx0XHRcdFx0ZWFzaW5nOiBlYXNpbmcsXG5cdFx0XHRcdGNvbXBsZXRlOiBjb21wbGV0ZSxcblx0XHRcdFx0c3RlcDogZnVuY3Rpb24oIG5vdywgZnggKSB7XG5cdFx0XHRcdFx0Zngubm93ID0gTWF0aC5yb3VuZCggbm93ICk7XG5cdFx0XHRcdFx0aWYgKCBmeC5wcm9wICE9PSBcImhlaWdodFwiICkge1xuXHRcdFx0XHRcdFx0aWYgKCBib3hTaXppbmcgPT09IFwiY29udGVudC1ib3hcIiApIHtcblx0XHRcdFx0XHRcdFx0YWRqdXN0ICs9IGZ4Lm5vdztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0aGF0Lm9wdGlvbnMuaGVpZ2h0U3R5bGUgIT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHRcdFx0Zngubm93ID0gTWF0aC5yb3VuZCggdG90YWwgLSB0b0hpZGUub3V0ZXJIZWlnaHQoKSAtIGFkanVzdCApO1xuXHRcdFx0XHRcdFx0YWRqdXN0ID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0fSxcblxuXHRfdG9nZ2xlQ29tcGxldGU6IGZ1bmN0aW9uKCBkYXRhICkge1xuXHRcdHZhciB0b0hpZGUgPSBkYXRhLm9sZFBhbmVsLFxuXHRcdFx0cHJldiA9IHRvSGlkZS5wcmV2KCk7XG5cblx0XHR0aGlzLl9yZW1vdmVDbGFzcyggdG9IaWRlLCBcInVpLWFjY29yZGlvbi1jb250ZW50LWFjdGl2ZVwiICk7XG5cdFx0dGhpcy5fcmVtb3ZlQ2xhc3MoIHByZXYsIFwidWktYWNjb3JkaW9uLWhlYWRlci1hY3RpdmVcIiApXG5cdFx0XHQuX2FkZENsYXNzKCBwcmV2LCBcInVpLWFjY29yZGlvbi1oZWFkZXItY29sbGFwc2VkXCIgKTtcblxuXHRcdC8vIFdvcmsgYXJvdW5kIGZvciByZW5kZXJpbmcgYnVnIGluIElFICgjNTQyMSlcblx0XHRpZiAoIHRvSGlkZS5sZW5ndGggKSB7XG5cdFx0XHR0b0hpZGUucGFyZW50KClbIDAgXS5jbGFzc05hbWUgPSB0b0hpZGUucGFyZW50KClbIDAgXS5jbGFzc05hbWU7XG5cdFx0fVxuXHRcdHRoaXMuX3RyaWdnZXIoIFwiYWN0aXZhdGVcIiwgbnVsbCwgZGF0YSApO1xuXHR9XG59ICk7XG5cblxuLyohXG4gKiBqUXVlcnkgVUkgTWVudSAxLjEyLjFcbiAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICovXG5cbi8vPj5sYWJlbDogTWVudVxuLy8+Pmdyb3VwOiBXaWRnZXRzXG4vLz4+ZGVzY3JpcHRpb246IENyZWF0ZXMgbmVzdGFibGUgbWVudXMuXG4vLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vbWVudS9cbi8vPj5kZW1vczogaHR0cDovL2pxdWVyeXVpLmNvbS9tZW51L1xuLy8+PmNzcy5zdHJ1Y3R1cmU6IC4uLy4uL3RoZW1lcy9iYXNlL2NvcmUuY3NzXG4vLz4+Y3NzLnN0cnVjdHVyZTogLi4vLi4vdGhlbWVzL2Jhc2UvbWVudS5jc3Ncbi8vPj5jc3MudGhlbWU6IC4uLy4uL3RoZW1lcy9iYXNlL3RoZW1lLmNzc1xuXG5cblxudmFyIHdpZGdldHNNZW51ID0gJC53aWRnZXQoIFwidWkubWVudVwiLCB7XG5cdHZlcnNpb246IFwiMS4xMi4xXCIsXG5cdGRlZmF1bHRFbGVtZW50OiBcIjx1bD5cIixcblx0ZGVsYXk6IDMwMCxcblx0b3B0aW9uczoge1xuXHRcdGljb25zOiB7XG5cdFx0XHRzdWJtZW51OiBcInVpLWljb24tY2FyZXQtMS1lXCJcblx0XHR9LFxuXHRcdGl0ZW1zOiBcIj4gKlwiLFxuXHRcdG1lbnVzOiBcInVsXCIsXG5cdFx0cG9zaXRpb246IHtcblx0XHRcdG15OiBcImxlZnQgdG9wXCIsXG5cdFx0XHRhdDogXCJyaWdodCB0b3BcIlxuXHRcdH0sXG5cdFx0cm9sZTogXCJtZW51XCIsXG5cblx0XHQvLyBDYWxsYmFja3Ncblx0XHRibHVyOiBudWxsLFxuXHRcdGZvY3VzOiBudWxsLFxuXHRcdHNlbGVjdDogbnVsbFxuXHR9LFxuXG5cdF9jcmVhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuYWN0aXZlTWVudSA9IHRoaXMuZWxlbWVudDtcblxuXHRcdC8vIEZsYWcgdXNlZCB0byBwcmV2ZW50IGZpcmluZyBvZiB0aGUgY2xpY2sgaGFuZGxlclxuXHRcdC8vIGFzIHRoZSBldmVudCBidWJibGVzIHVwIHRocm91Z2ggbmVzdGVkIG1lbnVzXG5cdFx0dGhpcy5tb3VzZUhhbmRsZWQgPSBmYWxzZTtcblx0XHR0aGlzLmVsZW1lbnRcblx0XHRcdC51bmlxdWVJZCgpXG5cdFx0XHQuYXR0cigge1xuXHRcdFx0XHRyb2xlOiB0aGlzLm9wdGlvbnMucm9sZSxcblx0XHRcdFx0dGFiSW5kZXg6IDBcblx0XHRcdH0gKTtcblxuXHRcdHRoaXMuX2FkZENsYXNzKCBcInVpLW1lbnVcIiwgXCJ1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnRcIiApO1xuXHRcdHRoaXMuX29uKCB7XG5cblx0XHRcdC8vIFByZXZlbnQgZm9jdXMgZnJvbSBzdGlja2luZyB0byBsaW5rcyBpbnNpZGUgbWVudSBhZnRlciBjbGlja2luZ1xuXHRcdFx0Ly8gdGhlbSAoZm9jdXMgc2hvdWxkIGFsd2F5cyBzdGF5IG9uIFVMIGR1cmluZyBuYXZpZ2F0aW9uKS5cblx0XHRcdFwibW91c2Vkb3duIC51aS1tZW51LWl0ZW1cIjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0fSxcblx0XHRcdFwiY2xpY2sgLnVpLW1lbnUtaXRlbVwiOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSAkKCBldmVudC50YXJnZXQgKTtcblx0XHRcdFx0dmFyIGFjdGl2ZSA9ICQoICQudWkuc2FmZUFjdGl2ZUVsZW1lbnQoIHRoaXMuZG9jdW1lbnRbIDAgXSApICk7XG5cdFx0XHRcdGlmICggIXRoaXMubW91c2VIYW5kbGVkICYmIHRhcmdldC5ub3QoIFwiLnVpLXN0YXRlLWRpc2FibGVkXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0dGhpcy5zZWxlY3QoIGV2ZW50ICk7XG5cblx0XHRcdFx0XHQvLyBPbmx5IHNldCB0aGUgbW91c2VIYW5kbGVkIGZsYWcgaWYgdGhlIGV2ZW50IHdpbGwgYnViYmxlLCBzZWUgIzk0NjkuXG5cdFx0XHRcdFx0aWYgKCAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdHRoaXMubW91c2VIYW5kbGVkID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPcGVuIHN1Ym1lbnUgb24gY2xpY2tcblx0XHRcdFx0XHRpZiAoIHRhcmdldC5oYXMoIFwiLnVpLW1lbnVcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdHRoaXMuZXhwYW5kKCBldmVudCApO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICF0aGlzLmVsZW1lbnQuaXMoIFwiOmZvY3VzXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRhY3RpdmUuY2xvc2VzdCggXCIudWktbWVudVwiICkubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZWRpcmVjdCBmb2N1cyB0byB0aGUgbWVudVxuXHRcdFx0XHRcdFx0dGhpcy5lbGVtZW50LnRyaWdnZXIoIFwiZm9jdXNcIiwgWyB0cnVlIF0gKTtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIGFjdGl2ZSBpdGVtIGlzIG9uIHRoZSB0b3AgbGV2ZWwsIGxldCBpdCBzdGF5IGFjdGl2ZS5cblx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgYmx1ciB0aGUgYWN0aXZlIGl0ZW0gc2luY2UgaXQgaXMgbm8gbG9uZ2VyIHZpc2libGUuXG5cdFx0XHRcdFx0XHRpZiAoIHRoaXMuYWN0aXZlICYmIHRoaXMuYWN0aXZlLnBhcmVudHMoIFwiLnVpLW1lbnVcIiApLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0Y2xlYXJUaW1lb3V0KCB0aGlzLnRpbWVyICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0XCJtb3VzZWVudGVyIC51aS1tZW51LWl0ZW1cIjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIElnbm9yZSBtb3VzZSBldmVudHMgd2hpbGUgdHlwZWFoZWFkIGlzIGFjdGl2ZSwgc2VlICMxMDQ1OC5cblx0XHRcdFx0Ly8gUHJldmVudHMgZm9jdXNpbmcgdGhlIHdyb25nIGl0ZW0gd2hlbiB0eXBlYWhlYWQgY2F1c2VzIGEgc2Nyb2xsIHdoaWxlIHRoZSBtb3VzZVxuXHRcdFx0XHQvLyBpcyBvdmVyIGFuIGl0ZW0gaW4gdGhlIG1lbnVcblx0XHRcdFx0aWYgKCB0aGlzLnByZXZpb3VzRmlsdGVyICkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciBhY3R1YWxUYXJnZXQgPSAkKCBldmVudC50YXJnZXQgKS5jbG9zZXN0KCBcIi51aS1tZW51LWl0ZW1cIiApLFxuXHRcdFx0XHRcdHRhcmdldCA9ICQoIGV2ZW50LmN1cnJlbnRUYXJnZXQgKTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYnViYmxlZCBldmVudHMgb24gcGFyZW50IGl0ZW1zLCBzZWUgIzExNjQxXG5cdFx0XHRcdGlmICggYWN0dWFsVGFyZ2V0WyAwIF0gIT09IHRhcmdldFsgMCBdICkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlbW92ZSB1aS1zdGF0ZS1hY3RpdmUgY2xhc3MgZnJvbSBzaWJsaW5ncyBvZiB0aGUgbmV3bHkgZm9jdXNlZCBtZW51IGl0ZW1cblx0XHRcdFx0Ly8gdG8gYXZvaWQgYSBqdW1wIGNhdXNlZCBieSBhZGphY2VudCBlbGVtZW50cyBib3RoIGhhdmluZyBhIGNsYXNzIHdpdGggYSBib3JkZXJcblx0XHRcdFx0dGhpcy5fcmVtb3ZlQ2xhc3MoIHRhcmdldC5zaWJsaW5ncygpLmNoaWxkcmVuKCBcIi51aS1zdGF0ZS1hY3RpdmVcIiApLFxuXHRcdFx0XHRcdG51bGwsIFwidWktc3RhdGUtYWN0aXZlXCIgKTtcblx0XHRcdFx0dGhpcy5mb2N1cyggZXZlbnQsIHRhcmdldCApO1xuXHRcdFx0fSxcblx0XHRcdG1vdXNlbGVhdmU6IFwiY29sbGFwc2VBbGxcIixcblx0XHRcdFwibW91c2VsZWF2ZSAudWktbWVudVwiOiBcImNvbGxhcHNlQWxsXCIsXG5cdFx0XHRmb2N1czogZnVuY3Rpb24oIGV2ZW50LCBrZWVwQWN0aXZlSXRlbSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSdzIGFscmVhZHkgYW4gYWN0aXZlIGl0ZW0sIGtlZXAgaXQgYWN0aXZlXG5cdFx0XHRcdC8vIElmIG5vdCwgYWN0aXZhdGUgdGhlIGZpcnN0IGl0ZW1cblx0XHRcdFx0dmFyIGl0ZW0gPSB0aGlzLmFjdGl2ZSB8fCB0aGlzLmVsZW1lbnQuZmluZCggdGhpcy5vcHRpb25zLml0ZW1zICkuZXEoIDAgKTtcblxuXHRcdFx0XHRpZiAoICFrZWVwQWN0aXZlSXRlbSApIHtcblx0XHRcdFx0XHR0aGlzLmZvY3VzKCBldmVudCwgaXRlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0Ymx1cjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR0aGlzLl9kZWxheSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0dmFyIG5vdENvbnRhaW5lZCA9ICEkLmNvbnRhaW5zKFxuXHRcdFx0XHRcdFx0dGhpcy5lbGVtZW50WyAwIF0sXG5cdFx0XHRcdFx0XHQkLnVpLnNhZmVBY3RpdmVFbGVtZW50KCB0aGlzLmRvY3VtZW50WyAwIF0gKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0aWYgKCBub3RDb250YWluZWQgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmNvbGxhcHNlQWxsKCBldmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0fSxcblx0XHRcdGtleWRvd246IFwiX2tleWRvd25cIlxuXHRcdH0gKTtcblxuXHRcdHRoaXMucmVmcmVzaCgpO1xuXG5cdFx0Ly8gQ2xpY2tzIG91dHNpZGUgb2YgYSBtZW51IGNvbGxhcHNlIGFueSBvcGVuIG1lbnVzXG5cdFx0dGhpcy5fb24oIHRoaXMuZG9jdW1lbnQsIHtcblx0XHRcdGNsaWNrOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdGlmICggdGhpcy5fY2xvc2VPbkRvY3VtZW50Q2xpY2soIGV2ZW50ICkgKSB7XG5cdFx0XHRcdFx0dGhpcy5jb2xsYXBzZUFsbCggZXZlbnQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc2V0IHRoZSBtb3VzZUhhbmRsZWQgZmxhZ1xuXHRcdFx0XHR0aGlzLm1vdXNlSGFuZGxlZCA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRfZGVzdHJveTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGl0ZW1zID0gdGhpcy5lbGVtZW50LmZpbmQoIFwiLnVpLW1lbnUtaXRlbVwiIClcblx0XHRcdFx0LnJlbW92ZUF0dHIoIFwicm9sZSBhcmlhLWRpc2FibGVkXCIgKSxcblx0XHRcdHN1Ym1lbnVzID0gaXRlbXMuY2hpbGRyZW4oIFwiLnVpLW1lbnUtaXRlbS13cmFwcGVyXCIgKVxuXHRcdFx0XHQucmVtb3ZlVW5pcXVlSWQoKVxuXHRcdFx0XHQucmVtb3ZlQXR0ciggXCJ0YWJJbmRleCByb2xlIGFyaWEtaGFzcG9wdXBcIiApO1xuXG5cdFx0Ly8gRGVzdHJveSAoc3ViKW1lbnVzXG5cdFx0dGhpcy5lbGVtZW50XG5cdFx0XHQucmVtb3ZlQXR0ciggXCJhcmlhLWFjdGl2ZWRlc2NlbmRhbnRcIiApXG5cdFx0XHQuZmluZCggXCIudWktbWVudVwiICkuYWRkQmFjaygpXG5cdFx0XHRcdC5yZW1vdmVBdHRyKCBcInJvbGUgYXJpYS1sYWJlbGxlZGJ5IGFyaWEtZXhwYW5kZWQgYXJpYS1oaWRkZW4gYXJpYS1kaXNhYmxlZCBcIiArXG5cdFx0XHRcdFx0XCJ0YWJJbmRleFwiIClcblx0XHRcdFx0LnJlbW92ZVVuaXF1ZUlkKClcblx0XHRcdFx0LnNob3coKTtcblxuXHRcdHN1Ym1lbnVzLmNoaWxkcmVuKCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZWxlbSA9ICQoIHRoaXMgKTtcblx0XHRcdGlmICggZWxlbS5kYXRhKCBcInVpLW1lbnUtc3VibWVudS1jYXJldFwiICkgKSB7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdF9rZXlkb3duOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIG1hdGNoLCBwcmV2LCBjaGFyYWN0ZXIsIHNraXAsXG5cdFx0XHRwcmV2ZW50RGVmYXVsdCA9IHRydWU7XG5cblx0XHRzd2l0Y2ggKCBldmVudC5rZXlDb2RlICkge1xuXHRcdGNhc2UgJC51aS5rZXlDb2RlLlBBR0VfVVA6XG5cdFx0XHR0aGlzLnByZXZpb3VzUGFnZSggZXZlbnQgKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJC51aS5rZXlDb2RlLlBBR0VfRE9XTjpcblx0XHRcdHRoaXMubmV4dFBhZ2UoIGV2ZW50ICk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICQudWkua2V5Q29kZS5IT01FOlxuXHRcdFx0dGhpcy5fbW92ZSggXCJmaXJzdFwiLCBcImZpcnN0XCIsIGV2ZW50ICk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICQudWkua2V5Q29kZS5FTkQ6XG5cdFx0XHR0aGlzLl9tb3ZlKCBcImxhc3RcIiwgXCJsYXN0XCIsIGV2ZW50ICk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICQudWkua2V5Q29kZS5VUDpcblx0XHRcdHRoaXMucHJldmlvdXMoIGV2ZW50ICk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICQudWkua2V5Q29kZS5ET1dOOlxuXHRcdFx0dGhpcy5uZXh0KCBldmVudCApO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAkLnVpLmtleUNvZGUuTEVGVDpcblx0XHRcdHRoaXMuY29sbGFwc2UoIGV2ZW50ICk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICQudWkua2V5Q29kZS5SSUdIVDpcblx0XHRcdGlmICggdGhpcy5hY3RpdmUgJiYgIXRoaXMuYWN0aXZlLmlzKCBcIi51aS1zdGF0ZS1kaXNhYmxlZFwiICkgKSB7XG5cdFx0XHRcdHRoaXMuZXhwYW5kKCBldmVudCApO1xuXHRcdFx0fVxuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAkLnVpLmtleUNvZGUuRU5URVI6XG5cdFx0Y2FzZSAkLnVpLmtleUNvZGUuU1BBQ0U6XG5cdFx0XHR0aGlzLl9hY3RpdmF0ZSggZXZlbnQgKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJC51aS5rZXlDb2RlLkVTQ0FQRTpcblx0XHRcdHRoaXMuY29sbGFwc2UoIGV2ZW50ICk7XG5cdFx0XHRicmVhaztcblx0XHRkZWZhdWx0OlxuXHRcdFx0cHJldmVudERlZmF1bHQgPSBmYWxzZTtcblx0XHRcdHByZXYgPSB0aGlzLnByZXZpb3VzRmlsdGVyIHx8IFwiXCI7XG5cdFx0XHRza2lwID0gZmFsc2U7XG5cblx0XHRcdC8vIFN1cHBvcnQgbnVtYmVyIHBhZCB2YWx1ZXNcblx0XHRcdGNoYXJhY3RlciA9IGV2ZW50LmtleUNvZGUgPj0gOTYgJiYgZXZlbnQua2V5Q29kZSA8PSAxMDUgP1xuXHRcdFx0XHQoIGV2ZW50LmtleUNvZGUgLSA5NiApLnRvU3RyaW5nKCkgOiBTdHJpbmcuZnJvbUNoYXJDb2RlKCBldmVudC5rZXlDb2RlICk7XG5cblx0XHRcdGNsZWFyVGltZW91dCggdGhpcy5maWx0ZXJUaW1lciApO1xuXG5cdFx0XHRpZiAoIGNoYXJhY3RlciA9PT0gcHJldiApIHtcblx0XHRcdFx0c2tpcCA9IHRydWU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjaGFyYWN0ZXIgPSBwcmV2ICsgY2hhcmFjdGVyO1xuXHRcdFx0fVxuXG5cdFx0XHRtYXRjaCA9IHRoaXMuX2ZpbHRlck1lbnVJdGVtcyggY2hhcmFjdGVyICk7XG5cdFx0XHRtYXRjaCA9IHNraXAgJiYgbWF0Y2guaW5kZXgoIHRoaXMuYWN0aXZlLm5leHQoKSApICE9PSAtMSA/XG5cdFx0XHRcdHRoaXMuYWN0aXZlLm5leHRBbGwoIFwiLnVpLW1lbnUtaXRlbVwiICkgOlxuXHRcdFx0XHRtYXRjaDtcblxuXHRcdFx0Ly8gSWYgbm8gbWF0Y2hlcyBvbiB0aGUgY3VycmVudCBmaWx0ZXIsIHJlc2V0IHRvIHRoZSBsYXN0IGNoYXJhY3RlciBwcmVzc2VkXG5cdFx0XHQvLyB0byBtb3ZlIGRvd24gdGhlIG1lbnUgdG8gdGhlIGZpcnN0IGl0ZW0gdGhhdCBzdGFydHMgd2l0aCB0aGF0IGNoYXJhY3RlclxuXHRcdFx0aWYgKCAhbWF0Y2gubGVuZ3RoICkge1xuXHRcdFx0XHRjaGFyYWN0ZXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCBldmVudC5rZXlDb2RlICk7XG5cdFx0XHRcdG1hdGNoID0gdGhpcy5fZmlsdGVyTWVudUl0ZW1zKCBjaGFyYWN0ZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBtYXRjaC5sZW5ndGggKSB7XG5cdFx0XHRcdHRoaXMuZm9jdXMoIGV2ZW50LCBtYXRjaCApO1xuXHRcdFx0XHR0aGlzLnByZXZpb3VzRmlsdGVyID0gY2hhcmFjdGVyO1xuXHRcdFx0XHR0aGlzLmZpbHRlclRpbWVyID0gdGhpcy5fZGVsYXkoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlbGV0ZSB0aGlzLnByZXZpb3VzRmlsdGVyO1xuXHRcdFx0XHR9LCAxMDAwICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgdGhpcy5wcmV2aW91c0ZpbHRlcjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHByZXZlbnREZWZhdWx0ICkge1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cblx0X2FjdGl2YXRlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0aWYgKCB0aGlzLmFjdGl2ZSAmJiAhdGhpcy5hY3RpdmUuaXMoIFwiLnVpLXN0YXRlLWRpc2FibGVkXCIgKSApIHtcblx0XHRcdGlmICggdGhpcy5hY3RpdmUuY2hpbGRyZW4oIFwiW2FyaWEtaGFzcG9wdXA9J3RydWUnXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHR0aGlzLmV4cGFuZCggZXZlbnQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuc2VsZWN0KCBldmVudCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZWZyZXNoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWVudXMsIGl0ZW1zLCBuZXdTdWJtZW51cywgbmV3SXRlbXMsIG5ld1dyYXBwZXJzLFxuXHRcdFx0dGhhdCA9IHRoaXMsXG5cdFx0XHRpY29uID0gdGhpcy5vcHRpb25zLmljb25zLnN1Ym1lbnUsXG5cdFx0XHRzdWJtZW51cyA9IHRoaXMuZWxlbWVudC5maW5kKCB0aGlzLm9wdGlvbnMubWVudXMgKTtcblxuXHRcdHRoaXMuX3RvZ2dsZUNsYXNzKCBcInVpLW1lbnUtaWNvbnNcIiwgbnVsbCwgISF0aGlzLmVsZW1lbnQuZmluZCggXCIudWktaWNvblwiICkubGVuZ3RoICk7XG5cblx0XHQvLyBJbml0aWFsaXplIG5lc3RlZCBtZW51c1xuXHRcdG5ld1N1Ym1lbnVzID0gc3VibWVudXMuZmlsdGVyKCBcIjpub3QoLnVpLW1lbnUpXCIgKVxuXHRcdFx0LmhpZGUoKVxuXHRcdFx0LmF0dHIoIHtcblx0XHRcdFx0cm9sZTogdGhpcy5vcHRpb25zLnJvbGUsXG5cdFx0XHRcdFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCIsXG5cdFx0XHRcdFwiYXJpYS1leHBhbmRlZFwiOiBcImZhbHNlXCJcblx0XHRcdH0gKVxuXHRcdFx0LmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgbWVudSA9ICQoIHRoaXMgKSxcblx0XHRcdFx0XHRpdGVtID0gbWVudS5wcmV2KCksXG5cdFx0XHRcdFx0c3VibWVudUNhcmV0ID0gJCggXCI8c3Bhbj5cIiApLmRhdGEoIFwidWktbWVudS1zdWJtZW51LWNhcmV0XCIsIHRydWUgKTtcblxuXHRcdFx0XHR0aGF0Ll9hZGRDbGFzcyggc3VibWVudUNhcmV0LCBcInVpLW1lbnUtaWNvblwiLCBcInVpLWljb24gXCIgKyBpY29uICk7XG5cdFx0XHRcdGl0ZW1cblx0XHRcdFx0XHQuYXR0ciggXCJhcmlhLWhhc3BvcHVwXCIsIFwidHJ1ZVwiIClcblx0XHRcdFx0XHQucHJlcGVuZCggc3VibWVudUNhcmV0ICk7XG5cdFx0XHRcdG1lbnUuYXR0ciggXCJhcmlhLWxhYmVsbGVkYnlcIiwgaXRlbS5hdHRyKCBcImlkXCIgKSApO1xuXHRcdFx0fSApO1xuXG5cdFx0dGhpcy5fYWRkQ2xhc3MoIG5ld1N1Ym1lbnVzLCBcInVpLW1lbnVcIiwgXCJ1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktZnJvbnRcIiApO1xuXG5cdFx0bWVudXMgPSBzdWJtZW51cy5hZGQoIHRoaXMuZWxlbWVudCApO1xuXHRcdGl0ZW1zID0gbWVudXMuZmluZCggdGhpcy5vcHRpb25zLml0ZW1zICk7XG5cblx0XHQvLyBJbml0aWFsaXplIG1lbnUtaXRlbXMgY29udGFpbmluZyBzcGFjZXMgYW5kL29yIGRhc2hlcyBvbmx5IGFzIGRpdmlkZXJzXG5cdFx0aXRlbXMubm90KCBcIi51aS1tZW51LWl0ZW1cIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGl0ZW0gPSAkKCB0aGlzICk7XG5cdFx0XHRpZiAoIHRoYXQuX2lzRGl2aWRlciggaXRlbSApICkge1xuXHRcdFx0XHR0aGF0Ll9hZGRDbGFzcyggaXRlbSwgXCJ1aS1tZW51LWRpdmlkZXJcIiwgXCJ1aS13aWRnZXQtY29udGVudFwiICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdFx0Ly8gRG9uJ3QgcmVmcmVzaCBsaXN0IGl0ZW1zIHRoYXQgYXJlIGFscmVhZHkgYWRhcHRlZFxuXHRcdG5ld0l0ZW1zID0gaXRlbXMubm90KCBcIi51aS1tZW51LWl0ZW0sIC51aS1tZW51LWRpdmlkZXJcIiApO1xuXHRcdG5ld1dyYXBwZXJzID0gbmV3SXRlbXMuY2hpbGRyZW4oKVxuXHRcdFx0Lm5vdCggXCIudWktbWVudVwiIClcblx0XHRcdFx0LnVuaXF1ZUlkKClcblx0XHRcdFx0LmF0dHIoIHtcblx0XHRcdFx0XHR0YWJJbmRleDogLTEsXG5cdFx0XHRcdFx0cm9sZTogdGhpcy5faXRlbVJvbGUoKVxuXHRcdFx0XHR9ICk7XG5cdFx0dGhpcy5fYWRkQ2xhc3MoIG5ld0l0ZW1zLCBcInVpLW1lbnUtaXRlbVwiIClcblx0XHRcdC5fYWRkQ2xhc3MoIG5ld1dyYXBwZXJzLCBcInVpLW1lbnUtaXRlbS13cmFwcGVyXCIgKTtcblxuXHRcdC8vIEFkZCBhcmlhLWRpc2FibGVkIGF0dHJpYnV0ZSB0byBhbnkgZGlzYWJsZWQgbWVudSBpdGVtXG5cdFx0aXRlbXMuZmlsdGVyKCBcIi51aS1zdGF0ZS1kaXNhYmxlZFwiICkuYXR0ciggXCJhcmlhLWRpc2FibGVkXCIsIFwidHJ1ZVwiICk7XG5cblx0XHQvLyBJZiB0aGUgYWN0aXZlIGl0ZW0gaGFzIGJlZW4gcmVtb3ZlZCwgYmx1ciB0aGUgbWVudVxuXHRcdGlmICggdGhpcy5hY3RpdmUgJiYgISQuY29udGFpbnMoIHRoaXMuZWxlbWVudFsgMCBdLCB0aGlzLmFjdGl2ZVsgMCBdICkgKSB7XG5cdFx0XHR0aGlzLmJsdXIoKTtcblx0XHR9XG5cdH0sXG5cblx0X2l0ZW1Sb2xlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0bWVudTogXCJtZW51aXRlbVwiLFxuXHRcdFx0bGlzdGJveDogXCJvcHRpb25cIlxuXHRcdH1bIHRoaXMub3B0aW9ucy5yb2xlIF07XG5cdH0sXG5cblx0X3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0aWYgKCBrZXkgPT09IFwiaWNvbnNcIiApIHtcblx0XHRcdHZhciBpY29ucyA9IHRoaXMuZWxlbWVudC5maW5kKCBcIi51aS1tZW51LWljb25cIiApO1xuXHRcdFx0dGhpcy5fcmVtb3ZlQ2xhc3MoIGljb25zLCBudWxsLCB0aGlzLm9wdGlvbnMuaWNvbnMuc3VibWVudSApXG5cdFx0XHRcdC5fYWRkQ2xhc3MoIGljb25zLCBudWxsLCB2YWx1ZS5zdWJtZW51ICk7XG5cdFx0fVxuXHRcdHRoaXMuX3N1cGVyKCBrZXksIHZhbHVlICk7XG5cdH0sXG5cblx0X3NldE9wdGlvbkRpc2FibGVkOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dGhpcy5fc3VwZXIoIHZhbHVlICk7XG5cblx0XHR0aGlzLmVsZW1lbnQuYXR0ciggXCJhcmlhLWRpc2FibGVkXCIsIFN0cmluZyggdmFsdWUgKSApO1xuXHRcdHRoaXMuX3RvZ2dsZUNsYXNzKCBudWxsLCBcInVpLXN0YXRlLWRpc2FibGVkXCIsICEhdmFsdWUgKTtcblx0fSxcblxuXHRmb2N1czogZnVuY3Rpb24oIGV2ZW50LCBpdGVtICkge1xuXHRcdHZhciBuZXN0ZWQsIGZvY3VzZWQsIGFjdGl2ZVBhcmVudDtcblx0XHR0aGlzLmJsdXIoIGV2ZW50LCBldmVudCAmJiBldmVudC50eXBlID09PSBcImZvY3VzXCIgKTtcblxuXHRcdHRoaXMuX3Njcm9sbEludG9WaWV3KCBpdGVtICk7XG5cblx0XHR0aGlzLmFjdGl2ZSA9IGl0ZW0uZmlyc3QoKTtcblxuXHRcdGZvY3VzZWQgPSB0aGlzLmFjdGl2ZS5jaGlsZHJlbiggXCIudWktbWVudS1pdGVtLXdyYXBwZXJcIiApO1xuXHRcdHRoaXMuX2FkZENsYXNzKCBmb2N1c2VkLCBudWxsLCBcInVpLXN0YXRlLWFjdGl2ZVwiICk7XG5cblx0XHQvLyBPbmx5IHVwZGF0ZSBhcmlhLWFjdGl2ZWRlc2NlbmRhbnQgaWYgdGhlcmUncyBhIHJvbGVcblx0XHQvLyBvdGhlcndpc2Ugd2UgYXNzdW1lIGZvY3VzIGlzIG1hbmFnZWQgZWxzZXdoZXJlXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMucm9sZSApIHtcblx0XHRcdHRoaXMuZWxlbWVudC5hdHRyKCBcImFyaWEtYWN0aXZlZGVzY2VuZGFudFwiLCBmb2N1c2VkLmF0dHIoIFwiaWRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gSGlnaGxpZ2h0IGFjdGl2ZSBwYXJlbnQgbWVudSBpdGVtLCBpZiBhbnlcblx0XHRhY3RpdmVQYXJlbnQgPSB0aGlzLmFjdGl2ZVxuXHRcdFx0LnBhcmVudCgpXG5cdFx0XHRcdC5jbG9zZXN0KCBcIi51aS1tZW51LWl0ZW1cIiApXG5cdFx0XHRcdFx0LmNoaWxkcmVuKCBcIi51aS1tZW51LWl0ZW0td3JhcHBlclwiICk7XG5cdFx0dGhpcy5fYWRkQ2xhc3MoIGFjdGl2ZVBhcmVudCwgbnVsbCwgXCJ1aS1zdGF0ZS1hY3RpdmVcIiApO1xuXG5cdFx0aWYgKCBldmVudCAmJiBldmVudC50eXBlID09PSBcImtleWRvd25cIiApIHtcblx0XHRcdHRoaXMuX2Nsb3NlKCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMudGltZXIgPSB0aGlzLl9kZWxheSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHRoaXMuX2Nsb3NlKCk7XG5cdFx0XHR9LCB0aGlzLmRlbGF5ICk7XG5cdFx0fVxuXG5cdFx0bmVzdGVkID0gaXRlbS5jaGlsZHJlbiggXCIudWktbWVudVwiICk7XG5cdFx0aWYgKCBuZXN0ZWQubGVuZ3RoICYmIGV2ZW50ICYmICggL15tb3VzZS8udGVzdCggZXZlbnQudHlwZSApICkgKSB7XG5cdFx0XHR0aGlzLl9zdGFydE9wZW5pbmcoIG5lc3RlZCApO1xuXHRcdH1cblx0XHR0aGlzLmFjdGl2ZU1lbnUgPSBpdGVtLnBhcmVudCgpO1xuXG5cdFx0dGhpcy5fdHJpZ2dlciggXCJmb2N1c1wiLCBldmVudCwgeyBpdGVtOiBpdGVtIH0gKTtcblx0fSxcblxuXHRfc2Nyb2xsSW50b1ZpZXc6IGZ1bmN0aW9uKCBpdGVtICkge1xuXHRcdHZhciBib3JkZXJUb3AsIHBhZGRpbmdUb3AsIG9mZnNldCwgc2Nyb2xsLCBlbGVtZW50SGVpZ2h0LCBpdGVtSGVpZ2h0O1xuXHRcdGlmICggdGhpcy5faGFzU2Nyb2xsKCkgKSB7XG5cdFx0XHRib3JkZXJUb3AgPSBwYXJzZUZsb2F0KCAkLmNzcyggdGhpcy5hY3RpdmVNZW51WyAwIF0sIFwiYm9yZGVyVG9wV2lkdGhcIiApICkgfHwgMDtcblx0XHRcdHBhZGRpbmdUb3AgPSBwYXJzZUZsb2F0KCAkLmNzcyggdGhpcy5hY3RpdmVNZW51WyAwIF0sIFwicGFkZGluZ1RvcFwiICkgKSB8fCAwO1xuXHRcdFx0b2Zmc2V0ID0gaXRlbS5vZmZzZXQoKS50b3AgLSB0aGlzLmFjdGl2ZU1lbnUub2Zmc2V0KCkudG9wIC0gYm9yZGVyVG9wIC0gcGFkZGluZ1RvcDtcblx0XHRcdHNjcm9sbCA9IHRoaXMuYWN0aXZlTWVudS5zY3JvbGxUb3AoKTtcblx0XHRcdGVsZW1lbnRIZWlnaHQgPSB0aGlzLmFjdGl2ZU1lbnUuaGVpZ2h0KCk7XG5cdFx0XHRpdGVtSGVpZ2h0ID0gaXRlbS5vdXRlckhlaWdodCgpO1xuXG5cdFx0XHRpZiAoIG9mZnNldCA8IDAgKSB7XG5cdFx0XHRcdHRoaXMuYWN0aXZlTWVudS5zY3JvbGxUb3AoIHNjcm9sbCArIG9mZnNldCApO1xuXHRcdFx0fSBlbHNlIGlmICggb2Zmc2V0ICsgaXRlbUhlaWdodCA+IGVsZW1lbnRIZWlnaHQgKSB7XG5cdFx0XHRcdHRoaXMuYWN0aXZlTWVudS5zY3JvbGxUb3AoIHNjcm9sbCArIG9mZnNldCAtIGVsZW1lbnRIZWlnaHQgKyBpdGVtSGVpZ2h0ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdGJsdXI6IGZ1bmN0aW9uKCBldmVudCwgZnJvbUZvY3VzICkge1xuXHRcdGlmICggIWZyb21Gb2N1cyApIHtcblx0XHRcdGNsZWFyVGltZW91dCggdGhpcy50aW1lciApO1xuXHRcdH1cblxuXHRcdGlmICggIXRoaXMuYWN0aXZlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMuX3JlbW92ZUNsYXNzKCB0aGlzLmFjdGl2ZS5jaGlsZHJlbiggXCIudWktbWVudS1pdGVtLXdyYXBwZXJcIiApLFxuXHRcdFx0bnVsbCwgXCJ1aS1zdGF0ZS1hY3RpdmVcIiApO1xuXG5cdFx0dGhpcy5fdHJpZ2dlciggXCJibHVyXCIsIGV2ZW50LCB7IGl0ZW06IHRoaXMuYWN0aXZlIH0gKTtcblx0XHR0aGlzLmFjdGl2ZSA9IG51bGw7XG5cdH0sXG5cblx0X3N0YXJ0T3BlbmluZzogZnVuY3Rpb24oIHN1Ym1lbnUgKSB7XG5cdFx0Y2xlYXJUaW1lb3V0KCB0aGlzLnRpbWVyICk7XG5cblx0XHQvLyBEb24ndCBvcGVuIGlmIGFscmVhZHkgb3BlbiBmaXhlcyBhIEZpcmVmb3ggYnVnIHRoYXQgY2F1c2VkIGEgLjUgcGl4ZWxcblx0XHQvLyBzaGlmdCBpbiB0aGUgc3VibWVudSBwb3NpdGlvbiB3aGVuIG1vdXNpbmcgb3ZlciB0aGUgY2FyZXQgaWNvblxuXHRcdGlmICggc3VibWVudS5hdHRyKCBcImFyaWEtaGlkZGVuXCIgKSAhPT0gXCJ0cnVlXCIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy50aW1lciA9IHRoaXMuX2RlbGF5KCBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuX2Nsb3NlKCk7XG5cdFx0XHR0aGlzLl9vcGVuKCBzdWJtZW51ICk7XG5cdFx0fSwgdGhpcy5kZWxheSApO1xuXHR9LFxuXG5cdF9vcGVuOiBmdW5jdGlvbiggc3VibWVudSApIHtcblx0XHR2YXIgcG9zaXRpb24gPSAkLmV4dGVuZCgge1xuXHRcdFx0b2Y6IHRoaXMuYWN0aXZlXG5cdFx0fSwgdGhpcy5vcHRpb25zLnBvc2l0aW9uICk7XG5cblx0XHRjbGVhclRpbWVvdXQoIHRoaXMudGltZXIgKTtcblx0XHR0aGlzLmVsZW1lbnQuZmluZCggXCIudWktbWVudVwiICkubm90KCBzdWJtZW51LnBhcmVudHMoIFwiLnVpLW1lbnVcIiApIClcblx0XHRcdC5oaWRlKClcblx0XHRcdC5hdHRyKCBcImFyaWEtaGlkZGVuXCIsIFwidHJ1ZVwiICk7XG5cblx0XHRzdWJtZW51XG5cdFx0XHQuc2hvdygpXG5cdFx0XHQucmVtb3ZlQXR0ciggXCJhcmlhLWhpZGRlblwiIClcblx0XHRcdC5hdHRyKCBcImFyaWEtZXhwYW5kZWRcIiwgXCJ0cnVlXCIgKVxuXHRcdFx0LnBvc2l0aW9uKCBwb3NpdGlvbiApO1xuXHR9LFxuXG5cdGNvbGxhcHNlQWxsOiBmdW5jdGlvbiggZXZlbnQsIGFsbCApIHtcblx0XHRjbGVhclRpbWVvdXQoIHRoaXMudGltZXIgKTtcblx0XHR0aGlzLnRpbWVyID0gdGhpcy5fZGVsYXkoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBJZiB3ZSB3ZXJlIHBhc3NlZCBhbiBldmVudCwgbG9vayBmb3IgdGhlIHN1Ym1lbnUgdGhhdCBjb250YWlucyB0aGUgZXZlbnRcblx0XHRcdHZhciBjdXJyZW50TWVudSA9IGFsbCA/IHRoaXMuZWxlbWVudCA6XG5cdFx0XHRcdCQoIGV2ZW50ICYmIGV2ZW50LnRhcmdldCApLmNsb3Nlc3QoIHRoaXMuZWxlbWVudC5maW5kKCBcIi51aS1tZW51XCIgKSApO1xuXG5cdFx0XHQvLyBJZiB3ZSBmb3VuZCBubyB2YWxpZCBzdWJtZW51IGFuY2VzdG9yLCB1c2UgdGhlIG1haW4gbWVudSB0byBjbG9zZSBhbGxcblx0XHRcdC8vIHN1YiBtZW51cyBhbnl3YXlcblx0XHRcdGlmICggIWN1cnJlbnRNZW51Lmxlbmd0aCApIHtcblx0XHRcdFx0Y3VycmVudE1lbnUgPSB0aGlzLmVsZW1lbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX2Nsb3NlKCBjdXJyZW50TWVudSApO1xuXG5cdFx0XHR0aGlzLmJsdXIoIGV2ZW50ICk7XG5cblx0XHRcdC8vIFdvcmsgYXJvdW5kIGFjdGl2ZSBpdGVtIHN0YXlpbmcgYWN0aXZlIGFmdGVyIG1lbnUgaXMgYmx1cnJlZFxuXHRcdFx0dGhpcy5fcmVtb3ZlQ2xhc3MoIGN1cnJlbnRNZW51LmZpbmQoIFwiLnVpLXN0YXRlLWFjdGl2ZVwiICksIG51bGwsIFwidWktc3RhdGUtYWN0aXZlXCIgKTtcblxuXHRcdFx0dGhpcy5hY3RpdmVNZW51ID0gY3VycmVudE1lbnU7XG5cdFx0fSwgdGhpcy5kZWxheSApO1xuXHR9LFxuXG5cdC8vIFdpdGggbm8gYXJndW1lbnRzLCBjbG9zZXMgdGhlIGN1cnJlbnRseSBhY3RpdmUgbWVudSAtIGlmIG5vdGhpbmcgaXMgYWN0aXZlXG5cdC8vIGl0IGNsb3NlcyBhbGwgbWVudXMuICBJZiBwYXNzZWQgYW4gYXJndW1lbnQsIGl0IHdpbGwgc2VhcmNoIGZvciBtZW51cyBCRUxPV1xuXHRfY2xvc2U6IGZ1bmN0aW9uKCBzdGFydE1lbnUgKSB7XG5cdFx0aWYgKCAhc3RhcnRNZW51ICkge1xuXHRcdFx0c3RhcnRNZW51ID0gdGhpcy5hY3RpdmUgPyB0aGlzLmFjdGl2ZS5wYXJlbnQoKSA6IHRoaXMuZWxlbWVudDtcblx0XHR9XG5cblx0XHRzdGFydE1lbnUuZmluZCggXCIudWktbWVudVwiIClcblx0XHRcdC5oaWRlKClcblx0XHRcdC5hdHRyKCBcImFyaWEtaGlkZGVuXCIsIFwidHJ1ZVwiIClcblx0XHRcdC5hdHRyKCBcImFyaWEtZXhwYW5kZWRcIiwgXCJmYWxzZVwiICk7XG5cdH0sXG5cblx0X2Nsb3NlT25Eb2N1bWVudENsaWNrOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0cmV0dXJuICEkKCBldmVudC50YXJnZXQgKS5jbG9zZXN0KCBcIi51aS1tZW51XCIgKS5sZW5ndGg7XG5cdH0sXG5cblx0X2lzRGl2aWRlcjogZnVuY3Rpb24oIGl0ZW0gKSB7XG5cblx0XHQvLyBNYXRjaCBoeXBoZW4sIGVtIGRhc2gsIGVuIGRhc2hcblx0XHRyZXR1cm4gIS9bXlxcLVxcdTIwMTRcXHUyMDEzXFxzXS8udGVzdCggaXRlbS50ZXh0KCkgKTtcblx0fSxcblxuXHRjb2xsYXBzZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBuZXdJdGVtID0gdGhpcy5hY3RpdmUgJiZcblx0XHRcdHRoaXMuYWN0aXZlLnBhcmVudCgpLmNsb3Nlc3QoIFwiLnVpLW1lbnUtaXRlbVwiLCB0aGlzLmVsZW1lbnQgKTtcblx0XHRpZiAoIG5ld0l0ZW0gJiYgbmV3SXRlbS5sZW5ndGggKSB7XG5cdFx0XHR0aGlzLl9jbG9zZSgpO1xuXHRcdFx0dGhpcy5mb2N1cyggZXZlbnQsIG5ld0l0ZW0gKTtcblx0XHR9XG5cdH0sXG5cblx0ZXhwYW5kOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIG5ld0l0ZW0gPSB0aGlzLmFjdGl2ZSAmJlxuXHRcdFx0dGhpcy5hY3RpdmVcblx0XHRcdFx0LmNoaWxkcmVuKCBcIi51aS1tZW51IFwiIClcblx0XHRcdFx0XHQuZmluZCggdGhpcy5vcHRpb25zLml0ZW1zIClcblx0XHRcdFx0XHRcdC5maXJzdCgpO1xuXG5cdFx0aWYgKCBuZXdJdGVtICYmIG5ld0l0ZW0ubGVuZ3RoICkge1xuXHRcdFx0dGhpcy5fb3BlbiggbmV3SXRlbS5wYXJlbnQoKSApO1xuXG5cdFx0XHQvLyBEZWxheSBzbyBGaXJlZm94IHdpbGwgbm90IGhpZGUgYWN0aXZlZGVzY2VuZGFudCBjaGFuZ2UgaW4gZXhwYW5kaW5nIHN1Ym1lbnUgZnJvbSBBVFxuXHRcdFx0dGhpcy5fZGVsYXkoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR0aGlzLmZvY3VzKCBldmVudCwgbmV3SXRlbSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblx0fSxcblxuXHRuZXh0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dGhpcy5fbW92ZSggXCJuZXh0XCIsIFwiZmlyc3RcIiwgZXZlbnQgKTtcblx0fSxcblxuXHRwcmV2aW91czogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHRoaXMuX21vdmUoIFwicHJldlwiLCBcImxhc3RcIiwgZXZlbnQgKTtcblx0fSxcblxuXHRpc0ZpcnN0SXRlbTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWN0aXZlICYmICF0aGlzLmFjdGl2ZS5wcmV2QWxsKCBcIi51aS1tZW51LWl0ZW1cIiApLmxlbmd0aDtcblx0fSxcblxuXHRpc0xhc3RJdGVtOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5hY3RpdmUgJiYgIXRoaXMuYWN0aXZlLm5leHRBbGwoIFwiLnVpLW1lbnUtaXRlbVwiICkubGVuZ3RoO1xuXHR9LFxuXG5cdF9tb3ZlOiBmdW5jdGlvbiggZGlyZWN0aW9uLCBmaWx0ZXIsIGV2ZW50ICkge1xuXHRcdHZhciBuZXh0O1xuXHRcdGlmICggdGhpcy5hY3RpdmUgKSB7XG5cdFx0XHRpZiAoIGRpcmVjdGlvbiA9PT0gXCJmaXJzdFwiIHx8IGRpcmVjdGlvbiA9PT0gXCJsYXN0XCIgKSB7XG5cdFx0XHRcdG5leHQgPSB0aGlzLmFjdGl2ZVxuXHRcdFx0XHRcdFsgZGlyZWN0aW9uID09PSBcImZpcnN0XCIgPyBcInByZXZBbGxcIiA6IFwibmV4dEFsbFwiIF0oIFwiLnVpLW1lbnUtaXRlbVwiIClcblx0XHRcdFx0XHQuZXEoIC0xICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRuZXh0ID0gdGhpcy5hY3RpdmVcblx0XHRcdFx0XHRbIGRpcmVjdGlvbiArIFwiQWxsXCIgXSggXCIudWktbWVudS1pdGVtXCIgKVxuXHRcdFx0XHRcdC5lcSggMCApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoICFuZXh0IHx8ICFuZXh0Lmxlbmd0aCB8fCAhdGhpcy5hY3RpdmUgKSB7XG5cdFx0XHRuZXh0ID0gdGhpcy5hY3RpdmVNZW51LmZpbmQoIHRoaXMub3B0aW9ucy5pdGVtcyApWyBmaWx0ZXIgXSgpO1xuXHRcdH1cblxuXHRcdHRoaXMuZm9jdXMoIGV2ZW50LCBuZXh0ICk7XG5cdH0sXG5cblx0bmV4dFBhZ2U6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgaXRlbSwgYmFzZSwgaGVpZ2h0O1xuXG5cdFx0aWYgKCAhdGhpcy5hY3RpdmUgKSB7XG5cdFx0XHR0aGlzLm5leHQoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmICggdGhpcy5pc0xhc3RJdGVtKCkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmICggdGhpcy5faGFzU2Nyb2xsKCkgKSB7XG5cdFx0XHRiYXNlID0gdGhpcy5hY3RpdmUub2Zmc2V0KCkudG9wO1xuXHRcdFx0aGVpZ2h0ID0gdGhpcy5lbGVtZW50LmhlaWdodCgpO1xuXHRcdFx0dGhpcy5hY3RpdmUubmV4dEFsbCggXCIudWktbWVudS1pdGVtXCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aXRlbSA9ICQoIHRoaXMgKTtcblx0XHRcdFx0cmV0dXJuIGl0ZW0ub2Zmc2V0KCkudG9wIC0gYmFzZSAtIGhlaWdodCA8IDA7XG5cdFx0XHR9ICk7XG5cblx0XHRcdHRoaXMuZm9jdXMoIGV2ZW50LCBpdGVtICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuZm9jdXMoIGV2ZW50LCB0aGlzLmFjdGl2ZU1lbnUuZmluZCggdGhpcy5vcHRpb25zLml0ZW1zIClcblx0XHRcdFx0WyAhdGhpcy5hY3RpdmUgPyBcImZpcnN0XCIgOiBcImxhc3RcIiBdKCkgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJldmlvdXNQYWdlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGl0ZW0sIGJhc2UsIGhlaWdodDtcblx0XHRpZiAoICF0aGlzLmFjdGl2ZSApIHtcblx0XHRcdHRoaXMubmV4dCggZXZlbnQgKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aWYgKCB0aGlzLmlzRmlyc3RJdGVtKCkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmICggdGhpcy5faGFzU2Nyb2xsKCkgKSB7XG5cdFx0XHRiYXNlID0gdGhpcy5hY3RpdmUub2Zmc2V0KCkudG9wO1xuXHRcdFx0aGVpZ2h0ID0gdGhpcy5lbGVtZW50LmhlaWdodCgpO1xuXHRcdFx0dGhpcy5hY3RpdmUucHJldkFsbCggXCIudWktbWVudS1pdGVtXCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aXRlbSA9ICQoIHRoaXMgKTtcblx0XHRcdFx0cmV0dXJuIGl0ZW0ub2Zmc2V0KCkudG9wIC0gYmFzZSArIGhlaWdodCA+IDA7XG5cdFx0XHR9ICk7XG5cblx0XHRcdHRoaXMuZm9jdXMoIGV2ZW50LCBpdGVtICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuZm9jdXMoIGV2ZW50LCB0aGlzLmFjdGl2ZU1lbnUuZmluZCggdGhpcy5vcHRpb25zLml0ZW1zICkuZmlyc3QoKSApO1xuXHRcdH1cblx0fSxcblxuXHRfaGFzU2Nyb2xsOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lbGVtZW50Lm91dGVySGVpZ2h0KCkgPCB0aGlzLmVsZW1lbnQucHJvcCggXCJzY3JvbGxIZWlnaHRcIiApO1xuXHR9LFxuXG5cdHNlbGVjdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0Ly8gVE9ETzogSXQgc2hvdWxkIG5ldmVyIGJlIHBvc3NpYmxlIHRvIG5vdCBoYXZlIGFuIGFjdGl2ZSBpdGVtIGF0IHRoaXNcblx0XHQvLyBwb2ludCwgYnV0IHRoZSB0ZXN0cyBkb24ndCB0cmlnZ2VyIG1vdXNlZW50ZXIgYmVmb3JlIGNsaWNrLlxuXHRcdHRoaXMuYWN0aXZlID0gdGhpcy5hY3RpdmUgfHwgJCggZXZlbnQudGFyZ2V0ICkuY2xvc2VzdCggXCIudWktbWVudS1pdGVtXCIgKTtcblx0XHR2YXIgdWkgPSB7IGl0ZW06IHRoaXMuYWN0aXZlIH07XG5cdFx0aWYgKCAhdGhpcy5hY3RpdmUuaGFzKCBcIi51aS1tZW51XCIgKS5sZW5ndGggKSB7XG5cdFx0XHR0aGlzLmNvbGxhcHNlQWxsKCBldmVudCwgdHJ1ZSApO1xuXHRcdH1cblx0XHR0aGlzLl90cmlnZ2VyKCBcInNlbGVjdFwiLCBldmVudCwgdWkgKTtcblx0fSxcblxuXHRfZmlsdGVyTWVudUl0ZW1zOiBmdW5jdGlvbiggY2hhcmFjdGVyICkge1xuXHRcdHZhciBlc2NhcGVkQ2hhcmFjdGVyID0gY2hhcmFjdGVyLnJlcGxhY2UoIC9bXFwtXFxbXFxde30oKSorPy4sXFxcXFxcXiR8I1xcc10vZywgXCJcXFxcJCZcIiApLFxuXHRcdFx0cmVnZXggPSBuZXcgUmVnRXhwKCBcIl5cIiArIGVzY2FwZWRDaGFyYWN0ZXIsIFwiaVwiICk7XG5cblx0XHRyZXR1cm4gdGhpcy5hY3RpdmVNZW51XG5cdFx0XHQuZmluZCggdGhpcy5vcHRpb25zLml0ZW1zIClcblxuXHRcdFx0XHQvLyBPbmx5IG1hdGNoIG9uIGl0ZW1zLCBub3QgZGl2aWRlcnMgb3Igb3RoZXIgY29udGVudCAoIzEwNTcxKVxuXHRcdFx0XHQuZmlsdGVyKCBcIi51aS1tZW51LWl0ZW1cIiApXG5cdFx0XHRcdFx0LmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVnZXgudGVzdChcblx0XHRcdFx0XHRcdFx0JC50cmltKCAkKCB0aGlzICkuY2hpbGRyZW4oIFwiLnVpLW1lbnUtaXRlbS13cmFwcGVyXCIgKS50ZXh0KCkgKSApO1xuXHRcdFx0XHRcdH0gKTtcblx0fVxufSApO1xuXG5cbi8qIVxuICogalF1ZXJ5IFVJIEF1dG9jb21wbGV0ZSAxLjEyLjFcbiAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICovXG5cbi8vPj5sYWJlbDogQXV0b2NvbXBsZXRlXG4vLz4+Z3JvdXA6IFdpZGdldHNcbi8vPj5kZXNjcmlwdGlvbjogTGlzdHMgc3VnZ2VzdGVkIHdvcmRzIGFzIHRoZSB1c2VyIGlzIHR5cGluZy5cbi8vPj5kb2NzOiBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9hdXRvY29tcGxldGUvXG4vLz4+ZGVtb3M6IGh0dHA6Ly9qcXVlcnl1aS5jb20vYXV0b2NvbXBsZXRlL1xuLy8+PmNzcy5zdHJ1Y3R1cmU6IC4uLy4uL3RoZW1lcy9iYXNlL2NvcmUuY3NzXG4vLz4+Y3NzLnN0cnVjdHVyZTogLi4vLi4vdGhlbWVzL2Jhc2UvYXV0b2NvbXBsZXRlLmNzc1xuLy8+PmNzcy50aGVtZTogLi4vLi4vdGhlbWVzL2Jhc2UvdGhlbWUuY3NzXG5cblxuXG4kLndpZGdldCggXCJ1aS5hdXRvY29tcGxldGVcIiwge1xuXHR2ZXJzaW9uOiBcIjEuMTIuMVwiLFxuXHRkZWZhdWx0RWxlbWVudDogXCI8aW5wdXQ+XCIsXG5cdG9wdGlvbnM6IHtcblx0XHRhcHBlbmRUbzogbnVsbCxcblx0XHRhdXRvRm9jdXM6IGZhbHNlLFxuXHRcdGRlbGF5OiAzMDAsXG5cdFx0bWluTGVuZ3RoOiAxLFxuXHRcdHBvc2l0aW9uOiB7XG5cdFx0XHRteTogXCJsZWZ0IHRvcFwiLFxuXHRcdFx0YXQ6IFwibGVmdCBib3R0b21cIixcblx0XHRcdGNvbGxpc2lvbjogXCJub25lXCJcblx0XHR9LFxuXHRcdHNvdXJjZTogbnVsbCxcblxuXHRcdC8vIENhbGxiYWNrc1xuXHRcdGNoYW5nZTogbnVsbCxcblx0XHRjbG9zZTogbnVsbCxcblx0XHRmb2N1czogbnVsbCxcblx0XHRvcGVuOiBudWxsLFxuXHRcdHJlc3BvbnNlOiBudWxsLFxuXHRcdHNlYXJjaDogbnVsbCxcblx0XHRzZWxlY3Q6IG51bGxcblx0fSxcblxuXHRyZXF1ZXN0SW5kZXg6IDAsXG5cdHBlbmRpbmc6IDAsXG5cblx0X2NyZWF0ZTogZnVuY3Rpb24oKSB7XG5cblx0XHQvLyBTb21lIGJyb3dzZXJzIG9ubHkgcmVwZWF0IGtleWRvd24gZXZlbnRzLCBub3Qga2V5cHJlc3MgZXZlbnRzLFxuXHRcdC8vIHNvIHdlIHVzZSB0aGUgc3VwcHJlc3NLZXlQcmVzcyBmbGFnIHRvIGRldGVybWluZSBpZiB3ZSd2ZSBhbHJlYWR5XG5cdFx0Ly8gaGFuZGxlZCB0aGUga2V5ZG93biBldmVudC4gIzcyNjlcblx0XHQvLyBVbmZvcnR1bmF0ZWx5IHRoZSBjb2RlIGZvciAmIGluIGtleXByZXNzIGlzIHRoZSBzYW1lIGFzIHRoZSB1cCBhcnJvdyxcblx0XHQvLyBzbyB3ZSB1c2UgdGhlIHN1cHByZXNzS2V5UHJlc3NSZXBlYXQgZmxhZyB0byBhdm9pZCBoYW5kbGluZyBrZXlwcmVzc1xuXHRcdC8vIGV2ZW50cyB3aGVuIHdlIGtub3cgdGhlIGtleWRvd24gZXZlbnQgd2FzIHVzZWQgdG8gbW9kaWZ5IHRoZVxuXHRcdC8vIHNlYXJjaCB0ZXJtLiAjNzc5OVxuXHRcdHZhciBzdXBwcmVzc0tleVByZXNzLCBzdXBwcmVzc0tleVByZXNzUmVwZWF0LCBzdXBwcmVzc0lucHV0LFxuXHRcdFx0bm9kZU5hbWUgPSB0aGlzLmVsZW1lbnRbIDAgXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0aXNUZXh0YXJlYSA9IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIsXG5cdFx0XHRpc0lucHV0ID0gbm9kZU5hbWUgPT09IFwiaW5wdXRcIjtcblxuXHRcdC8vIFRleHRhcmVhcyBhcmUgYWx3YXlzIG11bHRpLWxpbmVcblx0XHQvLyBJbnB1dHMgYXJlIGFsd2F5cyBzaW5nbGUtbGluZSwgZXZlbiBpZiBpbnNpZGUgYSBjb250ZW50RWRpdGFibGUgZWxlbWVudFxuXHRcdC8vIElFIGFsc28gdHJlYXRzIGlucHV0cyBhcyBjb250ZW50RWRpdGFibGVcblx0XHQvLyBBbGwgb3RoZXIgZWxlbWVudCB0eXBlcyBhcmUgZGV0ZXJtaW5lZCBieSB3aGV0aGVyIG9yIG5vdCB0aGV5J3JlIGNvbnRlbnRFZGl0YWJsZVxuXHRcdHRoaXMuaXNNdWx0aUxpbmUgPSBpc1RleHRhcmVhIHx8ICFpc0lucHV0ICYmIHRoaXMuX2lzQ29udGVudEVkaXRhYmxlKCB0aGlzLmVsZW1lbnQgKTtcblxuXHRcdHRoaXMudmFsdWVNZXRob2QgPSB0aGlzLmVsZW1lbnRbIGlzVGV4dGFyZWEgfHwgaXNJbnB1dCA/IFwidmFsXCIgOiBcInRleHRcIiBdO1xuXHRcdHRoaXMuaXNOZXdNZW51ID0gdHJ1ZTtcblxuXHRcdHRoaXMuX2FkZENsYXNzKCBcInVpLWF1dG9jb21wbGV0ZS1pbnB1dFwiICk7XG5cdFx0dGhpcy5lbGVtZW50LmF0dHIoIFwiYXV0b2NvbXBsZXRlXCIsIFwib2ZmXCIgKTtcblxuXHRcdHRoaXMuX29uKCB0aGlzLmVsZW1lbnQsIHtcblx0XHRcdGtleWRvd246IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0aWYgKCB0aGlzLmVsZW1lbnQucHJvcCggXCJyZWFkT25seVwiICkgKSB7XG5cdFx0XHRcdFx0c3VwcHJlc3NLZXlQcmVzcyA9IHRydWU7XG5cdFx0XHRcdFx0c3VwcHJlc3NJbnB1dCA9IHRydWU7XG5cdFx0XHRcdFx0c3VwcHJlc3NLZXlQcmVzc1JlcGVhdCA9IHRydWU7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0c3VwcHJlc3NLZXlQcmVzcyA9IGZhbHNlO1xuXHRcdFx0XHRzdXBwcmVzc0lucHV0ID0gZmFsc2U7XG5cdFx0XHRcdHN1cHByZXNzS2V5UHJlc3NSZXBlYXQgPSBmYWxzZTtcblx0XHRcdFx0dmFyIGtleUNvZGUgPSAkLnVpLmtleUNvZGU7XG5cdFx0XHRcdHN3aXRjaCAoIGV2ZW50LmtleUNvZGUgKSB7XG5cdFx0XHRcdGNhc2Uga2V5Q29kZS5QQUdFX1VQOlxuXHRcdFx0XHRcdHN1cHByZXNzS2V5UHJlc3MgPSB0cnVlO1xuXHRcdFx0XHRcdHRoaXMuX21vdmUoIFwicHJldmlvdXNQYWdlXCIsIGV2ZW50ICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2Uga2V5Q29kZS5QQUdFX0RPV046XG5cdFx0XHRcdFx0c3VwcHJlc3NLZXlQcmVzcyA9IHRydWU7XG5cdFx0XHRcdFx0dGhpcy5fbW92ZSggXCJuZXh0UGFnZVwiLCBldmVudCApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIGtleUNvZGUuVVA6XG5cdFx0XHRcdFx0c3VwcHJlc3NLZXlQcmVzcyA9IHRydWU7XG5cdFx0XHRcdFx0dGhpcy5fa2V5RXZlbnQoIFwicHJldmlvdXNcIiwgZXZlbnQgKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBrZXlDb2RlLkRPV046XG5cdFx0XHRcdFx0c3VwcHJlc3NLZXlQcmVzcyA9IHRydWU7XG5cdFx0XHRcdFx0dGhpcy5fa2V5RXZlbnQoIFwibmV4dFwiLCBldmVudCApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIGtleUNvZGUuRU5URVI6XG5cblx0XHRcdFx0XHQvLyB3aGVuIG1lbnUgaXMgb3BlbiBhbmQgaGFzIGZvY3VzXG5cdFx0XHRcdFx0aWYgKCB0aGlzLm1lbnUuYWN0aXZlICkge1xuXG5cdFx0XHRcdFx0XHQvLyAjNjA1NSAtIE9wZXJhIHN0aWxsIGFsbG93cyB0aGUga2V5cHJlc3MgdG8gb2NjdXJcblx0XHRcdFx0XHRcdC8vIHdoaWNoIGNhdXNlcyBmb3JtcyB0byBzdWJtaXRcblx0XHRcdFx0XHRcdHN1cHByZXNzS2V5UHJlc3MgPSB0cnVlO1xuXHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdHRoaXMubWVudS5zZWxlY3QoIGV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIGtleUNvZGUuVEFCOlxuXHRcdFx0XHRcdGlmICggdGhpcy5tZW51LmFjdGl2ZSApIHtcblx0XHRcdFx0XHRcdHRoaXMubWVudS5zZWxlY3QoIGV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIGtleUNvZGUuRVNDQVBFOlxuXHRcdFx0XHRcdGlmICggdGhpcy5tZW51LmVsZW1lbnQuaXMoIFwiOnZpc2libGVcIiApICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhdGhpcy5pc011bHRpTGluZSApIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5fdmFsdWUoIHRoaXMudGVybSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0dGhpcy5jbG9zZSggZXZlbnQgKTtcblxuXHRcdFx0XHRcdFx0Ly8gRGlmZmVyZW50IGJyb3dzZXJzIGhhdmUgZGlmZmVyZW50IGRlZmF1bHQgYmVoYXZpb3IgZm9yIGVzY2FwZVxuXHRcdFx0XHRcdFx0Ly8gU2luZ2xlIHByZXNzIGNhbiBtZWFuIHVuZG8gb3IgY2xlYXJcblx0XHRcdFx0XHRcdC8vIERvdWJsZSBwcmVzcyBpbiBJRSBtZWFucyBjbGVhciB0aGUgd2hvbGUgZm9ybVxuXHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0c3VwcHJlc3NLZXlQcmVzc1JlcGVhdCA9IHRydWU7XG5cblx0XHRcdFx0XHQvLyBzZWFyY2ggdGltZW91dCBzaG91bGQgYmUgdHJpZ2dlcmVkIGJlZm9yZSB0aGUgaW5wdXQgdmFsdWUgaXMgY2hhbmdlZFxuXHRcdFx0XHRcdHRoaXMuX3NlYXJjaFRpbWVvdXQoIGV2ZW50ICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRrZXlwcmVzczogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRpZiAoIHN1cHByZXNzS2V5UHJlc3MgKSB7XG5cdFx0XHRcdFx0c3VwcHJlc3NLZXlQcmVzcyA9IGZhbHNlO1xuXHRcdFx0XHRcdGlmICggIXRoaXMuaXNNdWx0aUxpbmUgfHwgdGhpcy5tZW51LmVsZW1lbnQuaXMoIFwiOnZpc2libGVcIiApICkge1xuXHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggc3VwcHJlc3NLZXlQcmVzc1JlcGVhdCApIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXBsaWNhdGUgc29tZSBrZXkgaGFuZGxlcnMgdG8gYWxsb3cgdGhlbSB0byByZXBlYXQgaW4gRmlyZWZveCBhbmQgT3BlcmFcblx0XHRcdFx0dmFyIGtleUNvZGUgPSAkLnVpLmtleUNvZGU7XG5cdFx0XHRcdHN3aXRjaCAoIGV2ZW50LmtleUNvZGUgKSB7XG5cdFx0XHRcdGNhc2Uga2V5Q29kZS5QQUdFX1VQOlxuXHRcdFx0XHRcdHRoaXMuX21vdmUoIFwicHJldmlvdXNQYWdlXCIsIGV2ZW50ICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2Uga2V5Q29kZS5QQUdFX0RPV046XG5cdFx0XHRcdFx0dGhpcy5fbW92ZSggXCJuZXh0UGFnZVwiLCBldmVudCApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIGtleUNvZGUuVVA6XG5cdFx0XHRcdFx0dGhpcy5fa2V5RXZlbnQoIFwicHJldmlvdXNcIiwgZXZlbnQgKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBrZXlDb2RlLkRPV046XG5cdFx0XHRcdFx0dGhpcy5fa2V5RXZlbnQoIFwibmV4dFwiLCBldmVudCApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0aW5wdXQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0aWYgKCBzdXBwcmVzc0lucHV0ICkge1xuXHRcdFx0XHRcdHN1cHByZXNzSW5wdXQgPSBmYWxzZTtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLl9zZWFyY2hUaW1lb3V0KCBldmVudCApO1xuXHRcdFx0fSxcblx0XHRcdGZvY3VzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dGhpcy5zZWxlY3RlZEl0ZW0gPSBudWxsO1xuXHRcdFx0XHR0aGlzLnByZXZpb3VzID0gdGhpcy5fdmFsdWUoKTtcblx0XHRcdH0sXG5cdFx0XHRibHVyOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdGlmICggdGhpcy5jYW5jZWxCbHVyICkge1xuXHRcdFx0XHRcdGRlbGV0ZSB0aGlzLmNhbmNlbEJsdXI7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2xlYXJUaW1lb3V0KCB0aGlzLnNlYXJjaGluZyApO1xuXHRcdFx0XHR0aGlzLmNsb3NlKCBldmVudCApO1xuXHRcdFx0XHR0aGlzLl9jaGFuZ2UoIGV2ZW50ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdFx0dGhpcy5faW5pdFNvdXJjZSgpO1xuXHRcdHRoaXMubWVudSA9ICQoIFwiPHVsPlwiIClcblx0XHRcdC5hcHBlbmRUbyggdGhpcy5fYXBwZW5kVG8oKSApXG5cdFx0XHQubWVudSgge1xuXG5cdFx0XHRcdC8vIGRpc2FibGUgQVJJQSBzdXBwb3J0LCB0aGUgbGl2ZSByZWdpb24gdGFrZXMgY2FyZSBvZiB0aGF0XG5cdFx0XHRcdHJvbGU6IG51bGxcblx0XHRcdH0gKVxuXHRcdFx0LmhpZGUoKVxuXHRcdFx0Lm1lbnUoIFwiaW5zdGFuY2VcIiApO1xuXG5cdFx0dGhpcy5fYWRkQ2xhc3MoIHRoaXMubWVudS5lbGVtZW50LCBcInVpLWF1dG9jb21wbGV0ZVwiLCBcInVpLWZyb250XCIgKTtcblx0XHR0aGlzLl9vbiggdGhpcy5tZW51LmVsZW1lbnQsIHtcblx0XHRcdG1vdXNlZG93bjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIHByZXZlbnQgbW92aW5nIGZvY3VzIG91dCBvZiB0aGUgdGV4dCBmaWVsZFxuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHRcdC8vIElFIGRvZXNuJ3QgcHJldmVudCBtb3ZpbmcgZm9jdXMgZXZlbiB3aXRoIGV2ZW50LnByZXZlbnREZWZhdWx0KClcblx0XHRcdFx0Ly8gc28gd2Ugc2V0IGEgZmxhZyB0byBrbm93IHdoZW4gd2Ugc2hvdWxkIGlnbm9yZSB0aGUgYmx1ciBldmVudFxuXHRcdFx0XHR0aGlzLmNhbmNlbEJsdXIgPSB0cnVlO1xuXHRcdFx0XHR0aGlzLl9kZWxheSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVsZXRlIHRoaXMuY2FuY2VsQmx1cjtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDggb25seVxuXHRcdFx0XHRcdC8vIFJpZ2h0IGNsaWNraW5nIGEgbWVudSBpdGVtIG9yIHNlbGVjdGluZyB0ZXh0IGZyb20gdGhlIG1lbnUgaXRlbXMgd2lsbFxuXHRcdFx0XHRcdC8vIHJlc3VsdCBpbiBmb2N1cyBtb3Zpbmcgb3V0IG9mIHRoZSBpbnB1dC4gSG93ZXZlciwgd2UndmUgYWxyZWFkeSByZWNlaXZlZFxuXHRcdFx0XHRcdC8vIGFuZCBpZ25vcmVkIHRoZSBibHVyIGV2ZW50IGJlY2F1c2Ugb2YgdGhlIGNhbmNlbEJsdXIgZmxhZyBzZXQgYWJvdmUuIFNvXG5cdFx0XHRcdFx0Ly8gd2UgcmVzdG9yZSBmb2N1cyB0byBlbnN1cmUgdGhhdCB0aGUgbWVudSBjbG9zZXMgcHJvcGVybHkgYmFzZWQgb24gdGhlIHVzZXInc1xuXHRcdFx0XHRcdC8vIG5leHQgYWN0aW9ucy5cblx0XHRcdFx0XHRpZiAoIHRoaXMuZWxlbWVudFsgMCBdICE9PSAkLnVpLnNhZmVBY3RpdmVFbGVtZW50KCB0aGlzLmRvY3VtZW50WyAwIF0gKSApIHtcblx0XHRcdFx0XHRcdHRoaXMuZWxlbWVudC50cmlnZ2VyKCBcImZvY3VzXCIgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdH0sXG5cdFx0XHRtZW51Zm9jdXM6IGZ1bmN0aW9uKCBldmVudCwgdWkgKSB7XG5cdFx0XHRcdHZhciBsYWJlbCwgaXRlbTtcblxuXHRcdFx0XHQvLyBzdXBwb3J0OiBGaXJlZm94XG5cdFx0XHRcdC8vIFByZXZlbnQgYWNjaWRlbnRhbCBhY3RpdmF0aW9uIG9mIG1lbnUgaXRlbXMgaW4gRmlyZWZveCAoIzcwMjQgIzkxMTgpXG5cdFx0XHRcdGlmICggdGhpcy5pc05ld01lbnUgKSB7XG5cdFx0XHRcdFx0dGhpcy5pc05ld01lbnUgPSBmYWxzZTtcblx0XHRcdFx0XHRpZiAoIGV2ZW50Lm9yaWdpbmFsRXZlbnQgJiYgL15tb3VzZS8udGVzdCggZXZlbnQub3JpZ2luYWxFdmVudC50eXBlICkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLm1lbnUuYmx1cigpO1xuXG5cdFx0XHRcdFx0XHR0aGlzLmRvY3VtZW50Lm9uZSggXCJtb3VzZW1vdmVcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdCQoIGV2ZW50LnRhcmdldCApLnRyaWdnZXIoIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGl0ZW0gPSB1aS5pdGVtLmRhdGEoIFwidWktYXV0b2NvbXBsZXRlLWl0ZW1cIiApO1xuXHRcdFx0XHRpZiAoIGZhbHNlICE9PSB0aGlzLl90cmlnZ2VyKCBcImZvY3VzXCIsIGV2ZW50LCB7IGl0ZW06IGl0ZW0gfSApICkge1xuXG5cdFx0XHRcdFx0Ly8gdXNlIHZhbHVlIHRvIG1hdGNoIHdoYXQgd2lsbCBlbmQgdXAgaW4gdGhlIGlucHV0LCBpZiBpdCB3YXMgYSBrZXkgZXZlbnRcblx0XHRcdFx0XHRpZiAoIGV2ZW50Lm9yaWdpbmFsRXZlbnQgJiYgL15rZXkvLnRlc3QoIGV2ZW50Lm9yaWdpbmFsRXZlbnQudHlwZSApICkge1xuXHRcdFx0XHRcdFx0dGhpcy5fdmFsdWUoIGl0ZW0udmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBbm5vdW5jZSB0aGUgdmFsdWUgaW4gdGhlIGxpdmVSZWdpb25cblx0XHRcdFx0bGFiZWwgPSB1aS5pdGVtLmF0dHIoIFwiYXJpYS1sYWJlbFwiICkgfHwgaXRlbS52YWx1ZTtcblx0XHRcdFx0aWYgKCBsYWJlbCAmJiAkLnRyaW0oIGxhYmVsICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdHRoaXMubGl2ZVJlZ2lvbi5jaGlsZHJlbigpLmhpZGUoKTtcblx0XHRcdFx0XHQkKCBcIjxkaXY+XCIgKS50ZXh0KCBsYWJlbCApLmFwcGVuZFRvKCB0aGlzLmxpdmVSZWdpb24gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdG1lbnVzZWxlY3Q6IGZ1bmN0aW9uKCBldmVudCwgdWkgKSB7XG5cdFx0XHRcdHZhciBpdGVtID0gdWkuaXRlbS5kYXRhKCBcInVpLWF1dG9jb21wbGV0ZS1pdGVtXCIgKSxcblx0XHRcdFx0XHRwcmV2aW91cyA9IHRoaXMucHJldmlvdXM7XG5cblx0XHRcdFx0Ly8gT25seSB0cmlnZ2VyIHdoZW4gZm9jdXMgd2FzIGxvc3QgKGNsaWNrIG9uIG1lbnUpXG5cdFx0XHRcdGlmICggdGhpcy5lbGVtZW50WyAwIF0gIT09ICQudWkuc2FmZUFjdGl2ZUVsZW1lbnQoIHRoaXMuZG9jdW1lbnRbIDAgXSApICkge1xuXHRcdFx0XHRcdHRoaXMuZWxlbWVudC50cmlnZ2VyKCBcImZvY3VzXCIgKTtcblx0XHRcdFx0XHR0aGlzLnByZXZpb3VzID0gcHJldmlvdXM7XG5cblx0XHRcdFx0XHQvLyAjNjEwOSAtIElFIHRyaWdnZXJzIHR3byBmb2N1cyBldmVudHMgYW5kIHRoZSBzZWNvbmRcblx0XHRcdFx0XHQvLyBpcyBhc3luY2hyb25vdXMsIHNvIHdlIG5lZWQgdG8gcmVzZXQgdGhlIHByZXZpb3VzXG5cdFx0XHRcdFx0Ly8gdGVybSBzeW5jaHJvbm91c2x5IGFuZCBhc3luY2hyb25vdXNseSA6LShcblx0XHRcdFx0XHR0aGlzLl9kZWxheSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnByZXZpb3VzID0gcHJldmlvdXM7XG5cdFx0XHRcdFx0XHR0aGlzLnNlbGVjdGVkSXRlbSA9IGl0ZW07XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBmYWxzZSAhPT0gdGhpcy5fdHJpZ2dlciggXCJzZWxlY3RcIiwgZXZlbnQsIHsgaXRlbTogaXRlbSB9ICkgKSB7XG5cdFx0XHRcdFx0dGhpcy5fdmFsdWUoIGl0ZW0udmFsdWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIHJlc2V0IHRoZSB0ZXJtIGFmdGVyIHRoZSBzZWxlY3QgZXZlbnRcblx0XHRcdFx0Ly8gdGhpcyBhbGxvd3MgY3VzdG9tIHNlbGVjdCBoYW5kbGluZyB0byB3b3JrIHByb3Blcmx5XG5cdFx0XHRcdHRoaXMudGVybSA9IHRoaXMuX3ZhbHVlKCk7XG5cblx0XHRcdFx0dGhpcy5jbG9zZSggZXZlbnQgKTtcblx0XHRcdFx0dGhpcy5zZWxlY3RlZEl0ZW0gPSBpdGVtO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHRcdHRoaXMubGl2ZVJlZ2lvbiA9ICQoIFwiPGRpdj5cIiwge1xuXHRcdFx0cm9sZTogXCJzdGF0dXNcIixcblx0XHRcdFwiYXJpYS1saXZlXCI6IFwiYXNzZXJ0aXZlXCIsXG5cdFx0XHRcImFyaWEtcmVsZXZhbnRcIjogXCJhZGRpdGlvbnNcIlxuXHRcdH0gKVxuXHRcdFx0LmFwcGVuZFRvKCB0aGlzLmRvY3VtZW50WyAwIF0uYm9keSApO1xuXG5cdFx0dGhpcy5fYWRkQ2xhc3MoIHRoaXMubGl2ZVJlZ2lvbiwgbnVsbCwgXCJ1aS1oZWxwZXItaGlkZGVuLWFjY2Vzc2libGVcIiApO1xuXG5cdFx0Ly8gVHVybmluZyBvZmYgYXV0b2NvbXBsZXRlIHByZXZlbnRzIHRoZSBicm93c2VyIGZyb20gcmVtZW1iZXJpbmcgdGhlXG5cdFx0Ly8gdmFsdWUgd2hlbiBuYXZpZ2F0aW5nIHRocm91Z2ggaGlzdG9yeSwgc28gd2UgcmUtZW5hYmxlIGF1dG9jb21wbGV0ZVxuXHRcdC8vIGlmIHRoZSBwYWdlIGlzIHVubG9hZGVkIGJlZm9yZSB0aGUgd2lkZ2V0IGlzIGRlc3Ryb3llZC4gIzc3OTBcblx0XHR0aGlzLl9vbiggdGhpcy53aW5kb3csIHtcblx0XHRcdGJlZm9yZXVubG9hZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyKCBcImF1dG9jb21wbGV0ZVwiICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdF9kZXN0cm95OiBmdW5jdGlvbigpIHtcblx0XHRjbGVhclRpbWVvdXQoIHRoaXMuc2VhcmNoaW5nICk7XG5cdFx0dGhpcy5lbGVtZW50LnJlbW92ZUF0dHIoIFwiYXV0b2NvbXBsZXRlXCIgKTtcblx0XHR0aGlzLm1lbnUuZWxlbWVudC5yZW1vdmUoKTtcblx0XHR0aGlzLmxpdmVSZWdpb24ucmVtb3ZlKCk7XG5cdH0sXG5cblx0X3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dGhpcy5fc3VwZXIoIGtleSwgdmFsdWUgKTtcblx0XHRpZiAoIGtleSA9PT0gXCJzb3VyY2VcIiApIHtcblx0XHRcdHRoaXMuX2luaXRTb3VyY2UoKTtcblx0XHR9XG5cdFx0aWYgKCBrZXkgPT09IFwiYXBwZW5kVG9cIiApIHtcblx0XHRcdHRoaXMubWVudS5lbGVtZW50LmFwcGVuZFRvKCB0aGlzLl9hcHBlbmRUbygpICk7XG5cdFx0fVxuXHRcdGlmICgga2V5ID09PSBcImRpc2FibGVkXCIgJiYgdmFsdWUgJiYgdGhpcy54aHIgKSB7XG5cdFx0XHR0aGlzLnhoci5hYm9ydCgpO1xuXHRcdH1cblx0fSxcblxuXHRfaXNFdmVudFRhcmdldEluV2lkZ2V0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIG1lbnVFbGVtZW50ID0gdGhpcy5tZW51LmVsZW1lbnRbIDAgXTtcblxuXHRcdHJldHVybiBldmVudC50YXJnZXQgPT09IHRoaXMuZWxlbWVudFsgMCBdIHx8XG5cdFx0XHRldmVudC50YXJnZXQgPT09IG1lbnVFbGVtZW50IHx8XG5cdFx0XHQkLmNvbnRhaW5zKCBtZW51RWxlbWVudCwgZXZlbnQudGFyZ2V0ICk7XG5cdH0sXG5cblx0X2Nsb3NlT25DbGlja091dHNpZGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRpZiAoICF0aGlzLl9pc0V2ZW50VGFyZ2V0SW5XaWRnZXQoIGV2ZW50ICkgKSB7XG5cdFx0XHR0aGlzLmNsb3NlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdF9hcHBlbmRUbzogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW1lbnQgPSB0aGlzLm9wdGlvbnMuYXBwZW5kVG87XG5cblx0XHRpZiAoIGVsZW1lbnQgKSB7XG5cdFx0XHRlbGVtZW50ID0gZWxlbWVudC5qcXVlcnkgfHwgZWxlbWVudC5ub2RlVHlwZSA/XG5cdFx0XHRcdCQoIGVsZW1lbnQgKSA6XG5cdFx0XHRcdHRoaXMuZG9jdW1lbnQuZmluZCggZWxlbWVudCApLmVxKCAwICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhZWxlbWVudCB8fCAhZWxlbWVudFsgMCBdICkge1xuXHRcdFx0ZWxlbWVudCA9IHRoaXMuZWxlbWVudC5jbG9zZXN0KCBcIi51aS1mcm9udCwgZGlhbG9nXCIgKTtcblx0XHR9XG5cblx0XHRpZiAoICFlbGVtZW50Lmxlbmd0aCApIHtcblx0XHRcdGVsZW1lbnQgPSB0aGlzLmRvY3VtZW50WyAwIF0uYm9keTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbWVudDtcblx0fSxcblxuXHRfaW5pdFNvdXJjZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGFycmF5LCB1cmwsXG5cdFx0XHR0aGF0ID0gdGhpcztcblx0XHRpZiAoICQuaXNBcnJheSggdGhpcy5vcHRpb25zLnNvdXJjZSApICkge1xuXHRcdFx0YXJyYXkgPSB0aGlzLm9wdGlvbnMuc291cmNlO1xuXHRcdFx0dGhpcy5zb3VyY2UgPSBmdW5jdGlvbiggcmVxdWVzdCwgcmVzcG9uc2UgKSB7XG5cdFx0XHRcdHJlc3BvbnNlKCAkLnVpLmF1dG9jb21wbGV0ZS5maWx0ZXIoIGFycmF5LCByZXF1ZXN0LnRlcm0gKSApO1xuXHRcdFx0fTtcblx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdGhpcy5vcHRpb25zLnNvdXJjZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHVybCA9IHRoaXMub3B0aW9ucy5zb3VyY2U7XG5cdFx0XHR0aGlzLnNvdXJjZSA9IGZ1bmN0aW9uKCByZXF1ZXN0LCByZXNwb25zZSApIHtcblx0XHRcdFx0aWYgKCB0aGF0LnhociApIHtcblx0XHRcdFx0XHR0aGF0Lnhoci5hYm9ydCgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoYXQueGhyID0gJC5hamF4KCB7XG5cdFx0XHRcdFx0dXJsOiB1cmwsXG5cdFx0XHRcdFx0ZGF0YTogcmVxdWVzdCxcblx0XHRcdFx0XHRkYXRhVHlwZTogXCJqc29uXCIsXG5cdFx0XHRcdFx0c3VjY2VzczogZnVuY3Rpb24oIGRhdGEgKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSggZGF0YSApO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0ZXJyb3I6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UoIFtdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnNvdXJjZSA9IHRoaXMub3B0aW9ucy5zb3VyY2U7XG5cdFx0fVxuXHR9LFxuXG5cdF9zZWFyY2hUaW1lb3V0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0Y2xlYXJUaW1lb3V0KCB0aGlzLnNlYXJjaGluZyApO1xuXHRcdHRoaXMuc2VhcmNoaW5nID0gdGhpcy5fZGVsYXkoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBTZWFyY2ggaWYgdGhlIHZhbHVlIGhhcyBjaGFuZ2VkLCBvciBpZiB0aGUgdXNlciByZXR5cGVzIHRoZSBzYW1lIHZhbHVlIChzZWUgIzc0MzQpXG5cdFx0XHR2YXIgZXF1YWxWYWx1ZXMgPSB0aGlzLnRlcm0gPT09IHRoaXMuX3ZhbHVlKCksXG5cdFx0XHRcdG1lbnVWaXNpYmxlID0gdGhpcy5tZW51LmVsZW1lbnQuaXMoIFwiOnZpc2libGVcIiApLFxuXHRcdFx0XHRtb2RpZmllcktleSA9IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuc2hpZnRLZXk7XG5cblx0XHRcdGlmICggIWVxdWFsVmFsdWVzIHx8ICggZXF1YWxWYWx1ZXMgJiYgIW1lbnVWaXNpYmxlICYmICFtb2RpZmllcktleSApICkge1xuXHRcdFx0XHR0aGlzLnNlbGVjdGVkSXRlbSA9IG51bGw7XG5cdFx0XHRcdHRoaXMuc2VhcmNoKCBudWxsLCBldmVudCApO1xuXHRcdFx0fVxuXHRcdH0sIHRoaXMub3B0aW9ucy5kZWxheSApO1xuXHR9LFxuXG5cdHNlYXJjaDogZnVuY3Rpb24oIHZhbHVlLCBldmVudCApIHtcblx0XHR2YWx1ZSA9IHZhbHVlICE9IG51bGwgPyB2YWx1ZSA6IHRoaXMuX3ZhbHVlKCk7XG5cblx0XHQvLyBBbHdheXMgc2F2ZSB0aGUgYWN0dWFsIHZhbHVlLCBub3QgdGhlIG9uZSBwYXNzZWQgYXMgYW4gYXJndW1lbnRcblx0XHR0aGlzLnRlcm0gPSB0aGlzLl92YWx1ZSgpO1xuXG5cdFx0aWYgKCB2YWx1ZS5sZW5ndGggPCB0aGlzLm9wdGlvbnMubWluTGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuY2xvc2UoIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLl90cmlnZ2VyKCBcInNlYXJjaFwiLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5fc2VhcmNoKCB2YWx1ZSApO1xuXHR9LFxuXG5cdF9zZWFyY2g6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR0aGlzLnBlbmRpbmcrKztcblx0XHR0aGlzLl9hZGRDbGFzcyggXCJ1aS1hdXRvY29tcGxldGUtbG9hZGluZ1wiICk7XG5cdFx0dGhpcy5jYW5jZWxTZWFyY2ggPSBmYWxzZTtcblxuXHRcdHRoaXMuc291cmNlKCB7IHRlcm06IHZhbHVlIH0sIHRoaXMuX3Jlc3BvbnNlKCkgKTtcblx0fSxcblxuXHRfcmVzcG9uc2U6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpbmRleCA9ICsrdGhpcy5yZXF1ZXN0SW5kZXg7XG5cblx0XHRyZXR1cm4gJC5wcm94eSggZnVuY3Rpb24oIGNvbnRlbnQgKSB7XG5cdFx0XHRpZiAoIGluZGV4ID09PSB0aGlzLnJlcXVlc3RJbmRleCApIHtcblx0XHRcdFx0dGhpcy5fX3Jlc3BvbnNlKCBjb250ZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMucGVuZGluZy0tO1xuXHRcdFx0aWYgKCAhdGhpcy5wZW5kaW5nICkge1xuXHRcdFx0XHR0aGlzLl9yZW1vdmVDbGFzcyggXCJ1aS1hdXRvY29tcGxldGUtbG9hZGluZ1wiICk7XG5cdFx0XHR9XG5cdFx0fSwgdGhpcyApO1xuXHR9LFxuXG5cdF9fcmVzcG9uc2U6IGZ1bmN0aW9uKCBjb250ZW50ICkge1xuXHRcdGlmICggY29udGVudCApIHtcblx0XHRcdGNvbnRlbnQgPSB0aGlzLl9ub3JtYWxpemUoIGNvbnRlbnQgKTtcblx0XHR9XG5cdFx0dGhpcy5fdHJpZ2dlciggXCJyZXNwb25zZVwiLCBudWxsLCB7IGNvbnRlbnQ6IGNvbnRlbnQgfSApO1xuXHRcdGlmICggIXRoaXMub3B0aW9ucy5kaXNhYmxlZCAmJiBjb250ZW50ICYmIGNvbnRlbnQubGVuZ3RoICYmICF0aGlzLmNhbmNlbFNlYXJjaCApIHtcblx0XHRcdHRoaXMuX3N1Z2dlc3QoIGNvbnRlbnQgKTtcblx0XHRcdHRoaXMuX3RyaWdnZXIoIFwib3BlblwiICk7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gdXNlIC5fY2xvc2UoKSBpbnN0ZWFkIG9mIC5jbG9zZSgpIHNvIHdlIGRvbid0IGNhbmNlbCBmdXR1cmUgc2VhcmNoZXNcblx0XHRcdHRoaXMuX2Nsb3NlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdGNsb3NlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dGhpcy5jYW5jZWxTZWFyY2ggPSB0cnVlO1xuXHRcdHRoaXMuX2Nsb3NlKCBldmVudCApO1xuXHR9LFxuXG5cdF9jbG9zZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBoYW5kbGVyIHRoYXQgY2xvc2VzIHRoZSBtZW51IG9uIG91dHNpZGUgY2xpY2tzXG5cdFx0dGhpcy5fb2ZmKCB0aGlzLmRvY3VtZW50LCBcIm1vdXNlZG93blwiICk7XG5cblx0XHRpZiAoIHRoaXMubWVudS5lbGVtZW50LmlzKCBcIjp2aXNpYmxlXCIgKSApIHtcblx0XHRcdHRoaXMubWVudS5lbGVtZW50LmhpZGUoKTtcblx0XHRcdHRoaXMubWVudS5ibHVyKCk7XG5cdFx0XHR0aGlzLmlzTmV3TWVudSA9IHRydWU7XG5cdFx0XHR0aGlzLl90cmlnZ2VyKCBcImNsb3NlXCIsIGV2ZW50ICk7XG5cdFx0fVxuXHR9LFxuXG5cdF9jaGFuZ2U6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRpZiAoIHRoaXMucHJldmlvdXMgIT09IHRoaXMuX3ZhbHVlKCkgKSB7XG5cdFx0XHR0aGlzLl90cmlnZ2VyKCBcImNoYW5nZVwiLCBldmVudCwgeyBpdGVtOiB0aGlzLnNlbGVjdGVkSXRlbSB9ICk7XG5cdFx0fVxuXHR9LFxuXG5cdF9ub3JtYWxpemU6IGZ1bmN0aW9uKCBpdGVtcyApIHtcblxuXHRcdC8vIGFzc3VtZSBhbGwgaXRlbXMgaGF2ZSB0aGUgcmlnaHQgZm9ybWF0IHdoZW4gdGhlIGZpcnN0IGl0ZW0gaXMgY29tcGxldGVcblx0XHRpZiAoIGl0ZW1zLmxlbmd0aCAmJiBpdGVtc1sgMCBdLmxhYmVsICYmIGl0ZW1zWyAwIF0udmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gaXRlbXM7XG5cdFx0fVxuXHRcdHJldHVybiAkLm1hcCggaXRlbXMsIGZ1bmN0aW9uKCBpdGVtICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgaXRlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRsYWJlbDogaXRlbSxcblx0XHRcdFx0XHR2YWx1ZTogaXRlbVxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuICQuZXh0ZW5kKCB7fSwgaXRlbSwge1xuXHRcdFx0XHRsYWJlbDogaXRlbS5sYWJlbCB8fCBpdGVtLnZhbHVlLFxuXHRcdFx0XHR2YWx1ZTogaXRlbS52YWx1ZSB8fCBpdGVtLmxhYmVsXG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdF9zdWdnZXN0OiBmdW5jdGlvbiggaXRlbXMgKSB7XG5cdFx0dmFyIHVsID0gdGhpcy5tZW51LmVsZW1lbnQuZW1wdHkoKTtcblx0XHR0aGlzLl9yZW5kZXJNZW51KCB1bCwgaXRlbXMgKTtcblx0XHR0aGlzLmlzTmV3TWVudSA9IHRydWU7XG5cdFx0dGhpcy5tZW51LnJlZnJlc2goKTtcblxuXHRcdC8vIFNpemUgYW5kIHBvc2l0aW9uIG1lbnVcblx0XHR1bC5zaG93KCk7XG5cdFx0dGhpcy5fcmVzaXplTWVudSgpO1xuXHRcdHVsLnBvc2l0aW9uKCAkLmV4dGVuZCgge1xuXHRcdFx0b2Y6IHRoaXMuZWxlbWVudFxuXHRcdH0sIHRoaXMub3B0aW9ucy5wb3NpdGlvbiApICk7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5hdXRvRm9jdXMgKSB7XG5cdFx0XHR0aGlzLm1lbnUubmV4dCgpO1xuXHRcdH1cblxuXHRcdC8vIExpc3RlbiBmb3IgaW50ZXJhY3Rpb25zIG91dHNpZGUgb2YgdGhlIHdpZGdldCAoIzY2NDIpXG5cdFx0dGhpcy5fb24oIHRoaXMuZG9jdW1lbnQsIHtcblx0XHRcdG1vdXNlZG93bjogXCJfY2xvc2VPbkNsaWNrT3V0c2lkZVwiXG5cdFx0fSApO1xuXHR9LFxuXG5cdF9yZXNpemVNZW51OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdWwgPSB0aGlzLm1lbnUuZWxlbWVudDtcblx0XHR1bC5vdXRlcldpZHRoKCBNYXRoLm1heChcblxuXHRcdFx0Ly8gRmlyZWZveCB3cmFwcyBsb25nIHRleHQgKHBvc3NpYmx5IGEgcm91bmRpbmcgYnVnKVxuXHRcdFx0Ly8gc28gd2UgYWRkIDFweCB0byBhdm9pZCB0aGUgd3JhcHBpbmcgKCM3NTEzKVxuXHRcdFx0dWwud2lkdGgoIFwiXCIgKS5vdXRlcldpZHRoKCkgKyAxLFxuXHRcdFx0dGhpcy5lbGVtZW50Lm91dGVyV2lkdGgoKVxuXHRcdCkgKTtcblx0fSxcblxuXHRfcmVuZGVyTWVudTogZnVuY3Rpb24oIHVsLCBpdGVtcyApIHtcblx0XHR2YXIgdGhhdCA9IHRoaXM7XG5cdFx0JC5lYWNoKCBpdGVtcywgZnVuY3Rpb24oIGluZGV4LCBpdGVtICkge1xuXHRcdFx0dGhhdC5fcmVuZGVySXRlbURhdGEoIHVsLCBpdGVtICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdF9yZW5kZXJJdGVtRGF0YTogZnVuY3Rpb24oIHVsLCBpdGVtICkge1xuXHRcdHJldHVybiB0aGlzLl9yZW5kZXJJdGVtKCB1bCwgaXRlbSApLmRhdGEoIFwidWktYXV0b2NvbXBsZXRlLWl0ZW1cIiwgaXRlbSApO1xuXHR9LFxuXG5cdF9yZW5kZXJJdGVtOiBmdW5jdGlvbiggdWwsIGl0ZW0gKSB7XG5cdFx0cmV0dXJuICQoIFwiPGxpPlwiIClcblx0XHRcdC5hcHBlbmQoICQoIFwiPGRpdj5cIiApLnRleHQoIGl0ZW0ubGFiZWwgKSApXG5cdFx0XHQuYXBwZW5kVG8oIHVsICk7XG5cdH0sXG5cblx0X21vdmU6IGZ1bmN0aW9uKCBkaXJlY3Rpb24sIGV2ZW50ICkge1xuXHRcdGlmICggIXRoaXMubWVudS5lbGVtZW50LmlzKCBcIjp2aXNpYmxlXCIgKSApIHtcblx0XHRcdHRoaXMuc2VhcmNoKCBudWxsLCBldmVudCApO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpZiAoIHRoaXMubWVudS5pc0ZpcnN0SXRlbSgpICYmIC9ecHJldmlvdXMvLnRlc3QoIGRpcmVjdGlvbiApIHx8XG5cdFx0XHRcdHRoaXMubWVudS5pc0xhc3RJdGVtKCkgJiYgL15uZXh0Ly50ZXN0KCBkaXJlY3Rpb24gKSApIHtcblxuXHRcdFx0aWYgKCAhdGhpcy5pc011bHRpTGluZSApIHtcblx0XHRcdFx0dGhpcy5fdmFsdWUoIHRoaXMudGVybSApO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLm1lbnUuYmx1cigpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHR0aGlzLm1lbnVbIGRpcmVjdGlvbiBdKCBldmVudCApO1xuXHR9LFxuXG5cdHdpZGdldDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWVudS5lbGVtZW50O1xuXHR9LFxuXG5cdF92YWx1ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMudmFsdWVNZXRob2QuYXBwbHkoIHRoaXMuZWxlbWVudCwgYXJndW1lbnRzICk7XG5cdH0sXG5cblx0X2tleUV2ZW50OiBmdW5jdGlvbigga2V5RXZlbnQsIGV2ZW50ICkge1xuXHRcdGlmICggIXRoaXMuaXNNdWx0aUxpbmUgfHwgdGhpcy5tZW51LmVsZW1lbnQuaXMoIFwiOnZpc2libGVcIiApICkge1xuXHRcdFx0dGhpcy5fbW92ZSgga2V5RXZlbnQsIGV2ZW50ICk7XG5cblx0XHRcdC8vIFByZXZlbnRzIG1vdmluZyBjdXJzb3IgdG8gYmVnaW5uaW5nL2VuZCBvZiB0aGUgdGV4dCBmaWVsZCBpbiBzb21lIGJyb3dzZXJzXG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBTdXBwb3J0OiBDaHJvbWUgPD01MFxuXHQvLyBXZSBzaG91bGQgYmUgYWJsZSB0byBqdXN0IHVzZSB0aGlzLmVsZW1lbnQucHJvcCggXCJpc0NvbnRlbnRFZGl0YWJsZVwiIClcblx0Ly8gYnV0IGhpZGRlbiBlbGVtZW50cyBhbHdheXMgcmVwb3J0IGZhbHNlIGluIENocm9tZS5cblx0Ly8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTMxMzA4MlxuXHRfaXNDb250ZW50RWRpdGFibGU6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdGlmICggIWVsZW1lbnQubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHZhciBlZGl0YWJsZSA9IGVsZW1lbnQucHJvcCggXCJjb250ZW50RWRpdGFibGVcIiApO1xuXG5cdFx0aWYgKCBlZGl0YWJsZSA9PT0gXCJpbmhlcml0XCIgKSB7XG5cdFx0ICByZXR1cm4gdGhpcy5faXNDb250ZW50RWRpdGFibGUoIGVsZW1lbnQucGFyZW50KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWRpdGFibGUgPT09IFwidHJ1ZVwiO1xuXHR9XG59ICk7XG5cbiQuZXh0ZW5kKCAkLnVpLmF1dG9jb21wbGV0ZSwge1xuXHRlc2NhcGVSZWdleDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiB2YWx1ZS5yZXBsYWNlKCAvW1xcLVxcW1xcXXt9KCkqKz8uLFxcXFxcXF4kfCNcXHNdL2csIFwiXFxcXCQmXCIgKTtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggYXJyYXksIHRlcm0gKSB7XG5cdFx0dmFyIG1hdGNoZXIgPSBuZXcgUmVnRXhwKCAkLnVpLmF1dG9jb21wbGV0ZS5lc2NhcGVSZWdleCggdGVybSApLCBcImlcIiApO1xuXHRcdHJldHVybiAkLmdyZXAoIGFycmF5LCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gbWF0Y2hlci50ZXN0KCB2YWx1ZS5sYWJlbCB8fCB2YWx1ZS52YWx1ZSB8fCB2YWx1ZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBMaXZlIHJlZ2lvbiBleHRlbnNpb24sIGFkZGluZyBhIGBtZXNzYWdlc2Agb3B0aW9uXG4vLyBOT1RFOiBUaGlzIGlzIGFuIGV4cGVyaW1lbnRhbCBBUEkuIFdlIGFyZSBzdGlsbCBpbnZlc3RpZ2F0aW5nXG4vLyBhIGZ1bGwgc29sdXRpb24gZm9yIHN0cmluZyBtYW5pcHVsYXRpb24gYW5kIGludGVybmF0aW9uYWxpemF0aW9uLlxuJC53aWRnZXQoIFwidWkuYXV0b2NvbXBsZXRlXCIsICQudWkuYXV0b2NvbXBsZXRlLCB7XG5cdG9wdGlvbnM6IHtcblx0XHRtZXNzYWdlczoge1xuXHRcdFx0bm9SZXN1bHRzOiBcIk5vIHNlYXJjaCByZXN1bHRzLlwiLFxuXHRcdFx0cmVzdWx0czogZnVuY3Rpb24oIGFtb3VudCApIHtcblx0XHRcdFx0cmV0dXJuIGFtb3VudCArICggYW1vdW50ID4gMSA/IFwiIHJlc3VsdHMgYXJlXCIgOiBcIiByZXN1bHQgaXNcIiApICtcblx0XHRcdFx0XHRcIiBhdmFpbGFibGUsIHVzZSB1cCBhbmQgZG93biBhcnJvdyBrZXlzIHRvIG5hdmlnYXRlLlwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRfX3Jlc3BvbnNlOiBmdW5jdGlvbiggY29udGVudCApIHtcblx0XHR2YXIgbWVzc2FnZTtcblx0XHR0aGlzLl9zdXBlckFwcGx5KCBhcmd1bWVudHMgKTtcblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kaXNhYmxlZCB8fCB0aGlzLmNhbmNlbFNlYXJjaCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aWYgKCBjb250ZW50ICYmIGNvbnRlbnQubGVuZ3RoICkge1xuXHRcdFx0bWVzc2FnZSA9IHRoaXMub3B0aW9ucy5tZXNzYWdlcy5yZXN1bHRzKCBjb250ZW50Lmxlbmd0aCApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZXNzYWdlID0gdGhpcy5vcHRpb25zLm1lc3NhZ2VzLm5vUmVzdWx0cztcblx0XHR9XG5cdFx0dGhpcy5saXZlUmVnaW9uLmNoaWxkcmVuKCkuaGlkZSgpO1xuXHRcdCQoIFwiPGRpdj5cIiApLnRleHQoIG1lc3NhZ2UgKS5hcHBlbmRUbyggdGhpcy5saXZlUmVnaW9uICk7XG5cdH1cbn0gKTtcblxudmFyIHdpZGdldHNBdXRvY29tcGxldGUgPSAkLnVpLmF1dG9jb21wbGV0ZTtcblxuXG4vKiFcbiAqIGpRdWVyeSBVSSBDb250cm9sZ3JvdXAgMS4xMi4xXG4gKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqL1xuXG4vLz4+bGFiZWw6IENvbnRyb2xncm91cFxuLy8+Pmdyb3VwOiBXaWRnZXRzXG4vLz4+ZGVzY3JpcHRpb246IFZpc3VhbGx5IGdyb3VwcyBmb3JtIGNvbnRyb2wgd2lkZ2V0c1xuLy8+PmRvY3M6IGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL2NvbnRyb2xncm91cC9cbi8vPj5kZW1vczogaHR0cDovL2pxdWVyeXVpLmNvbS9jb250cm9sZ3JvdXAvXG4vLz4+Y3NzLnN0cnVjdHVyZTogLi4vLi4vdGhlbWVzL2Jhc2UvY29yZS5jc3Ncbi8vPj5jc3Muc3RydWN0dXJlOiAuLi8uLi90aGVtZXMvYmFzZS9jb250cm9sZ3JvdXAuY3NzXG4vLz4+Y3NzLnRoZW1lOiAuLi8uLi90aGVtZXMvYmFzZS90aGVtZS5jc3NcblxuXG52YXIgY29udHJvbGdyb3VwQ29ybmVyUmVnZXggPSAvdWktY29ybmVyLShbYS16XSl7Miw2fS9nO1xuXG52YXIgd2lkZ2V0c0NvbnRyb2xncm91cCA9ICQud2lkZ2V0KCBcInVpLmNvbnRyb2xncm91cFwiLCB7XG5cdHZlcnNpb246IFwiMS4xMi4xXCIsXG5cdGRlZmF1bHRFbGVtZW50OiBcIjxkaXY+XCIsXG5cdG9wdGlvbnM6IHtcblx0XHRkaXJlY3Rpb246IFwiaG9yaXpvbnRhbFwiLFxuXHRcdGRpc2FibGVkOiBudWxsLFxuXHRcdG9ubHlWaXNpYmxlOiB0cnVlLFxuXHRcdGl0ZW1zOiB7XG5cdFx0XHRcImJ1dHRvblwiOiBcImlucHV0W3R5cGU9YnV0dG9uXSwgaW5wdXRbdHlwZT1zdWJtaXRdLCBpbnB1dFt0eXBlPXJlc2V0XSwgYnV0dG9uLCBhXCIsXG5cdFx0XHRcImNvbnRyb2xncm91cExhYmVsXCI6IFwiLnVpLWNvbnRyb2xncm91cC1sYWJlbFwiLFxuXHRcdFx0XCJjaGVja2JveHJhZGlvXCI6IFwiaW5wdXRbdHlwZT0nY2hlY2tib3gnXSwgaW5wdXRbdHlwZT0ncmFkaW8nXVwiLFxuXHRcdFx0XCJzZWxlY3RtZW51XCI6IFwic2VsZWN0XCIsXG5cdFx0XHRcInNwaW5uZXJcIjogXCIudWktc3Bpbm5lci1pbnB1dFwiXG5cdFx0fVxuXHR9LFxuXG5cdF9jcmVhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuX2VuaGFuY2UoKTtcblx0fSxcblxuXHQvLyBUbyBzdXBwb3J0IHRoZSBlbmhhbmNlZCBvcHRpb24gaW4galF1ZXJ5IE1vYmlsZSwgd2UgaXNvbGF0ZSBET00gbWFuaXB1bGF0aW9uXG5cdF9lbmhhbmNlOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmVsZW1lbnQuYXR0ciggXCJyb2xlXCIsIFwidG9vbGJhclwiICk7XG5cdFx0dGhpcy5yZWZyZXNoKCk7XG5cdH0sXG5cblx0X2Rlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuX2NhbGxDaGlsZE1ldGhvZCggXCJkZXN0cm95XCIgKTtcblx0XHR0aGlzLmNoaWxkV2lkZ2V0cy5yZW1vdmVEYXRhKCBcInVpLWNvbnRyb2xncm91cC1kYXRhXCIgKTtcblx0XHR0aGlzLmVsZW1lbnQucmVtb3ZlQXR0ciggXCJyb2xlXCIgKTtcblx0XHRpZiAoIHRoaXMub3B0aW9ucy5pdGVtcy5jb250cm9sZ3JvdXBMYWJlbCApIHtcblx0XHRcdHRoaXMuZWxlbWVudFxuXHRcdFx0XHQuZmluZCggdGhpcy5vcHRpb25zLml0ZW1zLmNvbnRyb2xncm91cExhYmVsIClcblx0XHRcdFx0LmZpbmQoIFwiLnVpLWNvbnRyb2xncm91cC1sYWJlbC1jb250ZW50c1wiIClcblx0XHRcdFx0LmNvbnRlbnRzKCkudW53cmFwKCk7XG5cdFx0fVxuXHR9LFxuXG5cdF9pbml0V2lkZ2V0czogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0Y2hpbGRXaWRnZXRzID0gW107XG5cblx0XHQvLyBGaXJzdCB3ZSBpdGVyYXRlIG92ZXIgZWFjaCBvZiB0aGUgaXRlbXMgb3B0aW9uc1xuXHRcdCQuZWFjaCggdGhpcy5vcHRpb25zLml0ZW1zLCBmdW5jdGlvbiggd2lkZ2V0LCBzZWxlY3RvciApIHtcblx0XHRcdHZhciBsYWJlbHM7XG5cdFx0XHR2YXIgb3B0aW9ucyA9IHt9O1xuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhlIHdpZGdldCBoYXMgYSBzZWxlY3RvciBzZXRcblx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2lkZ2V0ID09PSBcImNvbnRyb2xncm91cExhYmVsXCIgKSB7XG5cdFx0XHRcdGxhYmVscyA9IHRoYXQuZWxlbWVudC5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0XHRsYWJlbHMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW1lbnQgPSAkKCB0aGlzICk7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW1lbnQuY2hpbGRyZW4oIFwiLnVpLWNvbnRyb2xncm91cC1sYWJlbC1jb250ZW50c1wiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbGVtZW50LmNvbnRlbnRzKClcblx0XHRcdFx0XHRcdC53cmFwQWxsKCBcIjxzcGFuIGNsYXNzPSd1aS1jb250cm9sZ3JvdXAtbGFiZWwtY29udGVudHMnPjwvc3Bhbj5cIiApO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHRoYXQuX2FkZENsYXNzKCBsYWJlbHMsIG51bGwsIFwidWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IHVpLXN0YXRlLWRlZmF1bHRcIiApO1xuXHRcdFx0XHRjaGlsZFdpZGdldHMgPSBjaGlsZFdpZGdldHMuY29uY2F0KCBsYWJlbHMuZ2V0KCkgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhlIHdpZGdldCBhY3R1YWxseSBleGlzdHNcblx0XHRcdGlmICggISQuZm5bIHdpZGdldCBdICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlIGFzc3VtZSBldmVyeXRoaW5nIGlzIGluIHRoZSBtaWRkbGUgdG8gc3RhcnQgYmVjYXVzZSB3ZSBjYW4ndCBkZXRlcm1pbmVcblx0XHRcdC8vIGZpcnN0IC8gbGFzdCBlbGVtZW50cyB1bnRpbCBhbGwgZW5oYW5jbWVudHMgYXJlIGRvbmUuXG5cdFx0XHRpZiAoIHRoYXRbIFwiX1wiICsgd2lkZ2V0ICsgXCJPcHRpb25zXCIgXSApIHtcblx0XHRcdFx0b3B0aW9ucyA9IHRoYXRbIFwiX1wiICsgd2lkZ2V0ICsgXCJPcHRpb25zXCIgXSggXCJtaWRkbGVcIiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0aW9ucyA9IHsgY2xhc3Nlczoge30gfTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRmluZCBpbnN0YW5jZXMgb2YgdGhpcyB3aWRnZXQgaW5zaWRlIGNvbnRyb2xncm91cCBhbmQgaW5pdCB0aGVtXG5cdFx0XHR0aGF0LmVsZW1lbnRcblx0XHRcdFx0LmZpbmQoIHNlbGVjdG9yIClcblx0XHRcdFx0LmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHZhciBlbGVtZW50ID0gJCggdGhpcyApO1xuXHRcdFx0XHRcdHZhciBpbnN0YW5jZSA9IGVsZW1lbnRbIHdpZGdldCBdKCBcImluc3RhbmNlXCIgKTtcblxuXHRcdFx0XHRcdC8vIFdlIG5lZWQgdG8gY2xvbmUgdGhlIGRlZmF1bHQgb3B0aW9ucyBmb3IgdGhpcyB0eXBlIG9mIHdpZGdldCB0byBhdm9pZFxuXHRcdFx0XHRcdC8vIHBvbGx1dGluZyB0aGUgdmFyaWFibGUgb3B0aW9ucyB3aGljaCBoYXMgYSB3aWRlciBzY29wZSB0aGFuIGEgc2luZ2xlIHdpZGdldC5cblx0XHRcdFx0XHR2YXIgaW5zdGFuY2VPcHRpb25zID0gJC53aWRnZXQuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlIGJ1dHRvbiBpcyB0aGUgY2hpbGQgb2YgYSBzcGlubmVyIGlnbm9yZSBpdFxuXHRcdFx0XHRcdC8vIFRPRE86IEZpbmQgYSBtb3JlIGdlbmVyaWMgc29sdXRpb25cblx0XHRcdFx0XHRpZiAoIHdpZGdldCA9PT0gXCJidXR0b25cIiAmJiBlbGVtZW50LnBhcmVudCggXCIudWktc3Bpbm5lclwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIENyZWF0ZSB0aGUgd2lkZ2V0IGlmIGl0IGRvZXNuJ3QgZXhpc3Rcblx0XHRcdFx0XHRpZiAoICFpbnN0YW5jZSApIHtcblx0XHRcdFx0XHRcdGluc3RhbmNlID0gZWxlbWVudFsgd2lkZ2V0IF0oKVsgd2lkZ2V0IF0oIFwiaW5zdGFuY2VcIiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIGluc3RhbmNlICkge1xuXHRcdFx0XHRcdFx0aW5zdGFuY2VPcHRpb25zLmNsYXNzZXMgPVxuXHRcdFx0XHRcdFx0XHR0aGF0Ll9yZXNvbHZlQ2xhc3Nlc1ZhbHVlcyggaW5zdGFuY2VPcHRpb25zLmNsYXNzZXMsIGluc3RhbmNlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsZW1lbnRbIHdpZGdldCBdKCBpbnN0YW5jZU9wdGlvbnMgKTtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGFuIGluc3RhbmNlIG9mIHRoZSBjb250cm9sZ3JvdXAgdG8gYmUgYWJsZSB0byByZWZlcmVuY2Vcblx0XHRcdFx0XHQvLyBmcm9tIHRoZSBvdXRlcm1vc3QgZWxlbWVudCBmb3IgY2hhbmdpbmcgb3B0aW9ucyBhbmQgcmVmcmVzaFxuXHRcdFx0XHRcdHZhciB3aWRnZXRFbGVtZW50ID0gZWxlbWVudFsgd2lkZ2V0IF0oIFwid2lkZ2V0XCIgKTtcblx0XHRcdFx0XHQkLmRhdGEoIHdpZGdldEVsZW1lbnRbIDAgXSwgXCJ1aS1jb250cm9sZ3JvdXAtZGF0YVwiLFxuXHRcdFx0XHRcdFx0aW5zdGFuY2UgPyBpbnN0YW5jZSA6IGVsZW1lbnRbIHdpZGdldCBdKCBcImluc3RhbmNlXCIgKSApO1xuXG5cdFx0XHRcdFx0Y2hpbGRXaWRnZXRzLnB1c2goIHdpZGdldEVsZW1lbnRbIDAgXSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fSApO1xuXG5cdFx0dGhpcy5jaGlsZFdpZGdldHMgPSAkKCAkLnVuaXF1ZVNvcnQoIGNoaWxkV2lkZ2V0cyApICk7XG5cdFx0dGhpcy5fYWRkQ2xhc3MoIHRoaXMuY2hpbGRXaWRnZXRzLCBcInVpLWNvbnRyb2xncm91cC1pdGVtXCIgKTtcblx0fSxcblxuXHRfY2FsbENoaWxkTWV0aG9kOiBmdW5jdGlvbiggbWV0aG9kICkge1xuXHRcdHRoaXMuY2hpbGRXaWRnZXRzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGVsZW1lbnQgPSAkKCB0aGlzICksXG5cdFx0XHRcdGRhdGEgPSBlbGVtZW50LmRhdGEoIFwidWktY29udHJvbGdyb3VwLWRhdGFcIiApO1xuXHRcdFx0aWYgKCBkYXRhICYmIGRhdGFbIG1ldGhvZCBdICkge1xuXHRcdFx0XHRkYXRhWyBtZXRob2QgXSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRfdXBkYXRlQ29ybmVyQ2xhc3M6IGZ1bmN0aW9uKCBlbGVtZW50LCBwb3NpdGlvbiApIHtcblx0XHR2YXIgcmVtb3ZlID0gXCJ1aS1jb3JuZXItdG9wIHVpLWNvcm5lci1ib3R0b20gdWktY29ybmVyLWxlZnQgdWktY29ybmVyLXJpZ2h0IHVpLWNvcm5lci1hbGxcIjtcblx0XHR2YXIgYWRkID0gdGhpcy5fYnVpbGRTaW1wbGVPcHRpb25zKCBwb3NpdGlvbiwgXCJsYWJlbFwiICkuY2xhc3Nlcy5sYWJlbDtcblxuXHRcdHRoaXMuX3JlbW92ZUNsYXNzKCBlbGVtZW50LCBudWxsLCByZW1vdmUgKTtcblx0XHR0aGlzLl9hZGRDbGFzcyggZWxlbWVudCwgbnVsbCwgYWRkICk7XG5cdH0sXG5cblx0X2J1aWxkU2ltcGxlT3B0aW9uczogZnVuY3Rpb24oIHBvc2l0aW9uLCBrZXkgKSB7XG5cdFx0dmFyIGRpcmVjdGlvbiA9IHRoaXMub3B0aW9ucy5kaXJlY3Rpb24gPT09IFwidmVydGljYWxcIjtcblx0XHR2YXIgcmVzdWx0ID0ge1xuXHRcdFx0Y2xhc3Nlczoge31cblx0XHR9O1xuXHRcdHJlc3VsdC5jbGFzc2VzWyBrZXkgXSA9IHtcblx0XHRcdFwibWlkZGxlXCI6IFwiXCIsXG5cdFx0XHRcImZpcnN0XCI6IFwidWktY29ybmVyLVwiICsgKCBkaXJlY3Rpb24gPyBcInRvcFwiIDogXCJsZWZ0XCIgKSxcblx0XHRcdFwibGFzdFwiOiBcInVpLWNvcm5lci1cIiArICggZGlyZWN0aW9uID8gXCJib3R0b21cIiA6IFwicmlnaHRcIiApLFxuXHRcdFx0XCJvbmx5XCI6IFwidWktY29ybmVyLWFsbFwiXG5cdFx0fVsgcG9zaXRpb24gXTtcblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH0sXG5cblx0X3NwaW5uZXJPcHRpb25zOiBmdW5jdGlvbiggcG9zaXRpb24gKSB7XG5cdFx0dmFyIG9wdGlvbnMgPSB0aGlzLl9idWlsZFNpbXBsZU9wdGlvbnMoIHBvc2l0aW9uLCBcInVpLXNwaW5uZXJcIiApO1xuXG5cdFx0b3B0aW9ucy5jbGFzc2VzWyBcInVpLXNwaW5uZXItdXBcIiBdID0gXCJcIjtcblx0XHRvcHRpb25zLmNsYXNzZXNbIFwidWktc3Bpbm5lci1kb3duXCIgXSA9IFwiXCI7XG5cblx0XHRyZXR1cm4gb3B0aW9ucztcblx0fSxcblxuXHRfYnV0dG9uT3B0aW9uczogZnVuY3Rpb24oIHBvc2l0aW9uICkge1xuXHRcdHJldHVybiB0aGlzLl9idWlsZFNpbXBsZU9wdGlvbnMoIHBvc2l0aW9uLCBcInVpLWJ1dHRvblwiICk7XG5cdH0sXG5cblx0X2NoZWNrYm94cmFkaW9PcHRpb25zOiBmdW5jdGlvbiggcG9zaXRpb24gKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2J1aWxkU2ltcGxlT3B0aW9ucyggcG9zaXRpb24sIFwidWktY2hlY2tib3hyYWRpby1sYWJlbFwiICk7XG5cdH0sXG5cblx0X3NlbGVjdG1lbnVPcHRpb25zOiBmdW5jdGlvbiggcG9zaXRpb24gKSB7XG5cdFx0dmFyIGRpcmVjdGlvbiA9IHRoaXMub3B0aW9ucy5kaXJlY3Rpb24gPT09IFwidmVydGljYWxcIjtcblx0XHRyZXR1cm4ge1xuXHRcdFx0d2lkdGg6IGRpcmVjdGlvbiA/IFwiYXV0b1wiIDogZmFsc2UsXG5cdFx0XHRjbGFzc2VzOiB7XG5cdFx0XHRcdG1pZGRsZToge1xuXHRcdFx0XHRcdFwidWktc2VsZWN0bWVudS1idXR0b24tb3BlblwiOiBcIlwiLFxuXHRcdFx0XHRcdFwidWktc2VsZWN0bWVudS1idXR0b24tY2xvc2VkXCI6IFwiXCJcblx0XHRcdFx0fSxcblx0XHRcdFx0Zmlyc3Q6IHtcblx0XHRcdFx0XHRcInVpLXNlbGVjdG1lbnUtYnV0dG9uLW9wZW5cIjogXCJ1aS1jb3JuZXItXCIgKyAoIGRpcmVjdGlvbiA/IFwidG9wXCIgOiBcInRsXCIgKSxcblx0XHRcdFx0XHRcInVpLXNlbGVjdG1lbnUtYnV0dG9uLWNsb3NlZFwiOiBcInVpLWNvcm5lci1cIiArICggZGlyZWN0aW9uID8gXCJ0b3BcIiA6IFwibGVmdFwiIClcblx0XHRcdFx0fSxcblx0XHRcdFx0bGFzdDoge1xuXHRcdFx0XHRcdFwidWktc2VsZWN0bWVudS1idXR0b24tb3BlblwiOiBkaXJlY3Rpb24gPyBcIlwiIDogXCJ1aS1jb3JuZXItdHJcIixcblx0XHRcdFx0XHRcInVpLXNlbGVjdG1lbnUtYnV0dG9uLWNsb3NlZFwiOiBcInVpLWNvcm5lci1cIiArICggZGlyZWN0aW9uID8gXCJib3R0b21cIiA6IFwicmlnaHRcIiApXG5cdFx0XHRcdH0sXG5cdFx0XHRcdG9ubHk6IHtcblx0XHRcdFx0XHRcInVpLXNlbGVjdG1lbnUtYnV0dG9uLW9wZW5cIjogXCJ1aS1jb3JuZXItdG9wXCIsXG5cdFx0XHRcdFx0XCJ1aS1zZWxlY3RtZW51LWJ1dHRvbi1jbG9zZWRcIjogXCJ1aS1jb3JuZXItYWxsXCJcblx0XHRcdFx0fVxuXG5cdFx0XHR9WyBwb3NpdGlvbiBdXG5cdFx0fTtcblx0fSxcblxuXHRfcmVzb2x2ZUNsYXNzZXNWYWx1ZXM6IGZ1bmN0aW9uKCBjbGFzc2VzLCBpbnN0YW5jZSApIHtcblx0XHR2YXIgcmVzdWx0ID0ge307XG5cdFx0JC5lYWNoKCBjbGFzc2VzLCBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0dmFyIGN1cnJlbnQgPSBpbnN0YW5jZS5vcHRpb25zLmNsYXNzZXNbIGtleSBdIHx8IFwiXCI7XG5cdFx0XHRjdXJyZW50ID0gJC50cmltKCBjdXJyZW50LnJlcGxhY2UoIGNvbnRyb2xncm91cENvcm5lclJlZ2V4LCBcIlwiICkgKTtcblx0XHRcdHJlc3VsdFsga2V5IF0gPSAoIGN1cnJlbnQgKyBcIiBcIiArIGNsYXNzZXNbIGtleSBdICkucmVwbGFjZSggL1xccysvZywgXCIgXCIgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fSxcblxuXHRfc2V0T3B0aW9uOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHRpZiAoIGtleSA9PT0gXCJkaXJlY3Rpb25cIiApIHtcblx0XHRcdHRoaXMuX3JlbW92ZUNsYXNzKCBcInVpLWNvbnRyb2xncm91cC1cIiArIHRoaXMub3B0aW9ucy5kaXJlY3Rpb24gKTtcblx0XHR9XG5cblx0XHR0aGlzLl9zdXBlcigga2V5LCB2YWx1ZSApO1xuXHRcdGlmICgga2V5ID09PSBcImRpc2FibGVkXCIgKSB7XG5cdFx0XHR0aGlzLl9jYWxsQ2hpbGRNZXRob2QoIHZhbHVlID8gXCJkaXNhYmxlXCIgOiBcImVuYWJsZVwiICk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5yZWZyZXNoKCk7XG5cdH0sXG5cblx0cmVmcmVzaDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNoaWxkcmVuLFxuXHRcdFx0dGhhdCA9IHRoaXM7XG5cblx0XHR0aGlzLl9hZGRDbGFzcyggXCJ1aS1jb250cm9sZ3JvdXAgdWktY29udHJvbGdyb3VwLVwiICsgdGhpcy5vcHRpb25zLmRpcmVjdGlvbiApO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uID09PSBcImhvcml6b250YWxcIiApIHtcblx0XHRcdHRoaXMuX2FkZENsYXNzKCBudWxsLCBcInVpLWhlbHBlci1jbGVhcmZpeFwiICk7XG5cdFx0fVxuXHRcdHRoaXMuX2luaXRXaWRnZXRzKCk7XG5cblx0XHRjaGlsZHJlbiA9IHRoaXMuY2hpbGRXaWRnZXRzO1xuXG5cdFx0Ly8gV2UgZmlsdGVyIGhlcmUgYmVjYXVzZSB3ZSBuZWVkIHRvIHRyYWNrIGFsbCBjaGlsZFdpZGdldHMgbm90IGp1c3QgdGhlIHZpc2libGUgb25lc1xuXHRcdGlmICggdGhpcy5vcHRpb25zLm9ubHlWaXNpYmxlICkge1xuXHRcdFx0Y2hpbGRyZW4gPSBjaGlsZHJlbi5maWx0ZXIoIFwiOnZpc2libGVcIiApO1xuXHRcdH1cblxuXHRcdGlmICggY2hpbGRyZW4ubGVuZ3RoICkge1xuXG5cdFx0XHQvLyBXZSBkbyB0aGlzIGxhc3QgYmVjYXVzZSB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSBhbGwgZW5oYW5jbWVudCBpcyBkb25lXG5cdFx0XHQvLyBiZWZvcmUgZGV0ZXJtaW5pbmcgZmlyc3QgYW5kIGxhc3Rcblx0XHRcdCQuZWFjaCggWyBcImZpcnN0XCIsIFwibGFzdFwiIF0sIGZ1bmN0aW9uKCBpbmRleCwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBpbnN0YW5jZSA9IGNoaWxkcmVuWyB2YWx1ZSBdKCkuZGF0YSggXCJ1aS1jb250cm9sZ3JvdXAtZGF0YVwiICk7XG5cblx0XHRcdFx0aWYgKCBpbnN0YW5jZSAmJiB0aGF0WyBcIl9cIiArIGluc3RhbmNlLndpZGdldE5hbWUgKyBcIk9wdGlvbnNcIiBdICkge1xuXHRcdFx0XHRcdHZhciBvcHRpb25zID0gdGhhdFsgXCJfXCIgKyBpbnN0YW5jZS53aWRnZXROYW1lICsgXCJPcHRpb25zXCIgXShcblx0XHRcdFx0XHRcdGNoaWxkcmVuLmxlbmd0aCA9PT0gMSA/IFwib25seVwiIDogdmFsdWVcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdG9wdGlvbnMuY2xhc3NlcyA9IHRoYXQuX3Jlc29sdmVDbGFzc2VzVmFsdWVzKCBvcHRpb25zLmNsYXNzZXMsIGluc3RhbmNlICk7XG5cdFx0XHRcdFx0aW5zdGFuY2UuZWxlbWVudFsgaW5zdGFuY2Uud2lkZ2V0TmFtZSBdKCBvcHRpb25zICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhhdC5fdXBkYXRlQ29ybmVyQ2xhc3MoIGNoaWxkcmVuWyB2YWx1ZSBdKCksIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblxuXHRcdFx0Ly8gRmluYWxseSBjYWxsIHRoZSByZWZyZXNoIG1ldGhvZCBvbiBlYWNoIG9mIHRoZSBjaGlsZCB3aWRnZXRzLlxuXHRcdFx0dGhpcy5fY2FsbENoaWxkTWV0aG9kKCBcInJlZnJlc2hcIiApO1xuXHRcdH1cblx0fVxufSApO1xuXG4vKiFcbiAqIGpRdWVyeSBVSSBDaGVja2JveHJhZGlvIDEuMTIuMVxuICogaHR0cDovL2pxdWVyeXVpLmNvbVxuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKi9cblxuLy8+PmxhYmVsOiBDaGVja2JveHJhZGlvXG4vLz4+Z3JvdXA6IFdpZGdldHNcbi8vPj5kZXNjcmlwdGlvbjogRW5oYW5jZXMgYSBmb3JtIHdpdGggbXVsdGlwbGUgdGhlbWVhYmxlIGNoZWNrYm94ZXMgb3IgcmFkaW8gYnV0dG9ucy5cbi8vPj5kb2NzOiBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9jaGVja2JveHJhZGlvL1xuLy8+PmRlbW9zOiBodHRwOi8vanF1ZXJ5dWkuY29tL2NoZWNrYm94cmFkaW8vXG4vLz4+Y3NzLnN0cnVjdHVyZTogLi4vLi4vdGhlbWVzL2Jhc2UvY29yZS5jc3Ncbi8vPj5jc3Muc3RydWN0dXJlOiAuLi8uLi90aGVtZXMvYmFzZS9idXR0b24uY3NzXG4vLz4+Y3NzLnN0cnVjdHVyZTogLi4vLi4vdGhlbWVzL2Jhc2UvY2hlY2tib3hyYWRpby5jc3Ncbi8vPj5jc3MudGhlbWU6IC4uLy4uL3RoZW1lcy9iYXNlL3RoZW1lLmNzc1xuXG5cblxuJC53aWRnZXQoIFwidWkuY2hlY2tib3hyYWRpb1wiLCBbICQudWkuZm9ybVJlc2V0TWl4aW4sIHtcblx0dmVyc2lvbjogXCIxLjEyLjFcIixcblx0b3B0aW9uczoge1xuXHRcdGRpc2FibGVkOiBudWxsLFxuXHRcdGxhYmVsOiBudWxsLFxuXHRcdGljb246IHRydWUsXG5cdFx0Y2xhc3Nlczoge1xuXHRcdFx0XCJ1aS1jaGVja2JveHJhZGlvLWxhYmVsXCI6IFwidWktY29ybmVyLWFsbFwiLFxuXHRcdFx0XCJ1aS1jaGVja2JveHJhZGlvLWljb25cIjogXCJ1aS1jb3JuZXItYWxsXCJcblx0XHR9XG5cdH0sXG5cblx0X2dldENyZWF0ZU9wdGlvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBkaXNhYmxlZCwgbGFiZWxzO1xuXHRcdHZhciB0aGF0ID0gdGhpcztcblx0XHR2YXIgb3B0aW9ucyA9IHRoaXMuX3N1cGVyKCkgfHwge307XG5cblx0XHQvLyBXZSByZWFkIHRoZSB0eXBlIGhlcmUsIGJlY2F1c2UgaXQgbWFrZXMgbW9yZSBzZW5zZSB0byB0aHJvdyBhIGVsZW1lbnQgdHlwZSBlcnJvciBmaXJzdCxcblx0XHQvLyByYXRoZXIgdGhlbiB0aGUgZXJyb3IgZm9yIGxhY2sgb2YgYSBsYWJlbC4gT2Z0ZW4gaWYgaXRzIHRoZSB3cm9uZyB0eXBlLCBpdFxuXHRcdC8vIHdvbid0IGhhdmUgYSBsYWJlbCAoZS5nLiBjYWxsaW5nIG9uIGEgZGl2LCBidG4sIGV0Yylcblx0XHR0aGlzLl9yZWFkVHlwZSgpO1xuXG5cdFx0bGFiZWxzID0gdGhpcy5lbGVtZW50LmxhYmVscygpO1xuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIG11bHRpcGxlIGxhYmVscywgdXNlIHRoZSBsYXN0IG9uZVxuXHRcdHRoaXMubGFiZWwgPSAkKCBsYWJlbHNbIGxhYmVscy5sZW5ndGggLSAxIF0gKTtcblx0XHRpZiAoICF0aGlzLmxhYmVsLmxlbmd0aCApIHtcblx0XHRcdCQuZXJyb3IoIFwiTm8gbGFiZWwgZm91bmQgZm9yIGNoZWNrYm94cmFkaW8gd2lkZ2V0XCIgKTtcblx0XHR9XG5cblx0XHR0aGlzLm9yaWdpbmFsTGFiZWwgPSBcIlwiO1xuXG5cdFx0Ly8gV2UgbmVlZCB0byBnZXQgdGhlIGxhYmVsIHRleHQgYnV0IHRoaXMgbWF5IGFsc28gbmVlZCB0byBtYWtlIHN1cmUgaXQgZG9lcyBub3QgY29udGFpbiB0aGVcblx0XHQvLyBpbnB1dCBpdHNlbGYuXG5cdFx0dGhpcy5sYWJlbC5jb250ZW50cygpLm5vdCggdGhpcy5lbGVtZW50WyAwIF0gKS5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gVGhlIGxhYmVsIGNvbnRlbnRzIGNvdWxkIGJlIHRleHQsIGh0bWwsIG9yIGEgbWl4LiBXZSBjb25jYXQgZWFjaCBlbGVtZW50IHRvIGdldCBhXG5cdFx0XHQvLyBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGxhYmVsLCB3aXRob3V0IHRoZSBpbnB1dCBhcyBwYXJ0IG9mIGl0LlxuXHRcdFx0dGhhdC5vcmlnaW5hbExhYmVsICs9IHRoaXMubm9kZVR5cGUgPT09IDMgPyAkKCB0aGlzICkudGV4dCgpIDogdGhpcy5vdXRlckhUTUw7XG5cdFx0fSApO1xuXG5cdFx0Ly8gU2V0IHRoZSBsYWJlbCBvcHRpb24gaWYgd2UgZm91bmQgbGFiZWwgdGV4dFxuXHRcdGlmICggdGhpcy5vcmlnaW5hbExhYmVsICkge1xuXHRcdFx0b3B0aW9ucy5sYWJlbCA9IHRoaXMub3JpZ2luYWxMYWJlbDtcblx0XHR9XG5cblx0XHRkaXNhYmxlZCA9IHRoaXMuZWxlbWVudFsgMCBdLmRpc2FibGVkO1xuXHRcdGlmICggZGlzYWJsZWQgIT0gbnVsbCApIHtcblx0XHRcdG9wdGlvbnMuZGlzYWJsZWQgPSBkaXNhYmxlZDtcblx0XHR9XG5cdFx0cmV0dXJuIG9wdGlvbnM7XG5cdH0sXG5cblx0X2NyZWF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNoZWNrZWQgPSB0aGlzLmVsZW1lbnRbIDAgXS5jaGVja2VkO1xuXG5cdFx0dGhpcy5fYmluZEZvcm1SZXNldEhhbmRsZXIoKTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmRpc2FibGVkID09IG51bGwgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuZGlzYWJsZWQgPSB0aGlzLmVsZW1lbnRbIDAgXS5kaXNhYmxlZDtcblx0XHR9XG5cblx0XHR0aGlzLl9zZXRPcHRpb24oIFwiZGlzYWJsZWRcIiwgdGhpcy5vcHRpb25zLmRpc2FibGVkICk7XG5cdFx0dGhpcy5fYWRkQ2xhc3MoIFwidWktY2hlY2tib3hyYWRpb1wiLCBcInVpLWhlbHBlci1oaWRkZW4tYWNjZXNzaWJsZVwiICk7XG5cdFx0dGhpcy5fYWRkQ2xhc3MoIHRoaXMubGFiZWwsIFwidWktY2hlY2tib3hyYWRpby1sYWJlbFwiLCBcInVpLWJ1dHRvbiB1aS13aWRnZXRcIiApO1xuXG5cdFx0aWYgKCB0aGlzLnR5cGUgPT09IFwicmFkaW9cIiApIHtcblx0XHRcdHRoaXMuX2FkZENsYXNzKCB0aGlzLmxhYmVsLCBcInVpLWNoZWNrYm94cmFkaW8tcmFkaW8tbGFiZWxcIiApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmxhYmVsICYmIHRoaXMub3B0aW9ucy5sYWJlbCAhPT0gdGhpcy5vcmlnaW5hbExhYmVsICkge1xuXHRcdFx0dGhpcy5fdXBkYXRlTGFiZWwoKTtcblx0XHR9IGVsc2UgaWYgKCB0aGlzLm9yaWdpbmFsTGFiZWwgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMubGFiZWwgPSB0aGlzLm9yaWdpbmFsTGFiZWw7XG5cdFx0fVxuXG5cdFx0dGhpcy5fZW5oYW5jZSgpO1xuXG5cdFx0aWYgKCBjaGVja2VkICkge1xuXHRcdFx0dGhpcy5fYWRkQ2xhc3MoIHRoaXMubGFiZWwsIFwidWktY2hlY2tib3hyYWRpby1jaGVja2VkXCIsIFwidWktc3RhdGUtYWN0aXZlXCIgKTtcblx0XHRcdGlmICggdGhpcy5pY29uICkge1xuXHRcdFx0XHR0aGlzLl9hZGRDbGFzcyggdGhpcy5pY29uLCBudWxsLCBcInVpLXN0YXRlLWhvdmVyXCIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLl9vbigge1xuXHRcdFx0Y2hhbmdlOiBcIl90b2dnbGVDbGFzc2VzXCIsXG5cdFx0XHRmb2N1czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHRoaXMuX2FkZENsYXNzKCB0aGlzLmxhYmVsLCBudWxsLCBcInVpLXN0YXRlLWZvY3VzIHVpLXZpc3VhbC1mb2N1c1wiICk7XG5cdFx0XHR9LFxuXHRcdFx0Ymx1cjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHRoaXMuX3JlbW92ZUNsYXNzKCB0aGlzLmxhYmVsLCBudWxsLCBcInVpLXN0YXRlLWZvY3VzIHVpLXZpc3VhbC1mb2N1c1wiICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdF9yZWFkVHlwZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5vZGVOYW1lID0gdGhpcy5lbGVtZW50WyAwIF0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHR0aGlzLnR5cGUgPSB0aGlzLmVsZW1lbnRbIDAgXS50eXBlO1xuXHRcdGlmICggbm9kZU5hbWUgIT09IFwiaW5wdXRcIiB8fCAhL3JhZGlvfGNoZWNrYm94Ly50ZXN0KCB0aGlzLnR5cGUgKSApIHtcblx0XHRcdCQuZXJyb3IoIFwiQ2FuJ3QgY3JlYXRlIGNoZWNrYm94cmFkaW8gb24gZWxlbWVudC5ub2RlTmFtZT1cIiArIG5vZGVOYW1lICtcblx0XHRcdFx0XCIgYW5kIGVsZW1lbnQudHlwZT1cIiArIHRoaXMudHlwZSApO1xuXHRcdH1cblx0fSxcblxuXHQvLyBTdXBwb3J0IGpRdWVyeSBNb2JpbGUgZW5oYW5jZWQgb3B0aW9uXG5cdF9lbmhhbmNlOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLl91cGRhdGVJY29uKCB0aGlzLmVsZW1lbnRbIDAgXS5jaGVja2VkICk7XG5cdH0sXG5cblx0d2lkZ2V0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5sYWJlbDtcblx0fSxcblxuXHRfZ2V0UmFkaW9Hcm91cDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGdyb3VwO1xuXHRcdHZhciBuYW1lID0gdGhpcy5lbGVtZW50WyAwIF0ubmFtZTtcblx0XHR2YXIgbmFtZVNlbGVjdG9yID0gXCJpbnB1dFtuYW1lPSdcIiArICQudWkuZXNjYXBlU2VsZWN0b3IoIG5hbWUgKSArIFwiJ11cIjtcblxuXHRcdGlmICggIW5hbWUgKSB7XG5cdFx0XHRyZXR1cm4gJCggW10gKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuZm9ybS5sZW5ndGggKSB7XG5cdFx0XHRncm91cCA9ICQoIHRoaXMuZm9ybVsgMCBdLmVsZW1lbnRzICkuZmlsdGVyKCBuYW1lU2VsZWN0b3IgKTtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBOb3QgaW5zaWRlIGEgZm9ybSwgY2hlY2sgYWxsIGlucHV0cyB0aGF0IGFsc28gYXJlIG5vdCBpbnNpZGUgYSBmb3JtXG5cdFx0XHRncm91cCA9ICQoIG5hbWVTZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAkKCB0aGlzICkuZm9ybSgpLmxlbmd0aCA9PT0gMDtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZ3JvdXAubm90KCB0aGlzLmVsZW1lbnQgKTtcblx0fSxcblxuXHRfdG9nZ2xlQ2xhc3NlczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNoZWNrZWQgPSB0aGlzLmVsZW1lbnRbIDAgXS5jaGVja2VkO1xuXHRcdHRoaXMuX3RvZ2dsZUNsYXNzKCB0aGlzLmxhYmVsLCBcInVpLWNoZWNrYm94cmFkaW8tY2hlY2tlZFwiLCBcInVpLXN0YXRlLWFjdGl2ZVwiLCBjaGVja2VkICk7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5pY29uICYmIHRoaXMudHlwZSA9PT0gXCJjaGVja2JveFwiICkge1xuXHRcdFx0dGhpcy5fdG9nZ2xlQ2xhc3MoIHRoaXMuaWNvbiwgbnVsbCwgXCJ1aS1pY29uLWNoZWNrIHVpLXN0YXRlLWNoZWNrZWRcIiwgY2hlY2tlZCApXG5cdFx0XHRcdC5fdG9nZ2xlQ2xhc3MoIHRoaXMuaWNvbiwgbnVsbCwgXCJ1aS1pY29uLWJsYW5rXCIsICFjaGVja2VkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLnR5cGUgPT09IFwicmFkaW9cIiApIHtcblx0XHRcdHRoaXMuX2dldFJhZGlvR3JvdXAoKVxuXHRcdFx0XHQuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0dmFyIGluc3RhbmNlID0gJCggdGhpcyApLmNoZWNrYm94cmFkaW8oIFwiaW5zdGFuY2VcIiApO1xuXG5cdFx0XHRcdFx0aWYgKCBpbnN0YW5jZSApIHtcblx0XHRcdFx0XHRcdGluc3RhbmNlLl9yZW1vdmVDbGFzcyggaW5zdGFuY2UubGFiZWwsXG5cdFx0XHRcdFx0XHRcdFwidWktY2hlY2tib3hyYWRpby1jaGVja2VkXCIsIFwidWktc3RhdGUtYWN0aXZlXCIgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cdH0sXG5cblx0X2Rlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuX3VuYmluZEZvcm1SZXNldEhhbmRsZXIoKTtcblxuXHRcdGlmICggdGhpcy5pY29uICkge1xuXHRcdFx0dGhpcy5pY29uLnJlbW92ZSgpO1xuXHRcdFx0dGhpcy5pY29uU3BhY2UucmVtb3ZlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdF9zZXRPcHRpb246IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gV2UgZG9uJ3QgYWxsb3cgdGhlIHZhbHVlIHRvIGJlIHNldCB0byBub3RoaW5nXG5cdFx0aWYgKCBrZXkgPT09IFwibGFiZWxcIiAmJiAhdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5fc3VwZXIoIGtleSwgdmFsdWUgKTtcblxuXHRcdGlmICgga2V5ID09PSBcImRpc2FibGVkXCIgKSB7XG5cdFx0XHR0aGlzLl90b2dnbGVDbGFzcyggdGhpcy5sYWJlbCwgbnVsbCwgXCJ1aS1zdGF0ZS1kaXNhYmxlZFwiLCB2YWx1ZSApO1xuXHRcdFx0dGhpcy5lbGVtZW50WyAwIF0uZGlzYWJsZWQgPSB2YWx1ZTtcblxuXHRcdFx0Ly8gRG9uJ3QgcmVmcmVzaCB3aGVuIHNldHRpbmcgZGlzYWJsZWRcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dGhpcy5yZWZyZXNoKCk7XG5cdH0sXG5cblx0X3VwZGF0ZUljb246IGZ1bmN0aW9uKCBjaGVja2VkICkge1xuXHRcdHZhciB0b0FkZCA9IFwidWktaWNvbiB1aS1pY29uLWJhY2tncm91bmQgXCI7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5pY29uICkge1xuXHRcdFx0aWYgKCAhdGhpcy5pY29uICkge1xuXHRcdFx0XHR0aGlzLmljb24gPSAkKCBcIjxzcGFuPlwiICk7XG5cdFx0XHRcdHRoaXMuaWNvblNwYWNlID0gJCggXCI8c3Bhbj4gPC9zcGFuPlwiICk7XG5cdFx0XHRcdHRoaXMuX2FkZENsYXNzKCB0aGlzLmljb25TcGFjZSwgXCJ1aS1jaGVja2JveHJhZGlvLWljb24tc3BhY2VcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRoaXMudHlwZSA9PT0gXCJjaGVja2JveFwiICkge1xuXHRcdFx0XHR0b0FkZCArPSBjaGVja2VkID8gXCJ1aS1pY29uLWNoZWNrIHVpLXN0YXRlLWNoZWNrZWRcIiA6IFwidWktaWNvbi1ibGFua1wiO1xuXHRcdFx0XHR0aGlzLl9yZW1vdmVDbGFzcyggdGhpcy5pY29uLCBudWxsLCBjaGVja2VkID8gXCJ1aS1pY29uLWJsYW5rXCIgOiBcInVpLWljb24tY2hlY2tcIiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG9BZGQgKz0gXCJ1aS1pY29uLWJsYW5rXCI7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9hZGRDbGFzcyggdGhpcy5pY29uLCBcInVpLWNoZWNrYm94cmFkaW8taWNvblwiLCB0b0FkZCApO1xuXHRcdFx0aWYgKCAhY2hlY2tlZCApIHtcblx0XHRcdFx0dGhpcy5fcmVtb3ZlQ2xhc3MoIHRoaXMuaWNvbiwgbnVsbCwgXCJ1aS1pY29uLWNoZWNrIHVpLXN0YXRlLWNoZWNrZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5pY29uLnByZXBlbmRUbyggdGhpcy5sYWJlbCApLmFmdGVyKCB0aGlzLmljb25TcGFjZSApO1xuXHRcdH0gZWxzZSBpZiAoIHRoaXMuaWNvbiAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dGhpcy5pY29uLnJlbW92ZSgpO1xuXHRcdFx0dGhpcy5pY29uU3BhY2UucmVtb3ZlKCk7XG5cdFx0XHRkZWxldGUgdGhpcy5pY29uO1xuXHRcdH1cblx0fSxcblxuXHRfdXBkYXRlTGFiZWw6IGZ1bmN0aW9uKCkge1xuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBjb250ZW50cyBvZiB0aGUgbGFiZWwgKCBtaW51cyB0aGUgaWNvbiwgaWNvbiBzcGFjZSwgYW5kIGlucHV0IClcblx0XHR2YXIgY29udGVudHMgPSB0aGlzLmxhYmVsLmNvbnRlbnRzKCkubm90KCB0aGlzLmVsZW1lbnRbIDAgXSApO1xuXHRcdGlmICggdGhpcy5pY29uICkge1xuXHRcdFx0Y29udGVudHMgPSBjb250ZW50cy5ub3QoIHRoaXMuaWNvblsgMCBdICk7XG5cdFx0fVxuXHRcdGlmICggdGhpcy5pY29uU3BhY2UgKSB7XG5cdFx0XHRjb250ZW50cyA9IGNvbnRlbnRzLm5vdCggdGhpcy5pY29uU3BhY2VbIDAgXSApO1xuXHRcdH1cblx0XHRjb250ZW50cy5yZW1vdmUoKTtcblxuXHRcdHRoaXMubGFiZWwuYXBwZW5kKCB0aGlzLm9wdGlvbnMubGFiZWwgKTtcblx0fSxcblxuXHRyZWZyZXNoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2hlY2tlZCA9IHRoaXMuZWxlbWVudFsgMCBdLmNoZWNrZWQsXG5cdFx0XHRpc0Rpc2FibGVkID0gdGhpcy5lbGVtZW50WyAwIF0uZGlzYWJsZWQ7XG5cblx0XHR0aGlzLl91cGRhdGVJY29uKCBjaGVja2VkICk7XG5cdFx0dGhpcy5fdG9nZ2xlQ2xhc3MoIHRoaXMubGFiZWwsIFwidWktY2hlY2tib3hyYWRpby1jaGVja2VkXCIsIFwidWktc3RhdGUtYWN0aXZlXCIsIGNoZWNrZWQgKTtcblx0XHRpZiAoIHRoaXMub3B0aW9ucy5sYWJlbCAhPT0gbnVsbCApIHtcblx0XHRcdHRoaXMuX3VwZGF0ZUxhYmVsKCk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Rpc2FibGVkICE9PSB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgKSB7XG5cdFx0XHR0aGlzLl9zZXRPcHRpb25zKCB7IFwiZGlzYWJsZWRcIjogaXNEaXNhYmxlZCB9ICk7XG5cdFx0fVxuXHR9XG5cbn0gXSApO1xuXG52YXIgd2lkZ2V0c0NoZWNrYm94cmFkaW8gPSAkLnVpLmNoZWNrYm94cmFkaW87XG5cblxuLyohXG4gKiBqUXVlcnkgVUkgQnV0dG9uIDEuMTIuMVxuICogaHR0cDovL2pxdWVyeXVpLmNvbVxuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKi9cblxuLy8+PmxhYmVsOiBCdXR0b25cbi8vPj5ncm91cDogV2lkZ2V0c1xuLy8+PmRlc2NyaXB0aW9uOiBFbmhhbmNlcyBhIGZvcm0gd2l0aCB0aGVtZWFibGUgYnV0dG9ucy5cbi8vPj5kb2NzOiBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9idXR0b24vXG4vLz4+ZGVtb3M6IGh0dHA6Ly9qcXVlcnl1aS5jb20vYnV0dG9uL1xuLy8+PmNzcy5zdHJ1Y3R1cmU6IC4uLy4uL3RoZW1lcy9iYXNlL2NvcmUuY3NzXG4vLz4+Y3NzLnN0cnVjdHVyZTogLi4vLi4vdGhlbWVzL2Jhc2UvYnV0dG9uLmNzc1xuLy8+PmNzcy50aGVtZTogLi4vLi4vdGhlbWVzL2Jhc2UvdGhlbWUuY3NzXG5cblxuXG4kLndpZGdldCggXCJ1aS5idXR0b25cIiwge1xuXHR2ZXJzaW9uOiBcIjEuMTIuMVwiLFxuXHRkZWZhdWx0RWxlbWVudDogXCI8YnV0dG9uPlwiLFxuXHRvcHRpb25zOiB7XG5cdFx0Y2xhc3Nlczoge1xuXHRcdFx0XCJ1aS1idXR0b25cIjogXCJ1aS1jb3JuZXItYWxsXCJcblx0XHR9LFxuXHRcdGRpc2FibGVkOiBudWxsLFxuXHRcdGljb246IG51bGwsXG5cdFx0aWNvblBvc2l0aW9uOiBcImJlZ2lubmluZ1wiLFxuXHRcdGxhYmVsOiBudWxsLFxuXHRcdHNob3dMYWJlbDogdHJ1ZVxuXHR9LFxuXG5cdF9nZXRDcmVhdGVPcHRpb25zOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZGlzYWJsZWQsXG5cblx0XHRcdC8vIFRoaXMgaXMgdG8gc3VwcG9ydCBjYXNlcyBsaWtlIGluIGpRdWVyeSBNb2JpbGUgd2hlcmUgdGhlIGJhc2Ugd2lkZ2V0IGRvZXMgaGF2ZVxuXHRcdFx0Ly8gYW4gaW1wbGVtZW50YXRpb24gb2YgX2dldENyZWF0ZU9wdGlvbnNcblx0XHRcdG9wdGlvbnMgPSB0aGlzLl9zdXBlcigpIHx8IHt9O1xuXG5cdFx0dGhpcy5pc0lucHV0ID0gdGhpcy5lbGVtZW50LmlzKCBcImlucHV0XCIgKTtcblxuXHRcdGRpc2FibGVkID0gdGhpcy5lbGVtZW50WyAwIF0uZGlzYWJsZWQ7XG5cdFx0aWYgKCBkaXNhYmxlZCAhPSBudWxsICkge1xuXHRcdFx0b3B0aW9ucy5kaXNhYmxlZCA9IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdHRoaXMub3JpZ2luYWxMYWJlbCA9IHRoaXMuaXNJbnB1dCA/IHRoaXMuZWxlbWVudC52YWwoKSA6IHRoaXMuZWxlbWVudC5odG1sKCk7XG5cdFx0aWYgKCB0aGlzLm9yaWdpbmFsTGFiZWwgKSB7XG5cdFx0XHRvcHRpb25zLmxhYmVsID0gdGhpcy5vcmlnaW5hbExhYmVsO1xuXHRcdH1cblxuXHRcdHJldHVybiBvcHRpb25zO1xuXHR9LFxuXG5cdF9jcmVhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXMub3B0aW9uLnNob3dMYWJlbCAmICF0aGlzLm9wdGlvbnMuaWNvbiApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zaG93TGFiZWwgPSB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIFdlIGhhdmUgdG8gY2hlY2sgdGhlIG9wdGlvbiBhZ2FpbiBoZXJlIGV2ZW4gdGhvdWdoIHdlIGRpZCBpbiBfZ2V0Q3JlYXRlT3B0aW9ucyxcblx0XHQvLyBiZWNhdXNlIG51bGwgbWF5IGhhdmUgYmVlbiBwYXNzZWQgb24gaW5pdCB3aGljaCB3b3VsZCBvdmVycmlkZSB3aGF0IHdhcyBzZXQgaW5cblx0XHQvLyBfZ2V0Q3JlYXRlT3B0aW9uc1xuXHRcdGlmICggdGhpcy5vcHRpb25zLmRpc2FibGVkID09IG51bGwgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuZGlzYWJsZWQgPSB0aGlzLmVsZW1lbnRbIDAgXS5kaXNhYmxlZCB8fCBmYWxzZTtcblx0XHR9XG5cblx0XHR0aGlzLmhhc1RpdGxlID0gISF0aGlzLmVsZW1lbnQuYXR0ciggXCJ0aXRsZVwiICk7XG5cblx0XHQvLyBDaGVjayB0byBzZWUgaWYgdGhlIGxhYmVsIG5lZWRzIHRvIGJlIHNldCBvciBpZiBpdHMgYWxyZWFkeSBjb3JyZWN0XG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMubGFiZWwgJiYgdGhpcy5vcHRpb25zLmxhYmVsICE9PSB0aGlzLm9yaWdpbmFsTGFiZWwgKSB7XG5cdFx0XHRpZiAoIHRoaXMuaXNJbnB1dCApIHtcblx0XHRcdFx0dGhpcy5lbGVtZW50LnZhbCggdGhpcy5vcHRpb25zLmxhYmVsICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQuaHRtbCggdGhpcy5vcHRpb25zLmxhYmVsICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHRoaXMuX2FkZENsYXNzKCBcInVpLWJ1dHRvblwiLCBcInVpLXdpZGdldFwiICk7XG5cdFx0dGhpcy5fc2V0T3B0aW9uKCBcImRpc2FibGVkXCIsIHRoaXMub3B0aW9ucy5kaXNhYmxlZCApO1xuXHRcdHRoaXMuX2VuaGFuY2UoKTtcblxuXHRcdGlmICggdGhpcy5lbGVtZW50LmlzKCBcImFcIiApICkge1xuXHRcdFx0dGhpcy5fb24oIHtcblx0XHRcdFx0XCJrZXl1cFwiOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdFx0aWYgKCBldmVudC5rZXlDb2RlID09PSAkLnVpLmtleUNvZGUuU1BBQ0UgKSB7XG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQaGFudG9tSlMgPD0gMS45LCBJRSA4IE9ubHlcblx0XHRcdFx0XHRcdC8vIElmIGEgbmF0aXZlIGNsaWNrIGlzIGF2YWlsYWJsZSB1c2UgaXQgc28gd2UgYWN0dWFsbHkgY2F1c2UgbmF2aWdhdGlvblxuXHRcdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIGp1c3QgdHJpZ2dlciBhIGNsaWNrIGV2ZW50XG5cdFx0XHRcdFx0XHRpZiAoIHRoaXMuZWxlbWVudFsgMCBdLmNsaWNrICkge1xuXHRcdFx0XHRcdFx0XHR0aGlzLmVsZW1lbnRbIDAgXS5jbGljaygpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5lbGVtZW50LnRyaWdnZXIoIFwiY2xpY2tcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblx0fSxcblxuXHRfZW5oYW5jZTogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpcy5lbGVtZW50LmlzKCBcImJ1dHRvblwiICkgKSB7XG5cdFx0XHR0aGlzLmVsZW1lbnQuYXR0ciggXCJyb2xlXCIsIFwiYnV0dG9uXCIgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5pY29uICkge1xuXHRcdFx0dGhpcy5fdXBkYXRlSWNvbiggXCJpY29uXCIsIHRoaXMub3B0aW9ucy5pY29uICk7XG5cdFx0XHR0aGlzLl91cGRhdGVUb29sdGlwKCk7XG5cdFx0fVxuXHR9LFxuXG5cdF91cGRhdGVUb29sdGlwOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLnRpdGxlID0gdGhpcy5lbGVtZW50LmF0dHIoIFwidGl0bGVcIiApO1xuXG5cdFx0aWYgKCAhdGhpcy5vcHRpb25zLnNob3dMYWJlbCAmJiAhdGhpcy50aXRsZSApIHtcblx0XHRcdHRoaXMuZWxlbWVudC5hdHRyKCBcInRpdGxlXCIsIHRoaXMub3B0aW9ucy5sYWJlbCApO1xuXHRcdH1cblx0fSxcblxuXHRfdXBkYXRlSWNvbjogZnVuY3Rpb24oIG9wdGlvbiwgdmFsdWUgKSB7XG5cdFx0dmFyIGljb24gPSBvcHRpb24gIT09IFwiaWNvblBvc2l0aW9uXCIsXG5cdFx0XHRwb3NpdGlvbiA9IGljb24gPyB0aGlzLm9wdGlvbnMuaWNvblBvc2l0aW9uIDogdmFsdWUsXG5cdFx0XHRkaXNwbGF5QmxvY2sgPSBwb3NpdGlvbiA9PT0gXCJ0b3BcIiB8fCBwb3NpdGlvbiA9PT0gXCJib3R0b21cIjtcblxuXHRcdC8vIENyZWF0ZSBpY29uXG5cdFx0aWYgKCAhdGhpcy5pY29uICkge1xuXHRcdFx0dGhpcy5pY29uID0gJCggXCI8c3Bhbj5cIiApO1xuXG5cdFx0XHR0aGlzLl9hZGRDbGFzcyggdGhpcy5pY29uLCBcInVpLWJ1dHRvbi1pY29uXCIsIFwidWktaWNvblwiICk7XG5cblx0XHRcdGlmICggIXRoaXMub3B0aW9ucy5zaG93TGFiZWwgKSB7XG5cdFx0XHRcdHRoaXMuX2FkZENsYXNzKCBcInVpLWJ1dHRvbi1pY29uLW9ubHlcIiApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoIGljb24gKSB7XG5cblx0XHRcdC8vIElmIHdlIGFyZSB1cGRhdGluZyB0aGUgaWNvbiByZW1vdmUgdGhlIG9sZCBpY29uIGNsYXNzXG5cdFx0XHR0aGlzLl9yZW1vdmVDbGFzcyggdGhpcy5pY29uLCBudWxsLCB0aGlzLm9wdGlvbnMuaWNvbiApO1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGFyZSB1cGRhdGluZyB0aGUgaWNvbiBhZGQgdGhlIG5ldyBpY29uIGNsYXNzXG5cdFx0aWYgKCBpY29uICkge1xuXHRcdFx0dGhpcy5fYWRkQ2xhc3MoIHRoaXMuaWNvbiwgbnVsbCwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHR0aGlzLl9hdHRhY2hJY29uKCBwb3NpdGlvbiApO1xuXG5cdFx0Ly8gSWYgdGhlIGljb24gaXMgb24gdG9wIG9yIGJvdHRvbSB3ZSBuZWVkIHRvIGFkZCB0aGUgdWktd2lkZ2V0LWljb24tYmxvY2sgY2xhc3MgYW5kIHJlbW92ZVxuXHRcdC8vIHRoZSBpY29uU3BhY2UgaWYgdGhlcmUgaXMgb25lLlxuXHRcdGlmICggZGlzcGxheUJsb2NrICkge1xuXHRcdFx0dGhpcy5fYWRkQ2xhc3MoIHRoaXMuaWNvbiwgbnVsbCwgXCJ1aS13aWRnZXQtaWNvbi1ibG9ja1wiICk7XG5cdFx0XHRpZiAoIHRoaXMuaWNvblNwYWNlICkge1xuXHRcdFx0XHR0aGlzLmljb25TcGFjZS5yZW1vdmUoKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBQb3NpdGlvbiBpcyBiZWdpbm5pbmcgb3IgZW5kIHNvIHJlbW92ZSB0aGUgdWktd2lkZ2V0LWljb24tYmxvY2sgY2xhc3MgYW5kIGFkZCB0aGVcblx0XHRcdC8vIHNwYWNlIGlmIGl0IGRvZXMgbm90IGV4aXN0XG5cdFx0XHRpZiAoICF0aGlzLmljb25TcGFjZSApIHtcblx0XHRcdFx0dGhpcy5pY29uU3BhY2UgPSAkKCBcIjxzcGFuPiA8L3NwYW4+XCIgKTtcblx0XHRcdFx0dGhpcy5fYWRkQ2xhc3MoIHRoaXMuaWNvblNwYWNlLCBcInVpLWJ1dHRvbi1pY29uLXNwYWNlXCIgKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX3JlbW92ZUNsYXNzKCB0aGlzLmljb24sIG51bGwsIFwidWktd2lnZXQtaWNvbi1ibG9ja1wiICk7XG5cdFx0XHR0aGlzLl9hdHRhY2hJY29uU3BhY2UoIHBvc2l0aW9uICk7XG5cdFx0fVxuXHR9LFxuXG5cdF9kZXN0cm95OiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmVsZW1lbnQucmVtb3ZlQXR0ciggXCJyb2xlXCIgKTtcblxuXHRcdGlmICggdGhpcy5pY29uICkge1xuXHRcdFx0dGhpcy5pY29uLnJlbW92ZSgpO1xuXHRcdH1cblx0XHRpZiAoIHRoaXMuaWNvblNwYWNlICkge1xuXHRcdFx0dGhpcy5pY29uU3BhY2UucmVtb3ZlKCk7XG5cdFx0fVxuXHRcdGlmICggIXRoaXMuaGFzVGl0bGUgKSB7XG5cdFx0XHR0aGlzLmVsZW1lbnQucmVtb3ZlQXR0ciggXCJ0aXRsZVwiICk7XG5cdFx0fVxuXHR9LFxuXG5cdF9hdHRhY2hJY29uU3BhY2U6IGZ1bmN0aW9uKCBpY29uUG9zaXRpb24gKSB7XG5cdFx0dGhpcy5pY29uWyAvXig/OmVuZHxib3R0b20pLy50ZXN0KCBpY29uUG9zaXRpb24gKSA/IFwiYmVmb3JlXCIgOiBcImFmdGVyXCIgXSggdGhpcy5pY29uU3BhY2UgKTtcblx0fSxcblxuXHRfYXR0YWNoSWNvbjogZnVuY3Rpb24oIGljb25Qb3NpdGlvbiApIHtcblx0XHR0aGlzLmVsZW1lbnRbIC9eKD86ZW5kfGJvdHRvbSkvLnRlc3QoIGljb25Qb3NpdGlvbiApID8gXCJhcHBlbmRcIiA6IFwicHJlcGVuZFwiIF0oIHRoaXMuaWNvbiApO1xuXHR9LFxuXG5cdF9zZXRPcHRpb25zOiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0XHR2YXIgbmV3U2hvd0xhYmVsID0gb3B0aW9ucy5zaG93TGFiZWwgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMub3B0aW9ucy5zaG93TGFiZWwgOlxuXHRcdFx0XHRvcHRpb25zLnNob3dMYWJlbCxcblx0XHRcdG5ld0ljb24gPSBvcHRpb25zLmljb24gPT09IHVuZGVmaW5lZCA/IHRoaXMub3B0aW9ucy5pY29uIDogb3B0aW9ucy5pY29uO1xuXG5cdFx0aWYgKCAhbmV3U2hvd0xhYmVsICYmICFuZXdJY29uICkge1xuXHRcdFx0b3B0aW9ucy5zaG93TGFiZWwgPSB0cnVlO1xuXHRcdH1cblx0XHR0aGlzLl9zdXBlciggb3B0aW9ucyApO1xuXHR9LFxuXG5cdF9zZXRPcHRpb246IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdGlmICgga2V5ID09PSBcImljb25cIiApIHtcblx0XHRcdGlmICggdmFsdWUgKSB7XG5cdFx0XHRcdHRoaXMuX3VwZGF0ZUljb24oIGtleSwgdmFsdWUgKTtcblx0XHRcdH0gZWxzZSBpZiAoIHRoaXMuaWNvbiApIHtcblx0XHRcdFx0dGhpcy5pY29uLnJlbW92ZSgpO1xuXHRcdFx0XHRpZiAoIHRoaXMuaWNvblNwYWNlICkge1xuXHRcdFx0XHRcdHRoaXMuaWNvblNwYWNlLnJlbW92ZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgPT09IFwiaWNvblBvc2l0aW9uXCIgKSB7XG5cdFx0XHR0aGlzLl91cGRhdGVJY29uKCBrZXksIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIGNhbid0IGVuZCB1cCB3aXRoIGEgYnV0dG9uIHRoYXQgaGFzIG5laXRoZXIgdGV4dCBub3IgaWNvblxuXHRcdGlmICgga2V5ID09PSBcInNob3dMYWJlbFwiICkge1xuXHRcdFx0XHR0aGlzLl90b2dnbGVDbGFzcyggXCJ1aS1idXR0b24taWNvbi1vbmx5XCIsIG51bGwsICF2YWx1ZSApO1xuXHRcdFx0XHR0aGlzLl91cGRhdGVUb29sdGlwKCk7XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgPT09IFwibGFiZWxcIiApIHtcblx0XHRcdGlmICggdGhpcy5pc0lucHV0ICkge1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQudmFsKCB2YWx1ZSApO1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBpY29uLCBhcHBlbmQgaXQsIGVsc2Ugbm90aGluZyB0aGVuIGFwcGVuZCB0aGUgdmFsdWVcblx0XHRcdFx0Ly8gdGhpcyBhdm9pZHMgcmVtb3ZhbCBvZiB0aGUgaWNvbiB3aGVuIHNldHRpbmcgbGFiZWwgdGV4dFxuXHRcdFx0XHR0aGlzLmVsZW1lbnQuaHRtbCggdmFsdWUgKTtcblx0XHRcdFx0aWYgKCB0aGlzLmljb24gKSB7XG5cdFx0XHRcdFx0dGhpcy5fYXR0YWNoSWNvbiggdGhpcy5vcHRpb25zLmljb25Qb3NpdGlvbiApO1xuXHRcdFx0XHRcdHRoaXMuX2F0dGFjaEljb25TcGFjZSggdGhpcy5vcHRpb25zLmljb25Qb3NpdGlvbiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy5fc3VwZXIoIGtleSwgdmFsdWUgKTtcblxuXHRcdGlmICgga2V5ID09PSBcImRpc2FibGVkXCIgKSB7XG5cdFx0XHR0aGlzLl90b2dnbGVDbGFzcyggbnVsbCwgXCJ1aS1zdGF0ZS1kaXNhYmxlZFwiLCB2YWx1ZSApO1xuXHRcdFx0dGhpcy5lbGVtZW50WyAwIF0uZGlzYWJsZWQgPSB2YWx1ZTtcblx0XHRcdGlmICggdmFsdWUgKSB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5ibHVyKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlZnJlc2g6IGZ1bmN0aW9uKCkge1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRvIG9ubHkgY2hlY2sgZGlzYWJsZWQgaWYgaXRzIGFuIGVsZW1lbnQgdGhhdCBzdXBwb3J0cyB0aGlzIG90aGVyd2lzZVxuXHRcdC8vIGNoZWNrIGZvciB0aGUgZGlzYWJsZWQgY2xhc3MgdG8gZGV0ZXJtaW5lIHN0YXRlXG5cdFx0dmFyIGlzRGlzYWJsZWQgPSB0aGlzLmVsZW1lbnQuaXMoIFwiaW5wdXQsIGJ1dHRvblwiICkgP1xuXHRcdFx0dGhpcy5lbGVtZW50WyAwIF0uZGlzYWJsZWQgOiB0aGlzLmVsZW1lbnQuaGFzQ2xhc3MoIFwidWktYnV0dG9uLWRpc2FibGVkXCIgKTtcblxuXHRcdGlmICggaXNEaXNhYmxlZCAhPT0gdGhpcy5vcHRpb25zLmRpc2FibGVkICkge1xuXHRcdFx0dGhpcy5fc2V0T3B0aW9ucyggeyBkaXNhYmxlZDogaXNEaXNhYmxlZCB9ICk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fdXBkYXRlVG9vbHRpcCgpO1xuXHR9XG59ICk7XG5cbi8vIERFUFJFQ0FURURcbmlmICggJC51aUJhY2tDb21wYXQgIT09IGZhbHNlICkge1xuXG5cdC8vIFRleHQgYW5kIEljb25zIG9wdGlvbnNcblx0JC53aWRnZXQoIFwidWkuYnV0dG9uXCIsICQudWkuYnV0dG9uLCB7XG5cdFx0b3B0aW9uczoge1xuXHRcdFx0dGV4dDogdHJ1ZSxcblx0XHRcdGljb25zOiB7XG5cdFx0XHRcdHByaW1hcnk6IG51bGwsXG5cdFx0XHRcdHNlY29uZGFyeTogbnVsbFxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRfY3JlYXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggdGhpcy5vcHRpb25zLnNob3dMYWJlbCAmJiAhdGhpcy5vcHRpb25zLnRleHQgKSB7XG5cdFx0XHRcdHRoaXMub3B0aW9ucy5zaG93TGFiZWwgPSB0aGlzLm9wdGlvbnMudGV4dDtcblx0XHRcdH1cblx0XHRcdGlmICggIXRoaXMub3B0aW9ucy5zaG93TGFiZWwgJiYgdGhpcy5vcHRpb25zLnRleHQgKSB7XG5cdFx0XHRcdHRoaXMub3B0aW9ucy50ZXh0ID0gdGhpcy5vcHRpb25zLnNob3dMYWJlbDtcblx0XHRcdH1cblx0XHRcdGlmICggIXRoaXMub3B0aW9ucy5pY29uICYmICggdGhpcy5vcHRpb25zLmljb25zLnByaW1hcnkgfHxcblx0XHRcdFx0XHR0aGlzLm9wdGlvbnMuaWNvbnMuc2Vjb25kYXJ5ICkgKSB7XG5cdFx0XHRcdGlmICggdGhpcy5vcHRpb25zLmljb25zLnByaW1hcnkgKSB7XG5cdFx0XHRcdFx0dGhpcy5vcHRpb25zLmljb24gPSB0aGlzLm9wdGlvbnMuaWNvbnMucHJpbWFyeTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLm9wdGlvbnMuaWNvbiA9IHRoaXMub3B0aW9ucy5pY29ucy5zZWNvbmRhcnk7XG5cdFx0XHRcdFx0dGhpcy5vcHRpb25zLmljb25Qb3NpdGlvbiA9IFwiZW5kXCI7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoIHRoaXMub3B0aW9ucy5pY29uICkge1xuXHRcdFx0XHR0aGlzLm9wdGlvbnMuaWNvbnMucHJpbWFyeSA9IHRoaXMub3B0aW9ucy5pY29uO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5fc3VwZXIoKTtcblx0XHR9LFxuXG5cdFx0X3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIGtleSA9PT0gXCJ0ZXh0XCIgKSB7XG5cdFx0XHRcdHRoaXMuX3N1cGVyKCBcInNob3dMYWJlbFwiLCB2YWx1ZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGtleSA9PT0gXCJzaG93TGFiZWxcIiApIHtcblx0XHRcdFx0dGhpcy5vcHRpb25zLnRleHQgPSB2YWx1ZTtcblx0XHRcdH1cblx0XHRcdGlmICgga2V5ID09PSBcImljb25cIiApIHtcblx0XHRcdFx0dGhpcy5vcHRpb25zLmljb25zLnByaW1hcnkgPSB2YWx1ZTtcblx0XHRcdH1cblx0XHRcdGlmICgga2V5ID09PSBcImljb25zXCIgKSB7XG5cdFx0XHRcdGlmICggdmFsdWUucHJpbWFyeSApIHtcblx0XHRcdFx0XHR0aGlzLl9zdXBlciggXCJpY29uXCIsIHZhbHVlLnByaW1hcnkgKTtcblx0XHRcdFx0XHR0aGlzLl9zdXBlciggXCJpY29uUG9zaXRpb25cIiwgXCJiZWdpbm5pbmdcIiApO1xuXHRcdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZS5zZWNvbmRhcnkgKSB7XG5cdFx0XHRcdFx0dGhpcy5fc3VwZXIoIFwiaWNvblwiLCB2YWx1ZS5zZWNvbmRhcnkgKTtcblx0XHRcdFx0XHR0aGlzLl9zdXBlciggXCJpY29uUG9zaXRpb25cIiwgXCJlbmRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9zdXBlckFwcGx5KCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH0gKTtcblxuXHQkLmZuLmJ1dHRvbiA9ICggZnVuY3Rpb24oIG9yaWcgKSB7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhdGhpcy5sZW5ndGggfHwgKCB0aGlzLmxlbmd0aCAmJiB0aGlzWyAwIF0udGFnTmFtZSAhPT0gXCJJTlBVVFwiICkgfHxcblx0XHRcdFx0XHQoIHRoaXMubGVuZ3RoICYmIHRoaXNbIDAgXS50YWdOYW1lID09PSBcIklOUFVUXCIgJiYgKFxuXHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBcInR5cGVcIiApICE9PSBcImNoZWNrYm94XCIgJiYgdGhpcy5hdHRyKCBcInR5cGVcIiApICE9PSBcInJhZGlvXCJcblx0XHRcdFx0XHQpICkgKSB7XG5cdFx0XHRcdHJldHVybiBvcmlnLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdH1cblx0XHRcdGlmICggISQudWkuY2hlY2tib3hyYWRpbyApIHtcblx0XHRcdFx0JC5lcnJvciggXCJDaGVja2JveHJhZGlvIHdpZGdldCBtaXNzaW5nXCIgKTtcblx0XHRcdH1cblx0XHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA9PT0gMCApIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY2hlY2tib3hyYWRpbygge1xuXHRcdFx0XHRcdFwiaWNvblwiOiBmYWxzZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy5jaGVja2JveHJhZGlvLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXHR9ICkoICQuZm4uYnV0dG9uICk7XG5cblx0JC5mbi5idXR0b25zZXQgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoICEkLnVpLmNvbnRyb2xncm91cCApIHtcblx0XHRcdCQuZXJyb3IoIFwiQ29udHJvbGdyb3VwIHdpZGdldCBtaXNzaW5nXCIgKTtcblx0XHR9XG5cdFx0aWYgKCBhcmd1bWVudHNbIDAgXSA9PT0gXCJvcHRpb25cIiAmJiBhcmd1bWVudHNbIDEgXSA9PT0gXCJpdGVtc1wiICYmIGFyZ3VtZW50c1sgMiBdICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuY29udHJvbGdyb3VwLmFwcGx5KCB0aGlzLFxuXHRcdFx0XHRbIGFyZ3VtZW50c1sgMCBdLCBcIml0ZW1zLmJ1dHRvblwiLCBhcmd1bWVudHNbIDIgXSBdICk7XG5cdFx0fVxuXHRcdGlmICggYXJndW1lbnRzWyAwIF0gPT09IFwib3B0aW9uXCIgJiYgYXJndW1lbnRzWyAxIF0gPT09IFwiaXRlbXNcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmNvbnRyb2xncm91cC5hcHBseSggdGhpcywgWyBhcmd1bWVudHNbIDAgXSwgXCJpdGVtcy5idXR0b25cIiBdICk7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIGFyZ3VtZW50c1sgMCBdID09PSBcIm9iamVjdFwiICYmIGFyZ3VtZW50c1sgMCBdLml0ZW1zICkge1xuXHRcdFx0YXJndW1lbnRzWyAwIF0uaXRlbXMgPSB7XG5cdFx0XHRcdGJ1dHRvbjogYXJndW1lbnRzWyAwIF0uaXRlbXNcblx0XHRcdH07XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmNvbnRyb2xncm91cC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdH07XG59XG5cbnZhciB3aWRnZXRzQnV0dG9uID0gJC51aS5idXR0b247XG5cblxuLy8ganNjczpkaXNhYmxlIG1heGltdW1MaW5lTGVuZ3RoXG4vKiBqc2NzOmRpc2FibGUgcmVxdWlyZUNhbWVsQ2FzZU9yVXBwZXJDYXNlSWRlbnRpZmllcnMgKi9cbi8qIVxuICogalF1ZXJ5IFVJIERhdGVwaWNrZXIgMS4xMi4xXG4gKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqL1xuXG4vLz4+bGFiZWw6IERhdGVwaWNrZXJcbi8vPj5ncm91cDogV2lkZ2V0c1xuLy8+PmRlc2NyaXB0aW9uOiBEaXNwbGF5cyBhIGNhbGVuZGFyIGZyb20gYW4gaW5wdXQgb3IgaW5saW5lIGZvciBzZWxlY3RpbmcgZGF0ZXMuXG4vLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vZGF0ZXBpY2tlci9cbi8vPj5kZW1vczogaHR0cDovL2pxdWVyeXVpLmNvbS9kYXRlcGlja2VyL1xuLy8+PmNzcy5zdHJ1Y3R1cmU6IC4uLy4uL3RoZW1lcy9iYXNlL2NvcmUuY3NzXG4vLz4+Y3NzLnN0cnVjdHVyZTogLi4vLi4vdGhlbWVzL2Jhc2UvZGF0ZXBpY2tlci5jc3Ncbi8vPj5jc3MudGhlbWU6IC4uLy4uL3RoZW1lcy9iYXNlL3RoZW1lLmNzc1xuXG5cblxuJC5leHRlbmQoICQudWksIHsgZGF0ZXBpY2tlcjogeyB2ZXJzaW9uOiBcIjEuMTIuMVwiIH0gfSApO1xuXG52YXIgZGF0ZXBpY2tlcl9pbnN0QWN0aXZlO1xuXG5mdW5jdGlvbiBkYXRlcGlja2VyX2dldFppbmRleCggZWxlbSApIHtcblx0dmFyIHBvc2l0aW9uLCB2YWx1ZTtcblx0d2hpbGUgKCBlbGVtLmxlbmd0aCAmJiBlbGVtWyAwIF0gIT09IGRvY3VtZW50ICkge1xuXG5cdFx0Ly8gSWdub3JlIHotaW5kZXggaWYgcG9zaXRpb24gaXMgc2V0IHRvIGEgdmFsdWUgd2hlcmUgei1pbmRleCBpcyBpZ25vcmVkIGJ5IHRoZSBicm93c2VyXG5cdFx0Ly8gVGhpcyBtYWtlcyBiZWhhdmlvciBvZiB0aGlzIGZ1bmN0aW9uIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzXG5cdFx0Ly8gV2ViS2l0IGFsd2F5cyByZXR1cm5zIGF1dG8gaWYgdGhlIGVsZW1lbnQgaXMgcG9zaXRpb25lZFxuXHRcdHBvc2l0aW9uID0gZWxlbS5jc3MoIFwicG9zaXRpb25cIiApO1xuXHRcdGlmICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJyZWxhdGl2ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSB7XG5cblx0XHRcdC8vIElFIHJldHVybnMgMCB3aGVuIHpJbmRleCBpcyBub3Qgc3BlY2lmaWVkXG5cdFx0XHQvLyBvdGhlciBicm93c2VycyByZXR1cm4gYSBzdHJpbmdcblx0XHRcdC8vIHdlIGlnbm9yZSB0aGUgY2FzZSBvZiBuZXN0ZWQgZWxlbWVudHMgd2l0aCBhbiBleHBsaWNpdCB2YWx1ZSBvZiAwXG5cdFx0XHQvLyA8ZGl2IHN0eWxlPVwiei1pbmRleDogLTEwO1wiPjxkaXYgc3R5bGU9XCJ6LWluZGV4OiAwO1wiPjwvZGl2PjwvZGl2PlxuXHRcdFx0dmFsdWUgPSBwYXJzZUludCggZWxlbS5jc3MoIFwiekluZGV4XCIgKSwgMTAgKTtcblx0XHRcdGlmICggIWlzTmFOKCB2YWx1ZSApICYmIHZhbHVlICE9PSAwICkge1xuXHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsZW0gPSBlbGVtLnBhcmVudCgpO1xuXHR9XG5cblx0cmV0dXJuIDA7XG59XG4vKiBEYXRlIHBpY2tlciBtYW5hZ2VyLlxuICAgVXNlIHRoZSBzaW5nbGV0b24gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcywgJC5kYXRlcGlja2VyLCB0byBpbnRlcmFjdCB3aXRoIHRoZSBkYXRlIHBpY2tlci5cbiAgIFNldHRpbmdzIGZvciAoZ3JvdXBzIG9mKSBkYXRlIHBpY2tlcnMgYXJlIG1haW50YWluZWQgaW4gYW4gaW5zdGFuY2Ugb2JqZWN0LFxuICAgYWxsb3dpbmcgbXVsdGlwbGUgZGlmZmVyZW50IHNldHRpbmdzIG9uIHRoZSBzYW1lIHBhZ2UuICovXG5cbmZ1bmN0aW9uIERhdGVwaWNrZXIoKSB7XG5cdHRoaXMuX2N1ckluc3QgPSBudWxsOyAvLyBUaGUgY3VycmVudCBpbnN0YW5jZSBpbiB1c2Vcblx0dGhpcy5fa2V5RXZlbnQgPSBmYWxzZTsgLy8gSWYgdGhlIGxhc3QgZXZlbnQgd2FzIGEga2V5IGV2ZW50XG5cdHRoaXMuX2Rpc2FibGVkSW5wdXRzID0gW107IC8vIExpc3Qgb2YgZGF0ZSBwaWNrZXIgaW5wdXRzIHRoYXQgaGF2ZSBiZWVuIGRpc2FibGVkXG5cdHRoaXMuX2RhdGVwaWNrZXJTaG93aW5nID0gZmFsc2U7IC8vIFRydWUgaWYgdGhlIHBvcHVwIHBpY2tlciBpcyBzaG93aW5nICwgZmFsc2UgaWYgbm90XG5cdHRoaXMuX2luRGlhbG9nID0gZmFsc2U7IC8vIFRydWUgaWYgc2hvd2luZyB3aXRoaW4gYSBcImRpYWxvZ1wiLCBmYWxzZSBpZiBub3Rcblx0dGhpcy5fbWFpbkRpdklkID0gXCJ1aS1kYXRlcGlja2VyLWRpdlwiOyAvLyBUaGUgSUQgb2YgdGhlIG1haW4gZGF0ZXBpY2tlciBkaXZpc2lvblxuXHR0aGlzLl9pbmxpbmVDbGFzcyA9IFwidWktZGF0ZXBpY2tlci1pbmxpbmVcIjsgLy8gVGhlIG5hbWUgb2YgdGhlIGlubGluZSBtYXJrZXIgY2xhc3Ncblx0dGhpcy5fYXBwZW5kQ2xhc3MgPSBcInVpLWRhdGVwaWNrZXItYXBwZW5kXCI7IC8vIFRoZSBuYW1lIG9mIHRoZSBhcHBlbmQgbWFya2VyIGNsYXNzXG5cdHRoaXMuX3RyaWdnZXJDbGFzcyA9IFwidWktZGF0ZXBpY2tlci10cmlnZ2VyXCI7IC8vIFRoZSBuYW1lIG9mIHRoZSB0cmlnZ2VyIG1hcmtlciBjbGFzc1xuXHR0aGlzLl9kaWFsb2dDbGFzcyA9IFwidWktZGF0ZXBpY2tlci1kaWFsb2dcIjsgLy8gVGhlIG5hbWUgb2YgdGhlIGRpYWxvZyBtYXJrZXIgY2xhc3Ncblx0dGhpcy5fZGlzYWJsZUNsYXNzID0gXCJ1aS1kYXRlcGlja2VyLWRpc2FibGVkXCI7IC8vIFRoZSBuYW1lIG9mIHRoZSBkaXNhYmxlZCBjb3ZlcmluZyBtYXJrZXIgY2xhc3Ncblx0dGhpcy5fdW5zZWxlY3RhYmxlQ2xhc3MgPSBcInVpLWRhdGVwaWNrZXItdW5zZWxlY3RhYmxlXCI7IC8vIFRoZSBuYW1lIG9mIHRoZSB1bnNlbGVjdGFibGUgY2VsbCBtYXJrZXIgY2xhc3Ncblx0dGhpcy5fY3VycmVudENsYXNzID0gXCJ1aS1kYXRlcGlja2VyLWN1cnJlbnQtZGF5XCI7IC8vIFRoZSBuYW1lIG9mIHRoZSBjdXJyZW50IGRheSBtYXJrZXIgY2xhc3Ncblx0dGhpcy5fZGF5T3ZlckNsYXNzID0gXCJ1aS1kYXRlcGlja2VyLWRheXMtY2VsbC1vdmVyXCI7IC8vIFRoZSBuYW1lIG9mIHRoZSBkYXkgaG92ZXIgbWFya2VyIGNsYXNzXG5cdHRoaXMucmVnaW9uYWwgPSBbXTsgLy8gQXZhaWxhYmxlIHJlZ2lvbmFsIHNldHRpbmdzLCBpbmRleGVkIGJ5IGxhbmd1YWdlIGNvZGVcblx0dGhpcy5yZWdpb25hbFsgXCJcIiBdID0geyAvLyBEZWZhdWx0IHJlZ2lvbmFsIHNldHRpbmdzXG5cdFx0Y2xvc2VUZXh0OiBcIkRvbmVcIiwgLy8gRGlzcGxheSB0ZXh0IGZvciBjbG9zZSBsaW5rXG5cdFx0cHJldlRleHQ6IFwiUHJldlwiLCAvLyBEaXNwbGF5IHRleHQgZm9yIHByZXZpb3VzIG1vbnRoIGxpbmtcblx0XHRuZXh0VGV4dDogXCJOZXh0XCIsIC8vIERpc3BsYXkgdGV4dCBmb3IgbmV4dCBtb250aCBsaW5rXG5cdFx0Y3VycmVudFRleHQ6IFwiVG9kYXlcIiwgLy8gRGlzcGxheSB0ZXh0IGZvciBjdXJyZW50IG1vbnRoIGxpbmtcblx0XHRtb250aE5hbWVzOiBbIFwiSmFudWFyeVwiLFwiRmVicnVhcnlcIixcIk1hcmNoXCIsXCJBcHJpbFwiLFwiTWF5XCIsXCJKdW5lXCIsXG5cdFx0XHRcIkp1bHlcIixcIkF1Z3VzdFwiLFwiU2VwdGVtYmVyXCIsXCJPY3RvYmVyXCIsXCJOb3ZlbWJlclwiLFwiRGVjZW1iZXJcIiBdLCAvLyBOYW1lcyBvZiBtb250aHMgZm9yIGRyb3AtZG93biBhbmQgZm9ybWF0dGluZ1xuXHRcdG1vbnRoTmFtZXNTaG9ydDogWyBcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiIF0sIC8vIEZvciBmb3JtYXR0aW5nXG5cdFx0ZGF5TmFtZXM6IFsgXCJTdW5kYXlcIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiIF0sIC8vIEZvciBmb3JtYXR0aW5nXG5cdFx0ZGF5TmFtZXNTaG9ydDogWyBcIlN1blwiLCBcIk1vblwiLCBcIlR1ZVwiLCBcIldlZFwiLCBcIlRodVwiLCBcIkZyaVwiLCBcIlNhdFwiIF0sIC8vIEZvciBmb3JtYXR0aW5nXG5cdFx0ZGF5TmFtZXNNaW46IFsgXCJTdVwiLFwiTW9cIixcIlR1XCIsXCJXZVwiLFwiVGhcIixcIkZyXCIsXCJTYVwiIF0sIC8vIENvbHVtbiBoZWFkaW5ncyBmb3IgZGF5cyBzdGFydGluZyBhdCBTdW5kYXlcblx0XHR3ZWVrSGVhZGVyOiBcIldrXCIsIC8vIENvbHVtbiBoZWFkZXIgZm9yIHdlZWsgb2YgdGhlIHllYXJcblx0XHRkYXRlRm9ybWF0OiBcIm1tL2RkL3l5XCIsIC8vIFNlZSBmb3JtYXQgb3B0aW9ucyBvbiBwYXJzZURhdGVcblx0XHRmaXJzdERheTogMCwgLy8gVGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlaywgU3VuID0gMCwgTW9uID0gMSwgLi4uXG5cdFx0aXNSVEw6IGZhbHNlLCAvLyBUcnVlIGlmIHJpZ2h0LXRvLWxlZnQgbGFuZ3VhZ2UsIGZhbHNlIGlmIGxlZnQtdG8tcmlnaHRcblx0XHRzaG93TW9udGhBZnRlclllYXI6IGZhbHNlLCAvLyBUcnVlIGlmIHRoZSB5ZWFyIHNlbGVjdCBwcmVjZWRlcyBtb250aCwgZmFsc2UgZm9yIG1vbnRoIHRoZW4geWVhclxuXHRcdHllYXJTdWZmaXg6IFwiXCIgLy8gQWRkaXRpb25hbCB0ZXh0IHRvIGFwcGVuZCB0byB0aGUgeWVhciBpbiB0aGUgbW9udGggaGVhZGVyc1xuXHR9O1xuXHR0aGlzLl9kZWZhdWx0cyA9IHsgLy8gR2xvYmFsIGRlZmF1bHRzIGZvciBhbGwgdGhlIGRhdGUgcGlja2VyIGluc3RhbmNlc1xuXHRcdHNob3dPbjogXCJmb2N1c1wiLCAvLyBcImZvY3VzXCIgZm9yIHBvcHVwIG9uIGZvY3VzLFxuXHRcdFx0Ly8gXCJidXR0b25cIiBmb3IgdHJpZ2dlciBidXR0b24sIG9yIFwiYm90aFwiIGZvciBlaXRoZXJcblx0XHRzaG93QW5pbTogXCJmYWRlSW5cIiwgLy8gTmFtZSBvZiBqUXVlcnkgYW5pbWF0aW9uIGZvciBwb3B1cFxuXHRcdHNob3dPcHRpb25zOiB7fSwgLy8gT3B0aW9ucyBmb3IgZW5oYW5jZWQgYW5pbWF0aW9uc1xuXHRcdGRlZmF1bHREYXRlOiBudWxsLCAvLyBVc2VkIHdoZW4gZmllbGQgaXMgYmxhbms6IGFjdHVhbCBkYXRlLFxuXHRcdFx0Ly8gKy8tbnVtYmVyIGZvciBvZmZzZXQgZnJvbSB0b2RheSwgbnVsbCBmb3IgdG9kYXlcblx0XHRhcHBlbmRUZXh0OiBcIlwiLCAvLyBEaXNwbGF5IHRleHQgZm9sbG93aW5nIHRoZSBpbnB1dCBib3gsIGUuZy4gc2hvd2luZyB0aGUgZm9ybWF0XG5cdFx0YnV0dG9uVGV4dDogXCIuLi5cIiwgLy8gVGV4dCBmb3IgdHJpZ2dlciBidXR0b25cblx0XHRidXR0b25JbWFnZTogXCJcIiwgLy8gVVJMIGZvciB0cmlnZ2VyIGJ1dHRvbiBpbWFnZVxuXHRcdGJ1dHRvbkltYWdlT25seTogZmFsc2UsIC8vIFRydWUgaWYgdGhlIGltYWdlIGFwcGVhcnMgYWxvbmUsIGZhbHNlIGlmIGl0IGFwcGVhcnMgb24gYSBidXR0b25cblx0XHRoaWRlSWZOb1ByZXZOZXh0OiBmYWxzZSwgLy8gVHJ1ZSB0byBoaWRlIG5leHQvcHJldmlvdXMgbW9udGggbGlua3Ncblx0XHRcdC8vIGlmIG5vdCBhcHBsaWNhYmxlLCBmYWxzZSB0byBqdXN0IGRpc2FibGUgdGhlbVxuXHRcdG5hdmlnYXRpb25Bc0RhdGVGb3JtYXQ6IGZhbHNlLCAvLyBUcnVlIGlmIGRhdGUgZm9ybWF0dGluZyBhcHBsaWVkIHRvIHByZXYvdG9kYXkvbmV4dCBsaW5rc1xuXHRcdGdvdG9DdXJyZW50OiBmYWxzZSwgLy8gVHJ1ZSBpZiB0b2RheSBsaW5rIGdvZXMgYmFjayB0byBjdXJyZW50IHNlbGVjdGlvbiBpbnN0ZWFkXG5cdFx0Y2hhbmdlTW9udGg6IGZhbHNlLCAvLyBUcnVlIGlmIG1vbnRoIGNhbiBiZSBzZWxlY3RlZCBkaXJlY3RseSwgZmFsc2UgaWYgb25seSBwcmV2L25leHRcblx0XHRjaGFuZ2VZZWFyOiBmYWxzZSwgLy8gVHJ1ZSBpZiB5ZWFyIGNhbiBiZSBzZWxlY3RlZCBkaXJlY3RseSwgZmFsc2UgaWYgb25seSBwcmV2L25leHRcblx0XHR5ZWFyUmFuZ2U6IFwiYy0xMDpjKzEwXCIsIC8vIFJhbmdlIG9mIHllYXJzIHRvIGRpc3BsYXkgaW4gZHJvcC1kb3duLFxuXHRcdFx0Ly8gZWl0aGVyIHJlbGF0aXZlIHRvIHRvZGF5J3MgeWVhciAoLW5uOitubiksIHJlbGF0aXZlIHRvIGN1cnJlbnRseSBkaXNwbGF5ZWQgeWVhclxuXHRcdFx0Ly8gKGMtbm46YytubiksIGFic29sdXRlIChubm5uOm5ubm4pLCBvciBhIGNvbWJpbmF0aW9uIG9mIHRoZSBhYm92ZSAobm5ubjotbilcblx0XHRzaG93T3RoZXJNb250aHM6IGZhbHNlLCAvLyBUcnVlIHRvIHNob3cgZGF0ZXMgaW4gb3RoZXIgbW9udGhzLCBmYWxzZSB0byBsZWF2ZSBibGFua1xuXHRcdHNlbGVjdE90aGVyTW9udGhzOiBmYWxzZSwgLy8gVHJ1ZSB0byBhbGxvdyBzZWxlY3Rpb24gb2YgZGF0ZXMgaW4gb3RoZXIgbW9udGhzLCBmYWxzZSBmb3IgdW5zZWxlY3RhYmxlXG5cdFx0c2hvd1dlZWs6IGZhbHNlLCAvLyBUcnVlIHRvIHNob3cgd2VlayBvZiB0aGUgeWVhciwgZmFsc2UgdG8gbm90IHNob3cgaXRcblx0XHRjYWxjdWxhdGVXZWVrOiB0aGlzLmlzbzg2MDFXZWVrLCAvLyBIb3cgdG8gY2FsY3VsYXRlIHRoZSB3ZWVrIG9mIHRoZSB5ZWFyLFxuXHRcdFx0Ly8gdGFrZXMgYSBEYXRlIGFuZCByZXR1cm5zIHRoZSBudW1iZXIgb2YgdGhlIHdlZWsgZm9yIGl0XG5cdFx0c2hvcnRZZWFyQ3V0b2ZmOiBcIisxMFwiLCAvLyBTaG9ydCB5ZWFyIHZhbHVlcyA8IHRoaXMgYXJlIGluIHRoZSBjdXJyZW50IGNlbnR1cnksXG5cdFx0XHQvLyA+IHRoaXMgYXJlIGluIHRoZSBwcmV2aW91cyBjZW50dXJ5LFxuXHRcdFx0Ly8gc3RyaW5nIHZhbHVlIHN0YXJ0aW5nIHdpdGggXCIrXCIgZm9yIGN1cnJlbnQgeWVhciArIHZhbHVlXG5cdFx0bWluRGF0ZTogbnVsbCwgLy8gVGhlIGVhcmxpZXN0IHNlbGVjdGFibGUgZGF0ZSwgb3IgbnVsbCBmb3Igbm8gbGltaXRcblx0XHRtYXhEYXRlOiBudWxsLCAvLyBUaGUgbGF0ZXN0IHNlbGVjdGFibGUgZGF0ZSwgb3IgbnVsbCBmb3Igbm8gbGltaXRcblx0XHRkdXJhdGlvbjogXCJmYXN0XCIsIC8vIER1cmF0aW9uIG9mIGRpc3BsYXkvY2xvc3VyZVxuXHRcdGJlZm9yZVNob3dEYXk6IG51bGwsIC8vIEZ1bmN0aW9uIHRoYXQgdGFrZXMgYSBkYXRlIGFuZCByZXR1cm5zIGFuIGFycmF5IHdpdGhcblx0XHRcdC8vIFswXSA9IHRydWUgaWYgc2VsZWN0YWJsZSwgZmFsc2UgaWYgbm90LCBbMV0gPSBjdXN0b20gQ1NTIGNsYXNzIG5hbWUocykgb3IgXCJcIixcblx0XHRcdC8vIFsyXSA9IGNlbGwgdGl0bGUgKG9wdGlvbmFsKSwgZS5nLiAkLmRhdGVwaWNrZXIubm9XZWVrZW5kc1xuXHRcdGJlZm9yZVNob3c6IG51bGwsIC8vIEZ1bmN0aW9uIHRoYXQgdGFrZXMgYW4gaW5wdXQgZmllbGQgYW5kXG5cdFx0XHQvLyByZXR1cm5zIGEgc2V0IG9mIGN1c3RvbSBzZXR0aW5ncyBmb3IgdGhlIGRhdGUgcGlja2VyXG5cdFx0b25TZWxlY3Q6IG51bGwsIC8vIERlZmluZSBhIGNhbGxiYWNrIGZ1bmN0aW9uIHdoZW4gYSBkYXRlIGlzIHNlbGVjdGVkXG5cdFx0b25DaGFuZ2VNb250aFllYXI6IG51bGwsIC8vIERlZmluZSBhIGNhbGxiYWNrIGZ1bmN0aW9uIHdoZW4gdGhlIG1vbnRoIG9yIHllYXIgaXMgY2hhbmdlZFxuXHRcdG9uQ2xvc2U6IG51bGwsIC8vIERlZmluZSBhIGNhbGxiYWNrIGZ1bmN0aW9uIHdoZW4gdGhlIGRhdGVwaWNrZXIgaXMgY2xvc2VkXG5cdFx0bnVtYmVyT2ZNb250aHM6IDEsIC8vIE51bWJlciBvZiBtb250aHMgdG8gc2hvdyBhdCBhIHRpbWVcblx0XHRzaG93Q3VycmVudEF0UG9zOiAwLCAvLyBUaGUgcG9zaXRpb24gaW4gbXVsdGlwZSBtb250aHMgYXQgd2hpY2ggdG8gc2hvdyB0aGUgY3VycmVudCBtb250aCAoc3RhcnRpbmcgYXQgMClcblx0XHRzdGVwTW9udGhzOiAxLCAvLyBOdW1iZXIgb2YgbW9udGhzIHRvIHN0ZXAgYmFjay9mb3J3YXJkXG5cdFx0c3RlcEJpZ01vbnRoczogMTIsIC8vIE51bWJlciBvZiBtb250aHMgdG8gc3RlcCBiYWNrL2ZvcndhcmQgZm9yIHRoZSBiaWcgbGlua3Ncblx0XHRhbHRGaWVsZDogXCJcIiwgLy8gU2VsZWN0b3IgZm9yIGFuIGFsdGVybmF0ZSBmaWVsZCB0byBzdG9yZSBzZWxlY3RlZCBkYXRlcyBpbnRvXG5cdFx0YWx0Rm9ybWF0OiBcIlwiLCAvLyBUaGUgZGF0ZSBmb3JtYXQgdG8gdXNlIGZvciB0aGUgYWx0ZXJuYXRlIGZpZWxkXG5cdFx0Y29uc3RyYWluSW5wdXQ6IHRydWUsIC8vIFRoZSBpbnB1dCBpcyBjb25zdHJhaW5lZCBieSB0aGUgY3VycmVudCBkYXRlIGZvcm1hdFxuXHRcdHNob3dCdXR0b25QYW5lbDogZmFsc2UsIC8vIFRydWUgdG8gc2hvdyBidXR0b24gcGFuZWwsIGZhbHNlIHRvIG5vdCBzaG93IGl0XG5cdFx0YXV0b1NpemU6IGZhbHNlLCAvLyBUcnVlIHRvIHNpemUgdGhlIGlucHV0IGZvciB0aGUgZGF0ZSBmb3JtYXQsIGZhbHNlIHRvIGxlYXZlIGFzIGlzXG5cdFx0ZGlzYWJsZWQ6IGZhbHNlIC8vIFRoZSBpbml0aWFsIGRpc2FibGVkIHN0YXRlXG5cdH07XG5cdCQuZXh0ZW5kKCB0aGlzLl9kZWZhdWx0cywgdGhpcy5yZWdpb25hbFsgXCJcIiBdICk7XG5cdHRoaXMucmVnaW9uYWwuZW4gPSAkLmV4dGVuZCggdHJ1ZSwge30sIHRoaXMucmVnaW9uYWxbIFwiXCIgXSApO1xuXHR0aGlzLnJlZ2lvbmFsWyBcImVuLVVTXCIgXSA9ICQuZXh0ZW5kKCB0cnVlLCB7fSwgdGhpcy5yZWdpb25hbC5lbiApO1xuXHR0aGlzLmRwRGl2ID0gZGF0ZXBpY2tlcl9iaW5kSG92ZXIoICQoIFwiPGRpdiBpZD0nXCIgKyB0aGlzLl9tYWluRGl2SWQgKyBcIicgY2xhc3M9J3VpLWRhdGVwaWNrZXIgdWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWhlbHBlci1jbGVhcmZpeCB1aS1jb3JuZXItYWxsJz48L2Rpdj5cIiApICk7XG59XG5cbiQuZXh0ZW5kKCBEYXRlcGlja2VyLnByb3RvdHlwZSwge1xuXHQvKiBDbGFzcyBuYW1lIGFkZGVkIHRvIGVsZW1lbnRzIHRvIGluZGljYXRlIGFscmVhZHkgY29uZmlndXJlZCB3aXRoIGEgZGF0ZSBwaWNrZXIuICovXG5cdG1hcmtlckNsYXNzTmFtZTogXCJoYXNEYXRlcGlja2VyXCIsXG5cblx0Ly9LZWVwIHRyYWNrIG9mIHRoZSBtYXhpbXVtIG51bWJlciBvZiByb3dzIGRpc3BsYXllZCAoc2VlICM3MDQzKVxuXHRtYXhSb3dzOiA0LFxuXG5cdC8vIFRPRE8gcmVuYW1lIHRvIFwid2lkZ2V0XCIgd2hlbiBzd2l0Y2hpbmcgdG8gd2lkZ2V0IGZhY3Rvcnlcblx0X3dpZGdldERhdGVwaWNrZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmRwRGl2O1xuXHR9LFxuXG5cdC8qIE92ZXJyaWRlIHRoZSBkZWZhdWx0IHNldHRpbmdzIGZvciBhbGwgaW5zdGFuY2VzIG9mIHRoZSBkYXRlIHBpY2tlci5cblx0ICogQHBhcmFtICBzZXR0aW5ncyAgb2JqZWN0IC0gdGhlIG5ldyBzZXR0aW5ncyB0byB1c2UgYXMgZGVmYXVsdHMgKGFub255bW91cyBvYmplY3QpXG5cdCAqIEByZXR1cm4gdGhlIG1hbmFnZXIgb2JqZWN0XG5cdCAqL1xuXHRzZXREZWZhdWx0czogZnVuY3Rpb24oIHNldHRpbmdzICkge1xuXHRcdGRhdGVwaWNrZXJfZXh0ZW5kUmVtb3ZlKCB0aGlzLl9kZWZhdWx0cywgc2V0dGluZ3MgfHwge30gKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHQvKiBBdHRhY2ggdGhlIGRhdGUgcGlja2VyIHRvIGEgalF1ZXJ5IHNlbGVjdGlvbi5cblx0ICogQHBhcmFtICB0YXJnZXRcdGVsZW1lbnQgLSB0aGUgdGFyZ2V0IGlucHV0IGZpZWxkIG9yIGRpdmlzaW9uIG9yIHNwYW5cblx0ICogQHBhcmFtICBzZXR0aW5ncyAgb2JqZWN0IC0gdGhlIG5ldyBzZXR0aW5ncyB0byB1c2UgZm9yIHRoaXMgZGF0ZSBwaWNrZXIgaW5zdGFuY2UgKGFub255bW91cylcblx0ICovXG5cdF9hdHRhY2hEYXRlcGlja2VyOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHR2YXIgbm9kZU5hbWUsIGlubGluZSwgaW5zdDtcblx0XHRub2RlTmFtZSA9IHRhcmdldC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdGlubGluZSA9ICggbm9kZU5hbWUgPT09IFwiZGl2XCIgfHwgbm9kZU5hbWUgPT09IFwic3BhblwiICk7XG5cdFx0aWYgKCAhdGFyZ2V0LmlkICkge1xuXHRcdFx0dGhpcy51dWlkICs9IDE7XG5cdFx0XHR0YXJnZXQuaWQgPSBcImRwXCIgKyB0aGlzLnV1aWQ7XG5cdFx0fVxuXHRcdGluc3QgPSB0aGlzLl9uZXdJbnN0KCAkKCB0YXJnZXQgKSwgaW5saW5lICk7XG5cdFx0aW5zdC5zZXR0aW5ncyA9ICQuZXh0ZW5kKCB7fSwgc2V0dGluZ3MgfHwge30gKTtcblx0XHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHR0aGlzLl9jb25uZWN0RGF0ZXBpY2tlciggdGFyZ2V0LCBpbnN0ICk7XG5cdFx0fSBlbHNlIGlmICggaW5saW5lICkge1xuXHRcdFx0dGhpcy5faW5saW5lRGF0ZXBpY2tlciggdGFyZ2V0LCBpbnN0ICk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvYmplY3QuICovXG5cdF9uZXdJbnN0OiBmdW5jdGlvbiggdGFyZ2V0LCBpbmxpbmUgKSB7XG5cdFx0dmFyIGlkID0gdGFyZ2V0WyAwIF0uaWQucmVwbGFjZSggLyhbXkEtWmEtejAtOV9cXC1dKS9nLCBcIlxcXFxcXFxcJDFcIiApOyAvLyBlc2NhcGUgalF1ZXJ5IG1ldGEgY2hhcnNcblx0XHRyZXR1cm4geyBpZDogaWQsIGlucHV0OiB0YXJnZXQsIC8vIGFzc29jaWF0ZWQgdGFyZ2V0XG5cdFx0XHRzZWxlY3RlZERheTogMCwgc2VsZWN0ZWRNb250aDogMCwgc2VsZWN0ZWRZZWFyOiAwLCAvLyBjdXJyZW50IHNlbGVjdGlvblxuXHRcdFx0ZHJhd01vbnRoOiAwLCBkcmF3WWVhcjogMCwgLy8gbW9udGggYmVpbmcgZHJhd25cblx0XHRcdGlubGluZTogaW5saW5lLCAvLyBpcyBkYXRlcGlja2VyIGlubGluZSBvciBub3Rcblx0XHRcdGRwRGl2OiAoICFpbmxpbmUgPyB0aGlzLmRwRGl2IDogLy8gcHJlc2VudGF0aW9uIGRpdlxuXHRcdFx0ZGF0ZXBpY2tlcl9iaW5kSG92ZXIoICQoIFwiPGRpdiBjbGFzcz0nXCIgKyB0aGlzLl9pbmxpbmVDbGFzcyArIFwiIHVpLWRhdGVwaWNrZXIgdWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWhlbHBlci1jbGVhcmZpeCB1aS1jb3JuZXItYWxsJz48L2Rpdj5cIiApICkgKSB9O1xuXHR9LFxuXG5cdC8qIEF0dGFjaCB0aGUgZGF0ZSBwaWNrZXIgdG8gYW4gaW5wdXQgZmllbGQuICovXG5cdF9jb25uZWN0RGF0ZXBpY2tlcjogZnVuY3Rpb24oIHRhcmdldCwgaW5zdCApIHtcblx0XHR2YXIgaW5wdXQgPSAkKCB0YXJnZXQgKTtcblx0XHRpbnN0LmFwcGVuZCA9ICQoIFtdICk7XG5cdFx0aW5zdC50cmlnZ2VyID0gJCggW10gKTtcblx0XHRpZiAoIGlucHV0Lmhhc0NsYXNzKCB0aGlzLm1hcmtlckNsYXNzTmFtZSApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHR0aGlzLl9hdHRhY2htZW50cyggaW5wdXQsIGluc3QgKTtcblx0XHRpbnB1dC5hZGRDbGFzcyggdGhpcy5tYXJrZXJDbGFzc05hbWUgKS5vbiggXCJrZXlkb3duXCIsIHRoaXMuX2RvS2V5RG93biApLlxuXHRcdFx0b24oIFwia2V5cHJlc3NcIiwgdGhpcy5fZG9LZXlQcmVzcyApLm9uKCBcImtleXVwXCIsIHRoaXMuX2RvS2V5VXAgKTtcblx0XHR0aGlzLl9hdXRvU2l6ZSggaW5zdCApO1xuXHRcdCQuZGF0YSggdGFyZ2V0LCBcImRhdGVwaWNrZXJcIiwgaW5zdCApO1xuXG5cdFx0Ly9JZiBkaXNhYmxlZCBvcHRpb24gaXMgdHJ1ZSwgZGlzYWJsZSB0aGUgZGF0ZXBpY2tlciBvbmNlIGl0IGhhcyBiZWVuIGF0dGFjaGVkIHRvIHRoZSBpbnB1dCAoc2VlIHRpY2tldCAjNTY2NSlcblx0XHRpZiAoIGluc3Quc2V0dGluZ3MuZGlzYWJsZWQgKSB7XG5cdFx0XHR0aGlzLl9kaXNhYmxlRGF0ZXBpY2tlciggdGFyZ2V0ICk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qIE1ha2UgYXR0YWNobWVudHMgYmFzZWQgb24gc2V0dGluZ3MuICovXG5cdF9hdHRhY2htZW50czogZnVuY3Rpb24oIGlucHV0LCBpbnN0ICkge1xuXHRcdHZhciBzaG93T24sIGJ1dHRvblRleHQsIGJ1dHRvbkltYWdlLFxuXHRcdFx0YXBwZW5kVGV4dCA9IHRoaXMuX2dldCggaW5zdCwgXCJhcHBlbmRUZXh0XCIgKSxcblx0XHRcdGlzUlRMID0gdGhpcy5fZ2V0KCBpbnN0LCBcImlzUlRMXCIgKTtcblxuXHRcdGlmICggaW5zdC5hcHBlbmQgKSB7XG5cdFx0XHRpbnN0LmFwcGVuZC5yZW1vdmUoKTtcblx0XHR9XG5cdFx0aWYgKCBhcHBlbmRUZXh0ICkge1xuXHRcdFx0aW5zdC5hcHBlbmQgPSAkKCBcIjxzcGFuIGNsYXNzPSdcIiArIHRoaXMuX2FwcGVuZENsYXNzICsgXCInPlwiICsgYXBwZW5kVGV4dCArIFwiPC9zcGFuPlwiICk7XG5cdFx0XHRpbnB1dFsgaXNSVEwgPyBcImJlZm9yZVwiIDogXCJhZnRlclwiIF0oIGluc3QuYXBwZW5kICk7XG5cdFx0fVxuXG5cdFx0aW5wdXQub2ZmKCBcImZvY3VzXCIsIHRoaXMuX3Nob3dEYXRlcGlja2VyICk7XG5cblx0XHRpZiAoIGluc3QudHJpZ2dlciApIHtcblx0XHRcdGluc3QudHJpZ2dlci5yZW1vdmUoKTtcblx0XHR9XG5cblx0XHRzaG93T24gPSB0aGlzLl9nZXQoIGluc3QsIFwic2hvd09uXCIgKTtcblx0XHRpZiAoIHNob3dPbiA9PT0gXCJmb2N1c1wiIHx8IHNob3dPbiA9PT0gXCJib3RoXCIgKSB7IC8vIHBvcC11cCBkYXRlIHBpY2tlciB3aGVuIGluIHRoZSBtYXJrZWQgZmllbGRcblx0XHRcdGlucHV0Lm9uKCBcImZvY3VzXCIsIHRoaXMuX3Nob3dEYXRlcGlja2VyICk7XG5cdFx0fVxuXHRcdGlmICggc2hvd09uID09PSBcImJ1dHRvblwiIHx8IHNob3dPbiA9PT0gXCJib3RoXCIgKSB7IC8vIHBvcC11cCBkYXRlIHBpY2tlciB3aGVuIGJ1dHRvbiBjbGlja2VkXG5cdFx0XHRidXR0b25UZXh0ID0gdGhpcy5fZ2V0KCBpbnN0LCBcImJ1dHRvblRleHRcIiApO1xuXHRcdFx0YnV0dG9uSW1hZ2UgPSB0aGlzLl9nZXQoIGluc3QsIFwiYnV0dG9uSW1hZ2VcIiApO1xuXHRcdFx0aW5zdC50cmlnZ2VyID0gJCggdGhpcy5fZ2V0KCBpbnN0LCBcImJ1dHRvbkltYWdlT25seVwiICkgP1xuXHRcdFx0XHQkKCBcIjxpbWcvPlwiICkuYWRkQ2xhc3MoIHRoaXMuX3RyaWdnZXJDbGFzcyApLlxuXHRcdFx0XHRcdGF0dHIoIHsgc3JjOiBidXR0b25JbWFnZSwgYWx0OiBidXR0b25UZXh0LCB0aXRsZTogYnV0dG9uVGV4dCB9ICkgOlxuXHRcdFx0XHQkKCBcIjxidXR0b24gdHlwZT0nYnV0dG9uJz48L2J1dHRvbj5cIiApLmFkZENsYXNzKCB0aGlzLl90cmlnZ2VyQ2xhc3MgKS5cblx0XHRcdFx0XHRodG1sKCAhYnV0dG9uSW1hZ2UgPyBidXR0b25UZXh0IDogJCggXCI8aW1nLz5cIiApLmF0dHIoXG5cdFx0XHRcdFx0eyBzcmM6YnV0dG9uSW1hZ2UsIGFsdDpidXR0b25UZXh0LCB0aXRsZTpidXR0b25UZXh0IH0gKSApICk7XG5cdFx0XHRpbnB1dFsgaXNSVEwgPyBcImJlZm9yZVwiIDogXCJhZnRlclwiIF0oIGluc3QudHJpZ2dlciApO1xuXHRcdFx0aW5zdC50cmlnZ2VyLm9uKCBcImNsaWNrXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICQuZGF0ZXBpY2tlci5fZGF0ZXBpY2tlclNob3dpbmcgJiYgJC5kYXRlcGlja2VyLl9sYXN0SW5wdXQgPT09IGlucHV0WyAwIF0gKSB7XG5cdFx0XHRcdFx0JC5kYXRlcGlja2VyLl9oaWRlRGF0ZXBpY2tlcigpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKCAkLmRhdGVwaWNrZXIuX2RhdGVwaWNrZXJTaG93aW5nICYmICQuZGF0ZXBpY2tlci5fbGFzdElucHV0ICE9PSBpbnB1dFsgMCBdICkge1xuXHRcdFx0XHRcdCQuZGF0ZXBpY2tlci5faGlkZURhdGVwaWNrZXIoKTtcblx0XHRcdFx0XHQkLmRhdGVwaWNrZXIuX3Nob3dEYXRlcGlja2VyKCBpbnB1dFsgMCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0JC5kYXRlcGlja2VyLl9zaG93RGF0ZXBpY2tlciggaW5wdXRbIDAgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gKTtcblx0XHR9XG5cdH0sXG5cblx0LyogQXBwbHkgdGhlIG1heGltdW0gbGVuZ3RoIGZvciB0aGUgZGF0ZSBmb3JtYXQuICovXG5cdF9hdXRvU2l6ZTogZnVuY3Rpb24oIGluc3QgKSB7XG5cdFx0aWYgKCB0aGlzLl9nZXQoIGluc3QsIFwiYXV0b1NpemVcIiApICYmICFpbnN0LmlubGluZSApIHtcblx0XHRcdHZhciBmaW5kTWF4LCBtYXgsIG1heEksIGksXG5cdFx0XHRcdGRhdGUgPSBuZXcgRGF0ZSggMjAwOSwgMTIgLSAxLCAyMCApLCAvLyBFbnN1cmUgZG91YmxlIGRpZ2l0c1xuXHRcdFx0XHRkYXRlRm9ybWF0ID0gdGhpcy5fZ2V0KCBpbnN0LCBcImRhdGVGb3JtYXRcIiApO1xuXG5cdFx0XHRpZiAoIGRhdGVGb3JtYXQubWF0Y2goIC9bRE1dLyApICkge1xuXHRcdFx0XHRmaW5kTWF4ID0gZnVuY3Rpb24oIG5hbWVzICkge1xuXHRcdFx0XHRcdG1heCA9IDA7XG5cdFx0XHRcdFx0bWF4SSA9IDA7XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0XHRcdGlmICggbmFtZXNbIGkgXS5sZW5ndGggPiBtYXggKSB7XG5cdFx0XHRcdFx0XHRcdG1heCA9IG5hbWVzWyBpIF0ubGVuZ3RoO1xuXHRcdFx0XHRcdFx0XHRtYXhJID0gaTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1heEk7XG5cdFx0XHRcdH07XG5cdFx0XHRcdGRhdGUuc2V0TW9udGgoIGZpbmRNYXgoIHRoaXMuX2dldCggaW5zdCwgKCBkYXRlRm9ybWF0Lm1hdGNoKCAvTU0vICkgP1xuXHRcdFx0XHRcdFwibW9udGhOYW1lc1wiIDogXCJtb250aE5hbWVzU2hvcnRcIiApICkgKSApO1xuXHRcdFx0XHRkYXRlLnNldERhdGUoIGZpbmRNYXgoIHRoaXMuX2dldCggaW5zdCwgKCBkYXRlRm9ybWF0Lm1hdGNoKCAvREQvICkgP1xuXHRcdFx0XHRcdFwiZGF5TmFtZXNcIiA6IFwiZGF5TmFtZXNTaG9ydFwiICkgKSApICsgMjAgLSBkYXRlLmdldERheSgpICk7XG5cdFx0XHR9XG5cdFx0XHRpbnN0LmlucHV0LmF0dHIoIFwic2l6ZVwiLCB0aGlzLl9mb3JtYXREYXRlKCBpbnN0LCBkYXRlICkubGVuZ3RoICk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qIEF0dGFjaCBhbiBpbmxpbmUgZGF0ZSBwaWNrZXIgdG8gYSBkaXYuICovXG5cdF9pbmxpbmVEYXRlcGlja2VyOiBmdW5jdGlvbiggdGFyZ2V0LCBpbnN0ICkge1xuXHRcdHZhciBkaXZTcGFuID0gJCggdGFyZ2V0ICk7XG5cdFx0aWYgKCBkaXZTcGFuLmhhc0NsYXNzKCB0aGlzLm1hcmtlckNsYXNzTmFtZSApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRkaXZTcGFuLmFkZENsYXNzKCB0aGlzLm1hcmtlckNsYXNzTmFtZSApLmFwcGVuZCggaW5zdC5kcERpdiApO1xuXHRcdCQuZGF0YSggdGFyZ2V0LCBcImRhdGVwaWNrZXJcIiwgaW5zdCApO1xuXHRcdHRoaXMuX3NldERhdGUoIGluc3QsIHRoaXMuX2dldERlZmF1bHREYXRlKCBpbnN0ICksIHRydWUgKTtcblx0XHR0aGlzLl91cGRhdGVEYXRlcGlja2VyKCBpbnN0ICk7XG5cdFx0dGhpcy5fdXBkYXRlQWx0ZXJuYXRlKCBpbnN0ICk7XG5cblx0XHQvL0lmIGRpc2FibGVkIG9wdGlvbiBpcyB0cnVlLCBkaXNhYmxlIHRoZSBkYXRlcGlja2VyIGJlZm9yZSBzaG93aW5nIGl0IChzZWUgdGlja2V0ICM1NjY1KVxuXHRcdGlmICggaW5zdC5zZXR0aW5ncy5kaXNhYmxlZCApIHtcblx0XHRcdHRoaXMuX2Rpc2FibGVEYXRlcGlja2VyKCB0YXJnZXQgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgZGlzcGxheTpibG9jayBpbiBwbGFjZSBvZiBpbnN0LmRwRGl2LnNob3coKSB3aGljaCB3b24ndCB3b3JrIG9uIGRpc2Nvbm5lY3RlZCBlbGVtZW50c1xuXHRcdC8vIGh0dHA6Ly9idWdzLmpxdWVyeXVpLmNvbS90aWNrZXQvNzU1MiAtIEEgRGF0ZXBpY2tlciBjcmVhdGVkIG9uIGEgZGV0YWNoZWQgZGl2IGhhcyB6ZXJvIGhlaWdodFxuXHRcdGluc3QuZHBEaXYuY3NzKCBcImRpc3BsYXlcIiwgXCJibG9ja1wiICk7XG5cdH0sXG5cblx0LyogUG9wLXVwIHRoZSBkYXRlIHBpY2tlciBpbiBhIFwiZGlhbG9nXCIgYm94LlxuXHQgKiBAcGFyYW0gIGlucHV0IGVsZW1lbnQgLSBpZ25vcmVkXG5cdCAqIEBwYXJhbSAgZGF0ZVx0c3RyaW5nIG9yIERhdGUgLSB0aGUgaW5pdGlhbCBkYXRlIHRvIGRpc3BsYXlcblx0ICogQHBhcmFtICBvblNlbGVjdCAgZnVuY3Rpb24gLSB0aGUgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIGEgZGF0ZSBpcyBzZWxlY3RlZFxuXHQgKiBAcGFyYW0gIHNldHRpbmdzICBvYmplY3QgLSB1cGRhdGUgdGhlIGRpYWxvZyBkYXRlIHBpY2tlciBpbnN0YW5jZSdzIHNldHRpbmdzIChhbm9ueW1vdXMgb2JqZWN0KVxuXHQgKiBAcGFyYW0gIHBvcyBpbnRbMl0gLSBjb29yZGluYXRlcyBmb3IgdGhlIGRpYWxvZydzIHBvc2l0aW9uIHdpdGhpbiB0aGUgc2NyZWVuIG9yXG5cdCAqXHRcdFx0XHRcdGV2ZW50IC0gd2l0aCB4L3kgY29vcmRpbmF0ZXMgb3Jcblx0ICpcdFx0XHRcdFx0bGVhdmUgZW1wdHkgZm9yIGRlZmF1bHQgKHNjcmVlbiBjZW50cmUpXG5cdCAqIEByZXR1cm4gdGhlIG1hbmFnZXIgb2JqZWN0XG5cdCAqL1xuXHRfZGlhbG9nRGF0ZXBpY2tlcjogZnVuY3Rpb24oIGlucHV0LCBkYXRlLCBvblNlbGVjdCwgc2V0dGluZ3MsIHBvcyApIHtcblx0XHR2YXIgaWQsIGJyb3dzZXJXaWR0aCwgYnJvd3NlckhlaWdodCwgc2Nyb2xsWCwgc2Nyb2xsWSxcblx0XHRcdGluc3QgPSB0aGlzLl9kaWFsb2dJbnN0OyAvLyBpbnRlcm5hbCBpbnN0YW5jZVxuXG5cdFx0aWYgKCAhaW5zdCApIHtcblx0XHRcdHRoaXMudXVpZCArPSAxO1xuXHRcdFx0aWQgPSBcImRwXCIgKyB0aGlzLnV1aWQ7XG5cdFx0XHR0aGlzLl9kaWFsb2dJbnB1dCA9ICQoIFwiPGlucHV0IHR5cGU9J3RleHQnIGlkPSdcIiArIGlkICtcblx0XHRcdFx0XCInIHN0eWxlPSdwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogLTEwMHB4OyB3aWR0aDogMHB4OycvPlwiICk7XG5cdFx0XHR0aGlzLl9kaWFsb2dJbnB1dC5vbiggXCJrZXlkb3duXCIsIHRoaXMuX2RvS2V5RG93biApO1xuXHRcdFx0JCggXCJib2R5XCIgKS5hcHBlbmQoIHRoaXMuX2RpYWxvZ0lucHV0ICk7XG5cdFx0XHRpbnN0ID0gdGhpcy5fZGlhbG9nSW5zdCA9IHRoaXMuX25ld0luc3QoIHRoaXMuX2RpYWxvZ0lucHV0LCBmYWxzZSApO1xuXHRcdFx0aW5zdC5zZXR0aW5ncyA9IHt9O1xuXHRcdFx0JC5kYXRhKCB0aGlzLl9kaWFsb2dJbnB1dFsgMCBdLCBcImRhdGVwaWNrZXJcIiwgaW5zdCApO1xuXHRcdH1cblx0XHRkYXRlcGlja2VyX2V4dGVuZFJlbW92ZSggaW5zdC5zZXR0aW5ncywgc2V0dGluZ3MgfHwge30gKTtcblx0XHRkYXRlID0gKCBkYXRlICYmIGRhdGUuY29uc3RydWN0b3IgPT09IERhdGUgPyB0aGlzLl9mb3JtYXREYXRlKCBpbnN0LCBkYXRlICkgOiBkYXRlICk7XG5cdFx0dGhpcy5fZGlhbG9nSW5wdXQudmFsKCBkYXRlICk7XG5cblx0XHR0aGlzLl9wb3MgPSAoIHBvcyA/ICggcG9zLmxlbmd0aCA/IHBvcyA6IFsgcG9zLnBhZ2VYLCBwb3MucGFnZVkgXSApIDogbnVsbCApO1xuXHRcdGlmICggIXRoaXMuX3BvcyApIHtcblx0XHRcdGJyb3dzZXJXaWR0aCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDtcblx0XHRcdGJyb3dzZXJIZWlnaHQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuXHRcdFx0c2Nyb2xsWCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0IHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdDtcblx0XHRcdHNjcm9sbFkgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wO1xuXHRcdFx0dGhpcy5fcG9zID0gLy8gc2hvdWxkIHVzZSBhY3R1YWwgd2lkdGgvaGVpZ2h0IGJlbG93XG5cdFx0XHRcdFsgKCBicm93c2VyV2lkdGggLyAyICkgLSAxMDAgKyBzY3JvbGxYLCAoIGJyb3dzZXJIZWlnaHQgLyAyICkgLSAxNTAgKyBzY3JvbGxZIF07XG5cdFx0fVxuXG5cdFx0Ly8gTW92ZSBpbnB1dCBvbiBzY3JlZW4gZm9yIGZvY3VzLCBidXQgaGlkZGVuIGJlaGluZCBkaWFsb2dcblx0XHR0aGlzLl9kaWFsb2dJbnB1dC5jc3MoIFwibGVmdFwiLCAoIHRoaXMuX3Bvc1sgMCBdICsgMjAgKSArIFwicHhcIiApLmNzcyggXCJ0b3BcIiwgdGhpcy5fcG9zWyAxIF0gKyBcInB4XCIgKTtcblx0XHRpbnN0LnNldHRpbmdzLm9uU2VsZWN0ID0gb25TZWxlY3Q7XG5cdFx0dGhpcy5faW5EaWFsb2cgPSB0cnVlO1xuXHRcdHRoaXMuZHBEaXYuYWRkQ2xhc3MoIHRoaXMuX2RpYWxvZ0NsYXNzICk7XG5cdFx0dGhpcy5fc2hvd0RhdGVwaWNrZXIoIHRoaXMuX2RpYWxvZ0lucHV0WyAwIF0gKTtcblx0XHRpZiAoICQuYmxvY2tVSSApIHtcblx0XHRcdCQuYmxvY2tVSSggdGhpcy5kcERpdiApO1xuXHRcdH1cblx0XHQkLmRhdGEoIHRoaXMuX2RpYWxvZ0lucHV0WyAwIF0sIFwiZGF0ZXBpY2tlclwiLCBpbnN0ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0LyogRGV0YWNoIGEgZGF0ZXBpY2tlciBmcm9tIGl0cyBjb250cm9sLlxuXHQgKiBAcGFyYW0gIHRhcmdldFx0ZWxlbWVudCAtIHRoZSB0YXJnZXQgaW5wdXQgZmllbGQgb3IgZGl2aXNpb24gb3Igc3BhblxuXHQgKi9cblx0X2Rlc3Ryb3lEYXRlcGlja2VyOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciBub2RlTmFtZSxcblx0XHRcdCR0YXJnZXQgPSAkKCB0YXJnZXQgKSxcblx0XHRcdGluc3QgPSAkLmRhdGEoIHRhcmdldCwgXCJkYXRlcGlja2VyXCIgKTtcblxuXHRcdGlmICggISR0YXJnZXQuaGFzQ2xhc3MoIHRoaXMubWFya2VyQ2xhc3NOYW1lICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0bm9kZU5hbWUgPSB0YXJnZXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHQkLnJlbW92ZURhdGEoIHRhcmdldCwgXCJkYXRlcGlja2VyXCIgKTtcblx0XHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRpbnN0LmFwcGVuZC5yZW1vdmUoKTtcblx0XHRcdGluc3QudHJpZ2dlci5yZW1vdmUoKTtcblx0XHRcdCR0YXJnZXQucmVtb3ZlQ2xhc3MoIHRoaXMubWFya2VyQ2xhc3NOYW1lICkuXG5cdFx0XHRcdG9mZiggXCJmb2N1c1wiLCB0aGlzLl9zaG93RGF0ZXBpY2tlciApLlxuXHRcdFx0XHRvZmYoIFwia2V5ZG93blwiLCB0aGlzLl9kb0tleURvd24gKS5cblx0XHRcdFx0b2ZmKCBcImtleXByZXNzXCIsIHRoaXMuX2RvS2V5UHJlc3MgKS5cblx0XHRcdFx0b2ZmKCBcImtleXVwXCIsIHRoaXMuX2RvS2V5VXAgKTtcblx0XHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJkaXZcIiB8fCBub2RlTmFtZSA9PT0gXCJzcGFuXCIgKSB7XG5cdFx0XHQkdGFyZ2V0LnJlbW92ZUNsYXNzKCB0aGlzLm1hcmtlckNsYXNzTmFtZSApLmVtcHR5KCk7XG5cdFx0fVxuXG5cdFx0aWYgKCBkYXRlcGlja2VyX2luc3RBY3RpdmUgPT09IGluc3QgKSB7XG5cdFx0XHRkYXRlcGlja2VyX2luc3RBY3RpdmUgPSBudWxsO1xuXHRcdH1cblx0fSxcblxuXHQvKiBFbmFibGUgdGhlIGRhdGUgcGlja2VyIHRvIGEgalF1ZXJ5IHNlbGVjdGlvbi5cblx0ICogQHBhcmFtICB0YXJnZXRcdGVsZW1lbnQgLSB0aGUgdGFyZ2V0IGlucHV0IGZpZWxkIG9yIGRpdmlzaW9uIG9yIHNwYW5cblx0ICovXG5cdF9lbmFibGVEYXRlcGlja2VyOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciBub2RlTmFtZSwgaW5saW5lLFxuXHRcdFx0JHRhcmdldCA9ICQoIHRhcmdldCApLFxuXHRcdFx0aW5zdCA9ICQuZGF0YSggdGFyZ2V0LCBcImRhdGVwaWNrZXJcIiApO1xuXG5cdFx0aWYgKCAhJHRhcmdldC5oYXNDbGFzcyggdGhpcy5tYXJrZXJDbGFzc05hbWUgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRub2RlTmFtZSA9IHRhcmdldC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiApIHtcblx0XHRcdHRhcmdldC5kaXNhYmxlZCA9IGZhbHNlO1xuXHRcdFx0aW5zdC50cmlnZ2VyLmZpbHRlciggXCJidXR0b25cIiApLlxuXHRcdFx0XHRlYWNoKCBmdW5jdGlvbigpIHsgdGhpcy5kaXNhYmxlZCA9IGZhbHNlOyB9ICkuZW5kKCkuXG5cdFx0XHRcdGZpbHRlciggXCJpbWdcIiApLmNzcyggeyBvcGFjaXR5OiBcIjEuMFwiLCBjdXJzb3I6IFwiXCIgfSApO1xuXHRcdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImRpdlwiIHx8IG5vZGVOYW1lID09PSBcInNwYW5cIiApIHtcblx0XHRcdGlubGluZSA9ICR0YXJnZXQuY2hpbGRyZW4oIFwiLlwiICsgdGhpcy5faW5saW5lQ2xhc3MgKTtcblx0XHRcdGlubGluZS5jaGlsZHJlbigpLnJlbW92ZUNsYXNzKCBcInVpLXN0YXRlLWRpc2FibGVkXCIgKTtcblx0XHRcdGlubGluZS5maW5kKCBcInNlbGVjdC51aS1kYXRlcGlja2VyLW1vbnRoLCBzZWxlY3QudWktZGF0ZXBpY2tlci15ZWFyXCIgKS5cblx0XHRcdFx0cHJvcCggXCJkaXNhYmxlZFwiLCBmYWxzZSApO1xuXHRcdH1cblx0XHR0aGlzLl9kaXNhYmxlZElucHV0cyA9ICQubWFwKCB0aGlzLl9kaXNhYmxlZElucHV0cyxcblx0XHRcdGZ1bmN0aW9uKCB2YWx1ZSApIHsgcmV0dXJuICggdmFsdWUgPT09IHRhcmdldCA/IG51bGwgOiB2YWx1ZSApOyB9ICk7IC8vIGRlbGV0ZSBlbnRyeVxuXHR9LFxuXG5cdC8qIERpc2FibGUgdGhlIGRhdGUgcGlja2VyIHRvIGEgalF1ZXJ5IHNlbGVjdGlvbi5cblx0ICogQHBhcmFtICB0YXJnZXRcdGVsZW1lbnQgLSB0aGUgdGFyZ2V0IGlucHV0IGZpZWxkIG9yIGRpdmlzaW9uIG9yIHNwYW5cblx0ICovXG5cdF9kaXNhYmxlRGF0ZXBpY2tlcjogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgbm9kZU5hbWUsIGlubGluZSxcblx0XHRcdCR0YXJnZXQgPSAkKCB0YXJnZXQgKSxcblx0XHRcdGluc3QgPSAkLmRhdGEoIHRhcmdldCwgXCJkYXRlcGlja2VyXCIgKTtcblxuXHRcdGlmICggISR0YXJnZXQuaGFzQ2xhc3MoIHRoaXMubWFya2VyQ2xhc3NOYW1lICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0bm9kZU5hbWUgPSB0YXJnZXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHR0YXJnZXQuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdFx0aW5zdC50cmlnZ2VyLmZpbHRlciggXCJidXR0b25cIiApLlxuXHRcdFx0XHRlYWNoKCBmdW5jdGlvbigpIHsgdGhpcy5kaXNhYmxlZCA9IHRydWU7IH0gKS5lbmQoKS5cblx0XHRcdFx0ZmlsdGVyKCBcImltZ1wiICkuY3NzKCB7IG9wYWNpdHk6IFwiMC41XCIsIGN1cnNvcjogXCJkZWZhdWx0XCIgfSApO1xuXHRcdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImRpdlwiIHx8IG5vZGVOYW1lID09PSBcInNwYW5cIiApIHtcblx0XHRcdGlubGluZSA9ICR0YXJnZXQuY2hpbGRyZW4oIFwiLlwiICsgdGhpcy5faW5saW5lQ2xhc3MgKTtcblx0XHRcdGlubGluZS5jaGlsZHJlbigpLmFkZENsYXNzKCBcInVpLXN0YXRlLWRpc2FibGVkXCIgKTtcblx0XHRcdGlubGluZS5maW5kKCBcInNlbGVjdC51aS1kYXRlcGlja2VyLW1vbnRoLCBzZWxlY3QudWktZGF0ZXBpY2tlci15ZWFyXCIgKS5cblx0XHRcdFx0cHJvcCggXCJkaXNhYmxlZFwiLCB0cnVlICk7XG5cdFx0fVxuXHRcdHRoaXMuX2Rpc2FibGVkSW5wdXRzID0gJC5tYXAoIHRoaXMuX2Rpc2FibGVkSW5wdXRzLFxuXHRcdFx0ZnVuY3Rpb24oIHZhbHVlICkgeyByZXR1cm4gKCB2YWx1ZSA9PT0gdGFyZ2V0ID8gbnVsbCA6IHZhbHVlICk7IH0gKTsgLy8gZGVsZXRlIGVudHJ5XG5cdFx0dGhpcy5fZGlzYWJsZWRJbnB1dHNbIHRoaXMuX2Rpc2FibGVkSW5wdXRzLmxlbmd0aCBdID0gdGFyZ2V0O1xuXHR9LFxuXG5cdC8qIElzIHRoZSBmaXJzdCBmaWVsZCBpbiBhIGpRdWVyeSBjb2xsZWN0aW9uIGRpc2FibGVkIGFzIGEgZGF0ZXBpY2tlcj9cblx0ICogQHBhcmFtICB0YXJnZXRcdGVsZW1lbnQgLSB0aGUgdGFyZ2V0IGlucHV0IGZpZWxkIG9yIGRpdmlzaW9uIG9yIHNwYW5cblx0ICogQHJldHVybiBib29sZWFuIC0gdHJ1ZSBpZiBkaXNhYmxlZCwgZmFsc2UgaWYgZW5hYmxlZFxuXHQgKi9cblx0X2lzRGlzYWJsZWREYXRlcGlja2VyOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdGlmICggIXRhcmdldCApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy5fZGlzYWJsZWRJbnB1dHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRpZiAoIHRoaXMuX2Rpc2FibGVkSW5wdXRzWyBpIF0gPT09IHRhcmdldCApIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblxuXHQvKiBSZXRyaWV2ZSB0aGUgaW5zdGFuY2UgZGF0YSBmb3IgdGhlIHRhcmdldCBjb250cm9sLlxuXHQgKiBAcGFyYW0gIHRhcmdldCAgZWxlbWVudCAtIHRoZSB0YXJnZXQgaW5wdXQgZmllbGQgb3IgZGl2aXNpb24gb3Igc3BhblxuXHQgKiBAcmV0dXJuICBvYmplY3QgLSB0aGUgYXNzb2NpYXRlZCBpbnN0YW5jZSBkYXRhXG5cdCAqIEB0aHJvd3MgIGVycm9yIGlmIGEgalF1ZXJ5IHByb2JsZW0gZ2V0dGluZyBkYXRhXG5cdCAqL1xuXHRfZ2V0SW5zdDogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR0cnkge1xuXHRcdFx0cmV0dXJuICQuZGF0YSggdGFyZ2V0LCBcImRhdGVwaWNrZXJcIiApO1xuXHRcdH1cblx0XHRjYXRjaCAoIGVyciApIHtcblx0XHRcdHRocm93IFwiTWlzc2luZyBpbnN0YW5jZSBkYXRhIGZvciB0aGlzIGRhdGVwaWNrZXJcIjtcblx0XHR9XG5cdH0sXG5cblx0LyogVXBkYXRlIG9yIHJldHJpZXZlIHRoZSBzZXR0aW5ncyBmb3IgYSBkYXRlIHBpY2tlciBhdHRhY2hlZCB0byBhbiBpbnB1dCBmaWVsZCBvciBkaXZpc2lvbi5cblx0ICogQHBhcmFtICB0YXJnZXQgIGVsZW1lbnQgLSB0aGUgdGFyZ2V0IGlucHV0IGZpZWxkIG9yIGRpdmlzaW9uIG9yIHNwYW5cblx0ICogQHBhcmFtICBuYW1lXHRvYmplY3QgLSB0aGUgbmV3IHNldHRpbmdzIHRvIHVwZGF0ZSBvclxuXHQgKlx0XHRcdFx0c3RyaW5nIC0gdGhlIG5hbWUgb2YgdGhlIHNldHRpbmcgdG8gY2hhbmdlIG9yIHJldHJpZXZlLFxuXHQgKlx0XHRcdFx0d2hlbiByZXRyaWV2aW5nIGFsc28gXCJhbGxcIiBmb3IgYWxsIGluc3RhbmNlIHNldHRpbmdzIG9yXG5cdCAqXHRcdFx0XHRcImRlZmF1bHRzXCIgZm9yIGFsbCBnbG9iYWwgZGVmYXVsdHNcblx0ICogQHBhcmFtICB2YWx1ZSAgIGFueSAtIHRoZSBuZXcgdmFsdWUgZm9yIHRoZSBzZXR0aW5nXG5cdCAqXHRcdFx0XHQob21pdCBpZiBhYm92ZSBpcyBhbiBvYmplY3Qgb3IgdG8gcmV0cmlldmUgYSB2YWx1ZSlcblx0ICovXG5cdF9vcHRpb25EYXRlcGlja2VyOiBmdW5jdGlvbiggdGFyZ2V0LCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgc2V0dGluZ3MsIGRhdGUsIG1pbkRhdGUsIG1heERhdGUsXG5cdFx0XHRpbnN0ID0gdGhpcy5fZ2V0SW5zdCggdGFyZ2V0ICk7XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiYgdHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gKCBuYW1lID09PSBcImRlZmF1bHRzXCIgPyAkLmV4dGVuZCgge30sICQuZGF0ZXBpY2tlci5fZGVmYXVsdHMgKSA6XG5cdFx0XHRcdCggaW5zdCA/ICggbmFtZSA9PT0gXCJhbGxcIiA/ICQuZXh0ZW5kKCB7fSwgaW5zdC5zZXR0aW5ncyApIDpcblx0XHRcdFx0dGhpcy5fZ2V0KCBpbnN0LCBuYW1lICkgKSA6IG51bGwgKSApO1xuXHRcdH1cblxuXHRcdHNldHRpbmdzID0gbmFtZSB8fCB7fTtcblx0XHRpZiAoIHR5cGVvZiBuYW1lID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0c2V0dGluZ3MgPSB7fTtcblx0XHRcdHNldHRpbmdzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGluc3QgKSB7XG5cdFx0XHRpZiAoIHRoaXMuX2N1ckluc3QgPT09IGluc3QgKSB7XG5cdFx0XHRcdHRoaXMuX2hpZGVEYXRlcGlja2VyKCk7XG5cdFx0XHR9XG5cblx0XHRcdGRhdGUgPSB0aGlzLl9nZXREYXRlRGF0ZXBpY2tlciggdGFyZ2V0LCB0cnVlICk7XG5cdFx0XHRtaW5EYXRlID0gdGhpcy5fZ2V0TWluTWF4RGF0ZSggaW5zdCwgXCJtaW5cIiApO1xuXHRcdFx0bWF4RGF0ZSA9IHRoaXMuX2dldE1pbk1heERhdGUoIGluc3QsIFwibWF4XCIgKTtcblx0XHRcdGRhdGVwaWNrZXJfZXh0ZW5kUmVtb3ZlKCBpbnN0LnNldHRpbmdzLCBzZXR0aW5ncyApO1xuXG5cdFx0XHQvLyByZWZvcm1hdCB0aGUgb2xkIG1pbkRhdGUvbWF4RGF0ZSB2YWx1ZXMgaWYgZGF0ZUZvcm1hdCBjaGFuZ2VzIGFuZCBhIG5ldyBtaW5EYXRlL21heERhdGUgaXNuJ3QgcHJvdmlkZWRcblx0XHRcdGlmICggbWluRGF0ZSAhPT0gbnVsbCAmJiBzZXR0aW5ncy5kYXRlRm9ybWF0ICE9PSB1bmRlZmluZWQgJiYgc2V0dGluZ3MubWluRGF0ZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRpbnN0LnNldHRpbmdzLm1pbkRhdGUgPSB0aGlzLl9mb3JtYXREYXRlKCBpbnN0LCBtaW5EYXRlICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIG1heERhdGUgIT09IG51bGwgJiYgc2V0dGluZ3MuZGF0ZUZvcm1hdCAhPT0gdW5kZWZpbmVkICYmIHNldHRpbmdzLm1heERhdGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0aW5zdC5zZXR0aW5ncy5tYXhEYXRlID0gdGhpcy5fZm9ybWF0RGF0ZSggaW5zdCwgbWF4RGF0ZSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBcImRpc2FibGVkXCIgaW4gc2V0dGluZ3MgKSB7XG5cdFx0XHRcdGlmICggc2V0dGluZ3MuZGlzYWJsZWQgKSB7XG5cdFx0XHRcdFx0dGhpcy5fZGlzYWJsZURhdGVwaWNrZXIoIHRhcmdldCApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuX2VuYWJsZURhdGVwaWNrZXIoIHRhcmdldCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9hdHRhY2htZW50cyggJCggdGFyZ2V0ICksIGluc3QgKTtcblx0XHRcdHRoaXMuX2F1dG9TaXplKCBpbnN0ICk7XG5cdFx0XHR0aGlzLl9zZXREYXRlKCBpbnN0LCBkYXRlICk7XG5cdFx0XHR0aGlzLl91cGRhdGVBbHRlcm5hdGUoIGluc3QgKTtcblx0XHRcdHRoaXMuX3VwZGF0ZURhdGVwaWNrZXIoIGluc3QgKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ2hhbmdlIG1ldGhvZCBkZXByZWNhdGVkXG5cdF9jaGFuZ2VEYXRlcGlja2VyOiBmdW5jdGlvbiggdGFyZ2V0LCBuYW1lLCB2YWx1ZSApIHtcblx0XHR0aGlzLl9vcHRpb25EYXRlcGlja2VyKCB0YXJnZXQsIG5hbWUsIHZhbHVlICk7XG5cdH0sXG5cblx0LyogUmVkcmF3IHRoZSBkYXRlIHBpY2tlciBhdHRhY2hlZCB0byBhbiBpbnB1dCBmaWVsZCBvciBkaXZpc2lvbi5cblx0ICogQHBhcmFtICB0YXJnZXQgIGVsZW1lbnQgLSB0aGUgdGFyZ2V0IGlucHV0IGZpZWxkIG9yIGRpdmlzaW9uIG9yIHNwYW5cblx0ICovXG5cdF9yZWZyZXNoRGF0ZXBpY2tlcjogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgaW5zdCA9IHRoaXMuX2dldEluc3QoIHRhcmdldCApO1xuXHRcdGlmICggaW5zdCApIHtcblx0XHRcdHRoaXMuX3VwZGF0ZURhdGVwaWNrZXIoIGluc3QgKTtcblx0XHR9XG5cdH0sXG5cblx0LyogU2V0IHRoZSBkYXRlcyBmb3IgYSBqUXVlcnkgc2VsZWN0aW9uLlxuXHQgKiBAcGFyYW0gIHRhcmdldCBlbGVtZW50IC0gdGhlIHRhcmdldCBpbnB1dCBmaWVsZCBvciBkaXZpc2lvbiBvciBzcGFuXG5cdCAqIEBwYXJhbSAgZGF0ZVx0RGF0ZSAtIHRoZSBuZXcgZGF0ZVxuXHQgKi9cblx0X3NldERhdGVEYXRlcGlja2VyOiBmdW5jdGlvbiggdGFyZ2V0LCBkYXRlICkge1xuXHRcdHZhciBpbnN0ID0gdGhpcy5fZ2V0SW5zdCggdGFyZ2V0ICk7XG5cdFx0aWYgKCBpbnN0ICkge1xuXHRcdFx0dGhpcy5fc2V0RGF0ZSggaW5zdCwgZGF0ZSApO1xuXHRcdFx0dGhpcy5fdXBkYXRlRGF0ZXBpY2tlciggaW5zdCApO1xuXHRcdFx0dGhpcy5fdXBkYXRlQWx0ZXJuYXRlKCBpbnN0ICk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qIEdldCB0aGUgZGF0ZShzKSBmb3IgdGhlIGZpcnN0IGVudHJ5IGluIGEgalF1ZXJ5IHNlbGVjdGlvbi5cblx0ICogQHBhcmFtICB0YXJnZXQgZWxlbWVudCAtIHRoZSB0YXJnZXQgaW5wdXQgZmllbGQgb3IgZGl2aXNpb24gb3Igc3BhblxuXHQgKiBAcGFyYW0gIG5vRGVmYXVsdCBib29sZWFuIC0gdHJ1ZSBpZiBubyBkZWZhdWx0IGRhdGUgaXMgdG8gYmUgdXNlZFxuXHQgKiBAcmV0dXJuIERhdGUgLSB0aGUgY3VycmVudCBkYXRlXG5cdCAqL1xuXHRfZ2V0RGF0ZURhdGVwaWNrZXI6IGZ1bmN0aW9uKCB0YXJnZXQsIG5vRGVmYXVsdCApIHtcblx0XHR2YXIgaW5zdCA9IHRoaXMuX2dldEluc3QoIHRhcmdldCApO1xuXHRcdGlmICggaW5zdCAmJiAhaW5zdC5pbmxpbmUgKSB7XG5cdFx0XHR0aGlzLl9zZXREYXRlRnJvbUZpZWxkKCBpbnN0LCBub0RlZmF1bHQgKTtcblx0XHR9XG5cdFx0cmV0dXJuICggaW5zdCA/IHRoaXMuX2dldERhdGUoIGluc3QgKSA6IG51bGwgKTtcblx0fSxcblxuXHQvKiBIYW5kbGUga2V5c3Ryb2tlcy4gKi9cblx0X2RvS2V5RG93bjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBvblNlbGVjdCwgZGF0ZVN0ciwgc2VsLFxuXHRcdFx0aW5zdCA9ICQuZGF0ZXBpY2tlci5fZ2V0SW5zdCggZXZlbnQudGFyZ2V0ICksXG5cdFx0XHRoYW5kbGVkID0gdHJ1ZSxcblx0XHRcdGlzUlRMID0gaW5zdC5kcERpdi5pcyggXCIudWktZGF0ZXBpY2tlci1ydGxcIiApO1xuXG5cdFx0aW5zdC5fa2V5RXZlbnQgPSB0cnVlO1xuXHRcdGlmICggJC5kYXRlcGlja2VyLl9kYXRlcGlja2VyU2hvd2luZyApIHtcblx0XHRcdHN3aXRjaCAoIGV2ZW50LmtleUNvZGUgKSB7XG5cdFx0XHRcdGNhc2UgOTogJC5kYXRlcGlja2VyLl9oaWRlRGF0ZXBpY2tlcigpO1xuXHRcdFx0XHRcdFx0aGFuZGxlZCA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0YnJlYWs7IC8vIGhpZGUgb24gdGFiIG91dFxuXHRcdFx0XHRjYXNlIDEzOiBzZWwgPSAkKCBcInRkLlwiICsgJC5kYXRlcGlja2VyLl9kYXlPdmVyQ2xhc3MgKyBcIjpub3QoLlwiICtcblx0XHRcdFx0XHRcdFx0XHRcdCQuZGF0ZXBpY2tlci5fY3VycmVudENsYXNzICsgXCIpXCIsIGluc3QuZHBEaXYgKTtcblx0XHRcdFx0XHRcdGlmICggc2VsWyAwIF0gKSB7XG5cdFx0XHRcdFx0XHRcdCQuZGF0ZXBpY2tlci5fc2VsZWN0RGF5KCBldmVudC50YXJnZXQsIGluc3Quc2VsZWN0ZWRNb250aCwgaW5zdC5zZWxlY3RlZFllYXIsIHNlbFsgMCBdICk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdG9uU2VsZWN0ID0gJC5kYXRlcGlja2VyLl9nZXQoIGluc3QsIFwib25TZWxlY3RcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCBvblNlbGVjdCApIHtcblx0XHRcdFx0XHRcdFx0ZGF0ZVN0ciA9ICQuZGF0ZXBpY2tlci5fZm9ybWF0RGF0ZSggaW5zdCApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRyaWdnZXIgY3VzdG9tIGNhbGxiYWNrXG5cdFx0XHRcdFx0XHRcdG9uU2VsZWN0LmFwcGx5KCAoIGluc3QuaW5wdXQgPyBpbnN0LmlucHV0WyAwIF0gOiBudWxsICksIFsgZGF0ZVN0ciwgaW5zdCBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQkLmRhdGVwaWNrZXIuX2hpZGVEYXRlcGlja2VyKCk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTsgLy8gZG9uJ3Qgc3VibWl0IHRoZSBmb3JtXG5cdFx0XHRcdGNhc2UgMjc6ICQuZGF0ZXBpY2tlci5faGlkZURhdGVwaWNrZXIoKTtcblx0XHRcdFx0XHRcdGJyZWFrOyAvLyBoaWRlIG9uIGVzY2FwZVxuXHRcdFx0XHRjYXNlIDMzOiAkLmRhdGVwaWNrZXIuX2FkanVzdERhdGUoIGV2ZW50LnRhcmdldCwgKCBldmVudC5jdHJsS2V5ID9cblx0XHRcdFx0XHRcdFx0LSQuZGF0ZXBpY2tlci5fZ2V0KCBpbnN0LCBcInN0ZXBCaWdNb250aHNcIiApIDpcblx0XHRcdFx0XHRcdFx0LSQuZGF0ZXBpY2tlci5fZ2V0KCBpbnN0LCBcInN0ZXBNb250aHNcIiApICksIFwiTVwiICk7XG5cdFx0XHRcdFx0XHRicmVhazsgLy8gcHJldmlvdXMgbW9udGgveWVhciBvbiBwYWdlIHVwLysgY3RybFxuXHRcdFx0XHRjYXNlIDM0OiAkLmRhdGVwaWNrZXIuX2FkanVzdERhdGUoIGV2ZW50LnRhcmdldCwgKCBldmVudC5jdHJsS2V5ID9cblx0XHRcdFx0XHRcdFx0KyQuZGF0ZXBpY2tlci5fZ2V0KCBpbnN0LCBcInN0ZXBCaWdNb250aHNcIiApIDpcblx0XHRcdFx0XHRcdFx0KyQuZGF0ZXBpY2tlci5fZ2V0KCBpbnN0LCBcInN0ZXBNb250aHNcIiApICksIFwiTVwiICk7XG5cdFx0XHRcdFx0XHRicmVhazsgLy8gbmV4dCBtb250aC95ZWFyIG9uIHBhZ2UgZG93bi8rIGN0cmxcblx0XHRcdFx0Y2FzZSAzNTogaWYgKCBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkgKSB7XG5cdFx0XHRcdFx0XHRcdCQuZGF0ZXBpY2tlci5fY2xlYXJEYXRlKCBldmVudC50YXJnZXQgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGhhbmRsZWQgPSBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXk7XG5cdFx0XHRcdFx0XHRicmVhazsgLy8gY2xlYXIgb24gY3RybCBvciBjb21tYW5kICtlbmRcblx0XHRcdFx0Y2FzZSAzNjogaWYgKCBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkgKSB7XG5cdFx0XHRcdFx0XHRcdCQuZGF0ZXBpY2tlci5fZ290b1RvZGF5KCBldmVudC50YXJnZXQgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGhhbmRsZWQgPSBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXk7XG5cdFx0XHRcdFx0XHRicmVhazsgLy8gY3VycmVudCBvbiBjdHJsIG9yIGNvbW1hbmQgK2hvbWVcblx0XHRcdFx0Y2FzZSAzNzogaWYgKCBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkgKSB7XG5cdFx0XHRcdFx0XHRcdCQuZGF0ZXBpY2tlci5fYWRqdXN0RGF0ZSggZXZlbnQudGFyZ2V0LCAoIGlzUlRMID8gKzEgOiAtMSApLCBcIkRcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aGFuZGxlZCA9IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleTtcblxuXHRcdFx0XHRcdFx0Ly8gLTEgZGF5IG9uIGN0cmwgb3IgY29tbWFuZCArbGVmdFxuXHRcdFx0XHRcdFx0aWYgKCBldmVudC5vcmlnaW5hbEV2ZW50LmFsdEtleSApIHtcblx0XHRcdFx0XHRcdFx0JC5kYXRlcGlja2VyLl9hZGp1c3REYXRlKCBldmVudC50YXJnZXQsICggZXZlbnQuY3RybEtleSA/XG5cdFx0XHRcdFx0XHRcdFx0LSQuZGF0ZXBpY2tlci5fZ2V0KCBpbnN0LCBcInN0ZXBCaWdNb250aHNcIiApIDpcblx0XHRcdFx0XHRcdFx0XHQtJC5kYXRlcGlja2VyLl9nZXQoIGluc3QsIFwic3RlcE1vbnRoc1wiICkgKSwgXCJNXCIgKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gbmV4dCBtb250aC95ZWFyIG9uIGFsdCArbGVmdCBvbiBNYWNcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIDM4OiBpZiAoIGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSApIHtcblx0XHRcdFx0XHRcdFx0JC5kYXRlcGlja2VyLl9hZGp1c3REYXRlKCBldmVudC50YXJnZXQsIC03LCBcIkRcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aGFuZGxlZCA9IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleTtcblx0XHRcdFx0XHRcdGJyZWFrOyAvLyAtMSB3ZWVrIG9uIGN0cmwgb3IgY29tbWFuZCArdXBcblx0XHRcdFx0Y2FzZSAzOTogaWYgKCBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkgKSB7XG5cdFx0XHRcdFx0XHRcdCQuZGF0ZXBpY2tlci5fYWRqdXN0RGF0ZSggZXZlbnQudGFyZ2V0LCAoIGlzUlRMID8gLTEgOiArMSApLCBcIkRcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aGFuZGxlZCA9IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleTtcblxuXHRcdFx0XHRcdFx0Ly8gKzEgZGF5IG9uIGN0cmwgb3IgY29tbWFuZCArcmlnaHRcblx0XHRcdFx0XHRcdGlmICggZXZlbnQub3JpZ2luYWxFdmVudC5hbHRLZXkgKSB7XG5cdFx0XHRcdFx0XHRcdCQuZGF0ZXBpY2tlci5fYWRqdXN0RGF0ZSggZXZlbnQudGFyZ2V0LCAoIGV2ZW50LmN0cmxLZXkgP1xuXHRcdFx0XHRcdFx0XHRcdCskLmRhdGVwaWNrZXIuX2dldCggaW5zdCwgXCJzdGVwQmlnTW9udGhzXCIgKSA6XG5cdFx0XHRcdFx0XHRcdFx0KyQuZGF0ZXBpY2tlci5fZ2V0KCBpbnN0LCBcInN0ZXBNb250aHNcIiApICksIFwiTVwiICk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIG5leHQgbW9udGgveWVhciBvbiBhbHQgK3JpZ2h0XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSA0MDogaWYgKCBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkgKSB7XG5cdFx0XHRcdFx0XHRcdCQuZGF0ZXBpY2tlci5fYWRqdXN0RGF0ZSggZXZlbnQudGFyZ2V0LCArNywgXCJEXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGhhbmRsZWQgPSBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXk7XG5cdFx0XHRcdFx0XHRicmVhazsgLy8gKzEgd2VlayBvbiBjdHJsIG9yIGNvbW1hbmQgK2Rvd25cblx0XHRcdFx0ZGVmYXVsdDogaGFuZGxlZCA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoIGV2ZW50LmtleUNvZGUgPT09IDM2ICYmIGV2ZW50LmN0cmxLZXkgKSB7IC8vIGRpc3BsYXkgdGhlIGRhdGUgcGlja2VyIG9uIGN0cmwraG9tZVxuXHRcdFx0JC5kYXRlcGlja2VyLl9zaG93RGF0ZXBpY2tlciggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRoYW5kbGVkID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYgKCBoYW5kbGVkICkge1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fSxcblxuXHQvKiBGaWx0ZXIgZW50ZXJlZCBjaGFyYWN0ZXJzIC0gYmFzZWQgb24gZGF0ZSBmb3JtYXQuICovXG5cdF9kb0tleVByZXNzOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGNoYXJzLCBjaHIsXG5cdFx0XHRpbnN0ID0gJC5kYXRlcGlja2VyLl9nZXRJbnN0KCBldmVudC50YXJnZXQgKTtcblxuXHRcdGlmICggJC5kYXRlcGlja2VyLl9nZXQoIGluc3QsIFwiY29uc3RyYWluSW5wdXRcIiApICkge1xuXHRcdFx0Y2hhcnMgPSAkLmRhdGVwaWNrZXIuX3Bvc3NpYmxlQ2hhcnMoICQuZGF0ZXBpY2tlci5fZ2V0KCBpbnN0LCBcImRhdGVGb3JtYXRcIiApICk7XG5cdFx0XHRjaHIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCBldmVudC5jaGFyQ29kZSA9PSBudWxsID8gZXZlbnQua2V5Q29kZSA6IGV2ZW50LmNoYXJDb2RlICk7XG5cdFx0XHRyZXR1cm4gZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5IHx8ICggY2hyIDwgXCIgXCIgfHwgIWNoYXJzIHx8IGNoYXJzLmluZGV4T2YoIGNociApID4gLTEgKTtcblx0XHR9XG5cdH0sXG5cblx0LyogU3luY2hyb25pc2UgbWFudWFsIGVudHJ5IGFuZCBmaWVsZC9hbHRlcm5hdGUgZmllbGQuICovXG5cdF9kb0tleVVwOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGRhdGUsXG5cdFx0XHRpbnN0ID0gJC5kYXRlcGlja2VyLl9nZXRJbnN0KCBldmVudC50YXJnZXQgKTtcblxuXHRcdGlmICggaW5zdC5pbnB1dC52YWwoKSAhPT0gaW5zdC5sYXN0VmFsICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0ZSA9ICQuZGF0ZXBpY2tlci5wYXJzZURhdGUoICQuZGF0ZXBpY2tlci5fZ2V0KCBpbnN0LCBcImRhdGVGb3JtYXRcIiApLFxuXHRcdFx0XHRcdCggaW5zdC5pbnB1dCA/IGluc3QuaW5wdXQudmFsKCkgOiBudWxsICksXG5cdFx0XHRcdFx0JC5kYXRlcGlja2VyLl9nZXRGb3JtYXRDb25maWcoIGluc3QgKSApO1xuXG5cdFx0XHRcdGlmICggZGF0ZSApIHsgLy8gb25seSBpZiB2YWxpZFxuXHRcdFx0XHRcdCQuZGF0ZXBpY2tlci5fc2V0RGF0ZUZyb21GaWVsZCggaW5zdCApO1xuXHRcdFx0XHRcdCQuZGF0ZXBpY2tlci5fdXBkYXRlQWx0ZXJuYXRlKCBpbnN0ICk7XG5cdFx0XHRcdFx0JC5kYXRlcGlja2VyLl91cGRhdGVEYXRlcGlja2VyKCBpbnN0ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGNhdGNoICggZXJyICkge1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvKiBQb3AtdXAgdGhlIGRhdGUgcGlja2VyIGZvciBhIGdpdmVuIGlucHV0IGZpZWxkLlxuXHQgKiBJZiBmYWxzZSByZXR1cm5lZCBmcm9tIGJlZm9yZVNob3cgZXZlbnQgaGFuZGxlciBkbyBub3Qgc2hvdy5cblx0ICogQHBhcmFtICBpbnB1dCAgZWxlbWVudCAtIHRoZSBpbnB1dCBmaWVsZCBhdHRhY2hlZCB0byB0aGUgZGF0ZSBwaWNrZXIgb3Jcblx0ICpcdFx0XHRcdFx0ZXZlbnQgLSBpZiB0cmlnZ2VyZWQgYnkgZm9jdXNcblx0ICovXG5cdF9zaG93RGF0ZXBpY2tlcjogZnVuY3Rpb24oIGlucHV0ICkge1xuXHRcdGlucHV0ID0gaW5wdXQudGFyZ2V0IHx8IGlucHV0O1xuXHRcdGlmICggaW5wdXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJpbnB1dFwiICkgeyAvLyBmaW5kIGZyb20gYnV0dG9uL2ltYWdlIHRyaWdnZXJcblx0XHRcdGlucHV0ID0gJCggXCJpbnB1dFwiLCBpbnB1dC5wYXJlbnROb2RlIClbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoICQuZGF0ZXBpY2tlci5faXNEaXNhYmxlZERhdGVwaWNrZXIoIGlucHV0ICkgfHwgJC5kYXRlcGlja2VyLl9sYXN0SW5wdXQgPT09IGlucHV0ICkgeyAvLyBhbHJlYWR5IGhlcmVcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgaW5zdCwgYmVmb3JlU2hvdywgYmVmb3JlU2hvd1NldHRpbmdzLCBpc0ZpeGVkLFxuXHRcdFx0b2Zmc2V0LCBzaG93QW5pbSwgZHVyYXRpb247XG5cblx0XHRpbnN0ID0gJC5kYXRlcGlja2VyLl9nZXRJbnN0KCBpbnB1dCApO1xuXHRcdGlmICggJC5kYXRlcGlja2VyLl9jdXJJbnN0ICYmICQuZGF0ZXBpY2tlci5fY3VySW5zdCAhPT0gaW5zdCApIHtcblx0XHRcdCQuZGF0ZXBpY2tlci5fY3VySW5zdC5kcERpdi5zdG9wKCB0cnVlLCB0cnVlICk7XG5cdFx0XHRpZiAoIGluc3QgJiYgJC5kYXRlcGlja2VyLl9kYXRlcGlja2VyU2hvd2luZyApIHtcblx0XHRcdFx0JC5kYXRlcGlja2VyLl9oaWRlRGF0ZXBpY2tlciggJC5kYXRlcGlja2VyLl9jdXJJbnN0LmlucHV0WyAwIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRiZWZvcmVTaG93ID0gJC5kYXRlcGlja2VyLl9nZXQoIGluc3QsIFwiYmVmb3JlU2hvd1wiICk7XG5cdFx0YmVmb3JlU2hvd1NldHRpbmdzID0gYmVmb3JlU2hvdyA/IGJlZm9yZVNob3cuYXBwbHkoIGlucHV0LCBbIGlucHV0LCBpbnN0IF0gKSA6IHt9O1xuXHRcdGlmICggYmVmb3JlU2hvd1NldHRpbmdzID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0ZGF0ZXBpY2tlcl9leHRlbmRSZW1vdmUoIGluc3Quc2V0dGluZ3MsIGJlZm9yZVNob3dTZXR0aW5ncyApO1xuXG5cdFx0aW5zdC5sYXN0VmFsID0gbnVsbDtcblx0XHQkLmRhdGVwaWNrZXIuX2xhc3RJbnB1dCA9IGlucHV0O1xuXHRcdCQuZGF0ZXBpY2tlci5fc2V0RGF0ZUZyb21GaWVsZCggaW5zdCApO1xuXG5cdFx0aWYgKCAkLmRhdGVwaWNrZXIuX2luRGlhbG9nICkgeyAvLyBoaWRlIGN1cnNvclxuXHRcdFx0aW5wdXQudmFsdWUgPSBcIlwiO1xuXHRcdH1cblx0XHRpZiAoICEkLmRhdGVwaWNrZXIuX3BvcyApIHsgLy8gcG9zaXRpb24gYmVsb3cgaW5wdXRcblx0XHRcdCQuZGF0ZXBpY2tlci5fcG9zID0gJC5kYXRlcGlja2VyLl9maW5kUG9zKCBpbnB1dCApO1xuXHRcdFx0JC5kYXRlcGlja2VyLl9wb3NbIDEgXSArPSBpbnB1dC5vZmZzZXRIZWlnaHQ7IC8vIGFkZCB0aGUgaGVpZ2h0XG5cdFx0fVxuXG5cdFx0aXNGaXhlZCA9IGZhbHNlO1xuXHRcdCQoIGlucHV0ICkucGFyZW50cygpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aXNGaXhlZCB8PSAkKCB0aGlzICkuY3NzKCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiO1xuXHRcdFx0cmV0dXJuICFpc0ZpeGVkO1xuXHRcdH0gKTtcblxuXHRcdG9mZnNldCA9IHsgbGVmdDogJC5kYXRlcGlja2VyLl9wb3NbIDAgXSwgdG9wOiAkLmRhdGVwaWNrZXIuX3Bvc1sgMSBdIH07XG5cdFx0JC5kYXRlcGlja2VyLl9wb3MgPSBudWxsO1xuXG5cdFx0Ly90byBhdm9pZCBmbGFzaGVzIG9uIEZpcmVmb3hcblx0XHRpbnN0LmRwRGl2LmVtcHR5KCk7XG5cblx0XHQvLyBkZXRlcm1pbmUgc2l6aW5nIG9mZnNjcmVlblxuXHRcdGluc3QuZHBEaXYuY3NzKCB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiwgdG9wOiBcIi0xMDAwcHhcIiB9ICk7XG5cdFx0JC5kYXRlcGlja2VyLl91cGRhdGVEYXRlcGlja2VyKCBpbnN0ICk7XG5cblx0XHQvLyBmaXggd2lkdGggZm9yIGR5bmFtaWMgbnVtYmVyIG9mIGRhdGUgcGlja2Vyc1xuXHRcdC8vIGFuZCBhZGp1c3QgcG9zaXRpb24gYmVmb3JlIHNob3dpbmdcblx0XHRvZmZzZXQgPSAkLmRhdGVwaWNrZXIuX2NoZWNrT2Zmc2V0KCBpbnN0LCBvZmZzZXQsIGlzRml4ZWQgKTtcblx0XHRpbnN0LmRwRGl2LmNzcyggeyBwb3NpdGlvbjogKCAkLmRhdGVwaWNrZXIuX2luRGlhbG9nICYmICQuYmxvY2tVSSA/XG5cdFx0XHRcInN0YXRpY1wiIDogKCBpc0ZpeGVkID8gXCJmaXhlZFwiIDogXCJhYnNvbHV0ZVwiICkgKSwgZGlzcGxheTogXCJub25lXCIsXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCArIFwicHhcIiwgdG9wOiBvZmZzZXQudG9wICsgXCJweFwiIH0gKTtcblxuXHRcdGlmICggIWluc3QuaW5saW5lICkge1xuXHRcdFx0c2hvd0FuaW0gPSAkLmRhdGVwaWNrZXIuX2dldCggaW5zdCwgXCJzaG93QW5pbVwiICk7XG5cdFx0XHRkdXJhdGlvbiA9ICQuZGF0ZXBpY2tlci5fZ2V0KCBpbnN0LCBcImR1cmF0aW9uXCIgKTtcblx0XHRcdGluc3QuZHBEaXYuY3NzKCBcInotaW5kZXhcIiwgZGF0ZXBpY2tlcl9nZXRaaW5kZXgoICQoIGlucHV0ICkgKSArIDEgKTtcblx0XHRcdCQuZGF0ZXBpY2tlci5fZGF0ZXBpY2tlclNob3dpbmcgPSB0cnVlO1xuXG5cdFx0XHRpZiAoICQuZWZmZWN0cyAmJiAkLmVmZmVjdHMuZWZmZWN0WyBzaG93QW5pbSBdICkge1xuXHRcdFx0XHRpbnN0LmRwRGl2LnNob3coIHNob3dBbmltLCAkLmRhdGVwaWNrZXIuX2dldCggaW5zdCwgXCJzaG93T3B0aW9uc1wiICksIGR1cmF0aW9uICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpbnN0LmRwRGl2WyBzaG93QW5pbSB8fCBcInNob3dcIiBdKCBzaG93QW5pbSA/IGR1cmF0aW9uIDogbnVsbCApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoICQuZGF0ZXBpY2tlci5fc2hvdWxkRm9jdXNJbnB1dCggaW5zdCApICkge1xuXHRcdFx0XHRpbnN0LmlucHV0LnRyaWdnZXIoIFwiZm9jdXNcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQkLmRhdGVwaWNrZXIuX2N1ckluc3QgPSBpbnN0O1xuXHRcdH1cblx0fSxcblxuXHQvKiBHZW5lcmF0ZSB0aGUgZGF0ZSBwaWNrZXIgY29udGVudC4gKi9cblx0X3VwZGF0ZURhdGVwaWNrZXI6IGZ1bmN0aW9uKCBpbnN0ICkge1xuXHRcdHRoaXMubWF4Um93cyA9IDQ7IC8vUmVzZXQgdGhlIG1heCBudW1iZXIgb2Ygcm93cyBiZWluZyBkaXNwbGF5ZWQgKHNlZSAjNzA0Mylcblx0XHRkYXRlcGlja2VyX2luc3RBY3RpdmUgPSBpbnN0OyAvLyBmb3IgZGVsZWdhdGUgaG92ZXIgZXZlbnRzXG5cdFx0aW5zdC5kcERpdi5lbXB0eSgpLmFwcGVuZCggdGhpcy5fZ2VuZXJhdGVIVE1MKCBpbnN0ICkgKTtcblx0XHR0aGlzLl9hdHRhY2hIYW5kbGVycyggaW5zdCApO1xuXG5cdFx0dmFyIG9yaWd5ZWFyc2h0bWwsXG5cdFx0XHRudW1Nb250aHMgPSB0aGlzLl9nZXROdW1iZXJPZk1vbnRocyggaW5zdCApLFxuXHRcdFx0Y29scyA9IG51bU1vbnRoc1sgMSBdLFxuXHRcdFx0d2lkdGggPSAxNyxcblx0XHRcdGFjdGl2ZUNlbGwgPSBpbnN0LmRwRGl2LmZpbmQoIFwiLlwiICsgdGhpcy5fZGF5T3ZlckNsYXNzICsgXCIgYVwiICk7XG5cblx0XHRpZiAoIGFjdGl2ZUNlbGwubGVuZ3RoID4gMCApIHtcblx0XHRcdGRhdGVwaWNrZXJfaGFuZGxlTW91c2VvdmVyLmFwcGx5KCBhY3RpdmVDZWxsLmdldCggMCApICk7XG5cdFx0fVxuXG5cdFx0aW5zdC5kcERpdi5yZW1vdmVDbGFzcyggXCJ1aS1kYXRlcGlja2VyLW11bHRpLTIgdWktZGF0ZXBpY2tlci1tdWx0aS0zIHVpLWRhdGVwaWNrZXItbXVsdGktNFwiICkud2lkdGgoIFwiXCIgKTtcblx0XHRpZiAoIGNvbHMgPiAxICkge1xuXHRcdFx0aW5zdC5kcERpdi5hZGRDbGFzcyggXCJ1aS1kYXRlcGlja2VyLW11bHRpLVwiICsgY29scyApLmNzcyggXCJ3aWR0aFwiLCAoIHdpZHRoICogY29scyApICsgXCJlbVwiICk7XG5cdFx0fVxuXHRcdGluc3QuZHBEaXZbICggbnVtTW9udGhzWyAwIF0gIT09IDEgfHwgbnVtTW9udGhzWyAxIF0gIT09IDEgPyBcImFkZFwiIDogXCJyZW1vdmVcIiApICtcblx0XHRcdFwiQ2xhc3NcIiBdKCBcInVpLWRhdGVwaWNrZXItbXVsdGlcIiApO1xuXHRcdGluc3QuZHBEaXZbICggdGhpcy5fZ2V0KCBpbnN0LCBcImlzUlRMXCIgKSA/IFwiYWRkXCIgOiBcInJlbW92ZVwiICkgK1xuXHRcdFx0XCJDbGFzc1wiIF0oIFwidWktZGF0ZXBpY2tlci1ydGxcIiApO1xuXG5cdFx0aWYgKCBpbnN0ID09PSAkLmRhdGVwaWNrZXIuX2N1ckluc3QgJiYgJC5kYXRlcGlja2VyLl9kYXRlcGlja2VyU2hvd2luZyAmJiAkLmRhdGVwaWNrZXIuX3Nob3VsZEZvY3VzSW5wdXQoIGluc3QgKSApIHtcblx0XHRcdGluc3QuaW5wdXQudHJpZ2dlciggXCJmb2N1c1wiICk7XG5cdFx0fVxuXG5cdFx0Ly8gRGVmZmVyZWQgcmVuZGVyIG9mIHRoZSB5ZWFycyBzZWxlY3QgKHRvIGF2b2lkIGZsYXNoZXMgb24gRmlyZWZveClcblx0XHRpZiAoIGluc3QueWVhcnNodG1sICkge1xuXHRcdFx0b3JpZ3llYXJzaHRtbCA9IGluc3QueWVhcnNodG1sO1xuXHRcdFx0c2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly9hc3N1cmUgdGhhdCBpbnN0LnllYXJzaHRtbCBkaWRuJ3QgY2hhbmdlLlxuXHRcdFx0XHRpZiAoIG9yaWd5ZWFyc2h0bWwgPT09IGluc3QueWVhcnNodG1sICYmIGluc3QueWVhcnNodG1sICkge1xuXHRcdFx0XHRcdGluc3QuZHBEaXYuZmluZCggXCJzZWxlY3QudWktZGF0ZXBpY2tlci15ZWFyOmZpcnN0XCIgKS5yZXBsYWNlV2l0aCggaW5zdC55ZWFyc2h0bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRvcmlneWVhcnNodG1sID0gaW5zdC55ZWFyc2h0bWwgPSBudWxsO1xuXHRcdFx0fSwgMCApO1xuXHRcdH1cblx0fSxcblxuXHQvLyAjNjY5NCAtIGRvbid0IGZvY3VzIHRoZSBpbnB1dCBpZiBpdCdzIGFscmVhZHkgZm9jdXNlZFxuXHQvLyB0aGlzIGJyZWFrcyB0aGUgY2hhbmdlIGV2ZW50IGluIElFXG5cdC8vIFN1cHBvcnQ6IElFIGFuZCBqUXVlcnkgPDEuOVxuXHRfc2hvdWxkRm9jdXNJbnB1dDogZnVuY3Rpb24oIGluc3QgKSB7XG5cdFx0cmV0dXJuIGluc3QuaW5wdXQgJiYgaW5zdC5pbnB1dC5pcyggXCI6dmlzaWJsZVwiICkgJiYgIWluc3QuaW5wdXQuaXMoIFwiOmRpc2FibGVkXCIgKSAmJiAhaW5zdC5pbnB1dC5pcyggXCI6Zm9jdXNcIiApO1xuXHR9LFxuXG5cdC8qIENoZWNrIHBvc2l0aW9uaW5nIHRvIHJlbWFpbiBvbiBzY3JlZW4uICovXG5cdF9jaGVja09mZnNldDogZnVuY3Rpb24oIGluc3QsIG9mZnNldCwgaXNGaXhlZCApIHtcblx0XHR2YXIgZHBXaWR0aCA9IGluc3QuZHBEaXYub3V0ZXJXaWR0aCgpLFxuXHRcdFx0ZHBIZWlnaHQgPSBpbnN0LmRwRGl2Lm91dGVySGVpZ2h0KCksXG5cdFx0XHRpbnB1dFdpZHRoID0gaW5zdC5pbnB1dCA/IGluc3QuaW5wdXQub3V0ZXJXaWR0aCgpIDogMCxcblx0XHRcdGlucHV0SGVpZ2h0ID0gaW5zdC5pbnB1dCA/IGluc3QuaW5wdXQub3V0ZXJIZWlnaHQoKSA6IDAsXG5cdFx0XHR2aWV3V2lkdGggPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggKyAoIGlzRml4ZWQgPyAwIDogJCggZG9jdW1lbnQgKS5zY3JvbGxMZWZ0KCkgKSxcblx0XHRcdHZpZXdIZWlnaHQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0ICsgKCBpc0ZpeGVkID8gMCA6ICQoIGRvY3VtZW50ICkuc2Nyb2xsVG9wKCkgKTtcblxuXHRcdG9mZnNldC5sZWZ0IC09ICggdGhpcy5fZ2V0KCBpbnN0LCBcImlzUlRMXCIgKSA/ICggZHBXaWR0aCAtIGlucHV0V2lkdGggKSA6IDAgKTtcblx0XHRvZmZzZXQubGVmdCAtPSAoIGlzRml4ZWQgJiYgb2Zmc2V0LmxlZnQgPT09IGluc3QuaW5wdXQub2Zmc2V0KCkubGVmdCApID8gJCggZG9jdW1lbnQgKS5zY3JvbGxMZWZ0KCkgOiAwO1xuXHRcdG9mZnNldC50b3AgLT0gKCBpc0ZpeGVkICYmIG9mZnNldC50b3AgPT09ICggaW5zdC5pbnB1dC5vZmZzZXQoKS50b3AgKyBpbnB1dEhlaWdodCApICkgPyAkKCBkb2N1bWVudCApLnNjcm9sbFRvcCgpIDogMDtcblxuXHRcdC8vIE5vdyBjaGVjayBpZiBkYXRlcGlja2VyIGlzIHNob3dpbmcgb3V0c2lkZSB3aW5kb3cgdmlld3BvcnQgLSBtb3ZlIHRvIGEgYmV0dGVyIHBsYWNlIGlmIHNvLlxuXHRcdG9mZnNldC5sZWZ0IC09IE1hdGgubWluKCBvZmZzZXQubGVmdCwgKCBvZmZzZXQubGVmdCArIGRwV2lkdGggPiB2aWV3V2lkdGggJiYgdmlld1dpZHRoID4gZHBXaWR0aCApID9cblx0XHRcdE1hdGguYWJzKCBvZmZzZXQubGVmdCArIGRwV2lkdGggLSB2aWV3V2lkdGggKSA6IDAgKTtcblx0XHRvZmZzZXQudG9wIC09IE1hdGgubWluKCBvZmZzZXQudG9wLCAoIG9mZnNldC50b3AgKyBkcEhlaWdodCA+IHZpZXdIZWlnaHQgJiYgdmlld0hlaWdodCA+IGRwSGVpZ2h0ICkgP1xuXHRcdFx0TWF0aC5hYnMoIGRwSGVpZ2h0ICsgaW5wdXRIZWlnaHQgKSA6IDAgKTtcblxuXHRcdHJldHVybiBvZmZzZXQ7XG5cdH0sXG5cblx0LyogRmluZCBhbiBvYmplY3QncyBwb3NpdGlvbiBvbiB0aGUgc2NyZWVuLiAqL1xuXHRfZmluZFBvczogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcG9zaXRpb24sXG5cdFx0XHRpbnN0ID0gdGhpcy5fZ2V0SW5zdCggb2JqICksXG5cdFx0XHRpc1JUTCA9IHRoaXMuX2dldCggaW5zdCwgXCJpc1JUTFwiICk7XG5cblx0XHR3aGlsZSAoIG9iaiAmJiAoIG9iai50eXBlID09PSBcImhpZGRlblwiIHx8IG9iai5ub2RlVHlwZSAhPT0gMSB8fCAkLmV4cHIucHNldWRvcy5oaWRkZW4oIG9iaiApICkgKSB7XG5cdFx0XHRvYmogPSBvYmpbIGlzUlRMID8gXCJwcmV2aW91c1NpYmxpbmdcIiA6IFwibmV4dFNpYmxpbmdcIiBdO1xuXHRcdH1cblxuXHRcdHBvc2l0aW9uID0gJCggb2JqICkub2Zmc2V0KCk7XG5cdFx0cmV0dXJuIFsgcG9zaXRpb24ubGVmdCwgcG9zaXRpb24udG9wIF07XG5cdH0sXG5cblx0LyogSGlkZSB0aGUgZGF0ZSBwaWNrZXIgZnJvbSB2aWV3LlxuXHQgKiBAcGFyYW0gIGlucHV0ICBlbGVtZW50IC0gdGhlIGlucHV0IGZpZWxkIGF0dGFjaGVkIHRvIHRoZSBkYXRlIHBpY2tlclxuXHQgKi9cblx0X2hpZGVEYXRlcGlja2VyOiBmdW5jdGlvbiggaW5wdXQgKSB7XG5cdFx0dmFyIHNob3dBbmltLCBkdXJhdGlvbiwgcG9zdFByb2Nlc3MsIG9uQ2xvc2UsXG5cdFx0XHRpbnN0ID0gdGhpcy5fY3VySW5zdDtcblxuXHRcdGlmICggIWluc3QgfHwgKCBpbnB1dCAmJiBpbnN0ICE9PSAkLmRhdGEoIGlucHV0LCBcImRhdGVwaWNrZXJcIiApICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLl9kYXRlcGlja2VyU2hvd2luZyApIHtcblx0XHRcdHNob3dBbmltID0gdGhpcy5fZ2V0KCBpbnN0LCBcInNob3dBbmltXCIgKTtcblx0XHRcdGR1cmF0aW9uID0gdGhpcy5fZ2V0KCBpbnN0LCBcImR1cmF0aW9uXCIgKTtcblx0XHRcdHBvc3RQcm9jZXNzID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdCQuZGF0ZXBpY2tlci5fdGlkeURpYWxvZyggaW5zdCApO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gREVQUkVDQVRFRDogYWZ0ZXIgQkMgZm9yIDEuOC54ICQuZWZmZWN0c1sgc2hvd0FuaW0gXSBpcyBub3QgbmVlZGVkXG5cdFx0XHRpZiAoICQuZWZmZWN0cyAmJiAoICQuZWZmZWN0cy5lZmZlY3RbIHNob3dBbmltIF0gfHwgJC5lZmZlY3RzWyBzaG93QW5pbSBdICkgKSB7XG5cdFx0XHRcdGluc3QuZHBEaXYuaGlkZSggc2hvd0FuaW0sICQuZGF0ZXBpY2tlci5fZ2V0KCBpbnN0LCBcInNob3dPcHRpb25zXCIgKSwgZHVyYXRpb24sIHBvc3RQcm9jZXNzICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpbnN0LmRwRGl2WyAoIHNob3dBbmltID09PSBcInNsaWRlRG93blwiID8gXCJzbGlkZVVwXCIgOlxuXHRcdFx0XHRcdCggc2hvd0FuaW0gPT09IFwiZmFkZUluXCIgPyBcImZhZGVPdXRcIiA6IFwiaGlkZVwiICkgKSBdKCAoIHNob3dBbmltID8gZHVyYXRpb24gOiBudWxsICksIHBvc3RQcm9jZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggIXNob3dBbmltICkge1xuXHRcdFx0XHRwb3N0UHJvY2VzcygpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5fZGF0ZXBpY2tlclNob3dpbmcgPSBmYWxzZTtcblxuXHRcdFx0b25DbG9zZSA9IHRoaXMuX2dldCggaW5zdCwgXCJvbkNsb3NlXCIgKTtcblx0XHRcdGlmICggb25DbG9zZSApIHtcblx0XHRcdFx0b25DbG9zZS5hcHBseSggKCBpbnN0LmlucHV0ID8gaW5zdC5pbnB1dFsgMCBdIDogbnVsbCApLCBbICggaW5zdC5pbnB1dCA/IGluc3QuaW5wdXQudmFsKCkgOiBcIlwiICksIGluc3QgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9sYXN0SW5wdXQgPSBudWxsO1xuXHRcdFx0aWYgKCB0aGlzLl9pbkRpYWxvZyApIHtcblx0XHRcdFx0dGhpcy5fZGlhbG9nSW5wdXQuY3NzKCB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIGxlZnQ6IFwiMFwiLCB0b3A6IFwiLTEwMHB4XCIgfSApO1xuXHRcdFx0XHRpZiAoICQuYmxvY2tVSSApIHtcblx0XHRcdFx0XHQkLnVuYmxvY2tVSSgpO1xuXHRcdFx0XHRcdCQoIFwiYm9keVwiICkuYXBwZW5kKCB0aGlzLmRwRGl2ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHRoaXMuX2luRGlhbG9nID0gZmFsc2U7XG5cdFx0fVxuXHR9LFxuXG5cdC8qIFRpZHkgdXAgYWZ0ZXIgYSBkaWFsb2cgZGlzcGxheS4gKi9cblx0X3RpZHlEaWFsb2c6IGZ1bmN0aW9uKCBpbnN0ICkge1xuXHRcdGluc3QuZHBEaXYucmVtb3ZlQ2xhc3MoIHRoaXMuX2RpYWxvZ0NsYXNzICkub2ZmKCBcIi51aS1kYXRlcGlja2VyLWNhbGVuZGFyXCIgKTtcblx0fSxcblxuXHQvKiBDbG9zZSBkYXRlIHBpY2tlciBpZiBjbGlja2VkIGVsc2V3aGVyZS4gKi9cblx0X2NoZWNrRXh0ZXJuYWxDbGljazogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdGlmICggISQuZGF0ZXBpY2tlci5fY3VySW5zdCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgJHRhcmdldCA9ICQoIGV2ZW50LnRhcmdldCApLFxuXHRcdFx0aW5zdCA9ICQuZGF0ZXBpY2tlci5fZ2V0SW5zdCggJHRhcmdldFsgMCBdICk7XG5cblx0XHRpZiAoICggKCAkdGFyZ2V0WyAwIF0uaWQgIT09ICQuZGF0ZXBpY2tlci5fbWFpbkRpdklkICYmXG5cdFx0XHRcdCR0YXJnZXQucGFyZW50cyggXCIjXCIgKyAkLmRhdGVwaWNrZXIuX21haW5EaXZJZCApLmxlbmd0aCA9PT0gMCAmJlxuXHRcdFx0XHQhJHRhcmdldC5oYXNDbGFzcyggJC5kYXRlcGlja2VyLm1hcmtlckNsYXNzTmFtZSApICYmXG5cdFx0XHRcdCEkdGFyZ2V0LmNsb3Nlc3QoIFwiLlwiICsgJC5kYXRlcGlja2VyLl90cmlnZ2VyQ2xhc3MgKS5sZW5ndGggJiZcblx0XHRcdFx0JC5kYXRlcGlja2VyLl9kYXRlcGlja2VyU2hvd2luZyAmJiAhKCAkLmRhdGVwaWNrZXIuX2luRGlhbG9nICYmICQuYmxvY2tVSSApICkgKSB8fFxuXHRcdFx0KCAkdGFyZ2V0Lmhhc0NsYXNzKCAkLmRhdGVwaWNrZXIubWFya2VyQ2xhc3NOYW1lICkgJiYgJC5kYXRlcGlja2VyLl9jdXJJbnN0ICE9PSBpbnN0ICkgKSB7XG5cdFx0XHRcdCQuZGF0ZXBpY2tlci5faGlkZURhdGVwaWNrZXIoKTtcblx0XHR9XG5cdH0sXG5cblx0LyogQWRqdXN0IG9uZSBvZiB0aGUgZGF0ZSBzdWItZmllbGRzLiAqL1xuXHRfYWRqdXN0RGF0ZTogZnVuY3Rpb24oIGlkLCBvZmZzZXQsIHBlcmlvZCApIHtcblx0XHR2YXIgdGFyZ2V0ID0gJCggaWQgKSxcblx0XHRcdGluc3QgPSB0aGlzLl9nZXRJbnN0KCB0YXJnZXRbIDAgXSApO1xuXG5cdFx0aWYgKCB0aGlzLl9pc0Rpc2FibGVkRGF0ZXBpY2tlciggdGFyZ2V0WyAwIF0gKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dGhpcy5fYWRqdXN0SW5zdERhdGUoIGluc3QsIG9mZnNldCArXG5cdFx0XHQoIHBlcmlvZCA9PT0gXCJNXCIgPyB0aGlzLl9nZXQoIGluc3QsIFwic2hvd0N1cnJlbnRBdFBvc1wiICkgOiAwICksIC8vIHVuZG8gcG9zaXRpb25pbmdcblx0XHRcdHBlcmlvZCApO1xuXHRcdHRoaXMuX3VwZGF0ZURhdGVwaWNrZXIoIGluc3QgKTtcblx0fSxcblxuXHQvKiBBY3Rpb24gZm9yIGN1cnJlbnQgbGluay4gKi9cblx0X2dvdG9Ub2RheTogZnVuY3Rpb24oIGlkICkge1xuXHRcdHZhciBkYXRlLFxuXHRcdFx0dGFyZ2V0ID0gJCggaWQgKSxcblx0XHRcdGluc3QgPSB0aGlzLl9nZXRJbnN0KCB0YXJnZXRbIDAgXSApO1xuXG5cdFx0aWYgKCB0aGlzLl9nZXQoIGluc3QsIFwiZ290b0N1cnJlbnRcIiApICYmIGluc3QuY3VycmVudERheSApIHtcblx0XHRcdGluc3Quc2VsZWN0ZWREYXkgPSBpbnN0LmN1cnJlbnREYXk7XG5cdFx0XHRpbnN0LmRyYXdNb250aCA9IGluc3Quc2VsZWN0ZWRNb250aCA9IGluc3QuY3VycmVudE1vbnRoO1xuXHRcdFx0aW5zdC5kcmF3WWVhciA9IGluc3Quc2VsZWN0ZWRZZWFyID0gaW5zdC5jdXJyZW50WWVhcjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0ZSA9IG5ldyBEYXRlKCk7XG5cdFx0XHRpbnN0LnNlbGVjdGVkRGF5ID0gZGF0ZS5nZXREYXRlKCk7XG5cdFx0XHRpbnN0LmRyYXdNb250aCA9IGluc3Quc2VsZWN0ZWRNb250aCA9IGRhdGUuZ2V0TW9udGgoKTtcblx0XHRcdGluc3QuZHJhd1llYXIgPSBpbnN0LnNlbGVjdGVkWWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcblx0XHR9XG5cdFx0dGhpcy5fbm90aWZ5Q2hhbmdlKCBpbnN0ICk7XG5cdFx0dGhpcy5fYWRqdXN0RGF0ZSggdGFyZ2V0ICk7XG5cdH0sXG5cblx0LyogQWN0aW9uIGZvciBzZWxlY3RpbmcgYSBuZXcgbW9udGgveWVhci4gKi9cblx0X3NlbGVjdE1vbnRoWWVhcjogZnVuY3Rpb24oIGlkLCBzZWxlY3QsIHBlcmlvZCApIHtcblx0XHR2YXIgdGFyZ2V0ID0gJCggaWQgKSxcblx0XHRcdGluc3QgPSB0aGlzLl9nZXRJbnN0KCB0YXJnZXRbIDAgXSApO1xuXG5cdFx0aW5zdFsgXCJzZWxlY3RlZFwiICsgKCBwZXJpb2QgPT09IFwiTVwiID8gXCJNb250aFwiIDogXCJZZWFyXCIgKSBdID1cblx0XHRpbnN0WyBcImRyYXdcIiArICggcGVyaW9kID09PSBcIk1cIiA/IFwiTW9udGhcIiA6IFwiWWVhclwiICkgXSA9XG5cdFx0XHRwYXJzZUludCggc2VsZWN0Lm9wdGlvbnNbIHNlbGVjdC5zZWxlY3RlZEluZGV4IF0udmFsdWUsIDEwICk7XG5cblx0XHR0aGlzLl9ub3RpZnlDaGFuZ2UoIGluc3QgKTtcblx0XHR0aGlzLl9hZGp1c3REYXRlKCB0YXJnZXQgKTtcblx0fSxcblxuXHQvKiBBY3Rpb24gZm9yIHNlbGVjdGluZyBhIGRheS4gKi9cblx0X3NlbGVjdERheTogZnVuY3Rpb24oIGlkLCBtb250aCwgeWVhciwgdGQgKSB7XG5cdFx0dmFyIGluc3QsXG5cdFx0XHR0YXJnZXQgPSAkKCBpZCApO1xuXG5cdFx0aWYgKCAkKCB0ZCApLmhhc0NsYXNzKCB0aGlzLl91bnNlbGVjdGFibGVDbGFzcyApIHx8IHRoaXMuX2lzRGlzYWJsZWREYXRlcGlja2VyKCB0YXJnZXRbIDAgXSApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGluc3QgPSB0aGlzLl9nZXRJbnN0KCB0YXJnZXRbIDAgXSApO1xuXHRcdGluc3Quc2VsZWN0ZWREYXkgPSBpbnN0LmN1cnJlbnREYXkgPSAkKCBcImFcIiwgdGQgKS5odG1sKCk7XG5cdFx0aW5zdC5zZWxlY3RlZE1vbnRoID0gaW5zdC5jdXJyZW50TW9udGggPSBtb250aDtcblx0XHRpbnN0LnNlbGVjdGVkWWVhciA9IGluc3QuY3VycmVudFllYXIgPSB5ZWFyO1xuXHRcdHRoaXMuX3NlbGVjdERhdGUoIGlkLCB0aGlzLl9mb3JtYXREYXRlKCBpbnN0LFxuXHRcdFx0aW5zdC5jdXJyZW50RGF5LCBpbnN0LmN1cnJlbnRNb250aCwgaW5zdC5jdXJyZW50WWVhciApICk7XG5cdH0sXG5cblx0LyogRXJhc2UgdGhlIGlucHV0IGZpZWxkIGFuZCBoaWRlIHRoZSBkYXRlIHBpY2tlci4gKi9cblx0X2NsZWFyRGF0ZTogZnVuY3Rpb24oIGlkICkge1xuXHRcdHZhciB0YXJnZXQgPSAkKCBpZCApO1xuXHRcdHRoaXMuX3NlbGVjdERhdGUoIHRhcmdldCwgXCJcIiApO1xuXHR9LFxuXG5cdC8qIFVwZGF0ZSB0aGUgaW5wdXQgZmllbGQgd2l0aCB0aGUgc2VsZWN0ZWQgZGF0ZS4gKi9cblx0X3NlbGVjdERhdGU6IGZ1bmN0aW9uKCBpZCwgZGF0ZVN0ciApIHtcblx0XHR2YXIgb25TZWxlY3QsXG5cdFx0XHR0YXJnZXQgPSAkKCBpZCApLFxuXHRcdFx0aW5zdCA9IHRoaXMuX2dldEluc3QoIHRhcmdldFsgMCBdICk7XG5cblx0XHRkYXRlU3RyID0gKCBkYXRlU3RyICE9IG51bGwgPyBkYXRlU3RyIDogdGhpcy5fZm9ybWF0RGF0ZSggaW5zdCApICk7XG5cdFx0aWYgKCBpbnN0LmlucHV0ICkge1xuXHRcdFx0aW5zdC5pbnB1dC52YWwoIGRhdGVTdHIgKTtcblx0XHR9XG5cdFx0dGhpcy5fdXBkYXRlQWx0ZXJuYXRlKCBpbnN0ICk7XG5cblx0XHRvblNlbGVjdCA9IHRoaXMuX2dldCggaW5zdCwgXCJvblNlbGVjdFwiICk7XG5cdFx0aWYgKCBvblNlbGVjdCApIHtcblx0XHRcdG9uU2VsZWN0LmFwcGx5KCAoIGluc3QuaW5wdXQgPyBpbnN0LmlucHV0WyAwIF0gOiBudWxsICksIFsgZGF0ZVN0ciwgaW5zdCBdICk7ICAvLyB0cmlnZ2VyIGN1c3RvbSBjYWxsYmFja1xuXHRcdH0gZWxzZSBpZiAoIGluc3QuaW5wdXQgKSB7XG5cdFx0XHRpbnN0LmlucHV0LnRyaWdnZXIoIFwiY2hhbmdlXCIgKTsgLy8gZmlyZSB0aGUgY2hhbmdlIGV2ZW50XG5cdFx0fVxuXG5cdFx0aWYgKCBpbnN0LmlubGluZSApIHtcblx0XHRcdHRoaXMuX3VwZGF0ZURhdGVwaWNrZXIoIGluc3QgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5faGlkZURhdGVwaWNrZXIoKTtcblx0XHRcdHRoaXMuX2xhc3RJbnB1dCA9IGluc3QuaW5wdXRbIDAgXTtcblx0XHRcdGlmICggdHlwZW9mKCBpbnN0LmlucHV0WyAwIF0gKSAhPT0gXCJvYmplY3RcIiApIHtcblx0XHRcdFx0aW5zdC5pbnB1dC50cmlnZ2VyKCBcImZvY3VzXCIgKTsgLy8gcmVzdG9yZSBmb2N1c1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5fbGFzdElucHV0ID0gbnVsbDtcblx0XHR9XG5cdH0sXG5cblx0LyogVXBkYXRlIGFueSBhbHRlcm5hdGUgZmllbGQgdG8gc3luY2hyb25pc2Ugd2l0aCB0aGUgbWFpbiBmaWVsZC4gKi9cblx0X3VwZGF0ZUFsdGVybmF0ZTogZnVuY3Rpb24oIGluc3QgKSB7XG5cdFx0dmFyIGFsdEZvcm1hdCwgZGF0ZSwgZGF0ZVN0cixcblx0XHRcdGFsdEZpZWxkID0gdGhpcy5fZ2V0KCBpbnN0LCBcImFsdEZpZWxkXCIgKTtcblxuXHRcdGlmICggYWx0RmllbGQgKSB7IC8vIHVwZGF0ZSBhbHRlcm5hdGUgZmllbGQgdG9vXG5cdFx0XHRhbHRGb3JtYXQgPSB0aGlzLl9nZXQoIGluc3QsIFwiYWx0Rm9ybWF0XCIgKSB8fCB0aGlzLl9nZXQoIGluc3QsIFwiZGF0ZUZvcm1hdFwiICk7XG5cdFx0XHRkYXRlID0gdGhpcy5fZ2V0RGF0ZSggaW5zdCApO1xuXHRcdFx0ZGF0ZVN0ciA9IHRoaXMuZm9ybWF0RGF0ZSggYWx0Rm9ybWF0LCBkYXRlLCB0aGlzLl9nZXRGb3JtYXRDb25maWcoIGluc3QgKSApO1xuXHRcdFx0JCggYWx0RmllbGQgKS52YWwoIGRhdGVTdHIgKTtcblx0XHR9XG5cdH0sXG5cblx0LyogU2V0IGFzIGJlZm9yZVNob3dEYXkgZnVuY3Rpb24gdG8gcHJldmVudCBzZWxlY3Rpb24gb2Ygd2Vla2VuZHMuXG5cdCAqIEBwYXJhbSAgZGF0ZSAgRGF0ZSAtIHRoZSBkYXRlIHRvIGN1c3RvbWlzZVxuXHQgKiBAcmV0dXJuIFtib29sZWFuLCBzdHJpbmddIC0gaXMgdGhpcyBkYXRlIHNlbGVjdGFibGU/LCB3aGF0IGlzIGl0cyBDU1MgY2xhc3M/XG5cdCAqL1xuXHRub1dlZWtlbmRzOiBmdW5jdGlvbiggZGF0ZSApIHtcblx0XHR2YXIgZGF5ID0gZGF0ZS5nZXREYXkoKTtcblx0XHRyZXR1cm4gWyAoIGRheSA+IDAgJiYgZGF5IDwgNiApLCBcIlwiIF07XG5cdH0sXG5cblx0LyogU2V0IGFzIGNhbGN1bGF0ZVdlZWsgdG8gZGV0ZXJtaW5lIHRoZSB3ZWVrIG9mIHRoZSB5ZWFyIGJhc2VkIG9uIHRoZSBJU08gODYwMSBkZWZpbml0aW9uLlxuXHQgKiBAcGFyYW0gIGRhdGUgIERhdGUgLSB0aGUgZGF0ZSB0byBnZXQgdGhlIHdlZWsgZm9yXG5cdCAqIEByZXR1cm4gIG51bWJlciAtIHRoZSBudW1iZXIgb2YgdGhlIHdlZWsgd2l0aGluIHRoZSB5ZWFyIHRoYXQgY29udGFpbnMgdGhpcyBkYXRlXG5cdCAqL1xuXHRpc284NjAxV2VlazogZnVuY3Rpb24oIGRhdGUgKSB7XG5cdFx0dmFyIHRpbWUsXG5cdFx0XHRjaGVja0RhdGUgPSBuZXcgRGF0ZSggZGF0ZS5nZXRUaW1lKCkgKTtcblxuXHRcdC8vIEZpbmQgVGh1cnNkYXkgb2YgdGhpcyB3ZWVrIHN0YXJ0aW5nIG9uIE1vbmRheVxuXHRcdGNoZWNrRGF0ZS5zZXREYXRlKCBjaGVja0RhdGUuZ2V0RGF0ZSgpICsgNCAtICggY2hlY2tEYXRlLmdldERheSgpIHx8IDcgKSApO1xuXG5cdFx0dGltZSA9IGNoZWNrRGF0ZS5nZXRUaW1lKCk7XG5cdFx0Y2hlY2tEYXRlLnNldE1vbnRoKCAwICk7IC8vIENvbXBhcmUgd2l0aCBKYW4gMVxuXHRcdGNoZWNrRGF0ZS5zZXREYXRlKCAxICk7XG5cdFx0cmV0dXJuIE1hdGguZmxvb3IoIE1hdGgucm91bmQoICggdGltZSAtIGNoZWNrRGF0ZSApIC8gODY0MDAwMDAgKSAvIDcgKSArIDE7XG5cdH0sXG5cblx0LyogUGFyc2UgYSBzdHJpbmcgdmFsdWUgaW50byBhIGRhdGUgb2JqZWN0LlxuXHQgKiBTZWUgZm9ybWF0RGF0ZSBiZWxvdyBmb3IgdGhlIHBvc3NpYmxlIGZvcm1hdHMuXG5cdCAqXG5cdCAqIEBwYXJhbSAgZm9ybWF0IHN0cmluZyAtIHRoZSBleHBlY3RlZCBmb3JtYXQgb2YgdGhlIGRhdGVcblx0ICogQHBhcmFtICB2YWx1ZSBzdHJpbmcgLSB0aGUgZGF0ZSBpbiB0aGUgYWJvdmUgZm9ybWF0XG5cdCAqIEBwYXJhbSAgc2V0dGluZ3MgT2JqZWN0IC0gYXR0cmlidXRlcyBpbmNsdWRlOlxuXHQgKlx0XHRcdFx0XHRzaG9ydFllYXJDdXRvZmYgIG51bWJlciAtIHRoZSBjdXRvZmYgeWVhciBmb3IgZGV0ZXJtaW5pbmcgdGhlIGNlbnR1cnkgKG9wdGlvbmFsKVxuXHQgKlx0XHRcdFx0XHRkYXlOYW1lc1Nob3J0XHRzdHJpbmdbN10gLSBhYmJyZXZpYXRlZCBuYW1lcyBvZiB0aGUgZGF5cyBmcm9tIFN1bmRheSAob3B0aW9uYWwpXG5cdCAqXHRcdFx0XHRcdGRheU5hbWVzXHRcdHN0cmluZ1s3XSAtIG5hbWVzIG9mIHRoZSBkYXlzIGZyb20gU3VuZGF5IChvcHRpb25hbClcblx0ICpcdFx0XHRcdFx0bW9udGhOYW1lc1Nob3J0IHN0cmluZ1sxMl0gLSBhYmJyZXZpYXRlZCBuYW1lcyBvZiB0aGUgbW9udGhzIChvcHRpb25hbClcblx0ICpcdFx0XHRcdFx0bW9udGhOYW1lc1x0XHRzdHJpbmdbMTJdIC0gbmFtZXMgb2YgdGhlIG1vbnRocyAob3B0aW9uYWwpXG5cdCAqIEByZXR1cm4gIERhdGUgLSB0aGUgZXh0cmFjdGVkIGRhdGUgdmFsdWUgb3IgbnVsbCBpZiB2YWx1ZSBpcyBibGFua1xuXHQgKi9cblx0cGFyc2VEYXRlOiBmdW5jdGlvbiggZm9ybWF0LCB2YWx1ZSwgc2V0dGluZ3MgKSB7XG5cdFx0aWYgKCBmb3JtYXQgPT0gbnVsbCB8fCB2YWx1ZSA9PSBudWxsICkge1xuXHRcdFx0dGhyb3cgXCJJbnZhbGlkIGFyZ3VtZW50c1wiO1xuXHRcdH1cblxuXHRcdHZhbHVlID0gKCB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgPyB2YWx1ZS50b1N0cmluZygpIDogdmFsdWUgKyBcIlwiICk7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gXCJcIiApIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblxuXHRcdHZhciBpRm9ybWF0LCBkaW0sIGV4dHJhLFxuXHRcdFx0aVZhbHVlID0gMCxcblx0XHRcdHNob3J0WWVhckN1dG9mZlRlbXAgPSAoIHNldHRpbmdzID8gc2V0dGluZ3Muc2hvcnRZZWFyQ3V0b2ZmIDogbnVsbCApIHx8IHRoaXMuX2RlZmF1bHRzLnNob3J0WWVhckN1dG9mZixcblx0XHRcdHNob3J0WWVhckN1dG9mZiA9ICggdHlwZW9mIHNob3J0WWVhckN1dG9mZlRlbXAgIT09IFwic3RyaW5nXCIgPyBzaG9ydFllYXJDdXRvZmZUZW1wIDpcblx0XHRcdFx0bmV3IERhdGUoKS5nZXRGdWxsWWVhcigpICUgMTAwICsgcGFyc2VJbnQoIHNob3J0WWVhckN1dG9mZlRlbXAsIDEwICkgKSxcblx0XHRcdGRheU5hbWVzU2hvcnQgPSAoIHNldHRpbmdzID8gc2V0dGluZ3MuZGF5TmFtZXNTaG9ydCA6IG51bGwgKSB8fCB0aGlzLl9kZWZhdWx0cy5kYXlOYW1lc1Nob3J0LFxuXHRcdFx0ZGF5TmFtZXMgPSAoIHNldHRpbmdzID8gc2V0dGluZ3MuZGF5TmFtZXMgOiBudWxsICkgfHwgdGhpcy5fZGVmYXVsdHMuZGF5TmFtZXMsXG5cdFx0XHRtb250aE5hbWVzU2hvcnQgPSAoIHNldHRpbmdzID8gc2V0dGluZ3MubW9udGhOYW1lc1Nob3J0IDogbnVsbCApIHx8IHRoaXMuX2RlZmF1bHRzLm1vbnRoTmFtZXNTaG9ydCxcblx0XHRcdG1vbnRoTmFtZXMgPSAoIHNldHRpbmdzID8gc2V0dGluZ3MubW9udGhOYW1lcyA6IG51bGwgKSB8fCB0aGlzLl9kZWZhdWx0cy5tb250aE5hbWVzLFxuXHRcdFx0eWVhciA9IC0xLFxuXHRcdFx0bW9udGggPSAtMSxcblx0XHRcdGRheSA9IC0xLFxuXHRcdFx0ZG95ID0gLTEsXG5cdFx0XHRsaXRlcmFsID0gZmFsc2UsXG5cdFx0XHRkYXRlLFxuXG5cdFx0XHQvLyBDaGVjayB3aGV0aGVyIGEgZm9ybWF0IGNoYXJhY3RlciBpcyBkb3VibGVkXG5cdFx0XHRsb29rQWhlYWQgPSBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRcdHZhciBtYXRjaGVzID0gKCBpRm9ybWF0ICsgMSA8IGZvcm1hdC5sZW5ndGggJiYgZm9ybWF0LmNoYXJBdCggaUZvcm1hdCArIDEgKSA9PT0gbWF0Y2ggKTtcblx0XHRcdFx0aWYgKCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdGlGb3JtYXQrKztcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gbWF0Y2hlcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIEV4dHJhY3QgYSBudW1iZXIgZnJvbSB0aGUgc3RyaW5nIHZhbHVlXG5cdFx0XHRnZXROdW1iZXIgPSBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRcdHZhciBpc0RvdWJsZWQgPSBsb29rQWhlYWQoIG1hdGNoICksXG5cdFx0XHRcdFx0c2l6ZSA9ICggbWF0Y2ggPT09IFwiQFwiID8gMTQgOiAoIG1hdGNoID09PSBcIiFcIiA/IDIwIDpcblx0XHRcdFx0XHQoIG1hdGNoID09PSBcInlcIiAmJiBpc0RvdWJsZWQgPyA0IDogKCBtYXRjaCA9PT0gXCJvXCIgPyAzIDogMiApICkgKSApLFxuXHRcdFx0XHRcdG1pblNpemUgPSAoIG1hdGNoID09PSBcInlcIiA/IHNpemUgOiAxICksXG5cdFx0XHRcdFx0ZGlnaXRzID0gbmV3IFJlZ0V4cCggXCJeXFxcXGR7XCIgKyBtaW5TaXplICsgXCIsXCIgKyBzaXplICsgXCJ9XCIgKSxcblx0XHRcdFx0XHRudW0gPSB2YWx1ZS5zdWJzdHJpbmcoIGlWYWx1ZSApLm1hdGNoKCBkaWdpdHMgKTtcblx0XHRcdFx0aWYgKCAhbnVtICkge1xuXHRcdFx0XHRcdHRocm93IFwiTWlzc2luZyBudW1iZXIgYXQgcG9zaXRpb24gXCIgKyBpVmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0aVZhbHVlICs9IG51bVsgMCBdLmxlbmd0aDtcblx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCBudW1bIDAgXSwgMTAgKTtcblx0XHRcdH0sXG5cblx0XHRcdC8vIEV4dHJhY3QgYSBuYW1lIGZyb20gdGhlIHN0cmluZyB2YWx1ZSBhbmQgY29udmVydCB0byBhbiBpbmRleFxuXHRcdFx0Z2V0TmFtZSA9IGZ1bmN0aW9uKCBtYXRjaCwgc2hvcnROYW1lcywgbG9uZ05hbWVzICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAtMSxcblx0XHRcdFx0XHRuYW1lcyA9ICQubWFwKCBsb29rQWhlYWQoIG1hdGNoICkgPyBsb25nTmFtZXMgOiBzaG9ydE5hbWVzLCBmdW5jdGlvbiggdiwgayApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIFsgaywgdiBdIF07XG5cdFx0XHRcdFx0fSApLnNvcnQoIGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIC0oIGFbIDEgXS5sZW5ndGggLSBiWyAxIF0ubGVuZ3RoICk7XG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdCQuZWFjaCggbmFtZXMsIGZ1bmN0aW9uKCBpLCBwYWlyICkge1xuXHRcdFx0XHRcdHZhciBuYW1lID0gcGFpclsgMSBdO1xuXHRcdFx0XHRcdGlmICggdmFsdWUuc3Vic3RyKCBpVmFsdWUsIG5hbWUubGVuZ3RoICkudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpICkge1xuXHRcdFx0XHRcdFx0aW5kZXggPSBwYWlyWyAwIF07XG5cdFx0XHRcdFx0XHRpVmFsdWUgKz0gbmFtZS5sZW5ndGg7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdGlmICggaW5kZXggIT09IC0xICkge1xuXHRcdFx0XHRcdHJldHVybiBpbmRleCArIDE7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhyb3cgXCJVbmtub3duIG5hbWUgYXQgcG9zaXRpb24gXCIgKyBpVmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8vIENvbmZpcm0gdGhhdCBhIGxpdGVyYWwgY2hhcmFjdGVyIG1hdGNoZXMgdGhlIHN0cmluZyB2YWx1ZVxuXHRcdFx0Y2hlY2tMaXRlcmFsID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdmFsdWUuY2hhckF0KCBpVmFsdWUgKSAhPT0gZm9ybWF0LmNoYXJBdCggaUZvcm1hdCApICkge1xuXHRcdFx0XHRcdHRocm93IFwiVW5leHBlY3RlZCBsaXRlcmFsIGF0IHBvc2l0aW9uIFwiICsgaVZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlWYWx1ZSsrO1xuXHRcdFx0fTtcblxuXHRcdGZvciAoIGlGb3JtYXQgPSAwOyBpRm9ybWF0IDwgZm9ybWF0Lmxlbmd0aDsgaUZvcm1hdCsrICkge1xuXHRcdFx0aWYgKCBsaXRlcmFsICkge1xuXHRcdFx0XHRpZiAoIGZvcm1hdC5jaGFyQXQoIGlGb3JtYXQgKSA9PT0gXCInXCIgJiYgIWxvb2tBaGVhZCggXCInXCIgKSApIHtcblx0XHRcdFx0XHRsaXRlcmFsID0gZmFsc2U7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y2hlY2tMaXRlcmFsKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHN3aXRjaCAoIGZvcm1hdC5jaGFyQXQoIGlGb3JtYXQgKSApIHtcblx0XHRcdFx0XHRjYXNlIFwiZFwiOlxuXHRcdFx0XHRcdFx0ZGF5ID0gZ2V0TnVtYmVyKCBcImRcIiApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBcIkRcIjpcblx0XHRcdFx0XHRcdGdldE5hbWUoIFwiRFwiLCBkYXlOYW1lc1Nob3J0LCBkYXlOYW1lcyApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBcIm9cIjpcblx0XHRcdFx0XHRcdGRveSA9IGdldE51bWJlciggXCJvXCIgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgXCJtXCI6XG5cdFx0XHRcdFx0XHRtb250aCA9IGdldE51bWJlciggXCJtXCIgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgXCJNXCI6XG5cdFx0XHRcdFx0XHRtb250aCA9IGdldE5hbWUoIFwiTVwiLCBtb250aE5hbWVzU2hvcnQsIG1vbnRoTmFtZXMgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgXCJ5XCI6XG5cdFx0XHRcdFx0XHR5ZWFyID0gZ2V0TnVtYmVyKCBcInlcIiApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBcIkBcIjpcblx0XHRcdFx0XHRcdGRhdGUgPSBuZXcgRGF0ZSggZ2V0TnVtYmVyKCBcIkBcIiApICk7XG5cdFx0XHRcdFx0XHR5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuXHRcdFx0XHRcdFx0bW9udGggPSBkYXRlLmdldE1vbnRoKCkgKyAxO1xuXHRcdFx0XHRcdFx0ZGF5ID0gZGF0ZS5nZXREYXRlKCk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIFwiIVwiOlxuXHRcdFx0XHRcdFx0ZGF0ZSA9IG5ldyBEYXRlKCAoIGdldE51bWJlciggXCIhXCIgKSAtIHRoaXMuX3RpY2tzVG8xOTcwICkgLyAxMDAwMCApO1xuXHRcdFx0XHRcdFx0eWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcblx0XHRcdFx0XHRcdG1vbnRoID0gZGF0ZS5nZXRNb250aCgpICsgMTtcblx0XHRcdFx0XHRcdGRheSA9IGRhdGUuZ2V0RGF0ZSgpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBcIidcIjpcblx0XHRcdFx0XHRcdGlmICggbG9va0FoZWFkKCBcIidcIiApICkge1xuXHRcdFx0XHRcdFx0XHRjaGVja0xpdGVyYWwoKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGxpdGVyYWwgPSB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdGNoZWNrTGl0ZXJhbCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBpVmFsdWUgPCB2YWx1ZS5sZW5ndGggKSB7XG5cdFx0XHRleHRyYSA9IHZhbHVlLnN1YnN0ciggaVZhbHVlICk7XG5cdFx0XHRpZiAoICEvXlxccysvLnRlc3QoIGV4dHJhICkgKSB7XG5cdFx0XHRcdHRocm93IFwiRXh0cmEvdW5wYXJzZWQgY2hhcmFjdGVycyBmb3VuZCBpbiBkYXRlOiBcIiArIGV4dHJhO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggeWVhciA9PT0gLTEgKSB7XG5cdFx0XHR5ZWFyID0gbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpO1xuXHRcdH0gZWxzZSBpZiAoIHllYXIgPCAxMDAgKSB7XG5cdFx0XHR5ZWFyICs9IG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKSAtIG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKSAlIDEwMCArXG5cdFx0XHRcdCggeWVhciA8PSBzaG9ydFllYXJDdXRvZmYgPyAwIDogLTEwMCApO1xuXHRcdH1cblxuXHRcdGlmICggZG95ID4gLTEgKSB7XG5cdFx0XHRtb250aCA9IDE7XG5cdFx0XHRkYXkgPSBkb3k7XG5cdFx0XHRkbyB7XG5cdFx0XHRcdGRpbSA9IHRoaXMuX2dldERheXNJbk1vbnRoKCB5ZWFyLCBtb250aCAtIDEgKTtcblx0XHRcdFx0aWYgKCBkYXkgPD0gZGltICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG1vbnRoKys7XG5cdFx0XHRcdGRheSAtPSBkaW07XG5cdFx0XHR9IHdoaWxlICggdHJ1ZSApO1xuXHRcdH1cblxuXHRcdGRhdGUgPSB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdCggbmV3IERhdGUoIHllYXIsIG1vbnRoIC0gMSwgZGF5ICkgKTtcblx0XHRpZiAoIGRhdGUuZ2V0RnVsbFllYXIoKSAhPT0geWVhciB8fCBkYXRlLmdldE1vbnRoKCkgKyAxICE9PSBtb250aCB8fCBkYXRlLmdldERhdGUoKSAhPT0gZGF5ICkge1xuXHRcdFx0dGhyb3cgXCJJbnZhbGlkIGRhdGVcIjsgLy8gRS5nLiAzMS8wMi8wMFxuXHRcdH1cblx0XHRyZXR1cm4gZGF0ZTtcblx0fSxcblxuXHQvKiBTdGFuZGFyZCBkYXRlIGZvcm1hdHMuICovXG5cdEFUT006IFwieXktbW0tZGRcIiwgLy8gUkZDIDMzMzkgKElTTyA4NjAxKVxuXHRDT09LSUU6IFwiRCwgZGQgTSB5eVwiLFxuXHRJU09fODYwMTogXCJ5eS1tbS1kZFwiLFxuXHRSRkNfODIyOiBcIkQsIGQgTSB5XCIsXG5cdFJGQ184NTA6IFwiREQsIGRkLU0teVwiLFxuXHRSRkNfMTAzNjogXCJELCBkIE0geVwiLFxuXHRSRkNfMTEyMzogXCJELCBkIE0geXlcIixcblx0UkZDXzI4MjI6IFwiRCwgZCBNIHl5XCIsXG5cdFJTUzogXCJELCBkIE0geVwiLCAvLyBSRkMgODIyXG5cdFRJQ0tTOiBcIiFcIixcblx0VElNRVNUQU1QOiBcIkBcIixcblx0VzNDOiBcInl5LW1tLWRkXCIsIC8vIElTTyA4NjAxXG5cblx0X3RpY2tzVG8xOTcwOiAoICggKCAxOTcwIC0gMSApICogMzY1ICsgTWF0aC5mbG9vciggMTk3MCAvIDQgKSAtIE1hdGguZmxvb3IoIDE5NzAgLyAxMDAgKSArXG5cdFx0TWF0aC5mbG9vciggMTk3MCAvIDQwMCApICkgKiAyNCAqIDYwICogNjAgKiAxMDAwMDAwMCApLFxuXG5cdC8qIEZvcm1hdCBhIGRhdGUgb2JqZWN0IGludG8gYSBzdHJpbmcgdmFsdWUuXG5cdCAqIFRoZSBmb3JtYXQgY2FuIGJlIGNvbWJpbmF0aW9ucyBvZiB0aGUgZm9sbG93aW5nOlxuXHQgKiBkICAtIGRheSBvZiBtb250aCAobm8gbGVhZGluZyB6ZXJvKVxuXHQgKiBkZCAtIGRheSBvZiBtb250aCAodHdvIGRpZ2l0KVxuXHQgKiBvICAtIGRheSBvZiB5ZWFyIChubyBsZWFkaW5nIHplcm9zKVxuXHQgKiBvbyAtIGRheSBvZiB5ZWFyICh0aHJlZSBkaWdpdClcblx0ICogRCAgLSBkYXkgbmFtZSBzaG9ydFxuXHQgKiBERCAtIGRheSBuYW1lIGxvbmdcblx0ICogbSAgLSBtb250aCBvZiB5ZWFyIChubyBsZWFkaW5nIHplcm8pXG5cdCAqIG1tIC0gbW9udGggb2YgeWVhciAodHdvIGRpZ2l0KVxuXHQgKiBNICAtIG1vbnRoIG5hbWUgc2hvcnRcblx0ICogTU0gLSBtb250aCBuYW1lIGxvbmdcblx0ICogeSAgLSB5ZWFyICh0d28gZGlnaXQpXG5cdCAqIHl5IC0geWVhciAoZm91ciBkaWdpdClcblx0ICogQCAtIFVuaXggdGltZXN0YW1wIChtcyBzaW5jZSAwMS8wMS8xOTcwKVxuXHQgKiAhIC0gV2luZG93cyB0aWNrcyAoMTAwbnMgc2luY2UgMDEvMDEvMDAwMSlcblx0ICogXCIuLi5cIiAtIGxpdGVyYWwgdGV4dFxuXHQgKiAnJyAtIHNpbmdsZSBxdW90ZVxuXHQgKlxuXHQgKiBAcGFyYW0gIGZvcm1hdCBzdHJpbmcgLSB0aGUgZGVzaXJlZCBmb3JtYXQgb2YgdGhlIGRhdGVcblx0ICogQHBhcmFtICBkYXRlIERhdGUgLSB0aGUgZGF0ZSB2YWx1ZSB0byBmb3JtYXRcblx0ICogQHBhcmFtICBzZXR0aW5ncyBPYmplY3QgLSBhdHRyaWJ1dGVzIGluY2x1ZGU6XG5cdCAqXHRcdFx0XHRcdGRheU5hbWVzU2hvcnRcdHN0cmluZ1s3XSAtIGFiYnJldmlhdGVkIG5hbWVzIG9mIHRoZSBkYXlzIGZyb20gU3VuZGF5IChvcHRpb25hbClcblx0ICpcdFx0XHRcdFx0ZGF5TmFtZXNcdFx0c3RyaW5nWzddIC0gbmFtZXMgb2YgdGhlIGRheXMgZnJvbSBTdW5kYXkgKG9wdGlvbmFsKVxuXHQgKlx0XHRcdFx0XHRtb250aE5hbWVzU2hvcnQgc3RyaW5nWzEyXSAtIGFiYnJldmlhdGVkIG5hbWVzIG9mIHRoZSBtb250aHMgKG9wdGlvbmFsKVxuXHQgKlx0XHRcdFx0XHRtb250aE5hbWVzXHRcdHN0cmluZ1sxMl0gLSBuYW1lcyBvZiB0aGUgbW9udGhzIChvcHRpb25hbClcblx0ICogQHJldHVybiAgc3RyaW5nIC0gdGhlIGRhdGUgaW4gdGhlIGFib3ZlIGZvcm1hdFxuXHQgKi9cblx0Zm9ybWF0RGF0ZTogZnVuY3Rpb24oIGZvcm1hdCwgZGF0ZSwgc2V0dGluZ3MgKSB7XG5cdFx0aWYgKCAhZGF0ZSApIHtcblx0XHRcdHJldHVybiBcIlwiO1xuXHRcdH1cblxuXHRcdHZhciBpRm9ybWF0LFxuXHRcdFx0ZGF5TmFtZXNTaG9ydCA9ICggc2V0dGluZ3MgPyBzZXR0aW5ncy5kYXlOYW1lc1Nob3J0IDogbnVsbCApIHx8IHRoaXMuX2RlZmF1bHRzLmRheU5hbWVzU2hvcnQsXG5cdFx0XHRkYXlOYW1lcyA9ICggc2V0dGluZ3MgPyBzZXR0aW5ncy5kYXlOYW1lcyA6IG51bGwgKSB8fCB0aGlzLl9kZWZhdWx0cy5kYXlOYW1lcyxcblx0XHRcdG1vbnRoTmFtZXNTaG9ydCA9ICggc2V0dGluZ3MgPyBzZXR0aW5ncy5tb250aE5hbWVzU2hvcnQgOiBudWxsICkgfHwgdGhpcy5fZGVmYXVsdHMubW9udGhOYW1lc1Nob3J0LFxuXHRcdFx0bW9udGhOYW1lcyA9ICggc2V0dGluZ3MgPyBzZXR0aW5ncy5tb250aE5hbWVzIDogbnVsbCApIHx8IHRoaXMuX2RlZmF1bHRzLm1vbnRoTmFtZXMsXG5cblx0XHRcdC8vIENoZWNrIHdoZXRoZXIgYSBmb3JtYXQgY2hhcmFjdGVyIGlzIGRvdWJsZWRcblx0XHRcdGxvb2tBaGVhZCA9IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdFx0dmFyIG1hdGNoZXMgPSAoIGlGb3JtYXQgKyAxIDwgZm9ybWF0Lmxlbmd0aCAmJiBmb3JtYXQuY2hhckF0KCBpRm9ybWF0ICsgMSApID09PSBtYXRjaCApO1xuXHRcdFx0XHRpZiAoIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0aUZvcm1hdCsrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBtYXRjaGVzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9ybWF0IGEgbnVtYmVyLCB3aXRoIGxlYWRpbmcgemVybyBpZiBuZWNlc3Nhcnlcblx0XHRcdGZvcm1hdE51bWJlciA9IGZ1bmN0aW9uKCBtYXRjaCwgdmFsdWUsIGxlbiApIHtcblx0XHRcdFx0dmFyIG51bSA9IFwiXCIgKyB2YWx1ZTtcblx0XHRcdFx0aWYgKCBsb29rQWhlYWQoIG1hdGNoICkgKSB7XG5cdFx0XHRcdFx0d2hpbGUgKCBudW0ubGVuZ3RoIDwgbGVuICkge1xuXHRcdFx0XHRcdFx0bnVtID0gXCIwXCIgKyBudW07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBudW07XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3JtYXQgYSBuYW1lLCBzaG9ydCBvciBsb25nIGFzIHJlcXVlc3RlZFxuXHRcdFx0Zm9ybWF0TmFtZSA9IGZ1bmN0aW9uKCBtYXRjaCwgdmFsdWUsIHNob3J0TmFtZXMsIGxvbmdOYW1lcyApIHtcblx0XHRcdFx0cmV0dXJuICggbG9va0FoZWFkKCBtYXRjaCApID8gbG9uZ05hbWVzWyB2YWx1ZSBdIDogc2hvcnROYW1lc1sgdmFsdWUgXSApO1xuXHRcdFx0fSxcblx0XHRcdG91dHB1dCA9IFwiXCIsXG5cdFx0XHRsaXRlcmFsID0gZmFsc2U7XG5cblx0XHRpZiAoIGRhdGUgKSB7XG5cdFx0XHRmb3IgKCBpRm9ybWF0ID0gMDsgaUZvcm1hdCA8IGZvcm1hdC5sZW5ndGg7IGlGb3JtYXQrKyApIHtcblx0XHRcdFx0aWYgKCBsaXRlcmFsICkge1xuXHRcdFx0XHRcdGlmICggZm9ybWF0LmNoYXJBdCggaUZvcm1hdCApID09PSBcIidcIiAmJiAhbG9va0FoZWFkKCBcIidcIiApICkge1xuXHRcdFx0XHRcdFx0bGl0ZXJhbCA9IGZhbHNlO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRvdXRwdXQgKz0gZm9ybWF0LmNoYXJBdCggaUZvcm1hdCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzd2l0Y2ggKCBmb3JtYXQuY2hhckF0KCBpRm9ybWF0ICkgKSB7XG5cdFx0XHRcdFx0XHRjYXNlIFwiZFwiOlxuXHRcdFx0XHRcdFx0XHRvdXRwdXQgKz0gZm9ybWF0TnVtYmVyKCBcImRcIiwgZGF0ZS5nZXREYXRlKCksIDIgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlIFwiRFwiOlxuXHRcdFx0XHRcdFx0XHRvdXRwdXQgKz0gZm9ybWF0TmFtZSggXCJEXCIsIGRhdGUuZ2V0RGF5KCksIGRheU5hbWVzU2hvcnQsIGRheU5hbWVzICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSBcIm9cIjpcblx0XHRcdFx0XHRcdFx0b3V0cHV0ICs9IGZvcm1hdE51bWJlciggXCJvXCIsXG5cdFx0XHRcdFx0XHRcdFx0TWF0aC5yb3VuZCggKCBuZXcgRGF0ZSggZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpICkuZ2V0VGltZSgpIC0gbmV3IERhdGUoIGRhdGUuZ2V0RnVsbFllYXIoKSwgMCwgMCApLmdldFRpbWUoKSApIC8gODY0MDAwMDAgKSwgMyApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgXCJtXCI6XG5cdFx0XHRcdFx0XHRcdG91dHB1dCArPSBmb3JtYXROdW1iZXIoIFwibVwiLCBkYXRlLmdldE1vbnRoKCkgKyAxLCAyICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSBcIk1cIjpcblx0XHRcdFx0XHRcdFx0b3V0cHV0ICs9IGZvcm1hdE5hbWUoIFwiTVwiLCBkYXRlLmdldE1vbnRoKCksIG1vbnRoTmFtZXNTaG9ydCwgbW9udGhOYW1lcyApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgXCJ5XCI6XG5cdFx0XHRcdFx0XHRcdG91dHB1dCArPSAoIGxvb2tBaGVhZCggXCJ5XCIgKSA/IGRhdGUuZ2V0RnVsbFllYXIoKSA6XG5cdFx0XHRcdFx0XHRcdFx0KCBkYXRlLmdldEZ1bGxZZWFyKCkgJSAxMDAgPCAxMCA/IFwiMFwiIDogXCJcIiApICsgZGF0ZS5nZXRGdWxsWWVhcigpICUgMTAwICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSBcIkBcIjpcblx0XHRcdFx0XHRcdFx0b3V0cHV0ICs9IGRhdGUuZ2V0VGltZSgpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgXCIhXCI6XG5cdFx0XHRcdFx0XHRcdG91dHB1dCArPSBkYXRlLmdldFRpbWUoKSAqIDEwMDAwICsgdGhpcy5fdGlja3NUbzE5NzA7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSBcIidcIjpcblx0XHRcdFx0XHRcdFx0aWYgKCBsb29rQWhlYWQoIFwiJ1wiICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0b3V0cHV0ICs9IFwiJ1wiO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGxpdGVyYWwgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0b3V0cHV0ICs9IGZvcm1hdC5jaGFyQXQoIGlGb3JtYXQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fSxcblxuXHQvKiBFeHRyYWN0IGFsbCBwb3NzaWJsZSBjaGFyYWN0ZXJzIGZyb20gdGhlIGRhdGUgZm9ybWF0LiAqL1xuXHRfcG9zc2libGVDaGFyczogZnVuY3Rpb24oIGZvcm1hdCApIHtcblx0XHR2YXIgaUZvcm1hdCxcblx0XHRcdGNoYXJzID0gXCJcIixcblx0XHRcdGxpdGVyYWwgPSBmYWxzZSxcblxuXHRcdFx0Ly8gQ2hlY2sgd2hldGhlciBhIGZvcm1hdCBjaGFyYWN0ZXIgaXMgZG91YmxlZFxuXHRcdFx0bG9va0FoZWFkID0gZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0XHR2YXIgbWF0Y2hlcyA9ICggaUZvcm1hdCArIDEgPCBmb3JtYXQubGVuZ3RoICYmIGZvcm1hdC5jaGFyQXQoIGlGb3JtYXQgKyAxICkgPT09IG1hdGNoICk7XG5cdFx0XHRcdGlmICggbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRpRm9ybWF0Kys7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG1hdGNoZXM7XG5cdFx0XHR9O1xuXG5cdFx0Zm9yICggaUZvcm1hdCA9IDA7IGlGb3JtYXQgPCBmb3JtYXQubGVuZ3RoOyBpRm9ybWF0KysgKSB7XG5cdFx0XHRpZiAoIGxpdGVyYWwgKSB7XG5cdFx0XHRcdGlmICggZm9ybWF0LmNoYXJBdCggaUZvcm1hdCApID09PSBcIidcIiAmJiAhbG9va0FoZWFkKCBcIidcIiApICkge1xuXHRcdFx0XHRcdGxpdGVyYWwgPSBmYWxzZTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjaGFycyArPSBmb3JtYXQuY2hhckF0KCBpRm9ybWF0ICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHN3aXRjaCAoIGZvcm1hdC5jaGFyQXQoIGlGb3JtYXQgKSApIHtcblx0XHRcdFx0XHRjYXNlIFwiZFwiOiBjYXNlIFwibVwiOiBjYXNlIFwieVwiOiBjYXNlIFwiQFwiOlxuXHRcdFx0XHRcdFx0Y2hhcnMgKz0gXCIwMTIzNDU2Nzg5XCI7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIFwiRFwiOiBjYXNlIFwiTVwiOlxuXHRcdFx0XHRcdFx0cmV0dXJuIG51bGw7IC8vIEFjY2VwdCBhbnl0aGluZ1xuXHRcdFx0XHRcdGNhc2UgXCInXCI6XG5cdFx0XHRcdFx0XHRpZiAoIGxvb2tBaGVhZCggXCInXCIgKSApIHtcblx0XHRcdFx0XHRcdFx0Y2hhcnMgKz0gXCInXCI7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRsaXRlcmFsID0gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRjaGFycyArPSBmb3JtYXQuY2hhckF0KCBpRm9ybWF0ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNoYXJzO1xuXHR9LFxuXG5cdC8qIEdldCBhIHNldHRpbmcgdmFsdWUsIGRlZmF1bHRpbmcgaWYgbmVjZXNzYXJ5LiAqL1xuXHRfZ2V0OiBmdW5jdGlvbiggaW5zdCwgbmFtZSApIHtcblx0XHRyZXR1cm4gaW5zdC5zZXR0aW5nc1sgbmFtZSBdICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0aW5zdC5zZXR0aW5nc1sgbmFtZSBdIDogdGhpcy5fZGVmYXVsdHNbIG5hbWUgXTtcblx0fSxcblxuXHQvKiBQYXJzZSBleGlzdGluZyBkYXRlIGFuZCBpbml0aWFsaXNlIGRhdGUgcGlja2VyLiAqL1xuXHRfc2V0RGF0ZUZyb21GaWVsZDogZnVuY3Rpb24oIGluc3QsIG5vRGVmYXVsdCApIHtcblx0XHRpZiAoIGluc3QuaW5wdXQudmFsKCkgPT09IGluc3QubGFzdFZhbCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgZGF0ZUZvcm1hdCA9IHRoaXMuX2dldCggaW5zdCwgXCJkYXRlRm9ybWF0XCIgKSxcblx0XHRcdGRhdGVzID0gaW5zdC5sYXN0VmFsID0gaW5zdC5pbnB1dCA/IGluc3QuaW5wdXQudmFsKCkgOiBudWxsLFxuXHRcdFx0ZGVmYXVsdERhdGUgPSB0aGlzLl9nZXREZWZhdWx0RGF0ZSggaW5zdCApLFxuXHRcdFx0ZGF0ZSA9IGRlZmF1bHREYXRlLFxuXHRcdFx0c2V0dGluZ3MgPSB0aGlzLl9nZXRGb3JtYXRDb25maWcoIGluc3QgKTtcblxuXHRcdHRyeSB7XG5cdFx0XHRkYXRlID0gdGhpcy5wYXJzZURhdGUoIGRhdGVGb3JtYXQsIGRhdGVzLCBzZXR0aW5ncyApIHx8IGRlZmF1bHREYXRlO1xuXHRcdH0gY2F0Y2ggKCBldmVudCApIHtcblx0XHRcdGRhdGVzID0gKCBub0RlZmF1bHQgPyBcIlwiIDogZGF0ZXMgKTtcblx0XHR9XG5cdFx0aW5zdC5zZWxlY3RlZERheSA9IGRhdGUuZ2V0RGF0ZSgpO1xuXHRcdGluc3QuZHJhd01vbnRoID0gaW5zdC5zZWxlY3RlZE1vbnRoID0gZGF0ZS5nZXRNb250aCgpO1xuXHRcdGluc3QuZHJhd1llYXIgPSBpbnN0LnNlbGVjdGVkWWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcblx0XHRpbnN0LmN1cnJlbnREYXkgPSAoIGRhdGVzID8gZGF0ZS5nZXREYXRlKCkgOiAwICk7XG5cdFx0aW5zdC5jdXJyZW50TW9udGggPSAoIGRhdGVzID8gZGF0ZS5nZXRNb250aCgpIDogMCApO1xuXHRcdGluc3QuY3VycmVudFllYXIgPSAoIGRhdGVzID8gZGF0ZS5nZXRGdWxsWWVhcigpIDogMCApO1xuXHRcdHRoaXMuX2FkanVzdEluc3REYXRlKCBpbnN0ICk7XG5cdH0sXG5cblx0LyogUmV0cmlldmUgdGhlIGRlZmF1bHQgZGF0ZSBzaG93biBvbiBvcGVuaW5nLiAqL1xuXHRfZ2V0RGVmYXVsdERhdGU6IGZ1bmN0aW9uKCBpbnN0ICkge1xuXHRcdHJldHVybiB0aGlzLl9yZXN0cmljdE1pbk1heCggaW5zdCxcblx0XHRcdHRoaXMuX2RldGVybWluZURhdGUoIGluc3QsIHRoaXMuX2dldCggaW5zdCwgXCJkZWZhdWx0RGF0ZVwiICksIG5ldyBEYXRlKCkgKSApO1xuXHR9LFxuXG5cdC8qIEEgZGF0ZSBtYXkgYmUgc3BlY2lmaWVkIGFzIGFuIGV4YWN0IHZhbHVlIG9yIGEgcmVsYXRpdmUgb25lLiAqL1xuXHRfZGV0ZXJtaW5lRGF0ZTogZnVuY3Rpb24oIGluc3QsIGRhdGUsIGRlZmF1bHREYXRlICkge1xuXHRcdHZhciBvZmZzZXROdW1lcmljID0gZnVuY3Rpb24oIG9mZnNldCApIHtcblx0XHRcdFx0dmFyIGRhdGUgPSBuZXcgRGF0ZSgpO1xuXHRcdFx0XHRkYXRlLnNldERhdGUoIGRhdGUuZ2V0RGF0ZSgpICsgb2Zmc2V0ICk7XG5cdFx0XHRcdHJldHVybiBkYXRlO1xuXHRcdFx0fSxcblx0XHRcdG9mZnNldFN0cmluZyA9IGZ1bmN0aW9uKCBvZmZzZXQgKSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0cmV0dXJuICQuZGF0ZXBpY2tlci5wYXJzZURhdGUoICQuZGF0ZXBpY2tlci5fZ2V0KCBpbnN0LCBcImRhdGVGb3JtYXRcIiApLFxuXHRcdFx0XHRcdFx0b2Zmc2V0LCAkLmRhdGVwaWNrZXIuX2dldEZvcm1hdENvbmZpZyggaW5zdCApICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gSWdub3JlXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgZGF0ZSA9ICggb2Zmc2V0LnRvTG93ZXJDYXNlKCkubWF0Y2goIC9eYy8gKSA/XG5cdFx0XHRcdFx0JC5kYXRlcGlja2VyLl9nZXREYXRlKCBpbnN0ICkgOiBudWxsICkgfHwgbmV3IERhdGUoKSxcblx0XHRcdFx0XHR5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpLFxuXHRcdFx0XHRcdG1vbnRoID0gZGF0ZS5nZXRNb250aCgpLFxuXHRcdFx0XHRcdGRheSA9IGRhdGUuZ2V0RGF0ZSgpLFxuXHRcdFx0XHRcdHBhdHRlcm4gPSAvKFsrXFwtXT9bMC05XSspXFxzKihkfER8d3xXfG18TXx5fFkpPy9nLFxuXHRcdFx0XHRcdG1hdGNoZXMgPSBwYXR0ZXJuLmV4ZWMoIG9mZnNldCApO1xuXG5cdFx0XHRcdHdoaWxlICggbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRzd2l0Y2ggKCBtYXRjaGVzWyAyIF0gfHwgXCJkXCIgKSB7XG5cdFx0XHRcdFx0XHRjYXNlIFwiZFwiIDogY2FzZSBcIkRcIiA6XG5cdFx0XHRcdFx0XHRcdGRheSArPSBwYXJzZUludCggbWF0Y2hlc1sgMSBdLCAxMCApOyBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgXCJ3XCIgOiBjYXNlIFwiV1wiIDpcblx0XHRcdFx0XHRcdFx0ZGF5ICs9IHBhcnNlSW50KCBtYXRjaGVzWyAxIF0sIDEwICkgKiA3OyBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgXCJtXCIgOiBjYXNlIFwiTVwiIDpcblx0XHRcdFx0XHRcdFx0bW9udGggKz0gcGFyc2VJbnQoIG1hdGNoZXNbIDEgXSwgMTAgKTtcblx0XHRcdFx0XHRcdFx0ZGF5ID0gTWF0aC5taW4oIGRheSwgJC5kYXRlcGlja2VyLl9nZXREYXlzSW5Nb250aCggeWVhciwgbW9udGggKSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgXCJ5XCI6IGNhc2UgXCJZXCIgOlxuXHRcdFx0XHRcdFx0XHR5ZWFyICs9IHBhcnNlSW50KCBtYXRjaGVzWyAxIF0sIDEwICk7XG5cdFx0XHRcdFx0XHRcdGRheSA9IE1hdGgubWluKCBkYXksICQuZGF0ZXBpY2tlci5fZ2V0RGF5c0luTW9udGgoIHllYXIsIG1vbnRoICkgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1hdGNoZXMgPSBwYXR0ZXJuLmV4ZWMoIG9mZnNldCApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBuZXcgRGF0ZSggeWVhciwgbW9udGgsIGRheSApO1xuXHRcdFx0fSxcblx0XHRcdG5ld0RhdGUgPSAoIGRhdGUgPT0gbnVsbCB8fCBkYXRlID09PSBcIlwiID8gZGVmYXVsdERhdGUgOiAoIHR5cGVvZiBkYXRlID09PSBcInN0cmluZ1wiID8gb2Zmc2V0U3RyaW5nKCBkYXRlICkgOlxuXHRcdFx0XHQoIHR5cGVvZiBkYXRlID09PSBcIm51bWJlclwiID8gKCBpc05hTiggZGF0ZSApID8gZGVmYXVsdERhdGUgOiBvZmZzZXROdW1lcmljKCBkYXRlICkgKSA6IG5ldyBEYXRlKCBkYXRlLmdldFRpbWUoKSApICkgKSApO1xuXG5cdFx0bmV3RGF0ZSA9ICggbmV3RGF0ZSAmJiBuZXdEYXRlLnRvU3RyaW5nKCkgPT09IFwiSW52YWxpZCBEYXRlXCIgPyBkZWZhdWx0RGF0ZSA6IG5ld0RhdGUgKTtcblx0XHRpZiAoIG5ld0RhdGUgKSB7XG5cdFx0XHRuZXdEYXRlLnNldEhvdXJzKCAwICk7XG5cdFx0XHRuZXdEYXRlLnNldE1pbnV0ZXMoIDAgKTtcblx0XHRcdG5ld0RhdGUuc2V0U2Vjb25kcyggMCApO1xuXHRcdFx0bmV3RGF0ZS5zZXRNaWxsaXNlY29uZHMoIDAgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KCBuZXdEYXRlICk7XG5cdH0sXG5cblx0LyogSGFuZGxlIHN3aXRjaCB0by9mcm9tIGRheWxpZ2h0IHNhdmluZy5cblx0ICogSG91cnMgbWF5IGJlIG5vbi16ZXJvIG9uIGRheWxpZ2h0IHNhdmluZyBjdXQtb3Zlcjpcblx0ICogPiAxMiB3aGVuIG1pZG5pZ2h0IGNoYW5nZW92ZXIsIGJ1dCB0aGVuIGNhbm5vdCBnZW5lcmF0ZVxuXHQgKiBtaWRuaWdodCBkYXRldGltZSwgc28ganVtcCB0byAxQU0sIG90aGVyd2lzZSByZXNldC5cblx0ICogQHBhcmFtICBkYXRlICAoRGF0ZSkgdGhlIGRhdGUgdG8gY2hlY2tcblx0ICogQHJldHVybiAgKERhdGUpIHRoZSBjb3JyZWN0ZWQgZGF0ZVxuXHQgKi9cblx0X2RheWxpZ2h0U2F2aW5nQWRqdXN0OiBmdW5jdGlvbiggZGF0ZSApIHtcblx0XHRpZiAoICFkYXRlICkge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHRcdGRhdGUuc2V0SG91cnMoIGRhdGUuZ2V0SG91cnMoKSA+IDEyID8gZGF0ZS5nZXRIb3VycygpICsgMiA6IDAgKTtcblx0XHRyZXR1cm4gZGF0ZTtcblx0fSxcblxuXHQvKiBTZXQgdGhlIGRhdGUocykgZGlyZWN0bHkuICovXG5cdF9zZXREYXRlOiBmdW5jdGlvbiggaW5zdCwgZGF0ZSwgbm9DaGFuZ2UgKSB7XG5cdFx0dmFyIGNsZWFyID0gIWRhdGUsXG5cdFx0XHRvcmlnTW9udGggPSBpbnN0LnNlbGVjdGVkTW9udGgsXG5cdFx0XHRvcmlnWWVhciA9IGluc3Quc2VsZWN0ZWRZZWFyLFxuXHRcdFx0bmV3RGF0ZSA9IHRoaXMuX3Jlc3RyaWN0TWluTWF4KCBpbnN0LCB0aGlzLl9kZXRlcm1pbmVEYXRlKCBpbnN0LCBkYXRlLCBuZXcgRGF0ZSgpICkgKTtcblxuXHRcdGluc3Quc2VsZWN0ZWREYXkgPSBpbnN0LmN1cnJlbnREYXkgPSBuZXdEYXRlLmdldERhdGUoKTtcblx0XHRpbnN0LmRyYXdNb250aCA9IGluc3Quc2VsZWN0ZWRNb250aCA9IGluc3QuY3VycmVudE1vbnRoID0gbmV3RGF0ZS5nZXRNb250aCgpO1xuXHRcdGluc3QuZHJhd1llYXIgPSBpbnN0LnNlbGVjdGVkWWVhciA9IGluc3QuY3VycmVudFllYXIgPSBuZXdEYXRlLmdldEZ1bGxZZWFyKCk7XG5cdFx0aWYgKCAoIG9yaWdNb250aCAhPT0gaW5zdC5zZWxlY3RlZE1vbnRoIHx8IG9yaWdZZWFyICE9PSBpbnN0LnNlbGVjdGVkWWVhciApICYmICFub0NoYW5nZSApIHtcblx0XHRcdHRoaXMuX25vdGlmeUNoYW5nZSggaW5zdCApO1xuXHRcdH1cblx0XHR0aGlzLl9hZGp1c3RJbnN0RGF0ZSggaW5zdCApO1xuXHRcdGlmICggaW5zdC5pbnB1dCApIHtcblx0XHRcdGluc3QuaW5wdXQudmFsKCBjbGVhciA/IFwiXCIgOiB0aGlzLl9mb3JtYXREYXRlKCBpbnN0ICkgKTtcblx0XHR9XG5cdH0sXG5cblx0LyogUmV0cmlldmUgdGhlIGRhdGUocykgZGlyZWN0bHkuICovXG5cdF9nZXREYXRlOiBmdW5jdGlvbiggaW5zdCApIHtcblx0XHR2YXIgc3RhcnREYXRlID0gKCAhaW5zdC5jdXJyZW50WWVhciB8fCAoIGluc3QuaW5wdXQgJiYgaW5zdC5pbnB1dC52YWwoKSA9PT0gXCJcIiApID8gbnVsbCA6XG5cdFx0XHR0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdCggbmV3IERhdGUoXG5cdFx0XHRpbnN0LmN1cnJlbnRZZWFyLCBpbnN0LmN1cnJlbnRNb250aCwgaW5zdC5jdXJyZW50RGF5ICkgKSApO1xuXHRcdFx0cmV0dXJuIHN0YXJ0RGF0ZTtcblx0fSxcblxuXHQvKiBBdHRhY2ggdGhlIG9ueHh4IGhhbmRsZXJzLiAgVGhlc2UgYXJlIGRlY2xhcmVkIHN0YXRpY2FsbHkgc29cblx0ICogdGhleSB3b3JrIHdpdGggc3RhdGljIGNvZGUgdHJhbnNmb3JtZXJzIGxpa2UgQ2FqYS5cblx0ICovXG5cdF9hdHRhY2hIYW5kbGVyczogZnVuY3Rpb24oIGluc3QgKSB7XG5cdFx0dmFyIHN0ZXBNb250aHMgPSB0aGlzLl9nZXQoIGluc3QsIFwic3RlcE1vbnRoc1wiICksXG5cdFx0XHRpZCA9IFwiI1wiICsgaW5zdC5pZC5yZXBsYWNlKCAvXFxcXFxcXFwvZywgXCJcXFxcXCIgKTtcblx0XHRpbnN0LmRwRGl2LmZpbmQoIFwiW2RhdGEtaGFuZGxlcl1cIiApLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaGFuZGxlciA9IHtcblx0XHRcdFx0cHJldjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0JC5kYXRlcGlja2VyLl9hZGp1c3REYXRlKCBpZCwgLXN0ZXBNb250aHMsIFwiTVwiICk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdG5leHQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdCQuZGF0ZXBpY2tlci5fYWRqdXN0RGF0ZSggaWQsICtzdGVwTW9udGhzLCBcIk1cIiApO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHQkLmRhdGVwaWNrZXIuX2hpZGVEYXRlcGlja2VyKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRvZGF5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHQkLmRhdGVwaWNrZXIuX2dvdG9Ub2RheSggaWQgKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0c2VsZWN0RGF5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHQkLmRhdGVwaWNrZXIuX3NlbGVjdERheSggaWQsICt0aGlzLmdldEF0dHJpYnV0ZSggXCJkYXRhLW1vbnRoXCIgKSwgK3RoaXMuZ2V0QXR0cmlidXRlKCBcImRhdGEteWVhclwiICksIHRoaXMgKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHNlbGVjdE1vbnRoOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHQkLmRhdGVwaWNrZXIuX3NlbGVjdE1vbnRoWWVhciggaWQsIHRoaXMsIFwiTVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRzZWxlY3RZZWFyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHQkLmRhdGVwaWNrZXIuX3NlbGVjdE1vbnRoWWVhciggaWQsIHRoaXMsIFwiWVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0JCggdGhpcyApLm9uKCB0aGlzLmdldEF0dHJpYnV0ZSggXCJkYXRhLWV2ZW50XCIgKSwgaGFuZGxlclsgdGhpcy5nZXRBdHRyaWJ1dGUoIFwiZGF0YS1oYW5kbGVyXCIgKSBdICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdC8qIEdlbmVyYXRlIHRoZSBIVE1MIGZvciB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgZGF0ZSBwaWNrZXIuICovXG5cdF9nZW5lcmF0ZUhUTUw6IGZ1bmN0aW9uKCBpbnN0ICkge1xuXHRcdHZhciBtYXhEcmF3LCBwcmV2VGV4dCwgcHJldiwgbmV4dFRleHQsIG5leHQsIGN1cnJlbnRUZXh0LCBnb3RvRGF0ZSxcblx0XHRcdGNvbnRyb2xzLCBidXR0b25QYW5lbCwgZmlyc3REYXksIHNob3dXZWVrLCBkYXlOYW1lcywgZGF5TmFtZXNNaW4sXG5cdFx0XHRtb250aE5hbWVzLCBtb250aE5hbWVzU2hvcnQsIGJlZm9yZVNob3dEYXksIHNob3dPdGhlck1vbnRocyxcblx0XHRcdHNlbGVjdE90aGVyTW9udGhzLCBkZWZhdWx0RGF0ZSwgaHRtbCwgZG93LCByb3csIGdyb3VwLCBjb2wsIHNlbGVjdGVkRGF0ZSxcblx0XHRcdGNvcm5lckNsYXNzLCBjYWxlbmRlciwgdGhlYWQsIGRheSwgZGF5c0luTW9udGgsIGxlYWREYXlzLCBjdXJSb3dzLCBudW1Sb3dzLFxuXHRcdFx0cHJpbnREYXRlLCBkUm93LCB0Ym9keSwgZGF5U2V0dGluZ3MsIG90aGVyTW9udGgsIHVuc2VsZWN0YWJsZSxcblx0XHRcdHRlbXBEYXRlID0gbmV3IERhdGUoKSxcblx0XHRcdHRvZGF5ID0gdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QoXG5cdFx0XHRcdG5ldyBEYXRlKCB0ZW1wRGF0ZS5nZXRGdWxsWWVhcigpLCB0ZW1wRGF0ZS5nZXRNb250aCgpLCB0ZW1wRGF0ZS5nZXREYXRlKCkgKSApLCAvLyBjbGVhciB0aW1lXG5cdFx0XHRpc1JUTCA9IHRoaXMuX2dldCggaW5zdCwgXCJpc1JUTFwiICksXG5cdFx0XHRzaG93QnV0dG9uUGFuZWwgPSB0aGlzLl9nZXQoIGluc3QsIFwic2hvd0J1dHRvblBhbmVsXCIgKSxcblx0XHRcdGhpZGVJZk5vUHJldk5leHQgPSB0aGlzLl9nZXQoIGluc3QsIFwiaGlkZUlmTm9QcmV2TmV4dFwiICksXG5cdFx0XHRuYXZpZ2F0aW9uQXNEYXRlRm9ybWF0ID0gdGhpcy5fZ2V0KCBpbnN0LCBcIm5hdmlnYXRpb25Bc0RhdGVGb3JtYXRcIiApLFxuXHRcdFx0bnVtTW9udGhzID0gdGhpcy5fZ2V0TnVtYmVyT2ZNb250aHMoIGluc3QgKSxcblx0XHRcdHNob3dDdXJyZW50QXRQb3MgPSB0aGlzLl9nZXQoIGluc3QsIFwic2hvd0N1cnJlbnRBdFBvc1wiICksXG5cdFx0XHRzdGVwTW9udGhzID0gdGhpcy5fZ2V0KCBpbnN0LCBcInN0ZXBNb250aHNcIiApLFxuXHRcdFx0aXNNdWx0aU1vbnRoID0gKCBudW1Nb250aHNbIDAgXSAhPT0gMSB8fCBudW1Nb250aHNbIDEgXSAhPT0gMSApLFxuXHRcdFx0Y3VycmVudERhdGUgPSB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdCggKCAhaW5zdC5jdXJyZW50RGF5ID8gbmV3IERhdGUoIDk5OTksIDksIDkgKSA6XG5cdFx0XHRcdG5ldyBEYXRlKCBpbnN0LmN1cnJlbnRZZWFyLCBpbnN0LmN1cnJlbnRNb250aCwgaW5zdC5jdXJyZW50RGF5ICkgKSApLFxuXHRcdFx0bWluRGF0ZSA9IHRoaXMuX2dldE1pbk1heERhdGUoIGluc3QsIFwibWluXCIgKSxcblx0XHRcdG1heERhdGUgPSB0aGlzLl9nZXRNaW5NYXhEYXRlKCBpbnN0LCBcIm1heFwiICksXG5cdFx0XHRkcmF3TW9udGggPSBpbnN0LmRyYXdNb250aCAtIHNob3dDdXJyZW50QXRQb3MsXG5cdFx0XHRkcmF3WWVhciA9IGluc3QuZHJhd1llYXI7XG5cblx0XHRpZiAoIGRyYXdNb250aCA8IDAgKSB7XG5cdFx0XHRkcmF3TW9udGggKz0gMTI7XG5cdFx0XHRkcmF3WWVhci0tO1xuXHRcdH1cblx0XHRpZiAoIG1heERhdGUgKSB7XG5cdFx0XHRtYXhEcmF3ID0gdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QoIG5ldyBEYXRlKCBtYXhEYXRlLmdldEZ1bGxZZWFyKCksXG5cdFx0XHRcdG1heERhdGUuZ2V0TW9udGgoKSAtICggbnVtTW9udGhzWyAwIF0gKiBudW1Nb250aHNbIDEgXSApICsgMSwgbWF4RGF0ZS5nZXREYXRlKCkgKSApO1xuXHRcdFx0bWF4RHJhdyA9ICggbWluRGF0ZSAmJiBtYXhEcmF3IDwgbWluRGF0ZSA/IG1pbkRhdGUgOiBtYXhEcmF3ICk7XG5cdFx0XHR3aGlsZSAoIHRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KCBuZXcgRGF0ZSggZHJhd1llYXIsIGRyYXdNb250aCwgMSApICkgPiBtYXhEcmF3ICkge1xuXHRcdFx0XHRkcmF3TW9udGgtLTtcblx0XHRcdFx0aWYgKCBkcmF3TW9udGggPCAwICkge1xuXHRcdFx0XHRcdGRyYXdNb250aCA9IDExO1xuXHRcdFx0XHRcdGRyYXdZZWFyLS07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0aW5zdC5kcmF3TW9udGggPSBkcmF3TW9udGg7XG5cdFx0aW5zdC5kcmF3WWVhciA9IGRyYXdZZWFyO1xuXG5cdFx0cHJldlRleHQgPSB0aGlzLl9nZXQoIGluc3QsIFwicHJldlRleHRcIiApO1xuXHRcdHByZXZUZXh0ID0gKCAhbmF2aWdhdGlvbkFzRGF0ZUZvcm1hdCA/IHByZXZUZXh0IDogdGhpcy5mb3JtYXREYXRlKCBwcmV2VGV4dCxcblx0XHRcdHRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KCBuZXcgRGF0ZSggZHJhd1llYXIsIGRyYXdNb250aCAtIHN0ZXBNb250aHMsIDEgKSApLFxuXHRcdFx0dGhpcy5fZ2V0Rm9ybWF0Q29uZmlnKCBpbnN0ICkgKSApO1xuXG5cdFx0cHJldiA9ICggdGhpcy5fY2FuQWRqdXN0TW9udGgoIGluc3QsIC0xLCBkcmF3WWVhciwgZHJhd01vbnRoICkgP1xuXHRcdFx0XCI8YSBjbGFzcz0ndWktZGF0ZXBpY2tlci1wcmV2IHVpLWNvcm5lci1hbGwnIGRhdGEtaGFuZGxlcj0ncHJldicgZGF0YS1ldmVudD0nY2xpY2snXCIgK1xuXHRcdFx0XCIgdGl0bGU9J1wiICsgcHJldlRleHQgKyBcIic+PHNwYW4gY2xhc3M9J3VpLWljb24gdWktaWNvbi1jaXJjbGUtdHJpYW5nbGUtXCIgKyAoIGlzUlRMID8gXCJlXCIgOiBcIndcIiApICsgXCInPlwiICsgcHJldlRleHQgKyBcIjwvc3Bhbj48L2E+XCIgOlxuXHRcdFx0KCBoaWRlSWZOb1ByZXZOZXh0ID8gXCJcIiA6IFwiPGEgY2xhc3M9J3VpLWRhdGVwaWNrZXItcHJldiB1aS1jb3JuZXItYWxsIHVpLXN0YXRlLWRpc2FibGVkJyB0aXRsZT0nXCIgKyBwcmV2VGV4dCArIFwiJz48c3BhbiBjbGFzcz0ndWktaWNvbiB1aS1pY29uLWNpcmNsZS10cmlhbmdsZS1cIiArICggaXNSVEwgPyBcImVcIiA6IFwid1wiICkgKyBcIic+XCIgKyBwcmV2VGV4dCArIFwiPC9zcGFuPjwvYT5cIiApICk7XG5cblx0XHRuZXh0VGV4dCA9IHRoaXMuX2dldCggaW5zdCwgXCJuZXh0VGV4dFwiICk7XG5cdFx0bmV4dFRleHQgPSAoICFuYXZpZ2F0aW9uQXNEYXRlRm9ybWF0ID8gbmV4dFRleHQgOiB0aGlzLmZvcm1hdERhdGUoIG5leHRUZXh0LFxuXHRcdFx0dGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QoIG5ldyBEYXRlKCBkcmF3WWVhciwgZHJhd01vbnRoICsgc3RlcE1vbnRocywgMSApICksXG5cdFx0XHR0aGlzLl9nZXRGb3JtYXRDb25maWcoIGluc3QgKSApICk7XG5cblx0XHRuZXh0ID0gKCB0aGlzLl9jYW5BZGp1c3RNb250aCggaW5zdCwgKzEsIGRyYXdZZWFyLCBkcmF3TW9udGggKSA/XG5cdFx0XHRcIjxhIGNsYXNzPSd1aS1kYXRlcGlja2VyLW5leHQgdWktY29ybmVyLWFsbCcgZGF0YS1oYW5kbGVyPSduZXh0JyBkYXRhLWV2ZW50PSdjbGljaydcIiArXG5cdFx0XHRcIiB0aXRsZT0nXCIgKyBuZXh0VGV4dCArIFwiJz48c3BhbiBjbGFzcz0ndWktaWNvbiB1aS1pY29uLWNpcmNsZS10cmlhbmdsZS1cIiArICggaXNSVEwgPyBcIndcIiA6IFwiZVwiICkgKyBcIic+XCIgKyBuZXh0VGV4dCArIFwiPC9zcGFuPjwvYT5cIiA6XG5cdFx0XHQoIGhpZGVJZk5vUHJldk5leHQgPyBcIlwiIDogXCI8YSBjbGFzcz0ndWktZGF0ZXBpY2tlci1uZXh0IHVpLWNvcm5lci1hbGwgdWktc3RhdGUtZGlzYWJsZWQnIHRpdGxlPSdcIiArIG5leHRUZXh0ICsgXCInPjxzcGFuIGNsYXNzPSd1aS1pY29uIHVpLWljb24tY2lyY2xlLXRyaWFuZ2xlLVwiICsgKCBpc1JUTCA/IFwid1wiIDogXCJlXCIgKSArIFwiJz5cIiArIG5leHRUZXh0ICsgXCI8L3NwYW4+PC9hPlwiICkgKTtcblxuXHRcdGN1cnJlbnRUZXh0ID0gdGhpcy5fZ2V0KCBpbnN0LCBcImN1cnJlbnRUZXh0XCIgKTtcblx0XHRnb3RvRGF0ZSA9ICggdGhpcy5fZ2V0KCBpbnN0LCBcImdvdG9DdXJyZW50XCIgKSAmJiBpbnN0LmN1cnJlbnREYXkgPyBjdXJyZW50RGF0ZSA6IHRvZGF5ICk7XG5cdFx0Y3VycmVudFRleHQgPSAoICFuYXZpZ2F0aW9uQXNEYXRlRm9ybWF0ID8gY3VycmVudFRleHQgOlxuXHRcdFx0dGhpcy5mb3JtYXREYXRlKCBjdXJyZW50VGV4dCwgZ290b0RhdGUsIHRoaXMuX2dldEZvcm1hdENvbmZpZyggaW5zdCApICkgKTtcblxuXHRcdGNvbnRyb2xzID0gKCAhaW5zdC5pbmxpbmUgPyBcIjxidXR0b24gdHlwZT0nYnV0dG9uJyBjbGFzcz0ndWktZGF0ZXBpY2tlci1jbG9zZSB1aS1zdGF0ZS1kZWZhdWx0IHVpLXByaW9yaXR5LXByaW1hcnkgdWktY29ybmVyLWFsbCcgZGF0YS1oYW5kbGVyPSdoaWRlJyBkYXRhLWV2ZW50PSdjbGljayc+XCIgK1xuXHRcdFx0dGhpcy5fZ2V0KCBpbnN0LCBcImNsb3NlVGV4dFwiICkgKyBcIjwvYnV0dG9uPlwiIDogXCJcIiApO1xuXG5cdFx0YnV0dG9uUGFuZWwgPSAoIHNob3dCdXR0b25QYW5lbCApID8gXCI8ZGl2IGNsYXNzPSd1aS1kYXRlcGlja2VyLWJ1dHRvbnBhbmUgdWktd2lkZ2V0LWNvbnRlbnQnPlwiICsgKCBpc1JUTCA/IGNvbnRyb2xzIDogXCJcIiApICtcblx0XHRcdCggdGhpcy5faXNJblJhbmdlKCBpbnN0LCBnb3RvRGF0ZSApID8gXCI8YnV0dG9uIHR5cGU9J2J1dHRvbicgY2xhc3M9J3VpLWRhdGVwaWNrZXItY3VycmVudCB1aS1zdGF0ZS1kZWZhdWx0IHVpLXByaW9yaXR5LXNlY29uZGFyeSB1aS1jb3JuZXItYWxsJyBkYXRhLWhhbmRsZXI9J3RvZGF5JyBkYXRhLWV2ZW50PSdjbGljaydcIiArXG5cdFx0XHRcIj5cIiArIGN1cnJlbnRUZXh0ICsgXCI8L2J1dHRvbj5cIiA6IFwiXCIgKSArICggaXNSVEwgPyBcIlwiIDogY29udHJvbHMgKSArIFwiPC9kaXY+XCIgOiBcIlwiO1xuXG5cdFx0Zmlyc3REYXkgPSBwYXJzZUludCggdGhpcy5fZ2V0KCBpbnN0LCBcImZpcnN0RGF5XCIgKSwgMTAgKTtcblx0XHRmaXJzdERheSA9ICggaXNOYU4oIGZpcnN0RGF5ICkgPyAwIDogZmlyc3REYXkgKTtcblxuXHRcdHNob3dXZWVrID0gdGhpcy5fZ2V0KCBpbnN0LCBcInNob3dXZWVrXCIgKTtcblx0XHRkYXlOYW1lcyA9IHRoaXMuX2dldCggaW5zdCwgXCJkYXlOYW1lc1wiICk7XG5cdFx0ZGF5TmFtZXNNaW4gPSB0aGlzLl9nZXQoIGluc3QsIFwiZGF5TmFtZXNNaW5cIiApO1xuXHRcdG1vbnRoTmFtZXMgPSB0aGlzLl9nZXQoIGluc3QsIFwibW9udGhOYW1lc1wiICk7XG5cdFx0bW9udGhOYW1lc1Nob3J0ID0gdGhpcy5fZ2V0KCBpbnN0LCBcIm1vbnRoTmFtZXNTaG9ydFwiICk7XG5cdFx0YmVmb3JlU2hvd0RheSA9IHRoaXMuX2dldCggaW5zdCwgXCJiZWZvcmVTaG93RGF5XCIgKTtcblx0XHRzaG93T3RoZXJNb250aHMgPSB0aGlzLl9nZXQoIGluc3QsIFwic2hvd090aGVyTW9udGhzXCIgKTtcblx0XHRzZWxlY3RPdGhlck1vbnRocyA9IHRoaXMuX2dldCggaW5zdCwgXCJzZWxlY3RPdGhlck1vbnRoc1wiICk7XG5cdFx0ZGVmYXVsdERhdGUgPSB0aGlzLl9nZXREZWZhdWx0RGF0ZSggaW5zdCApO1xuXHRcdGh0bWwgPSBcIlwiO1xuXG5cdFx0Zm9yICggcm93ID0gMDsgcm93IDwgbnVtTW9udGhzWyAwIF07IHJvdysrICkge1xuXHRcdFx0Z3JvdXAgPSBcIlwiO1xuXHRcdFx0dGhpcy5tYXhSb3dzID0gNDtcblx0XHRcdGZvciAoIGNvbCA9IDA7IGNvbCA8IG51bU1vbnRoc1sgMSBdOyBjb2wrKyApIHtcblx0XHRcdFx0c2VsZWN0ZWREYXRlID0gdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QoIG5ldyBEYXRlKCBkcmF3WWVhciwgZHJhd01vbnRoLCBpbnN0LnNlbGVjdGVkRGF5ICkgKTtcblx0XHRcdFx0Y29ybmVyQ2xhc3MgPSBcIiB1aS1jb3JuZXItYWxsXCI7XG5cdFx0XHRcdGNhbGVuZGVyID0gXCJcIjtcblx0XHRcdFx0aWYgKCBpc011bHRpTW9udGggKSB7XG5cdFx0XHRcdFx0Y2FsZW5kZXIgKz0gXCI8ZGl2IGNsYXNzPSd1aS1kYXRlcGlja2VyLWdyb3VwXCI7XG5cdFx0XHRcdFx0aWYgKCBudW1Nb250aHNbIDEgXSA+IDEgKSB7XG5cdFx0XHRcdFx0XHRzd2l0Y2ggKCBjb2wgKSB7XG5cdFx0XHRcdFx0XHRcdGNhc2UgMDogY2FsZW5kZXIgKz0gXCIgdWktZGF0ZXBpY2tlci1ncm91cC1maXJzdFwiO1xuXHRcdFx0XHRcdFx0XHRcdGNvcm5lckNsYXNzID0gXCIgdWktY29ybmVyLVwiICsgKCBpc1JUTCA/IFwicmlnaHRcIiA6IFwibGVmdFwiICk7IGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRjYXNlIG51bU1vbnRoc1sgMSBdIC0gMTogY2FsZW5kZXIgKz0gXCIgdWktZGF0ZXBpY2tlci1ncm91cC1sYXN0XCI7XG5cdFx0XHRcdFx0XHRcdFx0Y29ybmVyQ2xhc3MgPSBcIiB1aS1jb3JuZXItXCIgKyAoIGlzUlRMID8gXCJsZWZ0XCIgOiBcInJpZ2h0XCIgKTsgYnJlYWs7XG5cdFx0XHRcdFx0XHRcdGRlZmF1bHQ6IGNhbGVuZGVyICs9IFwiIHVpLWRhdGVwaWNrZXItZ3JvdXAtbWlkZGxlXCI7IGNvcm5lckNsYXNzID0gXCJcIjsgYnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNhbGVuZGVyICs9IFwiJz5cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRjYWxlbmRlciArPSBcIjxkaXYgY2xhc3M9J3VpLWRhdGVwaWNrZXItaGVhZGVyIHVpLXdpZGdldC1oZWFkZXIgdWktaGVscGVyLWNsZWFyZml4XCIgKyBjb3JuZXJDbGFzcyArIFwiJz5cIiArXG5cdFx0XHRcdFx0KCAvYWxsfGxlZnQvLnRlc3QoIGNvcm5lckNsYXNzICkgJiYgcm93ID09PSAwID8gKCBpc1JUTCA/IG5leHQgOiBwcmV2ICkgOiBcIlwiICkgK1xuXHRcdFx0XHRcdCggL2FsbHxyaWdodC8udGVzdCggY29ybmVyQ2xhc3MgKSAmJiByb3cgPT09IDAgPyAoIGlzUlRMID8gcHJldiA6IG5leHQgKSA6IFwiXCIgKSArXG5cdFx0XHRcdFx0dGhpcy5fZ2VuZXJhdGVNb250aFllYXJIZWFkZXIoIGluc3QsIGRyYXdNb250aCwgZHJhd1llYXIsIG1pbkRhdGUsIG1heERhdGUsXG5cdFx0XHRcdFx0cm93ID4gMCB8fCBjb2wgPiAwLCBtb250aE5hbWVzLCBtb250aE5hbWVzU2hvcnQgKSArIC8vIGRyYXcgbW9udGggaGVhZGVyc1xuXHRcdFx0XHRcdFwiPC9kaXY+PHRhYmxlIGNsYXNzPSd1aS1kYXRlcGlja2VyLWNhbGVuZGFyJz48dGhlYWQ+XCIgK1xuXHRcdFx0XHRcdFwiPHRyPlwiO1xuXHRcdFx0XHR0aGVhZCA9ICggc2hvd1dlZWsgPyBcIjx0aCBjbGFzcz0ndWktZGF0ZXBpY2tlci13ZWVrLWNvbCc+XCIgKyB0aGlzLl9nZXQoIGluc3QsIFwid2Vla0hlYWRlclwiICkgKyBcIjwvdGg+XCIgOiBcIlwiICk7XG5cdFx0XHRcdGZvciAoIGRvdyA9IDA7IGRvdyA8IDc7IGRvdysrICkgeyAvLyBkYXlzIG9mIHRoZSB3ZWVrXG5cdFx0XHRcdFx0ZGF5ID0gKCBkb3cgKyBmaXJzdERheSApICUgNztcblx0XHRcdFx0XHR0aGVhZCArPSBcIjx0aCBzY29wZT0nY29sJ1wiICsgKCAoIGRvdyArIGZpcnN0RGF5ICsgNiApICUgNyA+PSA1ID8gXCIgY2xhc3M9J3VpLWRhdGVwaWNrZXItd2Vlay1lbmQnXCIgOiBcIlwiICkgKyBcIj5cIiArXG5cdFx0XHRcdFx0XHRcIjxzcGFuIHRpdGxlPSdcIiArIGRheU5hbWVzWyBkYXkgXSArIFwiJz5cIiArIGRheU5hbWVzTWluWyBkYXkgXSArIFwiPC9zcGFuPjwvdGg+XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y2FsZW5kZXIgKz0gdGhlYWQgKyBcIjwvdHI+PC90aGVhZD48dGJvZHk+XCI7XG5cdFx0XHRcdGRheXNJbk1vbnRoID0gdGhpcy5fZ2V0RGF5c0luTW9udGgoIGRyYXdZZWFyLCBkcmF3TW9udGggKTtcblx0XHRcdFx0aWYgKCBkcmF3WWVhciA9PT0gaW5zdC5zZWxlY3RlZFllYXIgJiYgZHJhd01vbnRoID09PSBpbnN0LnNlbGVjdGVkTW9udGggKSB7XG5cdFx0XHRcdFx0aW5zdC5zZWxlY3RlZERheSA9IE1hdGgubWluKCBpbnN0LnNlbGVjdGVkRGF5LCBkYXlzSW5Nb250aCApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxlYWREYXlzID0gKCB0aGlzLl9nZXRGaXJzdERheU9mTW9udGgoIGRyYXdZZWFyLCBkcmF3TW9udGggKSAtIGZpcnN0RGF5ICsgNyApICUgNztcblx0XHRcdFx0Y3VyUm93cyA9IE1hdGguY2VpbCggKCBsZWFkRGF5cyArIGRheXNJbk1vbnRoICkgLyA3ICk7IC8vIGNhbGN1bGF0ZSB0aGUgbnVtYmVyIG9mIHJvd3MgdG8gZ2VuZXJhdGVcblx0XHRcdFx0bnVtUm93cyA9ICggaXNNdWx0aU1vbnRoID8gdGhpcy5tYXhSb3dzID4gY3VyUm93cyA/IHRoaXMubWF4Um93cyA6IGN1clJvd3MgOiBjdXJSb3dzICk7IC8vSWYgbXVsdGlwbGUgbW9udGhzLCB1c2UgdGhlIGhpZ2hlciBudW1iZXIgb2Ygcm93cyAoc2VlICM3MDQzKVxuXHRcdFx0XHR0aGlzLm1heFJvd3MgPSBudW1Sb3dzO1xuXHRcdFx0XHRwcmludERhdGUgPSB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdCggbmV3IERhdGUoIGRyYXdZZWFyLCBkcmF3TW9udGgsIDEgLSBsZWFkRGF5cyApICk7XG5cdFx0XHRcdGZvciAoIGRSb3cgPSAwOyBkUm93IDwgbnVtUm93czsgZFJvdysrICkgeyAvLyBjcmVhdGUgZGF0ZSBwaWNrZXIgcm93c1xuXHRcdFx0XHRcdGNhbGVuZGVyICs9IFwiPHRyPlwiO1xuXHRcdFx0XHRcdHRib2R5ID0gKCAhc2hvd1dlZWsgPyBcIlwiIDogXCI8dGQgY2xhc3M9J3VpLWRhdGVwaWNrZXItd2Vlay1jb2wnPlwiICtcblx0XHRcdFx0XHRcdHRoaXMuX2dldCggaW5zdCwgXCJjYWxjdWxhdGVXZWVrXCIgKSggcHJpbnREYXRlICkgKyBcIjwvdGQ+XCIgKTtcblx0XHRcdFx0XHRmb3IgKCBkb3cgPSAwOyBkb3cgPCA3OyBkb3crKyApIHsgLy8gY3JlYXRlIGRhdGUgcGlja2VyIGRheXNcblx0XHRcdFx0XHRcdGRheVNldHRpbmdzID0gKCBiZWZvcmVTaG93RGF5ID9cblx0XHRcdFx0XHRcdFx0YmVmb3JlU2hvd0RheS5hcHBseSggKCBpbnN0LmlucHV0ID8gaW5zdC5pbnB1dFsgMCBdIDogbnVsbCApLCBbIHByaW50RGF0ZSBdICkgOiBbIHRydWUsIFwiXCIgXSApO1xuXHRcdFx0XHRcdFx0b3RoZXJNb250aCA9ICggcHJpbnREYXRlLmdldE1vbnRoKCkgIT09IGRyYXdNb250aCApO1xuXHRcdFx0XHRcdFx0dW5zZWxlY3RhYmxlID0gKCBvdGhlck1vbnRoICYmICFzZWxlY3RPdGhlck1vbnRocyApIHx8ICFkYXlTZXR0aW5nc1sgMCBdIHx8XG5cdFx0XHRcdFx0XHRcdCggbWluRGF0ZSAmJiBwcmludERhdGUgPCBtaW5EYXRlICkgfHwgKCBtYXhEYXRlICYmIHByaW50RGF0ZSA+IG1heERhdGUgKTtcblx0XHRcdFx0XHRcdHRib2R5ICs9IFwiPHRkIGNsYXNzPSdcIiArXG5cdFx0XHRcdFx0XHRcdCggKCBkb3cgKyBmaXJzdERheSArIDYgKSAlIDcgPj0gNSA/IFwiIHVpLWRhdGVwaWNrZXItd2Vlay1lbmRcIiA6IFwiXCIgKSArIC8vIGhpZ2hsaWdodCB3ZWVrZW5kc1xuXHRcdFx0XHRcdFx0XHQoIG90aGVyTW9udGggPyBcIiB1aS1kYXRlcGlja2VyLW90aGVyLW1vbnRoXCIgOiBcIlwiICkgKyAvLyBoaWdobGlnaHQgZGF5cyBmcm9tIG90aGVyIG1vbnRoc1xuXHRcdFx0XHRcdFx0XHQoICggcHJpbnREYXRlLmdldFRpbWUoKSA9PT0gc2VsZWN0ZWREYXRlLmdldFRpbWUoKSAmJiBkcmF3TW9udGggPT09IGluc3Quc2VsZWN0ZWRNb250aCAmJiBpbnN0Ll9rZXlFdmVudCApIHx8IC8vIHVzZXIgcHJlc3NlZCBrZXlcblx0XHRcdFx0XHRcdFx0KCBkZWZhdWx0RGF0ZS5nZXRUaW1lKCkgPT09IHByaW50RGF0ZS5nZXRUaW1lKCkgJiYgZGVmYXVsdERhdGUuZ2V0VGltZSgpID09PSBzZWxlY3RlZERhdGUuZ2V0VGltZSgpICkgP1xuXG5cdFx0XHRcdFx0XHRcdC8vIG9yIGRlZmF1bHREYXRlIGlzIGN1cnJlbnQgcHJpbnRlZERhdGUgYW5kIGRlZmF1bHREYXRlIGlzIHNlbGVjdGVkRGF0ZVxuXHRcdFx0XHRcdFx0XHRcIiBcIiArIHRoaXMuX2RheU92ZXJDbGFzcyA6IFwiXCIgKSArIC8vIGhpZ2hsaWdodCBzZWxlY3RlZCBkYXlcblx0XHRcdFx0XHRcdFx0KCB1bnNlbGVjdGFibGUgPyBcIiBcIiArIHRoaXMuX3Vuc2VsZWN0YWJsZUNsYXNzICsgXCIgdWktc3RhdGUtZGlzYWJsZWRcIiA6IFwiXCIgKSArICAvLyBoaWdobGlnaHQgdW5zZWxlY3RhYmxlIGRheXNcblx0XHRcdFx0XHRcdFx0KCBvdGhlck1vbnRoICYmICFzaG93T3RoZXJNb250aHMgPyBcIlwiIDogXCIgXCIgKyBkYXlTZXR0aW5nc1sgMSBdICsgLy8gaGlnaGxpZ2h0IGN1c3RvbSBkYXRlc1xuXHRcdFx0XHRcdFx0XHQoIHByaW50RGF0ZS5nZXRUaW1lKCkgPT09IGN1cnJlbnREYXRlLmdldFRpbWUoKSA/IFwiIFwiICsgdGhpcy5fY3VycmVudENsYXNzIDogXCJcIiApICsgLy8gaGlnaGxpZ2h0IHNlbGVjdGVkIGRheVxuXHRcdFx0XHRcdFx0XHQoIHByaW50RGF0ZS5nZXRUaW1lKCkgPT09IHRvZGF5LmdldFRpbWUoKSA/IFwiIHVpLWRhdGVwaWNrZXItdG9kYXlcIiA6IFwiXCIgKSApICsgXCInXCIgKyAvLyBoaWdobGlnaHQgdG9kYXkgKGlmIGRpZmZlcmVudClcblx0XHRcdFx0XHRcdFx0KCAoICFvdGhlck1vbnRoIHx8IHNob3dPdGhlck1vbnRocyApICYmIGRheVNldHRpbmdzWyAyIF0gPyBcIiB0aXRsZT0nXCIgKyBkYXlTZXR0aW5nc1sgMiBdLnJlcGxhY2UoIC8nL2csIFwiJiMzOTtcIiApICsgXCInXCIgOiBcIlwiICkgKyAvLyBjZWxsIHRpdGxlXG5cdFx0XHRcdFx0XHRcdCggdW5zZWxlY3RhYmxlID8gXCJcIiA6IFwiIGRhdGEtaGFuZGxlcj0nc2VsZWN0RGF5JyBkYXRhLWV2ZW50PSdjbGljaycgZGF0YS1tb250aD0nXCIgKyBwcmludERhdGUuZ2V0TW9udGgoKSArIFwiJyBkYXRhLXllYXI9J1wiICsgcHJpbnREYXRlLmdldEZ1bGxZZWFyKCkgKyBcIidcIiApICsgXCI+XCIgKyAvLyBhY3Rpb25zXG5cdFx0XHRcdFx0XHRcdCggb3RoZXJNb250aCAmJiAhc2hvd090aGVyTW9udGhzID8gXCImI3hhMDtcIiA6IC8vIGRpc3BsYXkgZm9yIG90aGVyIG1vbnRoc1xuXHRcdFx0XHRcdFx0XHQoIHVuc2VsZWN0YWJsZSA/IFwiPHNwYW4gY2xhc3M9J3VpLXN0YXRlLWRlZmF1bHQnPlwiICsgcHJpbnREYXRlLmdldERhdGUoKSArIFwiPC9zcGFuPlwiIDogXCI8YSBjbGFzcz0ndWktc3RhdGUtZGVmYXVsdFwiICtcblx0XHRcdFx0XHRcdFx0KCBwcmludERhdGUuZ2V0VGltZSgpID09PSB0b2RheS5nZXRUaW1lKCkgPyBcIiB1aS1zdGF0ZS1oaWdobGlnaHRcIiA6IFwiXCIgKSArXG5cdFx0XHRcdFx0XHRcdCggcHJpbnREYXRlLmdldFRpbWUoKSA9PT0gY3VycmVudERhdGUuZ2V0VGltZSgpID8gXCIgdWktc3RhdGUtYWN0aXZlXCIgOiBcIlwiICkgKyAvLyBoaWdobGlnaHQgc2VsZWN0ZWQgZGF5XG5cdFx0XHRcdFx0XHRcdCggb3RoZXJNb250aCA/IFwiIHVpLXByaW9yaXR5LXNlY29uZGFyeVwiIDogXCJcIiApICsgLy8gZGlzdGluZ3Vpc2ggZGF0ZXMgZnJvbSBvdGhlciBtb250aHNcblx0XHRcdFx0XHRcdFx0XCInIGhyZWY9JyMnPlwiICsgcHJpbnREYXRlLmdldERhdGUoKSArIFwiPC9hPlwiICkgKSArIFwiPC90ZD5cIjsgLy8gZGlzcGxheSBzZWxlY3RhYmxlIGRhdGVcblx0XHRcdFx0XHRcdHByaW50RGF0ZS5zZXREYXRlKCBwcmludERhdGUuZ2V0RGF0ZSgpICsgMSApO1xuXHRcdFx0XHRcdFx0cHJpbnREYXRlID0gdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QoIHByaW50RGF0ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjYWxlbmRlciArPSB0Ym9keSArIFwiPC90cj5cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRkcmF3TW9udGgrKztcblx0XHRcdFx0aWYgKCBkcmF3TW9udGggPiAxMSApIHtcblx0XHRcdFx0XHRkcmF3TW9udGggPSAwO1xuXHRcdFx0XHRcdGRyYXdZZWFyKys7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y2FsZW5kZXIgKz0gXCI8L3Rib2R5PjwvdGFibGU+XCIgKyAoIGlzTXVsdGlNb250aCA/IFwiPC9kaXY+XCIgK1xuXHRcdFx0XHRcdFx0XHQoICggbnVtTW9udGhzWyAwIF0gPiAwICYmIGNvbCA9PT0gbnVtTW9udGhzWyAxIF0gLSAxICkgPyBcIjxkaXYgY2xhc3M9J3VpLWRhdGVwaWNrZXItcm93LWJyZWFrJz48L2Rpdj5cIiA6IFwiXCIgKSA6IFwiXCIgKTtcblx0XHRcdFx0Z3JvdXAgKz0gY2FsZW5kZXI7XG5cdFx0XHR9XG5cdFx0XHRodG1sICs9IGdyb3VwO1xuXHRcdH1cblx0XHRodG1sICs9IGJ1dHRvblBhbmVsO1xuXHRcdGluc3QuX2tleUV2ZW50ID0gZmFsc2U7XG5cdFx0cmV0dXJuIGh0bWw7XG5cdH0sXG5cblx0LyogR2VuZXJhdGUgdGhlIG1vbnRoIGFuZCB5ZWFyIGhlYWRlci4gKi9cblx0X2dlbmVyYXRlTW9udGhZZWFySGVhZGVyOiBmdW5jdGlvbiggaW5zdCwgZHJhd01vbnRoLCBkcmF3WWVhciwgbWluRGF0ZSwgbWF4RGF0ZSxcblx0XHRcdHNlY29uZGFyeSwgbW9udGhOYW1lcywgbW9udGhOYW1lc1Nob3J0ICkge1xuXG5cdFx0dmFyIGluTWluWWVhciwgaW5NYXhZZWFyLCBtb250aCwgeWVhcnMsIHRoaXNZZWFyLCBkZXRlcm1pbmVZZWFyLCB5ZWFyLCBlbmRZZWFyLFxuXHRcdFx0Y2hhbmdlTW9udGggPSB0aGlzLl9nZXQoIGluc3QsIFwiY2hhbmdlTW9udGhcIiApLFxuXHRcdFx0Y2hhbmdlWWVhciA9IHRoaXMuX2dldCggaW5zdCwgXCJjaGFuZ2VZZWFyXCIgKSxcblx0XHRcdHNob3dNb250aEFmdGVyWWVhciA9IHRoaXMuX2dldCggaW5zdCwgXCJzaG93TW9udGhBZnRlclllYXJcIiApLFxuXHRcdFx0aHRtbCA9IFwiPGRpdiBjbGFzcz0ndWktZGF0ZXBpY2tlci10aXRsZSc+XCIsXG5cdFx0XHRtb250aEh0bWwgPSBcIlwiO1xuXG5cdFx0Ly8gTW9udGggc2VsZWN0aW9uXG5cdFx0aWYgKCBzZWNvbmRhcnkgfHwgIWNoYW5nZU1vbnRoICkge1xuXHRcdFx0bW9udGhIdG1sICs9IFwiPHNwYW4gY2xhc3M9J3VpLWRhdGVwaWNrZXItbW9udGgnPlwiICsgbW9udGhOYW1lc1sgZHJhd01vbnRoIF0gKyBcIjwvc3Bhbj5cIjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aW5NaW5ZZWFyID0gKCBtaW5EYXRlICYmIG1pbkRhdGUuZ2V0RnVsbFllYXIoKSA9PT0gZHJhd1llYXIgKTtcblx0XHRcdGluTWF4WWVhciA9ICggbWF4RGF0ZSAmJiBtYXhEYXRlLmdldEZ1bGxZZWFyKCkgPT09IGRyYXdZZWFyICk7XG5cdFx0XHRtb250aEh0bWwgKz0gXCI8c2VsZWN0IGNsYXNzPSd1aS1kYXRlcGlja2VyLW1vbnRoJyBkYXRhLWhhbmRsZXI9J3NlbGVjdE1vbnRoJyBkYXRhLWV2ZW50PSdjaGFuZ2UnPlwiO1xuXHRcdFx0Zm9yICggbW9udGggPSAwOyBtb250aCA8IDEyOyBtb250aCsrICkge1xuXHRcdFx0XHRpZiAoICggIWluTWluWWVhciB8fCBtb250aCA+PSBtaW5EYXRlLmdldE1vbnRoKCkgKSAmJiAoICFpbk1heFllYXIgfHwgbW9udGggPD0gbWF4RGF0ZS5nZXRNb250aCgpICkgKSB7XG5cdFx0XHRcdFx0bW9udGhIdG1sICs9IFwiPG9wdGlvbiB2YWx1ZT0nXCIgKyBtb250aCArIFwiJ1wiICtcblx0XHRcdFx0XHRcdCggbW9udGggPT09IGRyYXdNb250aCA/IFwiIHNlbGVjdGVkPSdzZWxlY3RlZCdcIiA6IFwiXCIgKSArXG5cdFx0XHRcdFx0XHRcIj5cIiArIG1vbnRoTmFtZXNTaG9ydFsgbW9udGggXSArIFwiPC9vcHRpb24+XCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG1vbnRoSHRtbCArPSBcIjwvc2VsZWN0PlwiO1xuXHRcdH1cblxuXHRcdGlmICggIXNob3dNb250aEFmdGVyWWVhciApIHtcblx0XHRcdGh0bWwgKz0gbW9udGhIdG1sICsgKCBzZWNvbmRhcnkgfHwgISggY2hhbmdlTW9udGggJiYgY2hhbmdlWWVhciApID8gXCImI3hhMDtcIiA6IFwiXCIgKTtcblx0XHR9XG5cblx0XHQvLyBZZWFyIHNlbGVjdGlvblxuXHRcdGlmICggIWluc3QueWVhcnNodG1sICkge1xuXHRcdFx0aW5zdC55ZWFyc2h0bWwgPSBcIlwiO1xuXHRcdFx0aWYgKCBzZWNvbmRhcnkgfHwgIWNoYW5nZVllYXIgKSB7XG5cdFx0XHRcdGh0bWwgKz0gXCI8c3BhbiBjbGFzcz0ndWktZGF0ZXBpY2tlci15ZWFyJz5cIiArIGRyYXdZZWFyICsgXCI8L3NwYW4+XCI7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIGRldGVybWluZSByYW5nZSBvZiB5ZWFycyB0byBkaXNwbGF5XG5cdFx0XHRcdHllYXJzID0gdGhpcy5fZ2V0KCBpbnN0LCBcInllYXJSYW5nZVwiICkuc3BsaXQoIFwiOlwiICk7XG5cdFx0XHRcdHRoaXNZZWFyID0gbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpO1xuXHRcdFx0XHRkZXRlcm1pbmVZZWFyID0gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHZhciB5ZWFyID0gKCB2YWx1ZS5tYXRjaCggL2NbK1xcLV0uKi8gKSA/IGRyYXdZZWFyICsgcGFyc2VJbnQoIHZhbHVlLnN1YnN0cmluZyggMSApLCAxMCApIDpcblx0XHRcdFx0XHRcdCggdmFsdWUubWF0Y2goIC9bK1xcLV0uKi8gKSA/IHRoaXNZZWFyICsgcGFyc2VJbnQoIHZhbHVlLCAxMCApIDpcblx0XHRcdFx0XHRcdHBhcnNlSW50KCB2YWx1ZSwgMTAgKSApICk7XG5cdFx0XHRcdFx0cmV0dXJuICggaXNOYU4oIHllYXIgKSA/IHRoaXNZZWFyIDogeWVhciApO1xuXHRcdFx0XHR9O1xuXHRcdFx0XHR5ZWFyID0gZGV0ZXJtaW5lWWVhciggeWVhcnNbIDAgXSApO1xuXHRcdFx0XHRlbmRZZWFyID0gTWF0aC5tYXgoIHllYXIsIGRldGVybWluZVllYXIoIHllYXJzWyAxIF0gfHwgXCJcIiApICk7XG5cdFx0XHRcdHllYXIgPSAoIG1pbkRhdGUgPyBNYXRoLm1heCggeWVhciwgbWluRGF0ZS5nZXRGdWxsWWVhcigpICkgOiB5ZWFyICk7XG5cdFx0XHRcdGVuZFllYXIgPSAoIG1heERhdGUgPyBNYXRoLm1pbiggZW5kWWVhciwgbWF4RGF0ZS5nZXRGdWxsWWVhcigpICkgOiBlbmRZZWFyICk7XG5cdFx0XHRcdGluc3QueWVhcnNodG1sICs9IFwiPHNlbGVjdCBjbGFzcz0ndWktZGF0ZXBpY2tlci15ZWFyJyBkYXRhLWhhbmRsZXI9J3NlbGVjdFllYXInIGRhdGEtZXZlbnQ9J2NoYW5nZSc+XCI7XG5cdFx0XHRcdGZvciAoIDsgeWVhciA8PSBlbmRZZWFyOyB5ZWFyKysgKSB7XG5cdFx0XHRcdFx0aW5zdC55ZWFyc2h0bWwgKz0gXCI8b3B0aW9uIHZhbHVlPSdcIiArIHllYXIgKyBcIidcIiArXG5cdFx0XHRcdFx0XHQoIHllYXIgPT09IGRyYXdZZWFyID8gXCIgc2VsZWN0ZWQ9J3NlbGVjdGVkJ1wiIDogXCJcIiApICtcblx0XHRcdFx0XHRcdFwiPlwiICsgeWVhciArIFwiPC9vcHRpb24+XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aW5zdC55ZWFyc2h0bWwgKz0gXCI8L3NlbGVjdD5cIjtcblxuXHRcdFx0XHRodG1sICs9IGluc3QueWVhcnNodG1sO1xuXHRcdFx0XHRpbnN0LnllYXJzaHRtbCA9IG51bGw7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aHRtbCArPSB0aGlzLl9nZXQoIGluc3QsIFwieWVhclN1ZmZpeFwiICk7XG5cdFx0aWYgKCBzaG93TW9udGhBZnRlclllYXIgKSB7XG5cdFx0XHRodG1sICs9ICggc2Vjb25kYXJ5IHx8ICEoIGNoYW5nZU1vbnRoICYmIGNoYW5nZVllYXIgKSA/IFwiJiN4YTA7XCIgOiBcIlwiICkgKyBtb250aEh0bWw7XG5cdFx0fVxuXHRcdGh0bWwgKz0gXCI8L2Rpdj5cIjsgLy8gQ2xvc2UgZGF0ZXBpY2tlcl9oZWFkZXJcblx0XHRyZXR1cm4gaHRtbDtcblx0fSxcblxuXHQvKiBBZGp1c3Qgb25lIG9mIHRoZSBkYXRlIHN1Yi1maWVsZHMuICovXG5cdF9hZGp1c3RJbnN0RGF0ZTogZnVuY3Rpb24oIGluc3QsIG9mZnNldCwgcGVyaW9kICkge1xuXHRcdHZhciB5ZWFyID0gaW5zdC5zZWxlY3RlZFllYXIgKyAoIHBlcmlvZCA9PT0gXCJZXCIgPyBvZmZzZXQgOiAwICksXG5cdFx0XHRtb250aCA9IGluc3Quc2VsZWN0ZWRNb250aCArICggcGVyaW9kID09PSBcIk1cIiA/IG9mZnNldCA6IDAgKSxcblx0XHRcdGRheSA9IE1hdGgubWluKCBpbnN0LnNlbGVjdGVkRGF5LCB0aGlzLl9nZXREYXlzSW5Nb250aCggeWVhciwgbW9udGggKSApICsgKCBwZXJpb2QgPT09IFwiRFwiID8gb2Zmc2V0IDogMCApLFxuXHRcdFx0ZGF0ZSA9IHRoaXMuX3Jlc3RyaWN0TWluTWF4KCBpbnN0LCB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdCggbmV3IERhdGUoIHllYXIsIG1vbnRoLCBkYXkgKSApICk7XG5cblx0XHRpbnN0LnNlbGVjdGVkRGF5ID0gZGF0ZS5nZXREYXRlKCk7XG5cdFx0aW5zdC5kcmF3TW9udGggPSBpbnN0LnNlbGVjdGVkTW9udGggPSBkYXRlLmdldE1vbnRoKCk7XG5cdFx0aW5zdC5kcmF3WWVhciA9IGluc3Quc2VsZWN0ZWRZZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuXHRcdGlmICggcGVyaW9kID09PSBcIk1cIiB8fCBwZXJpb2QgPT09IFwiWVwiICkge1xuXHRcdFx0dGhpcy5fbm90aWZ5Q2hhbmdlKCBpbnN0ICk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qIEVuc3VyZSBhIGRhdGUgaXMgd2l0aGluIGFueSBtaW4vbWF4IGJvdW5kcy4gKi9cblx0X3Jlc3RyaWN0TWluTWF4OiBmdW5jdGlvbiggaW5zdCwgZGF0ZSApIHtcblx0XHR2YXIgbWluRGF0ZSA9IHRoaXMuX2dldE1pbk1heERhdGUoIGluc3QsIFwibWluXCIgKSxcblx0XHRcdG1heERhdGUgPSB0aGlzLl9nZXRNaW5NYXhEYXRlKCBpbnN0LCBcIm1heFwiICksXG5cdFx0XHRuZXdEYXRlID0gKCBtaW5EYXRlICYmIGRhdGUgPCBtaW5EYXRlID8gbWluRGF0ZSA6IGRhdGUgKTtcblx0XHRyZXR1cm4gKCBtYXhEYXRlICYmIG5ld0RhdGUgPiBtYXhEYXRlID8gbWF4RGF0ZSA6IG5ld0RhdGUgKTtcblx0fSxcblxuXHQvKiBOb3RpZnkgY2hhbmdlIG9mIG1vbnRoL3llYXIuICovXG5cdF9ub3RpZnlDaGFuZ2U6IGZ1bmN0aW9uKCBpbnN0ICkge1xuXHRcdHZhciBvbkNoYW5nZSA9IHRoaXMuX2dldCggaW5zdCwgXCJvbkNoYW5nZU1vbnRoWWVhclwiICk7XG5cdFx0aWYgKCBvbkNoYW5nZSApIHtcblx0XHRcdG9uQ2hhbmdlLmFwcGx5KCAoIGluc3QuaW5wdXQgPyBpbnN0LmlucHV0WyAwIF0gOiBudWxsICksXG5cdFx0XHRcdFsgaW5zdC5zZWxlY3RlZFllYXIsIGluc3Quc2VsZWN0ZWRNb250aCArIDEsIGluc3QgXSApO1xuXHRcdH1cblx0fSxcblxuXHQvKiBEZXRlcm1pbmUgdGhlIG51bWJlciBvZiBtb250aHMgdG8gc2hvdy4gKi9cblx0X2dldE51bWJlck9mTW9udGhzOiBmdW5jdGlvbiggaW5zdCApIHtcblx0XHR2YXIgbnVtTW9udGhzID0gdGhpcy5fZ2V0KCBpbnN0LCBcIm51bWJlck9mTW9udGhzXCIgKTtcblx0XHRyZXR1cm4gKCBudW1Nb250aHMgPT0gbnVsbCA/IFsgMSwgMSBdIDogKCB0eXBlb2YgbnVtTW9udGhzID09PSBcIm51bWJlclwiID8gWyAxLCBudW1Nb250aHMgXSA6IG51bU1vbnRocyApICk7XG5cdH0sXG5cblx0LyogRGV0ZXJtaW5lIHRoZSBjdXJyZW50IG1heGltdW0gZGF0ZSAtIGVuc3VyZSBubyB0aW1lIGNvbXBvbmVudHMgYXJlIHNldC4gKi9cblx0X2dldE1pbk1heERhdGU6IGZ1bmN0aW9uKCBpbnN0LCBtaW5NYXggKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2RldGVybWluZURhdGUoIGluc3QsIHRoaXMuX2dldCggaW5zdCwgbWluTWF4ICsgXCJEYXRlXCIgKSwgbnVsbCApO1xuXHR9LFxuXG5cdC8qIEZpbmQgdGhlIG51bWJlciBvZiBkYXlzIGluIGEgZ2l2ZW4gbW9udGguICovXG5cdF9nZXREYXlzSW5Nb250aDogZnVuY3Rpb24oIHllYXIsIG1vbnRoICkge1xuXHRcdHJldHVybiAzMiAtIHRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KCBuZXcgRGF0ZSggeWVhciwgbW9udGgsIDMyICkgKS5nZXREYXRlKCk7XG5cdH0sXG5cblx0LyogRmluZCB0aGUgZGF5IG9mIHRoZSB3ZWVrIG9mIHRoZSBmaXJzdCBvZiBhIG1vbnRoLiAqL1xuXHRfZ2V0Rmlyc3REYXlPZk1vbnRoOiBmdW5jdGlvbiggeWVhciwgbW9udGggKSB7XG5cdFx0cmV0dXJuIG5ldyBEYXRlKCB5ZWFyLCBtb250aCwgMSApLmdldERheSgpO1xuXHR9LFxuXG5cdC8qIERldGVybWluZXMgaWYgd2Ugc2hvdWxkIGFsbG93IGEgXCJuZXh0L3ByZXZcIiBtb250aCBkaXNwbGF5IGNoYW5nZS4gKi9cblx0X2NhbkFkanVzdE1vbnRoOiBmdW5jdGlvbiggaW5zdCwgb2Zmc2V0LCBjdXJZZWFyLCBjdXJNb250aCApIHtcblx0XHR2YXIgbnVtTW9udGhzID0gdGhpcy5fZ2V0TnVtYmVyT2ZNb250aHMoIGluc3QgKSxcblx0XHRcdGRhdGUgPSB0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdCggbmV3IERhdGUoIGN1clllYXIsXG5cdFx0XHRjdXJNb250aCArICggb2Zmc2V0IDwgMCA/IG9mZnNldCA6IG51bU1vbnRoc1sgMCBdICogbnVtTW9udGhzWyAxIF0gKSwgMSApICk7XG5cblx0XHRpZiAoIG9mZnNldCA8IDAgKSB7XG5cdFx0XHRkYXRlLnNldERhdGUoIHRoaXMuX2dldERheXNJbk1vbnRoKCBkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSApICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLl9pc0luUmFuZ2UoIGluc3QsIGRhdGUgKTtcblx0fSxcblxuXHQvKiBJcyB0aGUgZ2l2ZW4gZGF0ZSBpbiB0aGUgYWNjZXB0ZWQgcmFuZ2U/ICovXG5cdF9pc0luUmFuZ2U6IGZ1bmN0aW9uKCBpbnN0LCBkYXRlICkge1xuXHRcdHZhciB5ZWFyU3BsaXQsIGN1cnJlbnRZZWFyLFxuXHRcdFx0bWluRGF0ZSA9IHRoaXMuX2dldE1pbk1heERhdGUoIGluc3QsIFwibWluXCIgKSxcblx0XHRcdG1heERhdGUgPSB0aGlzLl9nZXRNaW5NYXhEYXRlKCBpbnN0LCBcIm1heFwiICksXG5cdFx0XHRtaW5ZZWFyID0gbnVsbCxcblx0XHRcdG1heFllYXIgPSBudWxsLFxuXHRcdFx0eWVhcnMgPSB0aGlzLl9nZXQoIGluc3QsIFwieWVhclJhbmdlXCIgKTtcblx0XHRcdGlmICggeWVhcnMgKSB7XG5cdFx0XHRcdHllYXJTcGxpdCA9IHllYXJzLnNwbGl0KCBcIjpcIiApO1xuXHRcdFx0XHRjdXJyZW50WWVhciA9IG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKTtcblx0XHRcdFx0bWluWWVhciA9IHBhcnNlSW50KCB5ZWFyU3BsaXRbIDAgXSwgMTAgKTtcblx0XHRcdFx0bWF4WWVhciA9IHBhcnNlSW50KCB5ZWFyU3BsaXRbIDEgXSwgMTAgKTtcblx0XHRcdFx0aWYgKCB5ZWFyU3BsaXRbIDAgXS5tYXRjaCggL1srXFwtXS4qLyApICkge1xuXHRcdFx0XHRcdG1pblllYXIgKz0gY3VycmVudFllYXI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCB5ZWFyU3BsaXRbIDEgXS5tYXRjaCggL1srXFwtXS4qLyApICkge1xuXHRcdFx0XHRcdG1heFllYXIgKz0gY3VycmVudFllYXI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdHJldHVybiAoICggIW1pbkRhdGUgfHwgZGF0ZS5nZXRUaW1lKCkgPj0gbWluRGF0ZS5nZXRUaW1lKCkgKSAmJlxuXHRcdFx0KCAhbWF4RGF0ZSB8fCBkYXRlLmdldFRpbWUoKSA8PSBtYXhEYXRlLmdldFRpbWUoKSApICYmXG5cdFx0XHQoICFtaW5ZZWFyIHx8IGRhdGUuZ2V0RnVsbFllYXIoKSA+PSBtaW5ZZWFyICkgJiZcblx0XHRcdCggIW1heFllYXIgfHwgZGF0ZS5nZXRGdWxsWWVhcigpIDw9IG1heFllYXIgKSApO1xuXHR9LFxuXG5cdC8qIFByb3ZpZGUgdGhlIGNvbmZpZ3VyYXRpb24gc2V0dGluZ3MgZm9yIGZvcm1hdHRpbmcvcGFyc2luZy4gKi9cblx0X2dldEZvcm1hdENvbmZpZzogZnVuY3Rpb24oIGluc3QgKSB7XG5cdFx0dmFyIHNob3J0WWVhckN1dG9mZiA9IHRoaXMuX2dldCggaW5zdCwgXCJzaG9ydFllYXJDdXRvZmZcIiApO1xuXHRcdHNob3J0WWVhckN1dG9mZiA9ICggdHlwZW9mIHNob3J0WWVhckN1dG9mZiAhPT0gXCJzdHJpbmdcIiA/IHNob3J0WWVhckN1dG9mZiA6XG5cdFx0XHRuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCkgJSAxMDAgKyBwYXJzZUludCggc2hvcnRZZWFyQ3V0b2ZmLCAxMCApICk7XG5cdFx0cmV0dXJuIHsgc2hvcnRZZWFyQ3V0b2ZmOiBzaG9ydFllYXJDdXRvZmYsXG5cdFx0XHRkYXlOYW1lc1Nob3J0OiB0aGlzLl9nZXQoIGluc3QsIFwiZGF5TmFtZXNTaG9ydFwiICksIGRheU5hbWVzOiB0aGlzLl9nZXQoIGluc3QsIFwiZGF5TmFtZXNcIiApLFxuXHRcdFx0bW9udGhOYW1lc1Nob3J0OiB0aGlzLl9nZXQoIGluc3QsIFwibW9udGhOYW1lc1Nob3J0XCIgKSwgbW9udGhOYW1lczogdGhpcy5fZ2V0KCBpbnN0LCBcIm1vbnRoTmFtZXNcIiApIH07XG5cdH0sXG5cblx0LyogRm9ybWF0IHRoZSBnaXZlbiBkYXRlIGZvciBkaXNwbGF5LiAqL1xuXHRfZm9ybWF0RGF0ZTogZnVuY3Rpb24oIGluc3QsIGRheSwgbW9udGgsIHllYXIgKSB7XG5cdFx0aWYgKCAhZGF5ICkge1xuXHRcdFx0aW5zdC5jdXJyZW50RGF5ID0gaW5zdC5zZWxlY3RlZERheTtcblx0XHRcdGluc3QuY3VycmVudE1vbnRoID0gaW5zdC5zZWxlY3RlZE1vbnRoO1xuXHRcdFx0aW5zdC5jdXJyZW50WWVhciA9IGluc3Quc2VsZWN0ZWRZZWFyO1xuXHRcdH1cblx0XHR2YXIgZGF0ZSA9ICggZGF5ID8gKCB0eXBlb2YgZGF5ID09PSBcIm9iamVjdFwiID8gZGF5IDpcblx0XHRcdHRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KCBuZXcgRGF0ZSggeWVhciwgbW9udGgsIGRheSApICkgKSA6XG5cdFx0XHR0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdCggbmV3IERhdGUoIGluc3QuY3VycmVudFllYXIsIGluc3QuY3VycmVudE1vbnRoLCBpbnN0LmN1cnJlbnREYXkgKSApICk7XG5cdFx0cmV0dXJuIHRoaXMuZm9ybWF0RGF0ZSggdGhpcy5fZ2V0KCBpbnN0LCBcImRhdGVGb3JtYXRcIiApLCBkYXRlLCB0aGlzLl9nZXRGb3JtYXRDb25maWcoIGluc3QgKSApO1xuXHR9XG59ICk7XG5cbi8qXG4gKiBCaW5kIGhvdmVyIGV2ZW50cyBmb3IgZGF0ZXBpY2tlciBlbGVtZW50cy5cbiAqIERvbmUgdmlhIGRlbGVnYXRlIHNvIHRoZSBiaW5kaW5nIG9ubHkgb2NjdXJzIG9uY2UgaW4gdGhlIGxpZmV0aW1lIG9mIHRoZSBwYXJlbnQgZGl2LlxuICogR2xvYmFsIGRhdGVwaWNrZXJfaW5zdEFjdGl2ZSwgc2V0IGJ5IF91cGRhdGVEYXRlcGlja2VyIGFsbG93cyB0aGUgaGFuZGxlcnMgdG8gZmluZCB0aGVpciB3YXkgYmFjayB0byB0aGUgYWN0aXZlIHBpY2tlci5cbiAqL1xuZnVuY3Rpb24gZGF0ZXBpY2tlcl9iaW5kSG92ZXIoIGRwRGl2ICkge1xuXHR2YXIgc2VsZWN0b3IgPSBcImJ1dHRvbiwgLnVpLWRhdGVwaWNrZXItcHJldiwgLnVpLWRhdGVwaWNrZXItbmV4dCwgLnVpLWRhdGVwaWNrZXItY2FsZW5kYXIgdGQgYVwiO1xuXHRyZXR1cm4gZHBEaXYub24oIFwibW91c2VvdXRcIiwgc2VsZWN0b3IsIGZ1bmN0aW9uKCkge1xuXHRcdFx0JCggdGhpcyApLnJlbW92ZUNsYXNzKCBcInVpLXN0YXRlLWhvdmVyXCIgKTtcblx0XHRcdGlmICggdGhpcy5jbGFzc05hbWUuaW5kZXhPZiggXCJ1aS1kYXRlcGlja2VyLXByZXZcIiApICE9PSAtMSApIHtcblx0XHRcdFx0JCggdGhpcyApLnJlbW92ZUNsYXNzKCBcInVpLWRhdGVwaWNrZXItcHJldi1ob3ZlclwiICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHRoaXMuY2xhc3NOYW1lLmluZGV4T2YoIFwidWktZGF0ZXBpY2tlci1uZXh0XCIgKSAhPT0gLTEgKSB7XG5cdFx0XHRcdCQoIHRoaXMgKS5yZW1vdmVDbGFzcyggXCJ1aS1kYXRlcGlja2VyLW5leHQtaG92ZXJcIiApO1xuXHRcdFx0fVxuXHRcdH0gKVxuXHRcdC5vbiggXCJtb3VzZW92ZXJcIiwgc2VsZWN0b3IsIGRhdGVwaWNrZXJfaGFuZGxlTW91c2VvdmVyICk7XG59XG5cbmZ1bmN0aW9uIGRhdGVwaWNrZXJfaGFuZGxlTW91c2VvdmVyKCkge1xuXHRpZiAoICEkLmRhdGVwaWNrZXIuX2lzRGlzYWJsZWREYXRlcGlja2VyKCBkYXRlcGlja2VyX2luc3RBY3RpdmUuaW5saW5lID8gZGF0ZXBpY2tlcl9pbnN0QWN0aXZlLmRwRGl2LnBhcmVudCgpWyAwIF0gOiBkYXRlcGlja2VyX2luc3RBY3RpdmUuaW5wdXRbIDAgXSApICkge1xuXHRcdCQoIHRoaXMgKS5wYXJlbnRzKCBcIi51aS1kYXRlcGlja2VyLWNhbGVuZGFyXCIgKS5maW5kKCBcImFcIiApLnJlbW92ZUNsYXNzKCBcInVpLXN0YXRlLWhvdmVyXCIgKTtcblx0XHQkKCB0aGlzICkuYWRkQ2xhc3MoIFwidWktc3RhdGUtaG92ZXJcIiApO1xuXHRcdGlmICggdGhpcy5jbGFzc05hbWUuaW5kZXhPZiggXCJ1aS1kYXRlcGlja2VyLXByZXZcIiApICE9PSAtMSApIHtcblx0XHRcdCQoIHRoaXMgKS5hZGRDbGFzcyggXCJ1aS1kYXRlcGlja2VyLXByZXYtaG92ZXJcIiApO1xuXHRcdH1cblx0XHRpZiAoIHRoaXMuY2xhc3NOYW1lLmluZGV4T2YoIFwidWktZGF0ZXBpY2tlci1uZXh0XCIgKSAhPT0gLTEgKSB7XG5cdFx0XHQkKCB0aGlzICkuYWRkQ2xhc3MoIFwidWktZGF0ZXBpY2tlci1uZXh0LWhvdmVyXCIgKTtcblx0XHR9XG5cdH1cbn1cblxuLyogalF1ZXJ5IGV4dGVuZCBub3cgaWdub3JlcyBudWxscyEgKi9cbmZ1bmN0aW9uIGRhdGVwaWNrZXJfZXh0ZW5kUmVtb3ZlKCB0YXJnZXQsIHByb3BzICkge1xuXHQkLmV4dGVuZCggdGFyZ2V0LCBwcm9wcyApO1xuXHRmb3IgKCB2YXIgbmFtZSBpbiBwcm9wcyApIHtcblx0XHRpZiAoIHByb3BzWyBuYW1lIF0gPT0gbnVsbCApIHtcblx0XHRcdHRhcmdldFsgbmFtZSBdID0gcHJvcHNbIG5hbWUgXTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSW52b2tlIHRoZSBkYXRlcGlja2VyIGZ1bmN0aW9uYWxpdHkuXG4gICBAcGFyYW0gIG9wdGlvbnMgIHN0cmluZyAtIGEgY29tbWFuZCwgb3B0aW9uYWxseSBmb2xsb3dlZCBieSBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgb3Jcblx0XHRcdFx0XHRPYmplY3QgLSBzZXR0aW5ncyBmb3IgYXR0YWNoaW5nIG5ldyBkYXRlcGlja2VyIGZ1bmN0aW9uYWxpdHlcbiAgIEByZXR1cm4gIGpRdWVyeSBvYmplY3QgKi9cbiQuZm4uZGF0ZXBpY2tlciA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8qIFZlcmlmeSBhbiBlbXB0eSBjb2xsZWN0aW9uIHdhc24ndCBwYXNzZWQgLSBGaXhlcyAjNjk3NiAqL1xuXHRpZiAoICF0aGlzLmxlbmd0aCApIHtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qIEluaXRpYWxpc2UgdGhlIGRhdGUgcGlja2VyLiAqL1xuXHRpZiAoICEkLmRhdGVwaWNrZXIuaW5pdGlhbGl6ZWQgKSB7XG5cdFx0JCggZG9jdW1lbnQgKS5vbiggXCJtb3VzZWRvd25cIiwgJC5kYXRlcGlja2VyLl9jaGVja0V4dGVybmFsQ2xpY2sgKTtcblx0XHQkLmRhdGVwaWNrZXIuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuXHR9XG5cblx0LyogQXBwZW5kIGRhdGVwaWNrZXIgbWFpbiBjb250YWluZXIgdG8gYm9keSBpZiBub3QgZXhpc3QuICovXG5cdGlmICggJCggXCIjXCIgKyAkLmRhdGVwaWNrZXIuX21haW5EaXZJZCApLmxlbmd0aCA9PT0gMCApIHtcblx0XHQkKCBcImJvZHlcIiApLmFwcGVuZCggJC5kYXRlcGlja2VyLmRwRGl2ICk7XG5cdH1cblxuXHR2YXIgb3RoZXJBcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMSApO1xuXHRpZiAoIHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiICYmICggb3B0aW9ucyA9PT0gXCJpc0Rpc2FibGVkXCIgfHwgb3B0aW9ucyA9PT0gXCJnZXREYXRlXCIgfHwgb3B0aW9ucyA9PT0gXCJ3aWRnZXRcIiApICkge1xuXHRcdHJldHVybiAkLmRhdGVwaWNrZXJbIFwiX1wiICsgb3B0aW9ucyArIFwiRGF0ZXBpY2tlclwiIF0uXG5cdFx0XHRhcHBseSggJC5kYXRlcGlja2VyLCBbIHRoaXNbIDAgXSBdLmNvbmNhdCggb3RoZXJBcmdzICkgKTtcblx0fVxuXHRpZiAoIG9wdGlvbnMgPT09IFwib3B0aW9uXCIgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMiAmJiB0eXBlb2YgYXJndW1lbnRzWyAxIF0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuICQuZGF0ZXBpY2tlclsgXCJfXCIgKyBvcHRpb25zICsgXCJEYXRlcGlja2VyXCIgXS5cblx0XHRcdGFwcGx5KCAkLmRhdGVwaWNrZXIsIFsgdGhpc1sgMCBdIF0uY29uY2F0KCBvdGhlckFyZ3MgKSApO1xuXHR9XG5cdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cblx0XHRcdCQuZGF0ZXBpY2tlclsgXCJfXCIgKyBvcHRpb25zICsgXCJEYXRlcGlja2VyXCIgXS5cblx0XHRcdFx0YXBwbHkoICQuZGF0ZXBpY2tlciwgWyB0aGlzIF0uY29uY2F0KCBvdGhlckFyZ3MgKSApIDpcblx0XHRcdCQuZGF0ZXBpY2tlci5fYXR0YWNoRGF0ZXBpY2tlciggdGhpcywgb3B0aW9ucyApO1xuXHR9ICk7XG59O1xuXG4kLmRhdGVwaWNrZXIgPSBuZXcgRGF0ZXBpY2tlcigpOyAvLyBzaW5nbGV0b24gaW5zdGFuY2VcbiQuZGF0ZXBpY2tlci5pbml0aWFsaXplZCA9IGZhbHNlO1xuJC5kYXRlcGlja2VyLnV1aWQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiQuZGF0ZXBpY2tlci52ZXJzaW9uID0gXCIxLjEyLjFcIjtcblxudmFyIHdpZGdldHNEYXRlcGlja2VyID0gJC5kYXRlcGlja2VyO1xuXG5cbi8qIVxuICogalF1ZXJ5IFVJIERpYWxvZyAxLjEyLjFcbiAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICovXG5cbi8vPj5sYWJlbDogRGlhbG9nXG4vLz4+Z3JvdXA6IFdpZGdldHNcbi8vPj5kZXNjcmlwdGlvbjogRGlzcGxheXMgY3VzdG9taXphYmxlIGRpYWxvZyB3aW5kb3dzLlxuLy8+PmRvY3M6IGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL2RpYWxvZy9cbi8vPj5kZW1vczogaHR0cDovL2pxdWVyeXVpLmNvbS9kaWFsb2cvXG4vLz4+Y3NzLnN0cnVjdHVyZTogLi4vLi4vdGhlbWVzL2Jhc2UvY29yZS5jc3Ncbi8vPj5jc3Muc3RydWN0dXJlOiAuLi8uLi90aGVtZXMvYmFzZS9kaWFsb2cuY3NzXG4vLz4+Y3NzLnRoZW1lOiAuLi8uLi90aGVtZXMvYmFzZS90aGVtZS5jc3NcblxuXG5cbiQud2lkZ2V0KCBcInVpLmRpYWxvZ1wiLCB7XG5cdHZlcnNpb246IFwiMS4xMi4xXCIsXG5cdG9wdGlvbnM6IHtcblx0XHRhcHBlbmRUbzogXCJib2R5XCIsXG5cdFx0YXV0b09wZW46IHRydWUsXG5cdFx0YnV0dG9uczogW10sXG5cdFx0Y2xhc3Nlczoge1xuXHRcdFx0XCJ1aS1kaWFsb2dcIjogXCJ1aS1jb3JuZXItYWxsXCIsXG5cdFx0XHRcInVpLWRpYWxvZy10aXRsZWJhclwiOiBcInVpLWNvcm5lci1hbGxcIlxuXHRcdH0sXG5cdFx0Y2xvc2VPbkVzY2FwZTogdHJ1ZSxcblx0XHRjbG9zZVRleHQ6IFwiQ2xvc2VcIixcblx0XHRkcmFnZ2FibGU6IHRydWUsXG5cdFx0aGlkZTogbnVsbCxcblx0XHRoZWlnaHQ6IFwiYXV0b1wiLFxuXHRcdG1heEhlaWdodDogbnVsbCxcblx0XHRtYXhXaWR0aDogbnVsbCxcblx0XHRtaW5IZWlnaHQ6IDE1MCxcblx0XHRtaW5XaWR0aDogMTUwLFxuXHRcdG1vZGFsOiBmYWxzZSxcblx0XHRwb3NpdGlvbjoge1xuXHRcdFx0bXk6IFwiY2VudGVyXCIsXG5cdFx0XHRhdDogXCJjZW50ZXJcIixcblx0XHRcdG9mOiB3aW5kb3csXG5cdFx0XHRjb2xsaXNpb246IFwiZml0XCIsXG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgdGl0bGViYXIgaXMgYWx3YXlzIHZpc2libGVcblx0XHRcdHVzaW5nOiBmdW5jdGlvbiggcG9zICkge1xuXHRcdFx0XHR2YXIgdG9wT2Zmc2V0ID0gJCggdGhpcyApLmNzcyggcG9zICkub2Zmc2V0KCkudG9wO1xuXHRcdFx0XHRpZiAoIHRvcE9mZnNldCA8IDAgKSB7XG5cdFx0XHRcdFx0JCggdGhpcyApLmNzcyggXCJ0b3BcIiwgcG9zLnRvcCAtIHRvcE9mZnNldCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRyZXNpemFibGU6IHRydWUsXG5cdFx0c2hvdzogbnVsbCxcblx0XHR0aXRsZTogbnVsbCxcblx0XHR3aWR0aDogMzAwLFxuXG5cdFx0Ly8gQ2FsbGJhY2tzXG5cdFx0YmVmb3JlQ2xvc2U6IG51bGwsXG5cdFx0Y2xvc2U6IG51bGwsXG5cdFx0ZHJhZzogbnVsbCxcblx0XHRkcmFnU3RhcnQ6IG51bGwsXG5cdFx0ZHJhZ1N0b3A6IG51bGwsXG5cdFx0Zm9jdXM6IG51bGwsXG5cdFx0b3BlbjogbnVsbCxcblx0XHRyZXNpemU6IG51bGwsXG5cdFx0cmVzaXplU3RhcnQ6IG51bGwsXG5cdFx0cmVzaXplU3RvcDogbnVsbFxuXHR9LFxuXG5cdHNpemVSZWxhdGVkT3B0aW9uczoge1xuXHRcdGJ1dHRvbnM6IHRydWUsXG5cdFx0aGVpZ2h0OiB0cnVlLFxuXHRcdG1heEhlaWdodDogdHJ1ZSxcblx0XHRtYXhXaWR0aDogdHJ1ZSxcblx0XHRtaW5IZWlnaHQ6IHRydWUsXG5cdFx0bWluV2lkdGg6IHRydWUsXG5cdFx0d2lkdGg6IHRydWVcblx0fSxcblxuXHRyZXNpemFibGVSZWxhdGVkT3B0aW9uczoge1xuXHRcdG1heEhlaWdodDogdHJ1ZSxcblx0XHRtYXhXaWR0aDogdHJ1ZSxcblx0XHRtaW5IZWlnaHQ6IHRydWUsXG5cdFx0bWluV2lkdGg6IHRydWVcblx0fSxcblxuXHRfY3JlYXRlOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLm9yaWdpbmFsQ3NzID0ge1xuXHRcdFx0ZGlzcGxheTogdGhpcy5lbGVtZW50WyAwIF0uc3R5bGUuZGlzcGxheSxcblx0XHRcdHdpZHRoOiB0aGlzLmVsZW1lbnRbIDAgXS5zdHlsZS53aWR0aCxcblx0XHRcdG1pbkhlaWdodDogdGhpcy5lbGVtZW50WyAwIF0uc3R5bGUubWluSGVpZ2h0LFxuXHRcdFx0bWF4SGVpZ2h0OiB0aGlzLmVsZW1lbnRbIDAgXS5zdHlsZS5tYXhIZWlnaHQsXG5cdFx0XHRoZWlnaHQ6IHRoaXMuZWxlbWVudFsgMCBdLnN0eWxlLmhlaWdodFxuXHRcdH07XG5cdFx0dGhpcy5vcmlnaW5hbFBvc2l0aW9uID0ge1xuXHRcdFx0cGFyZW50OiB0aGlzLmVsZW1lbnQucGFyZW50KCksXG5cdFx0XHRpbmRleDogdGhpcy5lbGVtZW50LnBhcmVudCgpLmNoaWxkcmVuKCkuaW5kZXgoIHRoaXMuZWxlbWVudCApXG5cdFx0fTtcblx0XHR0aGlzLm9yaWdpbmFsVGl0bGUgPSB0aGlzLmVsZW1lbnQuYXR0ciggXCJ0aXRsZVwiICk7XG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMudGl0bGUgPT0gbnVsbCAmJiB0aGlzLm9yaWdpbmFsVGl0bGUgIT0gbnVsbCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy50aXRsZSA9IHRoaXMub3JpZ2luYWxUaXRsZTtcblx0XHR9XG5cblx0XHQvLyBEaWFsb2dzIGNhbid0IGJlIGRpc2FibGVkXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuZGlzYWJsZWQgPSBmYWxzZTtcblx0XHR9XG5cblx0XHR0aGlzLl9jcmVhdGVXcmFwcGVyKCk7XG5cblx0XHR0aGlzLmVsZW1lbnRcblx0XHRcdC5zaG93KClcblx0XHRcdC5yZW1vdmVBdHRyKCBcInRpdGxlXCIgKVxuXHRcdFx0LmFwcGVuZFRvKCB0aGlzLnVpRGlhbG9nICk7XG5cblx0XHR0aGlzLl9hZGRDbGFzcyggXCJ1aS1kaWFsb2ctY29udGVudFwiLCBcInVpLXdpZGdldC1jb250ZW50XCIgKTtcblxuXHRcdHRoaXMuX2NyZWF0ZVRpdGxlYmFyKCk7XG5cdFx0dGhpcy5fY3JlYXRlQnV0dG9uUGFuZSgpO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlICYmICQuZm4uZHJhZ2dhYmxlICkge1xuXHRcdFx0dGhpcy5fbWFrZURyYWdnYWJsZSgpO1xuXHRcdH1cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5yZXNpemFibGUgJiYgJC5mbi5yZXNpemFibGUgKSB7XG5cdFx0XHR0aGlzLl9tYWtlUmVzaXphYmxlKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5faXNPcGVuID0gZmFsc2U7XG5cblx0XHR0aGlzLl90cmFja0ZvY3VzKCk7XG5cdH0sXG5cblx0X2luaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggdGhpcy5vcHRpb25zLmF1dG9PcGVuICkge1xuXHRcdFx0dGhpcy5vcGVuKCk7XG5cdFx0fVxuXHR9LFxuXG5cdF9hcHBlbmRUbzogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW1lbnQgPSB0aGlzLm9wdGlvbnMuYXBwZW5kVG87XG5cdFx0aWYgKCBlbGVtZW50ICYmICggZWxlbWVudC5qcXVlcnkgfHwgZWxlbWVudC5ub2RlVHlwZSApICkge1xuXHRcdFx0cmV0dXJuICQoIGVsZW1lbnQgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZG9jdW1lbnQuZmluZCggZWxlbWVudCB8fCBcImJvZHlcIiApLmVxKCAwICk7XG5cdH0sXG5cblx0X2Rlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXh0LFxuXHRcdFx0b3JpZ2luYWxQb3NpdGlvbiA9IHRoaXMub3JpZ2luYWxQb3NpdGlvbjtcblxuXHRcdHRoaXMuX3VudHJhY2tJbnN0YW5jZSgpO1xuXHRcdHRoaXMuX2Rlc3Ryb3lPdmVybGF5KCk7XG5cblx0XHR0aGlzLmVsZW1lbnRcblx0XHRcdC5yZW1vdmVVbmlxdWVJZCgpXG5cdFx0XHQuY3NzKCB0aGlzLm9yaWdpbmFsQ3NzIClcblxuXHRcdFx0Ly8gV2l0aG91dCBkZXRhY2hpbmcgZmlyc3QsIHRoZSBmb2xsb3dpbmcgYmVjb21lcyByZWFsbHkgc2xvd1xuXHRcdFx0LmRldGFjaCgpO1xuXG5cdFx0dGhpcy51aURpYWxvZy5yZW1vdmUoKTtcblxuXHRcdGlmICggdGhpcy5vcmlnaW5hbFRpdGxlICkge1xuXHRcdFx0dGhpcy5lbGVtZW50LmF0dHIoIFwidGl0bGVcIiwgdGhpcy5vcmlnaW5hbFRpdGxlICk7XG5cdFx0fVxuXG5cdFx0bmV4dCA9IG9yaWdpbmFsUG9zaXRpb24ucGFyZW50LmNoaWxkcmVuKCkuZXEoIG9yaWdpbmFsUG9zaXRpb24uaW5kZXggKTtcblxuXHRcdC8vIERvbid0IHRyeSB0byBwbGFjZSB0aGUgZGlhbG9nIG5leHQgdG8gaXRzZWxmICgjODYxMylcblx0XHRpZiAoIG5leHQubGVuZ3RoICYmIG5leHRbIDAgXSAhPT0gdGhpcy5lbGVtZW50WyAwIF0gKSB7XG5cdFx0XHRuZXh0LmJlZm9yZSggdGhpcy5lbGVtZW50ICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG9yaWdpbmFsUG9zaXRpb24ucGFyZW50LmFwcGVuZCggdGhpcy5lbGVtZW50ICk7XG5cdFx0fVxuXHR9LFxuXG5cdHdpZGdldDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMudWlEaWFsb2c7XG5cdH0sXG5cblx0ZGlzYWJsZTogJC5ub29wLFxuXHRlbmFibGU6ICQubm9vcCxcblxuXHRjbG9zZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciB0aGF0ID0gdGhpcztcblxuXHRcdGlmICggIXRoaXMuX2lzT3BlbiB8fCB0aGlzLl90cmlnZ2VyKCBcImJlZm9yZUNsb3NlXCIsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMuX2lzT3BlbiA9IGZhbHNlO1xuXHRcdHRoaXMuX2ZvY3VzZWRFbGVtZW50ID0gbnVsbDtcblx0XHR0aGlzLl9kZXN0cm95T3ZlcmxheSgpO1xuXHRcdHRoaXMuX3VudHJhY2tJbnN0YW5jZSgpO1xuXG5cdFx0aWYgKCAhdGhpcy5vcGVuZXIuZmlsdGVyKCBcIjpmb2N1c2FibGVcIiApLnRyaWdnZXIoIFwiZm9jdXNcIiApLmxlbmd0aCApIHtcblxuXHRcdFx0Ly8gSGlkaW5nIGEgZm9jdXNlZCBlbGVtZW50IGRvZXNuJ3QgdHJpZ2dlciBibHVyIGluIFdlYktpdFxuXHRcdFx0Ly8gc28gaW4gY2FzZSB3ZSBoYXZlIG5vdGhpbmcgdG8gZm9jdXMgb24sIGV4cGxpY2l0bHkgYmx1ciB0aGUgYWN0aXZlIGVsZW1lbnRcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD00NzE4MlxuXHRcdFx0JC51aS5zYWZlQmx1ciggJC51aS5zYWZlQWN0aXZlRWxlbWVudCggdGhpcy5kb2N1bWVudFsgMCBdICkgKTtcblx0XHR9XG5cblx0XHR0aGlzLl9oaWRlKCB0aGlzLnVpRGlhbG9nLCB0aGlzLm9wdGlvbnMuaGlkZSwgZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGF0Ll90cmlnZ2VyKCBcImNsb3NlXCIsIGV2ZW50ICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGlzT3BlbjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2lzT3Blbjtcblx0fSxcblxuXHRtb3ZlVG9Ub3A6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuX21vdmVUb1RvcCgpO1xuXHR9LFxuXG5cdF9tb3ZlVG9Ub3A6IGZ1bmN0aW9uKCBldmVudCwgc2lsZW50ICkge1xuXHRcdHZhciBtb3ZlZCA9IGZhbHNlLFxuXHRcdFx0ekluZGljZXMgPSB0aGlzLnVpRGlhbG9nLnNpYmxpbmdzKCBcIi51aS1mcm9udDp2aXNpYmxlXCIgKS5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gKyQoIHRoaXMgKS5jc3MoIFwiei1pbmRleFwiICk7XG5cdFx0XHR9ICkuZ2V0KCksXG5cdFx0XHR6SW5kZXhNYXggPSBNYXRoLm1heC5hcHBseSggbnVsbCwgekluZGljZXMgKTtcblxuXHRcdGlmICggekluZGV4TWF4ID49ICt0aGlzLnVpRGlhbG9nLmNzcyggXCJ6LWluZGV4XCIgKSApIHtcblx0XHRcdHRoaXMudWlEaWFsb2cuY3NzKCBcInotaW5kZXhcIiwgekluZGV4TWF4ICsgMSApO1xuXHRcdFx0bW92ZWQgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggbW92ZWQgJiYgIXNpbGVudCApIHtcblx0XHRcdHRoaXMuX3RyaWdnZXIoIFwiZm9jdXNcIiwgZXZlbnQgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG1vdmVkO1xuXHR9LFxuXG5cdG9wZW46IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB0aGF0ID0gdGhpcztcblx0XHRpZiAoIHRoaXMuX2lzT3BlbiApIHtcblx0XHRcdGlmICggdGhpcy5fbW92ZVRvVG9wKCkgKSB7XG5cdFx0XHRcdHRoaXMuX2ZvY3VzVGFiYmFibGUoKTtcblx0XHRcdH1cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLl9pc09wZW4gPSB0cnVlO1xuXHRcdHRoaXMub3BlbmVyID0gJCggJC51aS5zYWZlQWN0aXZlRWxlbWVudCggdGhpcy5kb2N1bWVudFsgMCBdICkgKTtcblxuXHRcdHRoaXMuX3NpemUoKTtcblx0XHR0aGlzLl9wb3NpdGlvbigpO1xuXHRcdHRoaXMuX2NyZWF0ZU92ZXJsYXkoKTtcblx0XHR0aGlzLl9tb3ZlVG9Ub3AoIG51bGwsIHRydWUgKTtcblxuXHRcdC8vIEVuc3VyZSB0aGUgb3ZlcmxheSBpcyBtb3ZlZCB0byB0aGUgdG9wIHdpdGggdGhlIGRpYWxvZywgYnV0IG9ubHkgd2hlblxuXHRcdC8vIG9wZW5pbmcuIFRoZSBvdmVybGF5IHNob3VsZG4ndCBtb3ZlIGFmdGVyIHRoZSBkaWFsb2cgaXMgb3BlbiBzbyB0aGF0XG5cdFx0Ly8gbW9kZWxlc3MgZGlhbG9ncyBvcGVuZWQgYWZ0ZXIgdGhlIG1vZGFsIGRpYWxvZyBzdGFjayBwcm9wZXJseS5cblx0XHRpZiAoIHRoaXMub3ZlcmxheSApIHtcblx0XHRcdHRoaXMub3ZlcmxheS5jc3MoIFwiei1pbmRleFwiLCB0aGlzLnVpRGlhbG9nLmNzcyggXCJ6LWluZGV4XCIgKSAtIDEgKTtcblx0XHR9XG5cblx0XHR0aGlzLl9zaG93KCB0aGlzLnVpRGlhbG9nLCB0aGlzLm9wdGlvbnMuc2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGF0Ll9mb2N1c1RhYmJhYmxlKCk7XG5cdFx0XHR0aGF0Ll90cmlnZ2VyKCBcImZvY3VzXCIgKTtcblx0XHR9ICk7XG5cblx0XHQvLyBUcmFjayB0aGUgZGlhbG9nIGltbWVkaWF0ZWx5IHVwb24gb3BlbmVuaW5nIGluIGNhc2UgYSBmb2N1cyBldmVudFxuXHRcdC8vIHNvbWVob3cgb2NjdXJzIG91dHNpZGUgb2YgdGhlIGRpYWxvZyBiZWZvcmUgYW4gZWxlbWVudCBpbnNpZGUgdGhlXG5cdFx0Ly8gZGlhbG9nIGlzIGZvY3VzZWQgKCMxMDE1Milcblx0XHR0aGlzLl9tYWtlRm9jdXNUYXJnZXQoKTtcblxuXHRcdHRoaXMuX3RyaWdnZXIoIFwib3BlblwiICk7XG5cdH0sXG5cblx0X2ZvY3VzVGFiYmFibGU6IGZ1bmN0aW9uKCkge1xuXG5cdFx0Ly8gU2V0IGZvY3VzIHRvIHRoZSBmaXJzdCBtYXRjaDpcblx0XHQvLyAxLiBBbiBlbGVtZW50IHRoYXQgd2FzIGZvY3VzZWQgcHJldmlvdXNseVxuXHRcdC8vIDIuIEZpcnN0IGVsZW1lbnQgaW5zaWRlIHRoZSBkaWFsb2cgbWF0Y2hpbmcgW2F1dG9mb2N1c11cblx0XHQvLyAzLiBUYWJiYWJsZSBlbGVtZW50IGluc2lkZSB0aGUgY29udGVudCBlbGVtZW50XG5cdFx0Ly8gNC4gVGFiYmFibGUgZWxlbWVudCBpbnNpZGUgdGhlIGJ1dHRvbnBhbmVcblx0XHQvLyA1LiBUaGUgY2xvc2UgYnV0dG9uXG5cdFx0Ly8gNi4gVGhlIGRpYWxvZyBpdHNlbGZcblx0XHR2YXIgaGFzRm9jdXMgPSB0aGlzLl9mb2N1c2VkRWxlbWVudDtcblx0XHRpZiAoICFoYXNGb2N1cyApIHtcblx0XHRcdGhhc0ZvY3VzID0gdGhpcy5lbGVtZW50LmZpbmQoIFwiW2F1dG9mb2N1c11cIiApO1xuXHRcdH1cblx0XHRpZiAoICFoYXNGb2N1cy5sZW5ndGggKSB7XG5cdFx0XHRoYXNGb2N1cyA9IHRoaXMuZWxlbWVudC5maW5kKCBcIjp0YWJiYWJsZVwiICk7XG5cdFx0fVxuXHRcdGlmICggIWhhc0ZvY3VzLmxlbmd0aCApIHtcblx0XHRcdGhhc0ZvY3VzID0gdGhpcy51aURpYWxvZ0J1dHRvblBhbmUuZmluZCggXCI6dGFiYmFibGVcIiApO1xuXHRcdH1cblx0XHRpZiAoICFoYXNGb2N1cy5sZW5ndGggKSB7XG5cdFx0XHRoYXNGb2N1cyA9IHRoaXMudWlEaWFsb2dUaXRsZWJhckNsb3NlLmZpbHRlciggXCI6dGFiYmFibGVcIiApO1xuXHRcdH1cblx0XHRpZiAoICFoYXNGb2N1cy5sZW5ndGggKSB7XG5cdFx0XHRoYXNGb2N1cyA9IHRoaXMudWlEaWFsb2c7XG5cdFx0fVxuXHRcdGhhc0ZvY3VzLmVxKCAwICkudHJpZ2dlciggXCJmb2N1c1wiICk7XG5cdH0sXG5cblx0X2tlZXBGb2N1czogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdGZ1bmN0aW9uIGNoZWNrRm9jdXMoKSB7XG5cdFx0XHR2YXIgYWN0aXZlRWxlbWVudCA9ICQudWkuc2FmZUFjdGl2ZUVsZW1lbnQoIHRoaXMuZG9jdW1lbnRbIDAgXSApLFxuXHRcdFx0XHRpc0FjdGl2ZSA9IHRoaXMudWlEaWFsb2dbIDAgXSA9PT0gYWN0aXZlRWxlbWVudCB8fFxuXHRcdFx0XHRcdCQuY29udGFpbnMoIHRoaXMudWlEaWFsb2dbIDAgXSwgYWN0aXZlRWxlbWVudCApO1xuXHRcdFx0aWYgKCAhaXNBY3RpdmUgKSB7XG5cdFx0XHRcdHRoaXMuX2ZvY3VzVGFiYmFibGUoKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRjaGVja0ZvY3VzLmNhbGwoIHRoaXMgKTtcblxuXHRcdC8vIHN1cHBvcnQ6IElFXG5cdFx0Ly8gSUUgPD0gOCBkb2Vzbid0IHByZXZlbnQgbW92aW5nIGZvY3VzIGV2ZW4gd2l0aCBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG5cdFx0Ly8gc28gd2UgY2hlY2sgYWdhaW4gbGF0ZXJcblx0XHR0aGlzLl9kZWxheSggY2hlY2tGb2N1cyApO1xuXHR9LFxuXG5cdF9jcmVhdGVXcmFwcGVyOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLnVpRGlhbG9nID0gJCggXCI8ZGl2PlwiIClcblx0XHRcdC5oaWRlKClcblx0XHRcdC5hdHRyKCB7XG5cblx0XHRcdFx0Ly8gU2V0dGluZyB0YWJJbmRleCBtYWtlcyB0aGUgZGl2IGZvY3VzYWJsZVxuXHRcdFx0XHR0YWJJbmRleDogLTEsXG5cdFx0XHRcdHJvbGU6IFwiZGlhbG9nXCJcblx0XHRcdH0gKVxuXHRcdFx0LmFwcGVuZFRvKCB0aGlzLl9hcHBlbmRUbygpICk7XG5cblx0XHR0aGlzLl9hZGRDbGFzcyggdGhpcy51aURpYWxvZywgXCJ1aS1kaWFsb2dcIiwgXCJ1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktZnJvbnRcIiApO1xuXHRcdHRoaXMuX29uKCB0aGlzLnVpRGlhbG9nLCB7XG5cdFx0XHRrZXlkb3duOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdGlmICggdGhpcy5vcHRpb25zLmNsb3NlT25Fc2NhcGUgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICYmIGV2ZW50LmtleUNvZGUgJiZcblx0XHRcdFx0XHRcdGV2ZW50LmtleUNvZGUgPT09ICQudWkua2V5Q29kZS5FU0NBUEUgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHR0aGlzLmNsb3NlKCBldmVudCApO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByZXZlbnQgdGFiYmluZyBvdXQgb2YgZGlhbG9nc1xuXHRcdFx0XHRpZiAoIGV2ZW50LmtleUNvZGUgIT09ICQudWkua2V5Q29kZS5UQUIgfHwgZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciB0YWJiYWJsZXMgPSB0aGlzLnVpRGlhbG9nLmZpbmQoIFwiOnRhYmJhYmxlXCIgKSxcblx0XHRcdFx0XHRmaXJzdCA9IHRhYmJhYmxlcy5maWx0ZXIoIFwiOmZpcnN0XCIgKSxcblx0XHRcdFx0XHRsYXN0ID0gdGFiYmFibGVzLmZpbHRlciggXCI6bGFzdFwiICk7XG5cblx0XHRcdFx0aWYgKCAoIGV2ZW50LnRhcmdldCA9PT0gbGFzdFsgMCBdIHx8IGV2ZW50LnRhcmdldCA9PT0gdGhpcy51aURpYWxvZ1sgMCBdICkgJiZcblx0XHRcdFx0XHRcdCFldmVudC5zaGlmdEtleSApIHtcblx0XHRcdFx0XHR0aGlzLl9kZWxheSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRmaXJzdC50cmlnZ2VyKCBcImZvY3VzXCIgKTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fSBlbHNlIGlmICggKCBldmVudC50YXJnZXQgPT09IGZpcnN0WyAwIF0gfHxcblx0XHRcdFx0XHRcdGV2ZW50LnRhcmdldCA9PT0gdGhpcy51aURpYWxvZ1sgMCBdICkgJiYgZXZlbnQuc2hpZnRLZXkgKSB7XG5cdFx0XHRcdFx0dGhpcy5fZGVsYXkoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0bGFzdC50cmlnZ2VyKCBcImZvY3VzXCIgKTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdG1vdXNlZG93bjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRpZiAoIHRoaXMuX21vdmVUb1RvcCggZXZlbnQgKSApIHtcblx0XHRcdFx0XHR0aGlzLl9mb2N1c1RhYmJhYmxlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBhbnkgZXhpc3RpbmcgYXJpYS1kZXNjcmliZWRieSBhdHRyaWJ1dGUgbWVhbnNcblx0XHQvLyB0aGF0IHRoZSBkaWFsb2cgY29udGVudCBpcyBtYXJrZWQgdXAgcHJvcGVybHlcblx0XHQvLyBvdGhlcndpc2Ugd2UgYnJ1dGUgZm9yY2UgdGhlIGNvbnRlbnQgYXMgdGhlIGRlc2NyaXB0aW9uXG5cdFx0aWYgKCAhdGhpcy5lbGVtZW50LmZpbmQoIFwiW2FyaWEtZGVzY3JpYmVkYnldXCIgKS5sZW5ndGggKSB7XG5cdFx0XHR0aGlzLnVpRGlhbG9nLmF0dHIoIHtcblx0XHRcdFx0XCJhcmlhLWRlc2NyaWJlZGJ5XCI6IHRoaXMuZWxlbWVudC51bmlxdWVJZCgpLmF0dHIoIFwiaWRcIiApXG5cdFx0XHR9ICk7XG5cdFx0fVxuXHR9LFxuXG5cdF9jcmVhdGVUaXRsZWJhcjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHVpRGlhbG9nVGl0bGU7XG5cblx0XHR0aGlzLnVpRGlhbG9nVGl0bGViYXIgPSAkKCBcIjxkaXY+XCIgKTtcblx0XHR0aGlzLl9hZGRDbGFzcyggdGhpcy51aURpYWxvZ1RpdGxlYmFyLFxuXHRcdFx0XCJ1aS1kaWFsb2ctdGl0bGViYXJcIiwgXCJ1aS13aWRnZXQtaGVhZGVyIHVpLWhlbHBlci1jbGVhcmZpeFwiICk7XG5cdFx0dGhpcy5fb24oIHRoaXMudWlEaWFsb2dUaXRsZWJhciwge1xuXHRcdFx0bW91c2Vkb3duOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgcHJldmVudCBjbGljayBvbiBjbG9zZSBidXR0b24gKCM4ODM4KVxuXHRcdFx0XHQvLyBGb2N1c2luZyBhIGRpYWxvZyB0aGF0IGlzIHBhcnRpYWxseSBzY3JvbGxlZCBvdXQgb2Ygdmlld1xuXHRcdFx0XHQvLyBjYXVzZXMgdGhlIGJyb3dzZXIgdG8gc2Nyb2xsIGl0IGludG8gdmlldywgcHJldmVudGluZyB0aGUgY2xpY2sgZXZlbnRcblx0XHRcdFx0aWYgKCAhJCggZXZlbnQudGFyZ2V0ICkuY2xvc2VzdCggXCIudWktZGlhbG9nLXRpdGxlYmFyLWNsb3NlXCIgKSApIHtcblxuXHRcdFx0XHRcdC8vIERpYWxvZyBpc24ndCBnZXR0aW5nIGZvY3VzIHdoZW4gZHJhZ2dpbmcgKCM4MDYzKVxuXHRcdFx0XHRcdHRoaXMudWlEaWFsb2cudHJpZ2dlciggXCJmb2N1c1wiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRVxuXHRcdC8vIFVzZSB0eXBlPVwiYnV0dG9uXCIgdG8gcHJldmVudCBlbnRlciBrZXlwcmVzc2VzIGluIHRleHRib3hlcyBmcm9tIGNsb3NpbmcgdGhlXG5cdFx0Ly8gZGlhbG9nIGluIElFICgjOTMxMilcblx0XHR0aGlzLnVpRGlhbG9nVGl0bGViYXJDbG9zZSA9ICQoIFwiPGJ1dHRvbiB0eXBlPSdidXR0b24nPjwvYnV0dG9uPlwiIClcblx0XHRcdC5idXR0b24oIHtcblx0XHRcdFx0bGFiZWw6ICQoIFwiPGE+XCIgKS50ZXh0KCB0aGlzLm9wdGlvbnMuY2xvc2VUZXh0ICkuaHRtbCgpLFxuXHRcdFx0XHRpY29uOiBcInVpLWljb24tY2xvc2V0aGlja1wiLFxuXHRcdFx0XHRzaG93TGFiZWw6IGZhbHNlXG5cdFx0XHR9IClcblx0XHRcdC5hcHBlbmRUbyggdGhpcy51aURpYWxvZ1RpdGxlYmFyICk7XG5cblx0XHR0aGlzLl9hZGRDbGFzcyggdGhpcy51aURpYWxvZ1RpdGxlYmFyQ2xvc2UsIFwidWktZGlhbG9nLXRpdGxlYmFyLWNsb3NlXCIgKTtcblx0XHR0aGlzLl9vbiggdGhpcy51aURpYWxvZ1RpdGxlYmFyQ2xvc2UsIHtcblx0XHRcdGNsaWNrOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdHRoaXMuY2xvc2UoIGV2ZW50ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdFx0dWlEaWFsb2dUaXRsZSA9ICQoIFwiPHNwYW4+XCIgKS51bmlxdWVJZCgpLnByZXBlbmRUbyggdGhpcy51aURpYWxvZ1RpdGxlYmFyICk7XG5cdFx0dGhpcy5fYWRkQ2xhc3MoIHVpRGlhbG9nVGl0bGUsIFwidWktZGlhbG9nLXRpdGxlXCIgKTtcblx0XHR0aGlzLl90aXRsZSggdWlEaWFsb2dUaXRsZSApO1xuXG5cdFx0dGhpcy51aURpYWxvZ1RpdGxlYmFyLnByZXBlbmRUbyggdGhpcy51aURpYWxvZyApO1xuXG5cdFx0dGhpcy51aURpYWxvZy5hdHRyKCB7XG5cdFx0XHRcImFyaWEtbGFiZWxsZWRieVwiOiB1aURpYWxvZ1RpdGxlLmF0dHIoIFwiaWRcIiApXG5cdFx0fSApO1xuXHR9LFxuXG5cdF90aXRsZTogZnVuY3Rpb24oIHRpdGxlICkge1xuXHRcdGlmICggdGhpcy5vcHRpb25zLnRpdGxlICkge1xuXHRcdFx0dGl0bGUudGV4dCggdGhpcy5vcHRpb25zLnRpdGxlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRpdGxlLmh0bWwoIFwiJiMxNjA7XCIgKTtcblx0XHR9XG5cdH0sXG5cblx0X2NyZWF0ZUJ1dHRvblBhbmU6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMudWlEaWFsb2dCdXR0b25QYW5lID0gJCggXCI8ZGl2PlwiICk7XG5cdFx0dGhpcy5fYWRkQ2xhc3MoIHRoaXMudWlEaWFsb2dCdXR0b25QYW5lLCBcInVpLWRpYWxvZy1idXR0b25wYW5lXCIsXG5cdFx0XHRcInVpLXdpZGdldC1jb250ZW50IHVpLWhlbHBlci1jbGVhcmZpeFwiICk7XG5cblx0XHR0aGlzLnVpQnV0dG9uU2V0ID0gJCggXCI8ZGl2PlwiIClcblx0XHRcdC5hcHBlbmRUbyggdGhpcy51aURpYWxvZ0J1dHRvblBhbmUgKTtcblx0XHR0aGlzLl9hZGRDbGFzcyggdGhpcy51aUJ1dHRvblNldCwgXCJ1aS1kaWFsb2ctYnV0dG9uc2V0XCIgKTtcblxuXHRcdHRoaXMuX2NyZWF0ZUJ1dHRvbnMoKTtcblx0fSxcblxuXHRfY3JlYXRlQnV0dG9uczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0YnV0dG9ucyA9IHRoaXMub3B0aW9ucy5idXR0b25zO1xuXG5cdFx0Ly8gSWYgd2UgYWxyZWFkeSBoYXZlIGEgYnV0dG9uIHBhbmUsIHJlbW92ZSBpdFxuXHRcdHRoaXMudWlEaWFsb2dCdXR0b25QYW5lLnJlbW92ZSgpO1xuXHRcdHRoaXMudWlCdXR0b25TZXQuZW1wdHkoKTtcblxuXHRcdGlmICggJC5pc0VtcHR5T2JqZWN0KCBidXR0b25zICkgfHwgKCAkLmlzQXJyYXkoIGJ1dHRvbnMgKSAmJiAhYnV0dG9ucy5sZW5ndGggKSApIHtcblx0XHRcdHRoaXMuX3JlbW92ZUNsYXNzKCB0aGlzLnVpRGlhbG9nLCBcInVpLWRpYWxvZy1idXR0b25zXCIgKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQkLmVhY2goIGJ1dHRvbnMsIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0XHRcdHZhciBjbGljaywgYnV0dG9uT3B0aW9ucztcblx0XHRcdHByb3BzID0gJC5pc0Z1bmN0aW9uKCBwcm9wcyApID9cblx0XHRcdFx0eyBjbGljazogcHJvcHMsIHRleHQ6IG5hbWUgfSA6XG5cdFx0XHRcdHByb3BzO1xuXG5cdFx0XHQvLyBEZWZhdWx0IHRvIGEgbm9uLXN1Ym1pdHRpbmcgYnV0dG9uXG5cdFx0XHRwcm9wcyA9ICQuZXh0ZW5kKCB7IHR5cGU6IFwiYnV0dG9uXCIgfSwgcHJvcHMgKTtcblxuXHRcdFx0Ly8gQ2hhbmdlIHRoZSBjb250ZXh0IGZvciB0aGUgY2xpY2sgY2FsbGJhY2sgdG8gYmUgdGhlIG1haW4gZWxlbWVudFxuXHRcdFx0Y2xpY2sgPSBwcm9wcy5jbGljaztcblx0XHRcdGJ1dHRvbk9wdGlvbnMgPSB7XG5cdFx0XHRcdGljb246IHByb3BzLmljb24sXG5cdFx0XHRcdGljb25Qb3NpdGlvbjogcHJvcHMuaWNvblBvc2l0aW9uLFxuXHRcdFx0XHRzaG93TGFiZWw6IHByb3BzLnNob3dMYWJlbCxcblxuXHRcdFx0XHQvLyBEZXByZWNhdGVkIG9wdGlvbnNcblx0XHRcdFx0aWNvbnM6IHByb3BzLmljb25zLFxuXHRcdFx0XHR0ZXh0OiBwcm9wcy50ZXh0XG5cdFx0XHR9O1xuXG5cdFx0XHRkZWxldGUgcHJvcHMuY2xpY2s7XG5cdFx0XHRkZWxldGUgcHJvcHMuaWNvbjtcblx0XHRcdGRlbGV0ZSBwcm9wcy5pY29uUG9zaXRpb247XG5cdFx0XHRkZWxldGUgcHJvcHMuc2hvd0xhYmVsO1xuXG5cdFx0XHQvLyBEZXByZWNhdGVkIG9wdGlvbnNcblx0XHRcdGRlbGV0ZSBwcm9wcy5pY29ucztcblx0XHRcdGlmICggdHlwZW9mIHByb3BzLnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRkZWxldGUgcHJvcHMudGV4dDtcblx0XHRcdH1cblxuXHRcdFx0JCggXCI8YnV0dG9uPjwvYnV0dG9uPlwiLCBwcm9wcyApXG5cdFx0XHRcdC5idXR0b24oIGJ1dHRvbk9wdGlvbnMgKVxuXHRcdFx0XHQuYXBwZW5kVG8oIHRoYXQudWlCdXR0b25TZXQgKVxuXHRcdFx0XHQub24oIFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0Y2xpY2suYXBwbHkoIHRoYXQuZWxlbWVudFsgMCBdLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0fSApO1xuXHRcdH0gKTtcblx0XHR0aGlzLl9hZGRDbGFzcyggdGhpcy51aURpYWxvZywgXCJ1aS1kaWFsb2ctYnV0dG9uc1wiICk7XG5cdFx0dGhpcy51aURpYWxvZ0J1dHRvblBhbmUuYXBwZW5kVG8oIHRoaXMudWlEaWFsb2cgKTtcblx0fSxcblxuXHRfbWFrZURyYWdnYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0b3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuXHRcdGZ1bmN0aW9uIGZpbHRlcmVkVWkoIHVpICkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0cG9zaXRpb246IHVpLnBvc2l0aW9uLFxuXHRcdFx0XHRvZmZzZXQ6IHVpLm9mZnNldFxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHR0aGlzLnVpRGlhbG9nLmRyYWdnYWJsZSgge1xuXHRcdFx0Y2FuY2VsOiBcIi51aS1kaWFsb2ctY29udGVudCwgLnVpLWRpYWxvZy10aXRsZWJhci1jbG9zZVwiLFxuXHRcdFx0aGFuZGxlOiBcIi51aS1kaWFsb2ctdGl0bGViYXJcIixcblx0XHRcdGNvbnRhaW5tZW50OiBcImRvY3VtZW50XCIsXG5cdFx0XHRzdGFydDogZnVuY3Rpb24oIGV2ZW50LCB1aSApIHtcblx0XHRcdFx0dGhhdC5fYWRkQ2xhc3MoICQoIHRoaXMgKSwgXCJ1aS1kaWFsb2ctZHJhZ2dpbmdcIiApO1xuXHRcdFx0XHR0aGF0Ll9ibG9ja0ZyYW1lcygpO1xuXHRcdFx0XHR0aGF0Ll90cmlnZ2VyKCBcImRyYWdTdGFydFwiLCBldmVudCwgZmlsdGVyZWRVaSggdWkgKSApO1xuXHRcdFx0fSxcblx0XHRcdGRyYWc6IGZ1bmN0aW9uKCBldmVudCwgdWkgKSB7XG5cdFx0XHRcdHRoYXQuX3RyaWdnZXIoIFwiZHJhZ1wiLCBldmVudCwgZmlsdGVyZWRVaSggdWkgKSApO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBldmVudCwgdWkgKSB7XG5cdFx0XHRcdHZhciBsZWZ0ID0gdWkub2Zmc2V0LmxlZnQgLSB0aGF0LmRvY3VtZW50LnNjcm9sbExlZnQoKSxcblx0XHRcdFx0XHR0b3AgPSB1aS5vZmZzZXQudG9wIC0gdGhhdC5kb2N1bWVudC5zY3JvbGxUb3AoKTtcblxuXHRcdFx0XHRvcHRpb25zLnBvc2l0aW9uID0ge1xuXHRcdFx0XHRcdG15OiBcImxlZnQgdG9wXCIsXG5cdFx0XHRcdFx0YXQ6IFwibGVmdFwiICsgKCBsZWZ0ID49IDAgPyBcIitcIiA6IFwiXCIgKSArIGxlZnQgKyBcIiBcIiArXG5cdFx0XHRcdFx0XHRcInRvcFwiICsgKCB0b3AgPj0gMCA/IFwiK1wiIDogXCJcIiApICsgdG9wLFxuXHRcdFx0XHRcdG9mOiB0aGF0LndpbmRvd1xuXHRcdFx0XHR9O1xuXHRcdFx0XHR0aGF0Ll9yZW1vdmVDbGFzcyggJCggdGhpcyApLCBcInVpLWRpYWxvZy1kcmFnZ2luZ1wiICk7XG5cdFx0XHRcdHRoYXQuX3VuYmxvY2tGcmFtZXMoKTtcblx0XHRcdFx0dGhhdC5fdHJpZ2dlciggXCJkcmFnU3RvcFwiLCBldmVudCwgZmlsdGVyZWRVaSggdWkgKSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRfbWFrZVJlc2l6YWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0b3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcblx0XHRcdGhhbmRsZXMgPSBvcHRpb25zLnJlc2l6YWJsZSxcblxuXHRcdFx0Ly8gLnVpLXJlc2l6YWJsZSBoYXMgcG9zaXRpb246IHJlbGF0aXZlIGRlZmluZWQgaW4gdGhlIHN0eWxlc2hlZXRcblx0XHRcdC8vIGJ1dCBkaWFsb2dzIGhhdmUgdG8gdXNlIGFic29sdXRlIG9yIGZpeGVkIHBvc2l0aW9uaW5nXG5cdFx0XHRwb3NpdGlvbiA9IHRoaXMudWlEaWFsb2cuY3NzKCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdHJlc2l6ZUhhbmRsZXMgPSB0eXBlb2YgaGFuZGxlcyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdGhhbmRsZXMgOlxuXHRcdFx0XHRcIm4sZSxzLHcsc2Usc3csbmUsbndcIjtcblxuXHRcdGZ1bmN0aW9uIGZpbHRlcmVkVWkoIHVpICkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0b3JpZ2luYWxQb3NpdGlvbjogdWkub3JpZ2luYWxQb3NpdGlvbixcblx0XHRcdFx0b3JpZ2luYWxTaXplOiB1aS5vcmlnaW5hbFNpemUsXG5cdFx0XHRcdHBvc2l0aW9uOiB1aS5wb3NpdGlvbixcblx0XHRcdFx0c2l6ZTogdWkuc2l6ZVxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHR0aGlzLnVpRGlhbG9nLnJlc2l6YWJsZSgge1xuXHRcdFx0Y2FuY2VsOiBcIi51aS1kaWFsb2ctY29udGVudFwiLFxuXHRcdFx0Y29udGFpbm1lbnQ6IFwiZG9jdW1lbnRcIixcblx0XHRcdGFsc29SZXNpemU6IHRoaXMuZWxlbWVudCxcblx0XHRcdG1heFdpZHRoOiBvcHRpb25zLm1heFdpZHRoLFxuXHRcdFx0bWF4SGVpZ2h0OiBvcHRpb25zLm1heEhlaWdodCxcblx0XHRcdG1pbldpZHRoOiBvcHRpb25zLm1pbldpZHRoLFxuXHRcdFx0bWluSGVpZ2h0OiB0aGlzLl9taW5IZWlnaHQoKSxcblx0XHRcdGhhbmRsZXM6IHJlc2l6ZUhhbmRsZXMsXG5cdFx0XHRzdGFydDogZnVuY3Rpb24oIGV2ZW50LCB1aSApIHtcblx0XHRcdFx0dGhhdC5fYWRkQ2xhc3MoICQoIHRoaXMgKSwgXCJ1aS1kaWFsb2ctcmVzaXppbmdcIiApO1xuXHRcdFx0XHR0aGF0Ll9ibG9ja0ZyYW1lcygpO1xuXHRcdFx0XHR0aGF0Ll90cmlnZ2VyKCBcInJlc2l6ZVN0YXJ0XCIsIGV2ZW50LCBmaWx0ZXJlZFVpKCB1aSApICk7XG5cdFx0XHR9LFxuXHRcdFx0cmVzaXplOiBmdW5jdGlvbiggZXZlbnQsIHVpICkge1xuXHRcdFx0XHR0aGF0Ll90cmlnZ2VyKCBcInJlc2l6ZVwiLCBldmVudCwgZmlsdGVyZWRVaSggdWkgKSApO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBldmVudCwgdWkgKSB7XG5cdFx0XHRcdHZhciBvZmZzZXQgPSB0aGF0LnVpRGlhbG9nLm9mZnNldCgpLFxuXHRcdFx0XHRcdGxlZnQgPSBvZmZzZXQubGVmdCAtIHRoYXQuZG9jdW1lbnQuc2Nyb2xsTGVmdCgpLFxuXHRcdFx0XHRcdHRvcCA9IG9mZnNldC50b3AgLSB0aGF0LmRvY3VtZW50LnNjcm9sbFRvcCgpO1xuXG5cdFx0XHRcdG9wdGlvbnMuaGVpZ2h0ID0gdGhhdC51aURpYWxvZy5oZWlnaHQoKTtcblx0XHRcdFx0b3B0aW9ucy53aWR0aCA9IHRoYXQudWlEaWFsb2cud2lkdGgoKTtcblx0XHRcdFx0b3B0aW9ucy5wb3NpdGlvbiA9IHtcblx0XHRcdFx0XHRteTogXCJsZWZ0IHRvcFwiLFxuXHRcdFx0XHRcdGF0OiBcImxlZnRcIiArICggbGVmdCA+PSAwID8gXCIrXCIgOiBcIlwiICkgKyBsZWZ0ICsgXCIgXCIgK1xuXHRcdFx0XHRcdFx0XCJ0b3BcIiArICggdG9wID49IDAgPyBcIitcIiA6IFwiXCIgKSArIHRvcCxcblx0XHRcdFx0XHRvZjogdGhhdC53aW5kb3dcblx0XHRcdFx0fTtcblx0XHRcdFx0dGhhdC5fcmVtb3ZlQ2xhc3MoICQoIHRoaXMgKSwgXCJ1aS1kaWFsb2ctcmVzaXppbmdcIiApO1xuXHRcdFx0XHR0aGF0Ll91bmJsb2NrRnJhbWVzKCk7XG5cdFx0XHRcdHRoYXQuX3RyaWdnZXIoIFwicmVzaXplU3RvcFwiLCBldmVudCwgZmlsdGVyZWRVaSggdWkgKSApO1xuXHRcdFx0fVxuXHRcdH0gKVxuXHRcdFx0LmNzcyggXCJwb3NpdGlvblwiLCBwb3NpdGlvbiApO1xuXHR9LFxuXG5cdF90cmFja0ZvY3VzOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLl9vbiggdGhpcy53aWRnZXQoKSwge1xuXHRcdFx0Zm9jdXNpbjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR0aGlzLl9tYWtlRm9jdXNUYXJnZXQoKTtcblx0XHRcdFx0dGhpcy5fZm9jdXNlZEVsZW1lbnQgPSAkKCBldmVudC50YXJnZXQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0X21ha2VGb2N1c1RhcmdldDogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5fdW50cmFja0luc3RhbmNlKCk7XG5cdFx0dGhpcy5fdHJhY2tpbmdJbnN0YW5jZXMoKS51bnNoaWZ0KCB0aGlzICk7XG5cdH0sXG5cblx0X3VudHJhY2tJbnN0YW5jZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGluc3RhbmNlcyA9IHRoaXMuX3RyYWNraW5nSW5zdGFuY2VzKCksXG5cdFx0XHRleGlzdHMgPSAkLmluQXJyYXkoIHRoaXMsIGluc3RhbmNlcyApO1xuXHRcdGlmICggZXhpc3RzICE9PSAtMSApIHtcblx0XHRcdGluc3RhbmNlcy5zcGxpY2UoIGV4aXN0cywgMSApO1xuXHRcdH1cblx0fSxcblxuXHRfdHJhY2tpbmdJbnN0YW5jZXM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpbnN0YW5jZXMgPSB0aGlzLmRvY3VtZW50LmRhdGEoIFwidWktZGlhbG9nLWluc3RhbmNlc1wiICk7XG5cdFx0aWYgKCAhaW5zdGFuY2VzICkge1xuXHRcdFx0aW5zdGFuY2VzID0gW107XG5cdFx0XHR0aGlzLmRvY3VtZW50LmRhdGEoIFwidWktZGlhbG9nLWluc3RhbmNlc1wiLCBpbnN0YW5jZXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGluc3RhbmNlcztcblx0fSxcblxuXHRfbWluSGVpZ2h0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuXHRcdHJldHVybiBvcHRpb25zLmhlaWdodCA9PT0gXCJhdXRvXCIgP1xuXHRcdFx0b3B0aW9ucy5taW5IZWlnaHQgOlxuXHRcdFx0TWF0aC5taW4oIG9wdGlvbnMubWluSGVpZ2h0LCBvcHRpb25zLmhlaWdodCApO1xuXHR9LFxuXG5cdF9wb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cblx0XHQvLyBOZWVkIHRvIHNob3cgdGhlIGRpYWxvZyB0byBnZXQgdGhlIGFjdHVhbCBvZmZzZXQgaW4gdGhlIHBvc2l0aW9uIHBsdWdpblxuXHRcdHZhciBpc1Zpc2libGUgPSB0aGlzLnVpRGlhbG9nLmlzKCBcIjp2aXNpYmxlXCIgKTtcblx0XHRpZiAoICFpc1Zpc2libGUgKSB7XG5cdFx0XHR0aGlzLnVpRGlhbG9nLnNob3coKTtcblx0XHR9XG5cdFx0dGhpcy51aURpYWxvZy5wb3NpdGlvbiggdGhpcy5vcHRpb25zLnBvc2l0aW9uICk7XG5cdFx0aWYgKCAhaXNWaXNpYmxlICkge1xuXHRcdFx0dGhpcy51aURpYWxvZy5oaWRlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdF9zZXRPcHRpb25zOiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRyZXNpemUgPSBmYWxzZSxcblx0XHRcdHJlc2l6YWJsZU9wdGlvbnMgPSB7fTtcblxuXHRcdCQuZWFjaCggb3B0aW9ucywgZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0XHR0aGF0Ll9zZXRPcHRpb24oIGtleSwgdmFsdWUgKTtcblxuXHRcdFx0aWYgKCBrZXkgaW4gdGhhdC5zaXplUmVsYXRlZE9wdGlvbnMgKSB7XG5cdFx0XHRcdHJlc2l6ZSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGtleSBpbiB0aGF0LnJlc2l6YWJsZVJlbGF0ZWRPcHRpb25zICkge1xuXHRcdFx0XHRyZXNpemFibGVPcHRpb25zWyBrZXkgXSA9IHZhbHVlO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHRcdGlmICggcmVzaXplICkge1xuXHRcdFx0dGhpcy5fc2l6ZSgpO1xuXHRcdFx0dGhpcy5fcG9zaXRpb24oKTtcblx0XHR9XG5cdFx0aWYgKCB0aGlzLnVpRGlhbG9nLmlzKCBcIjpkYXRhKHVpLXJlc2l6YWJsZSlcIiApICkge1xuXHRcdFx0dGhpcy51aURpYWxvZy5yZXNpemFibGUoIFwib3B0aW9uXCIsIHJlc2l6YWJsZU9wdGlvbnMgKTtcblx0XHR9XG5cdH0sXG5cblx0X3NldE9wdGlvbjogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGlzRHJhZ2dhYmxlLCBpc1Jlc2l6YWJsZSxcblx0XHRcdHVpRGlhbG9nID0gdGhpcy51aURpYWxvZztcblxuXHRcdGlmICgga2V5ID09PSBcImRpc2FibGVkXCIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5fc3VwZXIoIGtleSwgdmFsdWUgKTtcblxuXHRcdGlmICgga2V5ID09PSBcImFwcGVuZFRvXCIgKSB7XG5cdFx0XHR0aGlzLnVpRGlhbG9nLmFwcGVuZFRvKCB0aGlzLl9hcHBlbmRUbygpICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgPT09IFwiYnV0dG9uc1wiICkge1xuXHRcdFx0dGhpcy5fY3JlYXRlQnV0dG9ucygpO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ID09PSBcImNsb3NlVGV4dFwiICkge1xuXHRcdFx0dGhpcy51aURpYWxvZ1RpdGxlYmFyQ2xvc2UuYnV0dG9uKCB7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoYXQgd2UgYWx3YXlzIHBhc3MgYSBzdHJpbmdcblx0XHRcdFx0bGFiZWw6ICQoIFwiPGE+XCIgKS50ZXh0KCBcIlwiICsgdGhpcy5vcHRpb25zLmNsb3NlVGV4dCApLmh0bWwoKVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ID09PSBcImRyYWdnYWJsZVwiICkge1xuXHRcdFx0aXNEcmFnZ2FibGUgPSB1aURpYWxvZy5pcyggXCI6ZGF0YSh1aS1kcmFnZ2FibGUpXCIgKTtcblx0XHRcdGlmICggaXNEcmFnZ2FibGUgJiYgIXZhbHVlICkge1xuXHRcdFx0XHR1aURpYWxvZy5kcmFnZ2FibGUoIFwiZGVzdHJveVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggIWlzRHJhZ2dhYmxlICYmIHZhbHVlICkge1xuXHRcdFx0XHR0aGlzLl9tYWtlRHJhZ2dhYmxlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgPT09IFwicG9zaXRpb25cIiApIHtcblx0XHRcdHRoaXMuX3Bvc2l0aW9uKCk7XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgPT09IFwicmVzaXphYmxlXCIgKSB7XG5cblx0XHRcdC8vIGN1cnJlbnRseSByZXNpemFibGUsIGJlY29taW5nIG5vbi1yZXNpemFibGVcblx0XHRcdGlzUmVzaXphYmxlID0gdWlEaWFsb2cuaXMoIFwiOmRhdGEodWktcmVzaXphYmxlKVwiICk7XG5cdFx0XHRpZiAoIGlzUmVzaXphYmxlICYmICF2YWx1ZSApIHtcblx0XHRcdFx0dWlEaWFsb2cucmVzaXphYmxlKCBcImRlc3Ryb3lcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDdXJyZW50bHkgcmVzaXphYmxlLCBjaGFuZ2luZyBoYW5kbGVzXG5cdFx0XHRpZiAoIGlzUmVzaXphYmxlICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0dWlEaWFsb2cucmVzaXphYmxlKCBcIm9wdGlvblwiLCBcImhhbmRsZXNcIiwgdmFsdWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ3VycmVudGx5IG5vbi1yZXNpemFibGUsIGJlY29taW5nIHJlc2l6YWJsZVxuXHRcdFx0aWYgKCAhaXNSZXNpemFibGUgJiYgdmFsdWUgIT09IGZhbHNlICkge1xuXHRcdFx0XHR0aGlzLl9tYWtlUmVzaXphYmxlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgPT09IFwidGl0bGVcIiApIHtcblx0XHRcdHRoaXMuX3RpdGxlKCB0aGlzLnVpRGlhbG9nVGl0bGViYXIuZmluZCggXCIudWktZGlhbG9nLXRpdGxlXCIgKSApO1xuXHRcdH1cblx0fSxcblxuXHRfc2l6ZTogZnVuY3Rpb24oKSB7XG5cblx0XHQvLyBJZiB0aGUgdXNlciBoYXMgcmVzaXplZCB0aGUgZGlhbG9nLCB0aGUgLnVpLWRpYWxvZyBhbmQgLnVpLWRpYWxvZy1jb250ZW50XG5cdFx0Ly8gZGl2cyB3aWxsIGJvdGggaGF2ZSB3aWR0aCBhbmQgaGVpZ2h0IHNldCwgc28gd2UgbmVlZCB0byByZXNldCB0aGVtXG5cdFx0dmFyIG5vbkNvbnRlbnRIZWlnaHQsIG1pbkNvbnRlbnRIZWlnaHQsIG1heENvbnRlbnRIZWlnaHQsXG5cdFx0XHRvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG5cdFx0Ly8gUmVzZXQgY29udGVudCBzaXppbmdcblx0XHR0aGlzLmVsZW1lbnQuc2hvdygpLmNzcygge1xuXHRcdFx0d2lkdGg6IFwiYXV0b1wiLFxuXHRcdFx0bWluSGVpZ2h0OiAwLFxuXHRcdFx0bWF4SGVpZ2h0OiBcIm5vbmVcIixcblx0XHRcdGhlaWdodDogMFxuXHRcdH0gKTtcblxuXHRcdGlmICggb3B0aW9ucy5taW5XaWR0aCA+IG9wdGlvbnMud2lkdGggKSB7XG5cdFx0XHRvcHRpb25zLndpZHRoID0gb3B0aW9ucy5taW5XaWR0aDtcblx0XHR9XG5cblx0XHQvLyBSZXNldCB3cmFwcGVyIHNpemluZ1xuXHRcdC8vIGRldGVybWluZSB0aGUgaGVpZ2h0IG9mIGFsbCB0aGUgbm9uLWNvbnRlbnQgZWxlbWVudHNcblx0XHRub25Db250ZW50SGVpZ2h0ID0gdGhpcy51aURpYWxvZy5jc3MoIHtcblx0XHRcdGhlaWdodDogXCJhdXRvXCIsXG5cdFx0XHR3aWR0aDogb3B0aW9ucy53aWR0aFxuXHRcdH0gKVxuXHRcdFx0Lm91dGVySGVpZ2h0KCk7XG5cdFx0bWluQ29udGVudEhlaWdodCA9IE1hdGgubWF4KCAwLCBvcHRpb25zLm1pbkhlaWdodCAtIG5vbkNvbnRlbnRIZWlnaHQgKTtcblx0XHRtYXhDb250ZW50SGVpZ2h0ID0gdHlwZW9mIG9wdGlvbnMubWF4SGVpZ2h0ID09PSBcIm51bWJlclwiID9cblx0XHRcdE1hdGgubWF4KCAwLCBvcHRpb25zLm1heEhlaWdodCAtIG5vbkNvbnRlbnRIZWlnaHQgKSA6XG5cdFx0XHRcIm5vbmVcIjtcblxuXHRcdGlmICggb3B0aW9ucy5oZWlnaHQgPT09IFwiYXV0b1wiICkge1xuXHRcdFx0dGhpcy5lbGVtZW50LmNzcygge1xuXHRcdFx0XHRtaW5IZWlnaHQ6IG1pbkNvbnRlbnRIZWlnaHQsXG5cdFx0XHRcdG1heEhlaWdodDogbWF4Q29udGVudEhlaWdodCxcblx0XHRcdFx0aGVpZ2h0OiBcImF1dG9cIlxuXHRcdFx0fSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmVsZW1lbnQuaGVpZ2h0KCBNYXRoLm1heCggMCwgb3B0aW9ucy5oZWlnaHQgLSBub25Db250ZW50SGVpZ2h0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMudWlEaWFsb2cuaXMoIFwiOmRhdGEodWktcmVzaXphYmxlKVwiICkgKSB7XG5cdFx0XHR0aGlzLnVpRGlhbG9nLnJlc2l6YWJsZSggXCJvcHRpb25cIiwgXCJtaW5IZWlnaHRcIiwgdGhpcy5fbWluSGVpZ2h0KCkgKTtcblx0XHR9XG5cdH0sXG5cblx0X2Jsb2NrRnJhbWVzOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmlmcmFtZUJsb2NrcyA9IHRoaXMuZG9jdW1lbnQuZmluZCggXCJpZnJhbWVcIiApLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaWZyYW1lID0gJCggdGhpcyApO1xuXG5cdFx0XHRyZXR1cm4gJCggXCI8ZGl2PlwiIClcblx0XHRcdFx0LmNzcygge1xuXHRcdFx0XHRcdHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG5cdFx0XHRcdFx0d2lkdGg6IGlmcmFtZS5vdXRlcldpZHRoKCksXG5cdFx0XHRcdFx0aGVpZ2h0OiBpZnJhbWUub3V0ZXJIZWlnaHQoKVxuXHRcdFx0XHR9IClcblx0XHRcdFx0LmFwcGVuZFRvKCBpZnJhbWUucGFyZW50KCkgKVxuXHRcdFx0XHQub2Zmc2V0KCBpZnJhbWUub2Zmc2V0KCkgKVsgMCBdO1xuXHRcdH0gKTtcblx0fSxcblxuXHRfdW5ibG9ja0ZyYW1lczogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCB0aGlzLmlmcmFtZUJsb2NrcyApIHtcblx0XHRcdHRoaXMuaWZyYW1lQmxvY2tzLnJlbW92ZSgpO1xuXHRcdFx0ZGVsZXRlIHRoaXMuaWZyYW1lQmxvY2tzO1xuXHRcdH1cblx0fSxcblxuXHRfYWxsb3dJbnRlcmFjdGlvbjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdGlmICggJCggZXZlbnQudGFyZ2V0ICkuY2xvc2VzdCggXCIudWktZGlhbG9nXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBUT0RPOiBSZW1vdmUgaGFjayB3aGVuIGRhdGVwaWNrZXIgaW1wbGVtZW50c1xuXHRcdC8vIHRoZSAudWktZnJvbnQgbG9naWMgKCM4OTg5KVxuXHRcdHJldHVybiAhISQoIGV2ZW50LnRhcmdldCApLmNsb3Nlc3QoIFwiLnVpLWRhdGVwaWNrZXJcIiApLmxlbmd0aDtcblx0fSxcblxuXHRfY3JlYXRlT3ZlcmxheTogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpcy5vcHRpb25zLm1vZGFsICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFdlIHVzZSBhIGRlbGF5IGluIGNhc2UgdGhlIG92ZXJsYXkgaXMgY3JlYXRlZCBmcm9tIGFuXG5cdFx0Ly8gZXZlbnQgdGhhdCB3ZSdyZSBnb2luZyB0byBiZSBjYW5jZWxsaW5nICgjMjgwNClcblx0XHR2YXIgaXNPcGVuaW5nID0gdHJ1ZTtcblx0XHR0aGlzLl9kZWxheSggZnVuY3Rpb24oKSB7XG5cdFx0XHRpc09wZW5pbmcgPSBmYWxzZTtcblx0XHR9ICk7XG5cblx0XHRpZiAoICF0aGlzLmRvY3VtZW50LmRhdGEoIFwidWktZGlhbG9nLW92ZXJsYXlzXCIgKSApIHtcblxuXHRcdFx0Ly8gUHJldmVudCB1c2Ugb2YgYW5jaG9ycyBhbmQgaW5wdXRzXG5cdFx0XHQvLyBVc2luZyBfb24oKSBmb3IgYW4gZXZlbnQgaGFuZGxlciBzaGFyZWQgYWNyb3NzIG1hbnkgaW5zdGFuY2VzIGlzXG5cdFx0XHQvLyBzYWZlIGJlY2F1c2UgdGhlIGRpYWxvZ3Mgc3RhY2sgYW5kIG11c3QgYmUgY2xvc2VkIGluIHJldmVyc2Ugb3JkZXJcblx0XHRcdHRoaXMuX29uKCB0aGlzLmRvY3VtZW50LCB7XG5cdFx0XHRcdGZvY3VzaW46IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0XHRpZiAoIGlzT3BlbmluZyApIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoICF0aGlzLl9hbGxvd0ludGVyYWN0aW9uKCBldmVudCApICkge1xuXHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdHRoaXMuX3RyYWNraW5nSW5zdGFuY2VzKClbIDAgXS5fZm9jdXNUYWJiYWJsZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHRoaXMub3ZlcmxheSA9ICQoIFwiPGRpdj5cIiApXG5cdFx0XHQuYXBwZW5kVG8oIHRoaXMuX2FwcGVuZFRvKCkgKTtcblxuXHRcdHRoaXMuX2FkZENsYXNzKCB0aGlzLm92ZXJsYXksIG51bGwsIFwidWktd2lkZ2V0LW92ZXJsYXkgdWktZnJvbnRcIiApO1xuXHRcdHRoaXMuX29uKCB0aGlzLm92ZXJsYXksIHtcblx0XHRcdG1vdXNlZG93bjogXCJfa2VlcEZvY3VzXCJcblx0XHR9ICk7XG5cdFx0dGhpcy5kb2N1bWVudC5kYXRhKCBcInVpLWRpYWxvZy1vdmVybGF5c1wiLFxuXHRcdFx0KCB0aGlzLmRvY3VtZW50LmRhdGEoIFwidWktZGlhbG9nLW92ZXJsYXlzXCIgKSB8fCAwICkgKyAxICk7XG5cdH0sXG5cblx0X2Rlc3Ryb3lPdmVybGF5OiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzLm9wdGlvbnMubW9kYWwgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLm92ZXJsYXkgKSB7XG5cdFx0XHR2YXIgb3ZlcmxheXMgPSB0aGlzLmRvY3VtZW50LmRhdGEoIFwidWktZGlhbG9nLW92ZXJsYXlzXCIgKSAtIDE7XG5cblx0XHRcdGlmICggIW92ZXJsYXlzICkge1xuXHRcdFx0XHR0aGlzLl9vZmYoIHRoaXMuZG9jdW1lbnQsIFwiZm9jdXNpblwiICk7XG5cdFx0XHRcdHRoaXMuZG9jdW1lbnQucmVtb3ZlRGF0YSggXCJ1aS1kaWFsb2ctb3ZlcmxheXNcIiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5kb2N1bWVudC5kYXRhKCBcInVpLWRpYWxvZy1vdmVybGF5c1wiLCBvdmVybGF5cyApO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLm92ZXJsYXkucmVtb3ZlKCk7XG5cdFx0XHR0aGlzLm92ZXJsYXkgPSBudWxsO1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBERVBSRUNBVEVEXG4vLyBUT0RPOiBzd2l0Y2ggcmV0dXJuIGJhY2sgdG8gd2lkZ2V0IGRlY2xhcmF0aW9uIGF0IHRvcCBvZiBmaWxlIHdoZW4gdGhpcyBpcyByZW1vdmVkXG5pZiAoICQudWlCYWNrQ29tcGF0ICE9PSBmYWxzZSApIHtcblxuXHQvLyBCYWNrY29tcGF0IGZvciBkaWFsb2dDbGFzcyBvcHRpb25cblx0JC53aWRnZXQoIFwidWkuZGlhbG9nXCIsICQudWkuZGlhbG9nLCB7XG5cdFx0b3B0aW9uczoge1xuXHRcdFx0ZGlhbG9nQ2xhc3M6IFwiXCJcblx0XHR9LFxuXHRcdF9jcmVhdGVXcmFwcGVyOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuX3N1cGVyKCk7XG5cdFx0XHR0aGlzLnVpRGlhbG9nLmFkZENsYXNzKCB0aGlzLm9wdGlvbnMuZGlhbG9nQ2xhc3MgKTtcblx0XHR9LFxuXHRcdF9zZXRPcHRpb246IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdFx0aWYgKCBrZXkgPT09IFwiZGlhbG9nQ2xhc3NcIiApIHtcblx0XHRcdFx0dGhpcy51aURpYWxvZ1xuXHRcdFx0XHRcdC5yZW1vdmVDbGFzcyggdGhpcy5vcHRpb25zLmRpYWxvZ0NsYXNzIClcblx0XHRcdFx0XHQuYWRkQ2xhc3MoIHZhbHVlICk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9zdXBlckFwcGx5KCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH0gKTtcbn1cblxudmFyIHdpZGdldHNEaWFsb2cgPSAkLnVpLmRpYWxvZztcblxuXG4vKiFcbiAqIGpRdWVyeSBVSSBQcm9ncmVzc2JhciAxLjEyLjFcbiAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICovXG5cbi8vPj5sYWJlbDogUHJvZ3Jlc3NiYXJcbi8vPj5ncm91cDogV2lkZ2V0c1xuLy8ganNjczpkaXNhYmxlIG1heGltdW1MaW5lTGVuZ3RoXG4vLz4+ZGVzY3JpcHRpb246IERpc3BsYXlzIGEgc3RhdHVzIGluZGljYXRvciBmb3IgbG9hZGluZyBzdGF0ZSwgc3RhbmRhcmQgcGVyY2VudGFnZSwgYW5kIG90aGVyIHByb2dyZXNzIGluZGljYXRvcnMuXG4vLyBqc2NzOmVuYWJsZSBtYXhpbXVtTGluZUxlbmd0aFxuLy8+PmRvY3M6IGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL3Byb2dyZXNzYmFyL1xuLy8+PmRlbW9zOiBodHRwOi8vanF1ZXJ5dWkuY29tL3Byb2dyZXNzYmFyL1xuLy8+PmNzcy5zdHJ1Y3R1cmU6IC4uLy4uL3RoZW1lcy9iYXNlL2NvcmUuY3NzXG4vLz4+Y3NzLnN0cnVjdHVyZTogLi4vLi4vdGhlbWVzL2Jhc2UvcHJvZ3Jlc3NiYXIuY3NzXG4vLz4+Y3NzLnRoZW1lOiAuLi8uLi90aGVtZXMvYmFzZS90aGVtZS5jc3NcblxuXG5cbnZhciB3aWRnZXRzUHJvZ3Jlc3NiYXIgPSAkLndpZGdldCggXCJ1aS5wcm9ncmVzc2JhclwiLCB7XG5cdHZlcnNpb246IFwiMS4xMi4xXCIsXG5cdG9wdGlvbnM6IHtcblx0XHRjbGFzc2VzOiB7XG5cdFx0XHRcInVpLXByb2dyZXNzYmFyXCI6IFwidWktY29ybmVyLWFsbFwiLFxuXHRcdFx0XCJ1aS1wcm9ncmVzc2Jhci12YWx1ZVwiOiBcInVpLWNvcm5lci1sZWZ0XCIsXG5cdFx0XHRcInVpLXByb2dyZXNzYmFyLWNvbXBsZXRlXCI6IFwidWktY29ybmVyLXJpZ2h0XCJcblx0XHR9LFxuXHRcdG1heDogMTAwLFxuXHRcdHZhbHVlOiAwLFxuXG5cdFx0Y2hhbmdlOiBudWxsLFxuXHRcdGNvbXBsZXRlOiBudWxsXG5cdH0sXG5cblx0bWluOiAwLFxuXG5cdF9jcmVhdGU6IGZ1bmN0aW9uKCkge1xuXG5cdFx0Ly8gQ29uc3RyYWluIGluaXRpYWwgdmFsdWVcblx0XHR0aGlzLm9sZFZhbHVlID0gdGhpcy5vcHRpb25zLnZhbHVlID0gdGhpcy5fY29uc3RyYWluZWRWYWx1ZSgpO1xuXG5cdFx0dGhpcy5lbGVtZW50LmF0dHIoIHtcblxuXHRcdFx0Ly8gT25seSBzZXQgc3RhdGljIHZhbHVlczsgYXJpYS12YWx1ZW5vdyBhbmQgYXJpYS12YWx1ZW1heCBhcmVcblx0XHRcdC8vIHNldCBpbnNpZGUgX3JlZnJlc2hWYWx1ZSgpXG5cdFx0XHRyb2xlOiBcInByb2dyZXNzYmFyXCIsXG5cdFx0XHRcImFyaWEtdmFsdWVtaW5cIjogdGhpcy5taW5cblx0XHR9ICk7XG5cdFx0dGhpcy5fYWRkQ2xhc3MoIFwidWktcHJvZ3Jlc3NiYXJcIiwgXCJ1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnRcIiApO1xuXG5cdFx0dGhpcy52YWx1ZURpdiA9ICQoIFwiPGRpdj5cIiApLmFwcGVuZFRvKCB0aGlzLmVsZW1lbnQgKTtcblx0XHR0aGlzLl9hZGRDbGFzcyggdGhpcy52YWx1ZURpdiwgXCJ1aS1wcm9ncmVzc2Jhci12YWx1ZVwiLCBcInVpLXdpZGdldC1oZWFkZXJcIiApO1xuXHRcdHRoaXMuX3JlZnJlc2hWYWx1ZSgpO1xuXHR9LFxuXG5cdF9kZXN0cm95OiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmVsZW1lbnQucmVtb3ZlQXR0ciggXCJyb2xlIGFyaWEtdmFsdWVtaW4gYXJpYS12YWx1ZW1heCBhcmlhLXZhbHVlbm93XCIgKTtcblxuXHRcdHRoaXMudmFsdWVEaXYucmVtb3ZlKCk7XG5cdH0sXG5cblx0dmFsdWU6IGZ1bmN0aW9uKCBuZXdWYWx1ZSApIHtcblx0XHRpZiAoIG5ld1ZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25zLnZhbHVlO1xuXHRcdH1cblxuXHRcdHRoaXMub3B0aW9ucy52YWx1ZSA9IHRoaXMuX2NvbnN0cmFpbmVkVmFsdWUoIG5ld1ZhbHVlICk7XG5cdFx0dGhpcy5fcmVmcmVzaFZhbHVlKCk7XG5cdH0sXG5cblx0X2NvbnN0cmFpbmVkVmFsdWU6IGZ1bmN0aW9uKCBuZXdWYWx1ZSApIHtcblx0XHRpZiAoIG5ld1ZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRuZXdWYWx1ZSA9IHRoaXMub3B0aW9ucy52YWx1ZTtcblx0XHR9XG5cblx0XHR0aGlzLmluZGV0ZXJtaW5hdGUgPSBuZXdWYWx1ZSA9PT0gZmFsc2U7XG5cblx0XHQvLyBTYW5pdGl6ZSB2YWx1ZVxuXHRcdGlmICggdHlwZW9mIG5ld1ZhbHVlICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0bmV3VmFsdWUgPSAwO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmluZGV0ZXJtaW5hdGUgPyBmYWxzZSA6XG5cdFx0XHRNYXRoLm1pbiggdGhpcy5vcHRpb25zLm1heCwgTWF0aC5tYXgoIHRoaXMubWluLCBuZXdWYWx1ZSApICk7XG5cdH0sXG5cblx0X3NldE9wdGlvbnM6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gRW5zdXJlIFwidmFsdWVcIiBvcHRpb24gaXMgc2V0IGFmdGVyIG90aGVyIHZhbHVlcyAobGlrZSBtYXgpXG5cdFx0dmFyIHZhbHVlID0gb3B0aW9ucy52YWx1ZTtcblx0XHRkZWxldGUgb3B0aW9ucy52YWx1ZTtcblxuXHRcdHRoaXMuX3N1cGVyKCBvcHRpb25zICk7XG5cblx0XHR0aGlzLm9wdGlvbnMudmFsdWUgPSB0aGlzLl9jb25zdHJhaW5lZFZhbHVlKCB2YWx1ZSApO1xuXHRcdHRoaXMuX3JlZnJlc2hWYWx1ZSgpO1xuXHR9LFxuXG5cdF9zZXRPcHRpb246IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdGlmICgga2V5ID09PSBcIm1heFwiICkge1xuXG5cdFx0XHQvLyBEb24ndCBhbGxvdyBhIG1heCBsZXNzIHRoYW4gbWluXG5cdFx0XHR2YWx1ZSA9IE1hdGgubWF4KCB0aGlzLm1pbiwgdmFsdWUgKTtcblx0XHR9XG5cdFx0dGhpcy5fc3VwZXIoIGtleSwgdmFsdWUgKTtcblx0fSxcblxuXHRfc2V0T3B0aW9uRGlzYWJsZWQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR0aGlzLl9zdXBlciggdmFsdWUgKTtcblxuXHRcdHRoaXMuZWxlbWVudC5hdHRyKCBcImFyaWEtZGlzYWJsZWRcIiwgdmFsdWUgKTtcblx0XHR0aGlzLl90b2dnbGVDbGFzcyggbnVsbCwgXCJ1aS1zdGF0ZS1kaXNhYmxlZFwiLCAhIXZhbHVlICk7XG5cdH0sXG5cblx0X3BlcmNlbnRhZ2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmluZGV0ZXJtaW5hdGUgP1xuXHRcdFx0MTAwIDpcblx0XHRcdDEwMCAqICggdGhpcy5vcHRpb25zLnZhbHVlIC0gdGhpcy5taW4gKSAvICggdGhpcy5vcHRpb25zLm1heCAtIHRoaXMubWluICk7XG5cdH0sXG5cblx0X3JlZnJlc2hWYWx1ZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHZhbHVlID0gdGhpcy5vcHRpb25zLnZhbHVlLFxuXHRcdFx0cGVyY2VudGFnZSA9IHRoaXMuX3BlcmNlbnRhZ2UoKTtcblxuXHRcdHRoaXMudmFsdWVEaXZcblx0XHRcdC50b2dnbGUoIHRoaXMuaW5kZXRlcm1pbmF0ZSB8fCB2YWx1ZSA+IHRoaXMubWluIClcblx0XHRcdC53aWR0aCggcGVyY2VudGFnZS50b0ZpeGVkKCAwICkgKyBcIiVcIiApO1xuXG5cdFx0dGhpc1xuXHRcdFx0Ll90b2dnbGVDbGFzcyggdGhpcy52YWx1ZURpdiwgXCJ1aS1wcm9ncmVzc2Jhci1jb21wbGV0ZVwiLCBudWxsLFxuXHRcdFx0XHR2YWx1ZSA9PT0gdGhpcy5vcHRpb25zLm1heCApXG5cdFx0XHQuX3RvZ2dsZUNsYXNzKCBcInVpLXByb2dyZXNzYmFyLWluZGV0ZXJtaW5hdGVcIiwgbnVsbCwgdGhpcy5pbmRldGVybWluYXRlICk7XG5cblx0XHRpZiAoIHRoaXMuaW5kZXRlcm1pbmF0ZSApIHtcblx0XHRcdHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyKCBcImFyaWEtdmFsdWVub3dcIiApO1xuXHRcdFx0aWYgKCAhdGhpcy5vdmVybGF5RGl2ICkge1xuXHRcdFx0XHR0aGlzLm92ZXJsYXlEaXYgPSAkKCBcIjxkaXY+XCIgKS5hcHBlbmRUbyggdGhpcy52YWx1ZURpdiApO1xuXHRcdFx0XHR0aGlzLl9hZGRDbGFzcyggdGhpcy5vdmVybGF5RGl2LCBcInVpLXByb2dyZXNzYmFyLW92ZXJsYXlcIiApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmVsZW1lbnQuYXR0cigge1xuXHRcdFx0XHRcImFyaWEtdmFsdWVtYXhcIjogdGhpcy5vcHRpb25zLm1heCxcblx0XHRcdFx0XCJhcmlhLXZhbHVlbm93XCI6IHZhbHVlXG5cdFx0XHR9ICk7XG5cdFx0XHRpZiAoIHRoaXMub3ZlcmxheURpdiApIHtcblx0XHRcdFx0dGhpcy5vdmVybGF5RGl2LnJlbW92ZSgpO1xuXHRcdFx0XHR0aGlzLm92ZXJsYXlEaXYgPSBudWxsO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5vbGRWYWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHR0aGlzLm9sZFZhbHVlID0gdmFsdWU7XG5cdFx0XHR0aGlzLl90cmlnZ2VyKCBcImNoYW5nZVwiICk7XG5cdFx0fVxuXHRcdGlmICggdmFsdWUgPT09IHRoaXMub3B0aW9ucy5tYXggKSB7XG5cdFx0XHR0aGlzLl90cmlnZ2VyKCBcImNvbXBsZXRlXCIgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG4vKiFcbiAqIGpRdWVyeSBVSSBTZWxlY3RtZW51IDEuMTIuMVxuICogaHR0cDovL2pxdWVyeXVpLmNvbVxuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKi9cblxuLy8+PmxhYmVsOiBTZWxlY3RtZW51XG4vLz4+Z3JvdXA6IFdpZGdldHNcbi8vIGpzY3M6ZGlzYWJsZSBtYXhpbXVtTGluZUxlbmd0aFxuLy8+PmRlc2NyaXB0aW9uOiBEdXBsaWNhdGVzIGFuZCBleHRlbmRzIHRoZSBmdW5jdGlvbmFsaXR5IG9mIGEgbmF0aXZlIEhUTUwgc2VsZWN0IGVsZW1lbnQsIGFsbG93aW5nIGl0IHRvIGJlIGN1c3RvbWl6YWJsZSBpbiBiZWhhdmlvciBhbmQgYXBwZWFyYW5jZSBmYXIgYmV5b25kIHRoZSBsaW1pdGF0aW9ucyBvZiBhIG5hdGl2ZSBzZWxlY3QuXG4vLyBqc2NzOmVuYWJsZSBtYXhpbXVtTGluZUxlbmd0aFxuLy8+PmRvY3M6IGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL3NlbGVjdG1lbnUvXG4vLz4+ZGVtb3M6IGh0dHA6Ly9qcXVlcnl1aS5jb20vc2VsZWN0bWVudS9cbi8vPj5jc3Muc3RydWN0dXJlOiAuLi8uLi90aGVtZXMvYmFzZS9jb3JlLmNzc1xuLy8+PmNzcy5zdHJ1Y3R1cmU6IC4uLy4uL3RoZW1lcy9iYXNlL3NlbGVjdG1lbnUuY3NzLCAuLi8uLi90aGVtZXMvYmFzZS9idXR0b24uY3NzXG4vLz4+Y3NzLnRoZW1lOiAuLi8uLi90aGVtZXMvYmFzZS90aGVtZS5jc3NcblxuXG5cbnZhciB3aWRnZXRzU2VsZWN0bWVudSA9ICQud2lkZ2V0KCBcInVpLnNlbGVjdG1lbnVcIiwgWyAkLnVpLmZvcm1SZXNldE1peGluLCB7XG5cdHZlcnNpb246IFwiMS4xMi4xXCIsXG5cdGRlZmF1bHRFbGVtZW50OiBcIjxzZWxlY3Q+XCIsXG5cdG9wdGlvbnM6IHtcblx0XHRhcHBlbmRUbzogbnVsbCxcblx0XHRjbGFzc2VzOiB7XG5cdFx0XHRcInVpLXNlbGVjdG1lbnUtYnV0dG9uLW9wZW5cIjogXCJ1aS1jb3JuZXItdG9wXCIsXG5cdFx0XHRcInVpLXNlbGVjdG1lbnUtYnV0dG9uLWNsb3NlZFwiOiBcInVpLWNvcm5lci1hbGxcIlxuXHRcdH0sXG5cdFx0ZGlzYWJsZWQ6IG51bGwsXG5cdFx0aWNvbnM6IHtcblx0XHRcdGJ1dHRvbjogXCJ1aS1pY29uLXRyaWFuZ2xlLTEtc1wiXG5cdFx0fSxcblx0XHRwb3NpdGlvbjoge1xuXHRcdFx0bXk6IFwibGVmdCB0b3BcIixcblx0XHRcdGF0OiBcImxlZnQgYm90dG9tXCIsXG5cdFx0XHRjb2xsaXNpb246IFwibm9uZVwiXG5cdFx0fSxcblx0XHR3aWR0aDogZmFsc2UsXG5cblx0XHQvLyBDYWxsYmFja3Ncblx0XHRjaGFuZ2U6IG51bGwsXG5cdFx0Y2xvc2U6IG51bGwsXG5cdFx0Zm9jdXM6IG51bGwsXG5cdFx0b3BlbjogbnVsbCxcblx0XHRzZWxlY3Q6IG51bGxcblx0fSxcblxuXHRfY3JlYXRlOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgc2VsZWN0bWVudUlkID0gdGhpcy5lbGVtZW50LnVuaXF1ZUlkKCkuYXR0ciggXCJpZFwiICk7XG5cdFx0dGhpcy5pZHMgPSB7XG5cdFx0XHRlbGVtZW50OiBzZWxlY3RtZW51SWQsXG5cdFx0XHRidXR0b246IHNlbGVjdG1lbnVJZCArIFwiLWJ1dHRvblwiLFxuXHRcdFx0bWVudTogc2VsZWN0bWVudUlkICsgXCItbWVudVwiXG5cdFx0fTtcblxuXHRcdHRoaXMuX2RyYXdCdXR0b24oKTtcblx0XHR0aGlzLl9kcmF3TWVudSgpO1xuXHRcdHRoaXMuX2JpbmRGb3JtUmVzZXRIYW5kbGVyKCk7XG5cblx0XHR0aGlzLl9yZW5kZXJlZCA9IGZhbHNlO1xuXHRcdHRoaXMubWVudUl0ZW1zID0gJCgpO1xuXHR9LFxuXG5cdF9kcmF3QnV0dG9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWNvbixcblx0XHRcdHRoYXQgPSB0aGlzLFxuXHRcdFx0aXRlbSA9IHRoaXMuX3BhcnNlT3B0aW9uKFxuXHRcdFx0XHR0aGlzLmVsZW1lbnQuZmluZCggXCJvcHRpb246c2VsZWN0ZWRcIiApLFxuXHRcdFx0XHR0aGlzLmVsZW1lbnRbIDAgXS5zZWxlY3RlZEluZGV4XG5cdFx0XHQpO1xuXG5cdFx0Ly8gQXNzb2NpYXRlIGV4aXN0aW5nIGxhYmVsIHdpdGggdGhlIG5ldyBidXR0b25cblx0XHR0aGlzLmxhYmVscyA9IHRoaXMuZWxlbWVudC5sYWJlbHMoKS5hdHRyKCBcImZvclwiLCB0aGlzLmlkcy5idXR0b24gKTtcblx0XHR0aGlzLl9vbiggdGhpcy5sYWJlbHMsIHtcblx0XHRcdGNsaWNrOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHRoaXMuYnV0dG9uLmZvY3VzKCk7XG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdFx0Ly8gSGlkZSBvcmlnaW5hbCBzZWxlY3QgZWxlbWVudFxuXHRcdHRoaXMuZWxlbWVudC5oaWRlKCk7XG5cblx0XHQvLyBDcmVhdGUgYnV0dG9uXG5cdFx0dGhpcy5idXR0b24gPSAkKCBcIjxzcGFuPlwiLCB7XG5cdFx0XHR0YWJpbmRleDogdGhpcy5vcHRpb25zLmRpc2FibGVkID8gLTEgOiAwLFxuXHRcdFx0aWQ6IHRoaXMuaWRzLmJ1dHRvbixcblx0XHRcdHJvbGU6IFwiY29tYm9ib3hcIixcblx0XHRcdFwiYXJpYS1leHBhbmRlZFwiOiBcImZhbHNlXCIsXG5cdFx0XHRcImFyaWEtYXV0b2NvbXBsZXRlXCI6IFwibGlzdFwiLFxuXHRcdFx0XCJhcmlhLW93bnNcIjogdGhpcy5pZHMubWVudSxcblx0XHRcdFwiYXJpYS1oYXNwb3B1cFwiOiBcInRydWVcIixcblx0XHRcdHRpdGxlOiB0aGlzLmVsZW1lbnQuYXR0ciggXCJ0aXRsZVwiIClcblx0XHR9IClcblx0XHRcdC5pbnNlcnRBZnRlciggdGhpcy5lbGVtZW50ICk7XG5cblx0XHR0aGlzLl9hZGRDbGFzcyggdGhpcy5idXR0b24sIFwidWktc2VsZWN0bWVudS1idXR0b24gdWktc2VsZWN0bWVudS1idXR0b24tY2xvc2VkXCIsXG5cdFx0XHRcInVpLWJ1dHRvbiB1aS13aWRnZXRcIiApO1xuXG5cdFx0aWNvbiA9ICQoIFwiPHNwYW4+XCIgKS5hcHBlbmRUbyggdGhpcy5idXR0b24gKTtcblx0XHR0aGlzLl9hZGRDbGFzcyggaWNvbiwgXCJ1aS1zZWxlY3RtZW51LWljb25cIiwgXCJ1aS1pY29uIFwiICsgdGhpcy5vcHRpb25zLmljb25zLmJ1dHRvbiApO1xuXHRcdHRoaXMuYnV0dG9uSXRlbSA9IHRoaXMuX3JlbmRlckJ1dHRvbkl0ZW0oIGl0ZW0gKVxuXHRcdFx0LmFwcGVuZFRvKCB0aGlzLmJ1dHRvbiApO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMud2lkdGggIT09IGZhbHNlICkge1xuXHRcdFx0dGhpcy5fcmVzaXplQnV0dG9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fb24oIHRoaXMuYnV0dG9uLCB0aGlzLl9idXR0b25FdmVudHMgKTtcblx0XHR0aGlzLmJ1dHRvbi5vbmUoIFwiZm9jdXNpblwiLCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRGVsYXkgcmVuZGVyaW5nIHRoZSBtZW51IGl0ZW1zIHVudGlsIHRoZSBidXR0b24gcmVjZWl2ZXMgZm9jdXMuXG5cdFx0XHQvLyBUaGUgbWVudSBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gcmVuZGVyZWQgdmlhIGEgcHJvZ3JhbW1hdGljIG9wZW4uXG5cdFx0XHRpZiAoICF0aGF0Ll9yZW5kZXJlZCApIHtcblx0XHRcdFx0dGhhdC5fcmVmcmVzaE1lbnUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0X2RyYXdNZW51OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdGhhdCA9IHRoaXM7XG5cblx0XHQvLyBDcmVhdGUgbWVudVxuXHRcdHRoaXMubWVudSA9ICQoIFwiPHVsPlwiLCB7XG5cdFx0XHRcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiLFxuXHRcdFx0XCJhcmlhLWxhYmVsbGVkYnlcIjogdGhpcy5pZHMuYnV0dG9uLFxuXHRcdFx0aWQ6IHRoaXMuaWRzLm1lbnVcblx0XHR9ICk7XG5cblx0XHQvLyBXcmFwIG1lbnVcblx0XHR0aGlzLm1lbnVXcmFwID0gJCggXCI8ZGl2PlwiICkuYXBwZW5kKCB0aGlzLm1lbnUgKTtcblx0XHR0aGlzLl9hZGRDbGFzcyggdGhpcy5tZW51V3JhcCwgXCJ1aS1zZWxlY3RtZW51LW1lbnVcIiwgXCJ1aS1mcm9udFwiICk7XG5cdFx0dGhpcy5tZW51V3JhcC5hcHBlbmRUbyggdGhpcy5fYXBwZW5kVG8oKSApO1xuXG5cdFx0Ly8gSW5pdGlhbGl6ZSBtZW51IHdpZGdldFxuXHRcdHRoaXMubWVudUluc3RhbmNlID0gdGhpcy5tZW51XG5cdFx0XHQubWVudSgge1xuXHRcdFx0XHRjbGFzc2VzOiB7XG5cdFx0XHRcdFx0XCJ1aS1tZW51XCI6IFwidWktY29ybmVyLWJvdHRvbVwiXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHJvbGU6IFwibGlzdGJveFwiLFxuXHRcdFx0XHRzZWxlY3Q6IGZ1bmN0aW9uKCBldmVudCwgdWkgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0XHRcdC8vIElmIHRoZSBpdGVtIHdhcyBzZWxlY3RlZCB2aWEgYSBjbGljaywgdGhlIHRleHQgc2VsZWN0aW9uXG5cdFx0XHRcdFx0Ly8gd2lsbCBiZSBkZXN0cm95ZWQgaW4gSUVcblx0XHRcdFx0XHR0aGF0Ll9zZXRTZWxlY3Rpb24oKTtcblxuXHRcdFx0XHRcdHRoYXQuX3NlbGVjdCggdWkuaXRlbS5kYXRhKCBcInVpLXNlbGVjdG1lbnUtaXRlbVwiICksIGV2ZW50ICk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGZvY3VzOiBmdW5jdGlvbiggZXZlbnQsIHVpICkge1xuXHRcdFx0XHRcdHZhciBpdGVtID0gdWkuaXRlbS5kYXRhKCBcInVpLXNlbGVjdG1lbnUtaXRlbVwiICk7XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IGluaXRhbCBmb2N1cyBmcm9tIGZpcmluZyBhbmQgY2hlY2sgaWYgaXRzIGEgbmV3bHkgZm9jdXNlZCBpdGVtXG5cdFx0XHRcdFx0aWYgKCB0aGF0LmZvY3VzSW5kZXggIT0gbnVsbCAmJiBpdGVtLmluZGV4ICE9PSB0aGF0LmZvY3VzSW5kZXggKSB7XG5cdFx0XHRcdFx0XHR0aGF0Ll90cmlnZ2VyKCBcImZvY3VzXCIsIGV2ZW50LCB7IGl0ZW06IGl0ZW0gfSApO1xuXHRcdFx0XHRcdFx0aWYgKCAhdGhhdC5pc09wZW4gKSB7XG5cdFx0XHRcdFx0XHRcdHRoYXQuX3NlbGVjdCggaXRlbSwgZXZlbnQgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhhdC5mb2N1c0luZGV4ID0gaXRlbS5pbmRleDtcblxuXHRcdFx0XHRcdHRoYXQuYnV0dG9uLmF0dHIoIFwiYXJpYS1hY3RpdmVkZXNjZW5kYW50XCIsXG5cdFx0XHRcdFx0XHR0aGF0Lm1lbnVJdGVtcy5lcSggaXRlbS5pbmRleCApLmF0dHIoIFwiaWRcIiApICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKVxuXHRcdFx0Lm1lbnUoIFwiaW5zdGFuY2VcIiApO1xuXG5cdFx0Ly8gRG9uJ3QgY2xvc2UgdGhlIG1lbnUgb24gbW91c2VsZWF2ZVxuXHRcdHRoaXMubWVudUluc3RhbmNlLl9vZmYoIHRoaXMubWVudSwgXCJtb3VzZWxlYXZlXCIgKTtcblxuXHRcdC8vIENhbmNlbCB0aGUgbWVudSdzIGNvbGxhcHNlQWxsIG9uIGRvY3VtZW50IGNsaWNrXG5cdFx0dGhpcy5tZW51SW5zdGFuY2UuX2Nsb3NlT25Eb2N1bWVudENsaWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHRcdC8vIFNlbGVjdHMgb2Z0ZW4gY29udGFpbiBlbXB0eSBpdGVtcywgYnV0IG5ldmVyIGNvbnRhaW4gZGl2aWRlcnNcblx0XHR0aGlzLm1lbnVJbnN0YW5jZS5faXNEaXZpZGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblx0fSxcblxuXHRyZWZyZXNoOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLl9yZWZyZXNoTWVudSgpO1xuXHRcdHRoaXMuYnV0dG9uSXRlbS5yZXBsYWNlV2l0aChcblx0XHRcdHRoaXMuYnV0dG9uSXRlbSA9IHRoaXMuX3JlbmRlckJ1dHRvbkl0ZW0oXG5cblx0XHRcdFx0Ly8gRmFsbCBiYWNrIHRvIGFuIGVtcHR5IG9iamVjdCBpbiBjYXNlIHRoZXJlIGFyZSBubyBvcHRpb25zXG5cdFx0XHRcdHRoaXMuX2dldFNlbGVjdGVkSXRlbSgpLmRhdGEoIFwidWktc2VsZWN0bWVudS1pdGVtXCIgKSB8fCB7fVxuXHRcdFx0KVxuXHRcdCk7XG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMud2lkdGggPT09IG51bGwgKSB7XG5cdFx0XHR0aGlzLl9yZXNpemVCdXR0b24oKTtcblx0XHR9XG5cdH0sXG5cblx0X3JlZnJlc2hNZW51OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaXRlbSxcblx0XHRcdG9wdGlvbnMgPSB0aGlzLmVsZW1lbnQuZmluZCggXCJvcHRpb25cIiApO1xuXG5cdFx0dGhpcy5tZW51LmVtcHR5KCk7XG5cblx0XHR0aGlzLl9wYXJzZU9wdGlvbnMoIG9wdGlvbnMgKTtcblx0XHR0aGlzLl9yZW5kZXJNZW51KCB0aGlzLm1lbnUsIHRoaXMuaXRlbXMgKTtcblxuXHRcdHRoaXMubWVudUluc3RhbmNlLnJlZnJlc2goKTtcblx0XHR0aGlzLm1lbnVJdGVtcyA9IHRoaXMubWVudS5maW5kKCBcImxpXCIgKVxuXHRcdFx0Lm5vdCggXCIudWktc2VsZWN0bWVudS1vcHRncm91cFwiIClcblx0XHRcdFx0LmZpbmQoIFwiLnVpLW1lbnUtaXRlbS13cmFwcGVyXCIgKTtcblxuXHRcdHRoaXMuX3JlbmRlcmVkID0gdHJ1ZTtcblxuXHRcdGlmICggIW9wdGlvbnMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGl0ZW0gPSB0aGlzLl9nZXRTZWxlY3RlZEl0ZW0oKTtcblxuXHRcdC8vIFVwZGF0ZSB0aGUgbWVudSB0byBoYXZlIHRoZSBjb3JyZWN0IGl0ZW0gZm9jdXNlZFxuXHRcdHRoaXMubWVudUluc3RhbmNlLmZvY3VzKCBudWxsLCBpdGVtICk7XG5cdFx0dGhpcy5fc2V0QXJpYSggaXRlbS5kYXRhKCBcInVpLXNlbGVjdG1lbnUtaXRlbVwiICkgKTtcblxuXHRcdC8vIFNldCBkaXNhYmxlZCBzdGF0ZVxuXHRcdHRoaXMuX3NldE9wdGlvbiggXCJkaXNhYmxlZFwiLCB0aGlzLmVsZW1lbnQucHJvcCggXCJkaXNhYmxlZFwiICkgKTtcblx0fSxcblxuXHRvcGVuOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhpcyBpcyB0aGUgZmlyc3QgdGltZSB0aGUgbWVudSBpcyBiZWluZyBvcGVuZWQsIHJlbmRlciB0aGUgaXRlbXNcblx0XHRpZiAoICF0aGlzLl9yZW5kZXJlZCApIHtcblx0XHRcdHRoaXMuX3JlZnJlc2hNZW51KCk7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gTWVudSBjbGVhcnMgZm9jdXMgb24gY2xvc2UsIHJlc2V0IGZvY3VzIHRvIHNlbGVjdGVkIGl0ZW1cblx0XHRcdHRoaXMuX3JlbW92ZUNsYXNzKCB0aGlzLm1lbnUuZmluZCggXCIudWktc3RhdGUtYWN0aXZlXCIgKSwgbnVsbCwgXCJ1aS1zdGF0ZS1hY3RpdmVcIiApO1xuXHRcdFx0dGhpcy5tZW51SW5zdGFuY2UuZm9jdXMoIG51bGwsIHRoaXMuX2dldFNlbGVjdGVkSXRlbSgpICk7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIG5vIG9wdGlvbnMsIGRvbid0IG9wZW4gdGhlIG1lbnVcblx0XHRpZiAoICF0aGlzLm1lbnVJdGVtcy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5pc09wZW4gPSB0cnVlO1xuXHRcdHRoaXMuX3RvZ2dsZUF0dHIoKTtcblx0XHR0aGlzLl9yZXNpemVNZW51KCk7XG5cdFx0dGhpcy5fcG9zaXRpb24oKTtcblxuXHRcdHRoaXMuX29uKCB0aGlzLmRvY3VtZW50LCB0aGlzLl9kb2N1bWVudENsaWNrICk7XG5cblx0XHR0aGlzLl90cmlnZ2VyKCBcIm9wZW5cIiwgZXZlbnQgKTtcblx0fSxcblxuXHRfcG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMubWVudVdyYXAucG9zaXRpb24oICQuZXh0ZW5kKCB7IG9mOiB0aGlzLmJ1dHRvbiB9LCB0aGlzLm9wdGlvbnMucG9zaXRpb24gKSApO1xuXHR9LFxuXG5cdGNsb3NlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0aWYgKCAhdGhpcy5pc09wZW4gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5pc09wZW4gPSBmYWxzZTtcblx0XHR0aGlzLl90b2dnbGVBdHRyKCk7XG5cblx0XHR0aGlzLnJhbmdlID0gbnVsbDtcblx0XHR0aGlzLl9vZmYoIHRoaXMuZG9jdW1lbnQgKTtcblxuXHRcdHRoaXMuX3RyaWdnZXIoIFwiY2xvc2VcIiwgZXZlbnQgKTtcblx0fSxcblxuXHR3aWRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmJ1dHRvbjtcblx0fSxcblxuXHRtZW51V2lkZ2V0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tZW51O1xuXHR9LFxuXG5cdF9yZW5kZXJCdXR0b25JdGVtOiBmdW5jdGlvbiggaXRlbSApIHtcblx0XHR2YXIgYnV0dG9uSXRlbSA9ICQoIFwiPHNwYW4+XCIgKTtcblxuXHRcdHRoaXMuX3NldFRleHQoIGJ1dHRvbkl0ZW0sIGl0ZW0ubGFiZWwgKTtcblx0XHR0aGlzLl9hZGRDbGFzcyggYnV0dG9uSXRlbSwgXCJ1aS1zZWxlY3RtZW51LXRleHRcIiApO1xuXG5cdFx0cmV0dXJuIGJ1dHRvbkl0ZW07XG5cdH0sXG5cblx0X3JlbmRlck1lbnU6IGZ1bmN0aW9uKCB1bCwgaXRlbXMgKSB7XG5cdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0Y3VycmVudE9wdGdyb3VwID0gXCJcIjtcblxuXHRcdCQuZWFjaCggaXRlbXMsIGZ1bmN0aW9uKCBpbmRleCwgaXRlbSApIHtcblx0XHRcdHZhciBsaTtcblxuXHRcdFx0aWYgKCBpdGVtLm9wdGdyb3VwICE9PSBjdXJyZW50T3B0Z3JvdXAgKSB7XG5cdFx0XHRcdGxpID0gJCggXCI8bGk+XCIsIHtcblx0XHRcdFx0XHR0ZXh0OiBpdGVtLm9wdGdyb3VwXG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0dGhhdC5fYWRkQ2xhc3MoIGxpLCBcInVpLXNlbGVjdG1lbnUtb3B0Z3JvdXBcIiwgXCJ1aS1tZW51LWRpdmlkZXJcIiArXG5cdFx0XHRcdFx0KCBpdGVtLmVsZW1lbnQucGFyZW50KCBcIm9wdGdyb3VwXCIgKS5wcm9wKCBcImRpc2FibGVkXCIgKSA/XG5cdFx0XHRcdFx0XHRcIiB1aS1zdGF0ZS1kaXNhYmxlZFwiIDpcblx0XHRcdFx0XHRcdFwiXCIgKSApO1xuXG5cdFx0XHRcdGxpLmFwcGVuZFRvKCB1bCApO1xuXG5cdFx0XHRcdGN1cnJlbnRPcHRncm91cCA9IGl0ZW0ub3B0Z3JvdXA7XG5cdFx0XHR9XG5cblx0XHRcdHRoYXQuX3JlbmRlckl0ZW1EYXRhKCB1bCwgaXRlbSApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRfcmVuZGVySXRlbURhdGE6IGZ1bmN0aW9uKCB1bCwgaXRlbSApIHtcblx0XHRyZXR1cm4gdGhpcy5fcmVuZGVySXRlbSggdWwsIGl0ZW0gKS5kYXRhKCBcInVpLXNlbGVjdG1lbnUtaXRlbVwiLCBpdGVtICk7XG5cdH0sXG5cblx0X3JlbmRlckl0ZW06IGZ1bmN0aW9uKCB1bCwgaXRlbSApIHtcblx0XHR2YXIgbGkgPSAkKCBcIjxsaT5cIiApLFxuXHRcdFx0d3JhcHBlciA9ICQoIFwiPGRpdj5cIiwge1xuXHRcdFx0XHR0aXRsZTogaXRlbS5lbGVtZW50LmF0dHIoIFwidGl0bGVcIiApXG5cdFx0XHR9ICk7XG5cblx0XHRpZiAoIGl0ZW0uZGlzYWJsZWQgKSB7XG5cdFx0XHR0aGlzLl9hZGRDbGFzcyggbGksIG51bGwsIFwidWktc3RhdGUtZGlzYWJsZWRcIiApO1xuXHRcdH1cblx0XHR0aGlzLl9zZXRUZXh0KCB3cmFwcGVyLCBpdGVtLmxhYmVsICk7XG5cblx0XHRyZXR1cm4gbGkuYXBwZW5kKCB3cmFwcGVyICkuYXBwZW5kVG8oIHVsICk7XG5cdH0sXG5cblx0X3NldFRleHQ6IGZ1bmN0aW9uKCBlbGVtZW50LCB2YWx1ZSApIHtcblx0XHRpZiAoIHZhbHVlICkge1xuXHRcdFx0ZWxlbWVudC50ZXh0KCB2YWx1ZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtZW50Lmh0bWwoIFwiJiMxNjA7XCIgKTtcblx0XHR9XG5cdH0sXG5cblx0X21vdmU6IGZ1bmN0aW9uKCBkaXJlY3Rpb24sIGV2ZW50ICkge1xuXHRcdHZhciBpdGVtLCBuZXh0LFxuXHRcdFx0ZmlsdGVyID0gXCIudWktbWVudS1pdGVtXCI7XG5cblx0XHRpZiAoIHRoaXMuaXNPcGVuICkge1xuXHRcdFx0aXRlbSA9IHRoaXMubWVudUl0ZW1zLmVxKCB0aGlzLmZvY3VzSW5kZXggKS5wYXJlbnQoIFwibGlcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpdGVtID0gdGhpcy5tZW51SXRlbXMuZXEoIHRoaXMuZWxlbWVudFsgMCBdLnNlbGVjdGVkSW5kZXggKS5wYXJlbnQoIFwibGlcIiApO1xuXHRcdFx0ZmlsdGVyICs9IFwiOm5vdCgudWktc3RhdGUtZGlzYWJsZWQpXCI7XG5cdFx0fVxuXG5cdFx0aWYgKCBkaXJlY3Rpb24gPT09IFwiZmlyc3RcIiB8fCBkaXJlY3Rpb24gPT09IFwibGFzdFwiICkge1xuXHRcdFx0bmV4dCA9IGl0ZW1bIGRpcmVjdGlvbiA9PT0gXCJmaXJzdFwiID8gXCJwcmV2QWxsXCIgOiBcIm5leHRBbGxcIiBdKCBmaWx0ZXIgKS5lcSggLTEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bmV4dCA9IGl0ZW1bIGRpcmVjdGlvbiArIFwiQWxsXCIgXSggZmlsdGVyICkuZXEoIDAgKTtcblx0XHR9XG5cblx0XHRpZiAoIG5leHQubGVuZ3RoICkge1xuXHRcdFx0dGhpcy5tZW51SW5zdGFuY2UuZm9jdXMoIGV2ZW50LCBuZXh0ICk7XG5cdFx0fVxuXHR9LFxuXG5cdF9nZXRTZWxlY3RlZEl0ZW06IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1lbnVJdGVtcy5lcSggdGhpcy5lbGVtZW50WyAwIF0uc2VsZWN0ZWRJbmRleCApLnBhcmVudCggXCJsaVwiICk7XG5cdH0sXG5cblx0X3RvZ2dsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHRoaXNbIHRoaXMuaXNPcGVuID8gXCJjbG9zZVwiIDogXCJvcGVuXCIgXSggZXZlbnQgKTtcblx0fSxcblxuXHRfc2V0U2VsZWN0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgc2VsZWN0aW9uO1xuXG5cdFx0aWYgKCAhdGhpcy5yYW5nZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHdpbmRvdy5nZXRTZWxlY3Rpb24gKSB7XG5cdFx0XHRzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG5cdFx0XHRzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG5cdFx0XHRzZWxlY3Rpb24uYWRkUmFuZ2UoIHRoaXMucmFuZ2UgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnJhbmdlLnNlbGVjdCgpO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFXG5cdFx0Ly8gU2V0dGluZyB0aGUgdGV4dCBzZWxlY3Rpb24ga2lsbHMgdGhlIGJ1dHRvbiBmb2N1cyBpbiBJRSwgYnV0XG5cdFx0Ly8gcmVzdG9yaW5nIHRoZSBmb2N1cyBkb2Vzbid0IGtpbGwgdGhlIHNlbGVjdGlvbi5cblx0XHR0aGlzLmJ1dHRvbi5mb2N1cygpO1xuXHR9LFxuXG5cdF9kb2N1bWVudENsaWNrOiB7XG5cdFx0bW91c2Vkb3duOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRpZiAoICF0aGlzLmlzT3BlbiApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoICEkKCBldmVudC50YXJnZXQgKS5jbG9zZXN0KCBcIi51aS1zZWxlY3RtZW51LW1lbnUsICNcIiArXG5cdFx0XHRcdFx0JC51aS5lc2NhcGVTZWxlY3RvciggdGhpcy5pZHMuYnV0dG9uICkgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHRoaXMuY2xvc2UoIGV2ZW50ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdF9idXR0b25FdmVudHM6IHtcblxuXHRcdC8vIFByZXZlbnQgdGV4dCBzZWxlY3Rpb24gZnJvbSBiZWluZyByZXNldCB3aGVuIGludGVyYWN0aW5nIHdpdGggdGhlIHNlbGVjdG1lbnUgKCMxMDE0NClcblx0XHRtb3VzZWRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGVjdGlvbjtcblxuXHRcdFx0aWYgKCB3aW5kb3cuZ2V0U2VsZWN0aW9uICkge1xuXHRcdFx0XHRzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG5cdFx0XHRcdGlmICggc2VsZWN0aW9uLnJhbmdlQ291bnQgKSB7XG5cdFx0XHRcdFx0dGhpcy5yYW5nZSA9IHNlbGVjdGlvbi5nZXRSYW5nZUF0KCAwICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLnJhbmdlID0gZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGNsaWNrOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR0aGlzLl9zZXRTZWxlY3Rpb24oKTtcblx0XHRcdHRoaXMuX3RvZ2dsZSggZXZlbnQgKTtcblx0XHR9LFxuXG5cdFx0a2V5ZG93bjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHByZXZlbnREZWZhdWx0ID0gdHJ1ZTtcblx0XHRcdHN3aXRjaCAoIGV2ZW50LmtleUNvZGUgKSB7XG5cdFx0XHRjYXNlICQudWkua2V5Q29kZS5UQUI6XG5cdFx0XHRjYXNlICQudWkua2V5Q29kZS5FU0NBUEU6XG5cdFx0XHRcdHRoaXMuY2xvc2UoIGV2ZW50ICk7XG5cdFx0XHRcdHByZXZlbnREZWZhdWx0ID0gZmFsc2U7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAkLnVpLmtleUNvZGUuRU5URVI6XG5cdFx0XHRcdGlmICggdGhpcy5pc09wZW4gKSB7XG5cdFx0XHRcdFx0dGhpcy5fc2VsZWN0Rm9jdXNlZEl0ZW0oIGV2ZW50ICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICQudWkua2V5Q29kZS5VUDpcblx0XHRcdFx0aWYgKCBldmVudC5hbHRLZXkgKSB7XG5cdFx0XHRcdFx0dGhpcy5fdG9nZ2xlKCBldmVudCApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuX21vdmUoIFwicHJldlwiLCBldmVudCApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAkLnVpLmtleUNvZGUuRE9XTjpcblx0XHRcdFx0aWYgKCBldmVudC5hbHRLZXkgKSB7XG5cdFx0XHRcdFx0dGhpcy5fdG9nZ2xlKCBldmVudCApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuX21vdmUoIFwibmV4dFwiLCBldmVudCApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAkLnVpLmtleUNvZGUuU1BBQ0U6XG5cdFx0XHRcdGlmICggdGhpcy5pc09wZW4gKSB7XG5cdFx0XHRcdFx0dGhpcy5fc2VsZWN0Rm9jdXNlZEl0ZW0oIGV2ZW50ICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5fdG9nZ2xlKCBldmVudCApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAkLnVpLmtleUNvZGUuTEVGVDpcblx0XHRcdFx0dGhpcy5fbW92ZSggXCJwcmV2XCIsIGV2ZW50ICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAkLnVpLmtleUNvZGUuUklHSFQ6XG5cdFx0XHRcdHRoaXMuX21vdmUoIFwibmV4dFwiLCBldmVudCApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJC51aS5rZXlDb2RlLkhPTUU6XG5cdFx0XHRjYXNlICQudWkua2V5Q29kZS5QQUdFX1VQOlxuXHRcdFx0XHR0aGlzLl9tb3ZlKCBcImZpcnN0XCIsIGV2ZW50ICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAkLnVpLmtleUNvZGUuRU5EOlxuXHRcdFx0Y2FzZSAkLnVpLmtleUNvZGUuUEFHRV9ET1dOOlxuXHRcdFx0XHR0aGlzLl9tb3ZlKCBcImxhc3RcIiwgZXZlbnQgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHR0aGlzLm1lbnUudHJpZ2dlciggZXZlbnQgKTtcblx0XHRcdFx0cHJldmVudERlZmF1bHQgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBwcmV2ZW50RGVmYXVsdCApIHtcblx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0X3NlbGVjdEZvY3VzZWRJdGVtOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGl0ZW0gPSB0aGlzLm1lbnVJdGVtcy5lcSggdGhpcy5mb2N1c0luZGV4ICkucGFyZW50KCBcImxpXCIgKTtcblx0XHRpZiAoICFpdGVtLmhhc0NsYXNzKCBcInVpLXN0YXRlLWRpc2FibGVkXCIgKSApIHtcblx0XHRcdHRoaXMuX3NlbGVjdCggaXRlbS5kYXRhKCBcInVpLXNlbGVjdG1lbnUtaXRlbVwiICksIGV2ZW50ICk7XG5cdFx0fVxuXHR9LFxuXG5cdF9zZWxlY3Q6IGZ1bmN0aW9uKCBpdGVtLCBldmVudCApIHtcblx0XHR2YXIgb2xkSW5kZXggPSB0aGlzLmVsZW1lbnRbIDAgXS5zZWxlY3RlZEluZGV4O1xuXG5cdFx0Ly8gQ2hhbmdlIG5hdGl2ZSBzZWxlY3QgZWxlbWVudFxuXHRcdHRoaXMuZWxlbWVudFsgMCBdLnNlbGVjdGVkSW5kZXggPSBpdGVtLmluZGV4O1xuXHRcdHRoaXMuYnV0dG9uSXRlbS5yZXBsYWNlV2l0aCggdGhpcy5idXR0b25JdGVtID0gdGhpcy5fcmVuZGVyQnV0dG9uSXRlbSggaXRlbSApICk7XG5cdFx0dGhpcy5fc2V0QXJpYSggaXRlbSApO1xuXHRcdHRoaXMuX3RyaWdnZXIoIFwic2VsZWN0XCIsIGV2ZW50LCB7IGl0ZW06IGl0ZW0gfSApO1xuXG5cdFx0aWYgKCBpdGVtLmluZGV4ICE9PSBvbGRJbmRleCApIHtcblx0XHRcdHRoaXMuX3RyaWdnZXIoIFwiY2hhbmdlXCIsIGV2ZW50LCB7IGl0ZW06IGl0ZW0gfSApO1xuXHRcdH1cblxuXHRcdHRoaXMuY2xvc2UoIGV2ZW50ICk7XG5cdH0sXG5cblx0X3NldEFyaWE6IGZ1bmN0aW9uKCBpdGVtICkge1xuXHRcdHZhciBpZCA9IHRoaXMubWVudUl0ZW1zLmVxKCBpdGVtLmluZGV4ICkuYXR0ciggXCJpZFwiICk7XG5cblx0XHR0aGlzLmJ1dHRvbi5hdHRyKCB7XG5cdFx0XHRcImFyaWEtbGFiZWxsZWRieVwiOiBpZCxcblx0XHRcdFwiYXJpYS1hY3RpdmVkZXNjZW5kYW50XCI6IGlkXG5cdFx0fSApO1xuXHRcdHRoaXMubWVudS5hdHRyKCBcImFyaWEtYWN0aXZlZGVzY2VuZGFudFwiLCBpZCApO1xuXHR9LFxuXG5cdF9zZXRPcHRpb246IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdGlmICgga2V5ID09PSBcImljb25zXCIgKSB7XG5cdFx0XHR2YXIgaWNvbiA9IHRoaXMuYnV0dG9uLmZpbmQoIFwic3Bhbi51aS1pY29uXCIgKTtcblx0XHRcdHRoaXMuX3JlbW92ZUNsYXNzKCBpY29uLCBudWxsLCB0aGlzLm9wdGlvbnMuaWNvbnMuYnV0dG9uIClcblx0XHRcdFx0Ll9hZGRDbGFzcyggaWNvbiwgbnVsbCwgdmFsdWUuYnV0dG9uICk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fc3VwZXIoIGtleSwgdmFsdWUgKTtcblxuXHRcdGlmICgga2V5ID09PSBcImFwcGVuZFRvXCIgKSB7XG5cdFx0XHR0aGlzLm1lbnVXcmFwLmFwcGVuZFRvKCB0aGlzLl9hcHBlbmRUbygpICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgPT09IFwid2lkdGhcIiApIHtcblx0XHRcdHRoaXMuX3Jlc2l6ZUJ1dHRvbigpO1xuXHRcdH1cblx0fSxcblxuXHRfc2V0T3B0aW9uRGlzYWJsZWQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR0aGlzLl9zdXBlciggdmFsdWUgKTtcblxuXHRcdHRoaXMubWVudUluc3RhbmNlLm9wdGlvbiggXCJkaXNhYmxlZFwiLCB2YWx1ZSApO1xuXHRcdHRoaXMuYnV0dG9uLmF0dHIoIFwiYXJpYS1kaXNhYmxlZFwiLCB2YWx1ZSApO1xuXHRcdHRoaXMuX3RvZ2dsZUNsYXNzKCB0aGlzLmJ1dHRvbiwgbnVsbCwgXCJ1aS1zdGF0ZS1kaXNhYmxlZFwiLCB2YWx1ZSApO1xuXG5cdFx0dGhpcy5lbGVtZW50LnByb3AoIFwiZGlzYWJsZWRcIiwgdmFsdWUgKTtcblx0XHRpZiAoIHZhbHVlICkge1xuXHRcdFx0dGhpcy5idXR0b24uYXR0ciggXCJ0YWJpbmRleFwiLCAtMSApO1xuXHRcdFx0dGhpcy5jbG9zZSgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmJ1dHRvbi5hdHRyKCBcInRhYmluZGV4XCIsIDAgKTtcblx0XHR9XG5cdH0sXG5cblx0X2FwcGVuZFRvOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbWVudCA9IHRoaXMub3B0aW9ucy5hcHBlbmRUbztcblxuXHRcdGlmICggZWxlbWVudCApIHtcblx0XHRcdGVsZW1lbnQgPSBlbGVtZW50LmpxdWVyeSB8fCBlbGVtZW50Lm5vZGVUeXBlID9cblx0XHRcdFx0JCggZWxlbWVudCApIDpcblx0XHRcdFx0dGhpcy5kb2N1bWVudC5maW5kKCBlbGVtZW50ICkuZXEoIDAgKTtcblx0XHR9XG5cblx0XHRpZiAoICFlbGVtZW50IHx8ICFlbGVtZW50WyAwIF0gKSB7XG5cdFx0XHRlbGVtZW50ID0gdGhpcy5lbGVtZW50LmNsb3Nlc3QoIFwiLnVpLWZyb250LCBkaWFsb2dcIiApO1xuXHRcdH1cblxuXHRcdGlmICggIWVsZW1lbnQubGVuZ3RoICkge1xuXHRcdFx0ZWxlbWVudCA9IHRoaXMuZG9jdW1lbnRbIDAgXS5ib2R5O1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtZW50O1xuXHR9LFxuXG5cdF90b2dnbGVBdHRyOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmJ1dHRvbi5hdHRyKCBcImFyaWEtZXhwYW5kZWRcIiwgdGhpcy5pc09wZW4gKTtcblxuXHRcdC8vIFdlIGNhbid0IHVzZSB0d28gX3RvZ2dsZUNsYXNzKCkgY2FsbHMgaGVyZSwgYmVjYXVzZSB3ZSBuZWVkIHRvIG1ha2Ugc3VyZVxuXHRcdC8vIHdlIGFsd2F5cyByZW1vdmUgY2xhc3NlcyBmaXJzdCBhbmQgYWRkIHRoZW0gc2Vjb25kLCBvdGhlcndpc2UgaWYgYm90aCBjbGFzc2VzIGhhdmUgdGhlXG5cdFx0Ly8gc2FtZSB0aGVtZSBjbGFzcywgaXQgd2lsbCBiZSByZW1vdmVkIGFmdGVyIHdlIGFkZCBpdC5cblx0XHR0aGlzLl9yZW1vdmVDbGFzcyggdGhpcy5idXR0b24sIFwidWktc2VsZWN0bWVudS1idXR0b24tXCIgK1xuXHRcdFx0KCB0aGlzLmlzT3BlbiA/IFwiY2xvc2VkXCIgOiBcIm9wZW5cIiApIClcblx0XHRcdC5fYWRkQ2xhc3MoIHRoaXMuYnV0dG9uLCBcInVpLXNlbGVjdG1lbnUtYnV0dG9uLVwiICtcblx0XHRcdFx0KCB0aGlzLmlzT3BlbiA/IFwib3BlblwiIDogXCJjbG9zZWRcIiApIClcblx0XHRcdC5fdG9nZ2xlQ2xhc3MoIHRoaXMubWVudVdyYXAsIFwidWktc2VsZWN0bWVudS1vcGVuXCIsIG51bGwsIHRoaXMuaXNPcGVuICk7XG5cblx0XHR0aGlzLm1lbnUuYXR0ciggXCJhcmlhLWhpZGRlblwiLCAhdGhpcy5pc09wZW4gKTtcblx0fSxcblxuXHRfcmVzaXplQnV0dG9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgd2lkdGggPSB0aGlzLm9wdGlvbnMud2lkdGg7XG5cblx0XHQvLyBGb3IgYHdpZHRoOiBmYWxzZWAsIGp1c3QgcmVtb3ZlIGlubGluZSBzdHlsZSBhbmQgc3RvcFxuXHRcdGlmICggd2lkdGggPT09IGZhbHNlICkge1xuXHRcdFx0dGhpcy5idXR0b24uY3NzKCBcIndpZHRoXCIsIFwiXCIgKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGb3IgYHdpZHRoOiBudWxsYCwgbWF0Y2ggdGhlIHdpZHRoIG9mIHRoZSBvcmlnaW5hbCBlbGVtZW50XG5cdFx0aWYgKCB3aWR0aCA9PT0gbnVsbCApIHtcblx0XHRcdHdpZHRoID0gdGhpcy5lbGVtZW50LnNob3coKS5vdXRlcldpZHRoKCk7XG5cdFx0XHR0aGlzLmVsZW1lbnQuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHRoaXMuYnV0dG9uLm91dGVyV2lkdGgoIHdpZHRoICk7XG5cdH0sXG5cblx0X3Jlc2l6ZU1lbnU6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMubWVudS5vdXRlcldpZHRoKCBNYXRoLm1heChcblx0XHRcdHRoaXMuYnV0dG9uLm91dGVyV2lkdGgoKSxcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUxMFxuXHRcdFx0Ly8gSUUxMCB3cmFwcyBsb25nIHRleHQgKHBvc3NpYmx5IGEgcm91bmRpbmcgYnVnKVxuXHRcdFx0Ly8gc28gd2UgYWRkIDFweCB0byBhdm9pZCB0aGUgd3JhcHBpbmdcblx0XHRcdHRoaXMubWVudS53aWR0aCggXCJcIiApLm91dGVyV2lkdGgoKSArIDFcblx0XHQpICk7XG5cdH0sXG5cblx0X2dldENyZWF0ZU9wdGlvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBvcHRpb25zID0gdGhpcy5fc3VwZXIoKTtcblxuXHRcdG9wdGlvbnMuZGlzYWJsZWQgPSB0aGlzLmVsZW1lbnQucHJvcCggXCJkaXNhYmxlZFwiICk7XG5cblx0XHRyZXR1cm4gb3B0aW9ucztcblx0fSxcblxuXHRfcGFyc2VPcHRpb25zOiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRkYXRhID0gW107XG5cdFx0b3B0aW9ucy5lYWNoKCBmdW5jdGlvbiggaW5kZXgsIGl0ZW0gKSB7XG5cdFx0XHRkYXRhLnB1c2goIHRoYXQuX3BhcnNlT3B0aW9uKCAkKCBpdGVtICksIGluZGV4ICkgKTtcblx0XHR9ICk7XG5cdFx0dGhpcy5pdGVtcyA9IGRhdGE7XG5cdH0sXG5cblx0X3BhcnNlT3B0aW9uOiBmdW5jdGlvbiggb3B0aW9uLCBpbmRleCApIHtcblx0XHR2YXIgb3B0Z3JvdXAgPSBvcHRpb24ucGFyZW50KCBcIm9wdGdyb3VwXCIgKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRlbGVtZW50OiBvcHRpb24sXG5cdFx0XHRpbmRleDogaW5kZXgsXG5cdFx0XHR2YWx1ZTogb3B0aW9uLnZhbCgpLFxuXHRcdFx0bGFiZWw6IG9wdGlvbi50ZXh0KCksXG5cdFx0XHRvcHRncm91cDogb3B0Z3JvdXAuYXR0ciggXCJsYWJlbFwiICkgfHwgXCJcIixcblx0XHRcdGRpc2FibGVkOiBvcHRncm91cC5wcm9wKCBcImRpc2FibGVkXCIgKSB8fCBvcHRpb24ucHJvcCggXCJkaXNhYmxlZFwiIClcblx0XHR9O1xuXHR9LFxuXG5cdF9kZXN0cm95OiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLl91bmJpbmRGb3JtUmVzZXRIYW5kbGVyKCk7XG5cdFx0dGhpcy5tZW51V3JhcC5yZW1vdmUoKTtcblx0XHR0aGlzLmJ1dHRvbi5yZW1vdmUoKTtcblx0XHR0aGlzLmVsZW1lbnQuc2hvdygpO1xuXHRcdHRoaXMuZWxlbWVudC5yZW1vdmVVbmlxdWVJZCgpO1xuXHRcdHRoaXMubGFiZWxzLmF0dHIoIFwiZm9yXCIsIHRoaXMuaWRzLmVsZW1lbnQgKTtcblx0fVxufSBdICk7XG5cblxuLyohXG4gKiBqUXVlcnkgVUkgU2xpZGVyIDEuMTIuMVxuICogaHR0cDovL2pxdWVyeXVpLmNvbVxuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKi9cblxuLy8+PmxhYmVsOiBTbGlkZXJcbi8vPj5ncm91cDogV2lkZ2V0c1xuLy8+PmRlc2NyaXB0aW9uOiBEaXNwbGF5cyBhIGZsZXhpYmxlIHNsaWRlciB3aXRoIHJhbmdlcyBhbmQgYWNjZXNzaWJpbGl0eSB2aWEga2V5Ym9hcmQuXG4vLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vc2xpZGVyL1xuLy8+PmRlbW9zOiBodHRwOi8vanF1ZXJ5dWkuY29tL3NsaWRlci9cbi8vPj5jc3Muc3RydWN0dXJlOiAuLi8uLi90aGVtZXMvYmFzZS9jb3JlLmNzc1xuLy8+PmNzcy5zdHJ1Y3R1cmU6IC4uLy4uL3RoZW1lcy9iYXNlL3NsaWRlci5jc3Ncbi8vPj5jc3MudGhlbWU6IC4uLy4uL3RoZW1lcy9iYXNlL3RoZW1lLmNzc1xuXG5cblxudmFyIHdpZGdldHNTbGlkZXIgPSAkLndpZGdldCggXCJ1aS5zbGlkZXJcIiwgJC51aS5tb3VzZSwge1xuXHR2ZXJzaW9uOiBcIjEuMTIuMVwiLFxuXHR3aWRnZXRFdmVudFByZWZpeDogXCJzbGlkZVwiLFxuXG5cdG9wdGlvbnM6IHtcblx0XHRhbmltYXRlOiBmYWxzZSxcblx0XHRjbGFzc2VzOiB7XG5cdFx0XHRcInVpLXNsaWRlclwiOiBcInVpLWNvcm5lci1hbGxcIixcblx0XHRcdFwidWktc2xpZGVyLWhhbmRsZVwiOiBcInVpLWNvcm5lci1hbGxcIixcblxuXHRcdFx0Ly8gTm90ZTogdWktd2lkZ2V0LWhlYWRlciBpc24ndCB0aGUgbW9zdCBmaXR0aW5nbHkgc2VtYW50aWMgZnJhbWV3b3JrIGNsYXNzIGZvciB0aGlzXG5cdFx0XHQvLyBlbGVtZW50LCBidXQgd29ya2VkIGJlc3QgdmlzdWFsbHkgd2l0aCBhIHZhcmlldHkgb2YgdGhlbWVzXG5cdFx0XHRcInVpLXNsaWRlci1yYW5nZVwiOiBcInVpLWNvcm5lci1hbGwgdWktd2lkZ2V0LWhlYWRlclwiXG5cdFx0fSxcblx0XHRkaXN0YW5jZTogMCxcblx0XHRtYXg6IDEwMCxcblx0XHRtaW46IDAsXG5cdFx0b3JpZW50YXRpb246IFwiaG9yaXpvbnRhbFwiLFxuXHRcdHJhbmdlOiBmYWxzZSxcblx0XHRzdGVwOiAxLFxuXHRcdHZhbHVlOiAwLFxuXHRcdHZhbHVlczogbnVsbCxcblxuXHRcdC8vIENhbGxiYWNrc1xuXHRcdGNoYW5nZTogbnVsbCxcblx0XHRzbGlkZTogbnVsbCxcblx0XHRzdGFydDogbnVsbCxcblx0XHRzdG9wOiBudWxsXG5cdH0sXG5cblx0Ly8gTnVtYmVyIG9mIHBhZ2VzIGluIGEgc2xpZGVyXG5cdC8vIChob3cgbWFueSB0aW1lcyBjYW4geW91IHBhZ2UgdXAvZG93biB0byBnbyB0aHJvdWdoIHRoZSB3aG9sZSByYW5nZSlcblx0bnVtUGFnZXM6IDUsXG5cblx0X2NyZWF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5fa2V5U2xpZGluZyA9IGZhbHNlO1xuXHRcdHRoaXMuX21vdXNlU2xpZGluZyA9IGZhbHNlO1xuXHRcdHRoaXMuX2FuaW1hdGVPZmYgPSB0cnVlO1xuXHRcdHRoaXMuX2hhbmRsZUluZGV4ID0gbnVsbDtcblx0XHR0aGlzLl9kZXRlY3RPcmllbnRhdGlvbigpO1xuXHRcdHRoaXMuX21vdXNlSW5pdCgpO1xuXHRcdHRoaXMuX2NhbGN1bGF0ZU5ld01heCgpO1xuXG5cdFx0dGhpcy5fYWRkQ2xhc3MoIFwidWktc2xpZGVyIHVpLXNsaWRlci1cIiArIHRoaXMub3JpZW50YXRpb24sXG5cdFx0XHRcInVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudFwiICk7XG5cblx0XHR0aGlzLl9yZWZyZXNoKCk7XG5cblx0XHR0aGlzLl9hbmltYXRlT2ZmID0gZmFsc2U7XG5cdH0sXG5cblx0X3JlZnJlc2g6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuX2NyZWF0ZVJhbmdlKCk7XG5cdFx0dGhpcy5fY3JlYXRlSGFuZGxlcygpO1xuXHRcdHRoaXMuX3NldHVwRXZlbnRzKCk7XG5cdFx0dGhpcy5fcmVmcmVzaFZhbHVlKCk7XG5cdH0sXG5cblx0X2NyZWF0ZUhhbmRsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpLCBoYW5kbGVDb3VudCxcblx0XHRcdG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG5cdFx0XHRleGlzdGluZ0hhbmRsZXMgPSB0aGlzLmVsZW1lbnQuZmluZCggXCIudWktc2xpZGVyLWhhbmRsZVwiICksXG5cdFx0XHRoYW5kbGUgPSBcIjxzcGFuIHRhYmluZGV4PScwJz48L3NwYW4+XCIsXG5cdFx0XHRoYW5kbGVzID0gW107XG5cblx0XHRoYW5kbGVDb3VudCA9ICggb3B0aW9ucy52YWx1ZXMgJiYgb3B0aW9ucy52YWx1ZXMubGVuZ3RoICkgfHwgMTtcblxuXHRcdGlmICggZXhpc3RpbmdIYW5kbGVzLmxlbmd0aCA+IGhhbmRsZUNvdW50ICkge1xuXHRcdFx0ZXhpc3RpbmdIYW5kbGVzLnNsaWNlKCBoYW5kbGVDb3VudCApLnJlbW92ZSgpO1xuXHRcdFx0ZXhpc3RpbmdIYW5kbGVzID0gZXhpc3RpbmdIYW5kbGVzLnNsaWNlKCAwLCBoYW5kbGVDb3VudCApO1xuXHRcdH1cblxuXHRcdGZvciAoIGkgPSBleGlzdGluZ0hhbmRsZXMubGVuZ3RoOyBpIDwgaGFuZGxlQ291bnQ7IGkrKyApIHtcblx0XHRcdGhhbmRsZXMucHVzaCggaGFuZGxlICk7XG5cdFx0fVxuXG5cdFx0dGhpcy5oYW5kbGVzID0gZXhpc3RpbmdIYW5kbGVzLmFkZCggJCggaGFuZGxlcy5qb2luKCBcIlwiICkgKS5hcHBlbmRUbyggdGhpcy5lbGVtZW50ICkgKTtcblxuXHRcdHRoaXMuX2FkZENsYXNzKCB0aGlzLmhhbmRsZXMsIFwidWktc2xpZGVyLWhhbmRsZVwiLCBcInVpLXN0YXRlLWRlZmF1bHRcIiApO1xuXG5cdFx0dGhpcy5oYW5kbGUgPSB0aGlzLmhhbmRsZXMuZXEoIDAgKTtcblxuXHRcdHRoaXMuaGFuZGxlcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdCQoIHRoaXMgKVxuXHRcdFx0XHQuZGF0YSggXCJ1aS1zbGlkZXItaGFuZGxlLWluZGV4XCIsIGkgKVxuXHRcdFx0XHQuYXR0ciggXCJ0YWJJbmRleFwiLCAwICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdF9jcmVhdGVSYW5nZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cblx0XHRpZiAoIG9wdGlvbnMucmFuZ2UgKSB7XG5cdFx0XHRpZiAoIG9wdGlvbnMucmFuZ2UgPT09IHRydWUgKSB7XG5cdFx0XHRcdGlmICggIW9wdGlvbnMudmFsdWVzICkge1xuXHRcdFx0XHRcdG9wdGlvbnMudmFsdWVzID0gWyB0aGlzLl92YWx1ZU1pbigpLCB0aGlzLl92YWx1ZU1pbigpIF07XG5cdFx0XHRcdH0gZWxzZSBpZiAoIG9wdGlvbnMudmFsdWVzLmxlbmd0aCAmJiBvcHRpb25zLnZhbHVlcy5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdFx0b3B0aW9ucy52YWx1ZXMgPSBbIG9wdGlvbnMudmFsdWVzWyAwIF0sIG9wdGlvbnMudmFsdWVzWyAwIF0gXTtcblx0XHRcdFx0fSBlbHNlIGlmICggJC5pc0FycmF5KCBvcHRpb25zLnZhbHVlcyApICkge1xuXHRcdFx0XHRcdG9wdGlvbnMudmFsdWVzID0gb3B0aW9ucy52YWx1ZXMuc2xpY2UoIDAgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoICF0aGlzLnJhbmdlIHx8ICF0aGlzLnJhbmdlLmxlbmd0aCApIHtcblx0XHRcdFx0dGhpcy5yYW5nZSA9ICQoIFwiPGRpdj5cIiApXG5cdFx0XHRcdFx0LmFwcGVuZFRvKCB0aGlzLmVsZW1lbnQgKTtcblxuXHRcdFx0XHR0aGlzLl9hZGRDbGFzcyggdGhpcy5yYW5nZSwgXCJ1aS1zbGlkZXItcmFuZ2VcIiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5fcmVtb3ZlQ2xhc3MoIHRoaXMucmFuZ2UsIFwidWktc2xpZGVyLXJhbmdlLW1pbiB1aS1zbGlkZXItcmFuZ2UtbWF4XCIgKTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgcmFuZ2Ugc3dpdGNoaW5nIGZyb20gdHJ1ZSB0byBtaW4vbWF4XG5cdFx0XHRcdHRoaXMucmFuZ2UuY3NzKCB7XG5cdFx0XHRcdFx0XCJsZWZ0XCI6IFwiXCIsXG5cdFx0XHRcdFx0XCJib3R0b21cIjogXCJcIlxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIG9wdGlvbnMucmFuZ2UgPT09IFwibWluXCIgfHwgb3B0aW9ucy5yYW5nZSA9PT0gXCJtYXhcIiApIHtcblx0XHRcdFx0dGhpcy5fYWRkQ2xhc3MoIHRoaXMucmFuZ2UsIFwidWktc2xpZGVyLXJhbmdlLVwiICsgb3B0aW9ucy5yYW5nZSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIHRoaXMucmFuZ2UgKSB7XG5cdFx0XHRcdHRoaXMucmFuZ2UucmVtb3ZlKCk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnJhbmdlID0gbnVsbDtcblx0XHR9XG5cdH0sXG5cblx0X3NldHVwRXZlbnRzOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLl9vZmYoIHRoaXMuaGFuZGxlcyApO1xuXHRcdHRoaXMuX29uKCB0aGlzLmhhbmRsZXMsIHRoaXMuX2hhbmRsZUV2ZW50cyApO1xuXHRcdHRoaXMuX2hvdmVyYWJsZSggdGhpcy5oYW5kbGVzICk7XG5cdFx0dGhpcy5fZm9jdXNhYmxlKCB0aGlzLmhhbmRsZXMgKTtcblx0fSxcblxuXHRfZGVzdHJveTogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5oYW5kbGVzLnJlbW92ZSgpO1xuXHRcdGlmICggdGhpcy5yYW5nZSApIHtcblx0XHRcdHRoaXMucmFuZ2UucmVtb3ZlKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fbW91c2VEZXN0cm95KCk7XG5cdH0sXG5cblx0X21vdXNlQ2FwdHVyZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBwb3NpdGlvbiwgbm9ybVZhbHVlLCBkaXN0YW5jZSwgY2xvc2VzdEhhbmRsZSwgaW5kZXgsIGFsbG93ZWQsIG9mZnNldCwgbW91c2VPdmVySGFuZGxlLFxuXHRcdFx0dGhhdCA9IHRoaXMsXG5cdFx0XHRvID0gdGhpcy5vcHRpb25zO1xuXG5cdFx0aWYgKCBvLmRpc2FibGVkICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHRoaXMuZWxlbWVudFNpemUgPSB7XG5cdFx0XHR3aWR0aDogdGhpcy5lbGVtZW50Lm91dGVyV2lkdGgoKSxcblx0XHRcdGhlaWdodDogdGhpcy5lbGVtZW50Lm91dGVySGVpZ2h0KClcblx0XHR9O1xuXHRcdHRoaXMuZWxlbWVudE9mZnNldCA9IHRoaXMuZWxlbWVudC5vZmZzZXQoKTtcblxuXHRcdHBvc2l0aW9uID0geyB4OiBldmVudC5wYWdlWCwgeTogZXZlbnQucGFnZVkgfTtcblx0XHRub3JtVmFsdWUgPSB0aGlzLl9ub3JtVmFsdWVGcm9tTW91c2UoIHBvc2l0aW9uICk7XG5cdFx0ZGlzdGFuY2UgPSB0aGlzLl92YWx1ZU1heCgpIC0gdGhpcy5fdmFsdWVNaW4oKSArIDE7XG5cdFx0dGhpcy5oYW5kbGVzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHRoaXNEaXN0YW5jZSA9IE1hdGguYWJzKCBub3JtVmFsdWUgLSB0aGF0LnZhbHVlcyggaSApICk7XG5cdFx0XHRpZiAoICggZGlzdGFuY2UgPiB0aGlzRGlzdGFuY2UgKSB8fFxuXHRcdFx0XHQoIGRpc3RhbmNlID09PSB0aGlzRGlzdGFuY2UgJiZcblx0XHRcdFx0XHQoIGkgPT09IHRoYXQuX2xhc3RDaGFuZ2VkVmFsdWUgfHwgdGhhdC52YWx1ZXMoIGkgKSA9PT0gby5taW4gKSApICkge1xuXHRcdFx0XHRkaXN0YW5jZSA9IHRoaXNEaXN0YW5jZTtcblx0XHRcdFx0Y2xvc2VzdEhhbmRsZSA9ICQoIHRoaXMgKTtcblx0XHRcdFx0aW5kZXggPSBpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHRcdGFsbG93ZWQgPSB0aGlzLl9zdGFydCggZXZlbnQsIGluZGV4ICk7XG5cdFx0aWYgKCBhbGxvd2VkID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0dGhpcy5fbW91c2VTbGlkaW5nID0gdHJ1ZTtcblxuXHRcdHRoaXMuX2hhbmRsZUluZGV4ID0gaW5kZXg7XG5cblx0XHR0aGlzLl9hZGRDbGFzcyggY2xvc2VzdEhhbmRsZSwgbnVsbCwgXCJ1aS1zdGF0ZS1hY3RpdmVcIiApO1xuXHRcdGNsb3Nlc3RIYW5kbGUudHJpZ2dlciggXCJmb2N1c1wiICk7XG5cblx0XHRvZmZzZXQgPSBjbG9zZXN0SGFuZGxlLm9mZnNldCgpO1xuXHRcdG1vdXNlT3ZlckhhbmRsZSA9ICEkKCBldmVudC50YXJnZXQgKS5wYXJlbnRzKCkuYWRkQmFjaygpLmlzKCBcIi51aS1zbGlkZXItaGFuZGxlXCIgKTtcblx0XHR0aGlzLl9jbGlja09mZnNldCA9IG1vdXNlT3ZlckhhbmRsZSA/IHsgbGVmdDogMCwgdG9wOiAwIH0gOiB7XG5cdFx0XHRsZWZ0OiBldmVudC5wYWdlWCAtIG9mZnNldC5sZWZ0IC0gKCBjbG9zZXN0SGFuZGxlLndpZHRoKCkgLyAyICksXG5cdFx0XHR0b3A6IGV2ZW50LnBhZ2VZIC0gb2Zmc2V0LnRvcCAtXG5cdFx0XHRcdCggY2xvc2VzdEhhbmRsZS5oZWlnaHQoKSAvIDIgKSAtXG5cdFx0XHRcdCggcGFyc2VJbnQoIGNsb3Nlc3RIYW5kbGUuY3NzKCBcImJvcmRlclRvcFdpZHRoXCIgKSwgMTAgKSB8fCAwICkgLVxuXHRcdFx0XHQoIHBhcnNlSW50KCBjbG9zZXN0SGFuZGxlLmNzcyggXCJib3JkZXJCb3R0b21XaWR0aFwiICksIDEwICkgfHwgMCApICtcblx0XHRcdFx0KCBwYXJzZUludCggY2xvc2VzdEhhbmRsZS5jc3MoIFwibWFyZ2luVG9wXCIgKSwgMTAgKSB8fCAwIClcblx0XHR9O1xuXG5cdFx0aWYgKCAhdGhpcy5oYW5kbGVzLmhhc0NsYXNzKCBcInVpLXN0YXRlLWhvdmVyXCIgKSApIHtcblx0XHRcdHRoaXMuX3NsaWRlKCBldmVudCwgaW5kZXgsIG5vcm1WYWx1ZSApO1xuXHRcdH1cblx0XHR0aGlzLl9hbmltYXRlT2ZmID0gdHJ1ZTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHRfbW91c2VTdGFydDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0X21vdXNlRHJhZzogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBwb3NpdGlvbiA9IHsgeDogZXZlbnQucGFnZVgsIHk6IGV2ZW50LnBhZ2VZIH0sXG5cdFx0XHRub3JtVmFsdWUgPSB0aGlzLl9ub3JtVmFsdWVGcm9tTW91c2UoIHBvc2l0aW9uICk7XG5cblx0XHR0aGlzLl9zbGlkZSggZXZlbnQsIHRoaXMuX2hhbmRsZUluZGV4LCBub3JtVmFsdWUgKTtcblxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblxuXHRfbW91c2VTdG9wOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dGhpcy5fcmVtb3ZlQ2xhc3MoIHRoaXMuaGFuZGxlcywgbnVsbCwgXCJ1aS1zdGF0ZS1hY3RpdmVcIiApO1xuXHRcdHRoaXMuX21vdXNlU2xpZGluZyA9IGZhbHNlO1xuXG5cdFx0dGhpcy5fc3RvcCggZXZlbnQsIHRoaXMuX2hhbmRsZUluZGV4ICk7XG5cdFx0dGhpcy5fY2hhbmdlKCBldmVudCwgdGhpcy5faGFuZGxlSW5kZXggKTtcblxuXHRcdHRoaXMuX2hhbmRsZUluZGV4ID0gbnVsbDtcblx0XHR0aGlzLl9jbGlja09mZnNldCA9IG51bGw7XG5cdFx0dGhpcy5fYW5pbWF0ZU9mZiA9IGZhbHNlO1xuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9LFxuXG5cdF9kZXRlY3RPcmllbnRhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5vcmllbnRhdGlvbiA9ICggdGhpcy5vcHRpb25zLm9yaWVudGF0aW9uID09PSBcInZlcnRpY2FsXCIgKSA/IFwidmVydGljYWxcIiA6IFwiaG9yaXpvbnRhbFwiO1xuXHR9LFxuXG5cdF9ub3JtVmFsdWVGcm9tTW91c2U6IGZ1bmN0aW9uKCBwb3NpdGlvbiApIHtcblx0XHR2YXIgcGl4ZWxUb3RhbCxcblx0XHRcdHBpeGVsTW91c2UsXG5cdFx0XHRwZXJjZW50TW91c2UsXG5cdFx0XHR2YWx1ZVRvdGFsLFxuXHRcdFx0dmFsdWVNb3VzZTtcblxuXHRcdGlmICggdGhpcy5vcmllbnRhdGlvbiA9PT0gXCJob3Jpem9udGFsXCIgKSB7XG5cdFx0XHRwaXhlbFRvdGFsID0gdGhpcy5lbGVtZW50U2l6ZS53aWR0aDtcblx0XHRcdHBpeGVsTW91c2UgPSBwb3NpdGlvbi54IC0gdGhpcy5lbGVtZW50T2Zmc2V0LmxlZnQgLVxuXHRcdFx0XHQoIHRoaXMuX2NsaWNrT2Zmc2V0ID8gdGhpcy5fY2xpY2tPZmZzZXQubGVmdCA6IDAgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cGl4ZWxUb3RhbCA9IHRoaXMuZWxlbWVudFNpemUuaGVpZ2h0O1xuXHRcdFx0cGl4ZWxNb3VzZSA9IHBvc2l0aW9uLnkgLSB0aGlzLmVsZW1lbnRPZmZzZXQudG9wIC1cblx0XHRcdFx0KCB0aGlzLl9jbGlja09mZnNldCA/IHRoaXMuX2NsaWNrT2Zmc2V0LnRvcCA6IDAgKTtcblx0XHR9XG5cblx0XHRwZXJjZW50TW91c2UgPSAoIHBpeGVsTW91c2UgLyBwaXhlbFRvdGFsICk7XG5cdFx0aWYgKCBwZXJjZW50TW91c2UgPiAxICkge1xuXHRcdFx0cGVyY2VudE1vdXNlID0gMTtcblx0XHR9XG5cdFx0aWYgKCBwZXJjZW50TW91c2UgPCAwICkge1xuXHRcdFx0cGVyY2VudE1vdXNlID0gMDtcblx0XHR9XG5cdFx0aWYgKCB0aGlzLm9yaWVudGF0aW9uID09PSBcInZlcnRpY2FsXCIgKSB7XG5cdFx0XHRwZXJjZW50TW91c2UgPSAxIC0gcGVyY2VudE1vdXNlO1xuXHRcdH1cblxuXHRcdHZhbHVlVG90YWwgPSB0aGlzLl92YWx1ZU1heCgpIC0gdGhpcy5fdmFsdWVNaW4oKTtcblx0XHR2YWx1ZU1vdXNlID0gdGhpcy5fdmFsdWVNaW4oKSArIHBlcmNlbnRNb3VzZSAqIHZhbHVlVG90YWw7XG5cblx0XHRyZXR1cm4gdGhpcy5fdHJpbUFsaWduVmFsdWUoIHZhbHVlTW91c2UgKTtcblx0fSxcblxuXHRfdWlIYXNoOiBmdW5jdGlvbiggaW5kZXgsIHZhbHVlLCB2YWx1ZXMgKSB7XG5cdFx0dmFyIHVpSGFzaCA9IHtcblx0XHRcdGhhbmRsZTogdGhpcy5oYW5kbGVzWyBpbmRleCBdLFxuXHRcdFx0aGFuZGxlSW5kZXg6IGluZGV4LFxuXHRcdFx0dmFsdWU6IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHRoaXMudmFsdWUoKVxuXHRcdH07XG5cblx0XHRpZiAoIHRoaXMuX2hhc011bHRpcGxlVmFsdWVzKCkgKSB7XG5cdFx0XHR1aUhhc2gudmFsdWUgPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB0aGlzLnZhbHVlcyggaW5kZXggKTtcblx0XHRcdHVpSGFzaC52YWx1ZXMgPSB2YWx1ZXMgfHwgdGhpcy52YWx1ZXMoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdWlIYXNoO1xuXHR9LFxuXG5cdF9oYXNNdWx0aXBsZVZhbHVlczogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMub3B0aW9ucy52YWx1ZXMgJiYgdGhpcy5vcHRpb25zLnZhbHVlcy5sZW5ndGg7XG5cdH0sXG5cblx0X3N0YXJ0OiBmdW5jdGlvbiggZXZlbnQsIGluZGV4ICkge1xuXHRcdHJldHVybiB0aGlzLl90cmlnZ2VyKCBcInN0YXJ0XCIsIGV2ZW50LCB0aGlzLl91aUhhc2goIGluZGV4ICkgKTtcblx0fSxcblxuXHRfc2xpZGU6IGZ1bmN0aW9uKCBldmVudCwgaW5kZXgsIG5ld1ZhbCApIHtcblx0XHR2YXIgYWxsb3dlZCwgb3RoZXJWYWwsXG5cdFx0XHRjdXJyZW50VmFsdWUgPSB0aGlzLnZhbHVlKCksXG5cdFx0XHRuZXdWYWx1ZXMgPSB0aGlzLnZhbHVlcygpO1xuXG5cdFx0aWYgKCB0aGlzLl9oYXNNdWx0aXBsZVZhbHVlcygpICkge1xuXHRcdFx0b3RoZXJWYWwgPSB0aGlzLnZhbHVlcyggaW5kZXggPyAwIDogMSApO1xuXHRcdFx0Y3VycmVudFZhbHVlID0gdGhpcy52YWx1ZXMoIGluZGV4ICk7XG5cblx0XHRcdGlmICggdGhpcy5vcHRpb25zLnZhbHVlcy5sZW5ndGggPT09IDIgJiYgdGhpcy5vcHRpb25zLnJhbmdlID09PSB0cnVlICkge1xuXHRcdFx0XHRuZXdWYWwgPSAgaW5kZXggPT09IDAgPyBNYXRoLm1pbiggb3RoZXJWYWwsIG5ld1ZhbCApIDogTWF0aC5tYXgoIG90aGVyVmFsLCBuZXdWYWwgKTtcblx0XHRcdH1cblxuXHRcdFx0bmV3VmFsdWVzWyBpbmRleCBdID0gbmV3VmFsO1xuXHRcdH1cblxuXHRcdGlmICggbmV3VmFsID09PSBjdXJyZW50VmFsdWUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0YWxsb3dlZCA9IHRoaXMuX3RyaWdnZXIoIFwic2xpZGVcIiwgZXZlbnQsIHRoaXMuX3VpSGFzaCggaW5kZXgsIG5ld1ZhbCwgbmV3VmFsdWVzICkgKTtcblxuXHRcdC8vIEEgc2xpZGUgY2FuIGJlIGNhbmNlbGVkIGJ5IHJldHVybmluZyBmYWxzZSBmcm9tIHRoZSBzbGlkZSBjYWxsYmFja1xuXHRcdGlmICggYWxsb3dlZCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLl9oYXNNdWx0aXBsZVZhbHVlcygpICkge1xuXHRcdFx0dGhpcy52YWx1ZXMoIGluZGV4LCBuZXdWYWwgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy52YWx1ZSggbmV3VmFsICk7XG5cdFx0fVxuXHR9LFxuXG5cdF9zdG9wOiBmdW5jdGlvbiggZXZlbnQsIGluZGV4ICkge1xuXHRcdHRoaXMuX3RyaWdnZXIoIFwic3RvcFwiLCBldmVudCwgdGhpcy5fdWlIYXNoKCBpbmRleCApICk7XG5cdH0sXG5cblx0X2NoYW5nZTogZnVuY3Rpb24oIGV2ZW50LCBpbmRleCApIHtcblx0XHRpZiAoICF0aGlzLl9rZXlTbGlkaW5nICYmICF0aGlzLl9tb3VzZVNsaWRpbmcgKSB7XG5cblx0XHRcdC8vc3RvcmUgdGhlIGxhc3QgY2hhbmdlZCB2YWx1ZSBpbmRleCBmb3IgcmVmZXJlbmNlIHdoZW4gaGFuZGxlcyBvdmVybGFwXG5cdFx0XHR0aGlzLl9sYXN0Q2hhbmdlZFZhbHVlID0gaW5kZXg7XG5cdFx0XHR0aGlzLl90cmlnZ2VyKCBcImNoYW5nZVwiLCBldmVudCwgdGhpcy5fdWlIYXNoKCBpbmRleCApICk7XG5cdFx0fVxuXHR9LFxuXG5cdHZhbHVlOiBmdW5jdGlvbiggbmV3VmFsdWUgKSB7XG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnZhbHVlID0gdGhpcy5fdHJpbUFsaWduVmFsdWUoIG5ld1ZhbHVlICk7XG5cdFx0XHR0aGlzLl9yZWZyZXNoVmFsdWUoKTtcblx0XHRcdHRoaXMuX2NoYW5nZSggbnVsbCwgMCApO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLl92YWx1ZSgpO1xuXHR9LFxuXG5cdHZhbHVlczogZnVuY3Rpb24oIGluZGV4LCBuZXdWYWx1ZSApIHtcblx0XHR2YXIgdmFscyxcblx0XHRcdG5ld1ZhbHVlcyxcblx0XHRcdGk7XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPiAxICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnZhbHVlc1sgaW5kZXggXSA9IHRoaXMuX3RyaW1BbGlnblZhbHVlKCBuZXdWYWx1ZSApO1xuXHRcdFx0dGhpcy5fcmVmcmVzaFZhbHVlKCk7XG5cdFx0XHR0aGlzLl9jaGFuZ2UoIG51bGwsIGluZGV4ICk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCAkLmlzQXJyYXkoIGFyZ3VtZW50c1sgMCBdICkgKSB7XG5cdFx0XHRcdHZhbHMgPSB0aGlzLm9wdGlvbnMudmFsdWVzO1xuXHRcdFx0XHRuZXdWYWx1ZXMgPSBhcmd1bWVudHNbIDAgXTtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCB2YWxzLmxlbmd0aDsgaSArPSAxICkge1xuXHRcdFx0XHRcdHZhbHNbIGkgXSA9IHRoaXMuX3RyaW1BbGlnblZhbHVlKCBuZXdWYWx1ZXNbIGkgXSApO1xuXHRcdFx0XHRcdHRoaXMuX2NoYW5nZSggbnVsbCwgaSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuX3JlZnJlc2hWYWx1ZSgpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKCB0aGlzLl9oYXNNdWx0aXBsZVZhbHVlcygpICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLl92YWx1ZXMoIGluZGV4ICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMudmFsdWUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fdmFsdWVzKCk7XG5cdFx0fVxuXHR9LFxuXG5cdF9zZXRPcHRpb246IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLFxuXHRcdFx0dmFsc0xlbmd0aCA9IDA7XG5cblx0XHRpZiAoIGtleSA9PT0gXCJyYW5nZVwiICYmIHRoaXMub3B0aW9ucy5yYW5nZSA9PT0gdHJ1ZSApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IFwibWluXCIgKSB7XG5cdFx0XHRcdHRoaXMub3B0aW9ucy52YWx1ZSA9IHRoaXMuX3ZhbHVlcyggMCApO1xuXHRcdFx0XHR0aGlzLm9wdGlvbnMudmFsdWVzID0gbnVsbDtcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSBcIm1heFwiICkge1xuXHRcdFx0XHR0aGlzLm9wdGlvbnMudmFsdWUgPSB0aGlzLl92YWx1ZXMoIHRoaXMub3B0aW9ucy52YWx1ZXMubGVuZ3RoIC0gMSApO1xuXHRcdFx0XHR0aGlzLm9wdGlvbnMudmFsdWVzID0gbnVsbDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICQuaXNBcnJheSggdGhpcy5vcHRpb25zLnZhbHVlcyApICkge1xuXHRcdFx0dmFsc0xlbmd0aCA9IHRoaXMub3B0aW9ucy52YWx1ZXMubGVuZ3RoO1xuXHRcdH1cblxuXHRcdHRoaXMuX3N1cGVyKCBrZXksIHZhbHVlICk7XG5cblx0XHRzd2l0Y2ggKCBrZXkgKSB7XG5cdFx0XHRjYXNlIFwib3JpZW50YXRpb25cIjpcblx0XHRcdFx0dGhpcy5fZGV0ZWN0T3JpZW50YXRpb24oKTtcblx0XHRcdFx0dGhpcy5fcmVtb3ZlQ2xhc3MoIFwidWktc2xpZGVyLWhvcml6b250YWwgdWktc2xpZGVyLXZlcnRpY2FsXCIgKVxuXHRcdFx0XHRcdC5fYWRkQ2xhc3MoIFwidWktc2xpZGVyLVwiICsgdGhpcy5vcmllbnRhdGlvbiApO1xuXHRcdFx0XHR0aGlzLl9yZWZyZXNoVmFsdWUoKTtcblx0XHRcdFx0aWYgKCB0aGlzLm9wdGlvbnMucmFuZ2UgKSB7XG5cdFx0XHRcdFx0dGhpcy5fcmVmcmVzaFJhbmdlKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzZXQgcG9zaXRpb25pbmcgZnJvbSBwcmV2aW91cyBvcmllbnRhdGlvblxuXHRcdFx0XHR0aGlzLmhhbmRsZXMuY3NzKCB2YWx1ZSA9PT0gXCJob3Jpem9udGFsXCIgPyBcImJvdHRvbVwiIDogXCJsZWZ0XCIsIFwiXCIgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwidmFsdWVcIjpcblx0XHRcdFx0dGhpcy5fYW5pbWF0ZU9mZiA9IHRydWU7XG5cdFx0XHRcdHRoaXMuX3JlZnJlc2hWYWx1ZSgpO1xuXHRcdFx0XHR0aGlzLl9jaGFuZ2UoIG51bGwsIDAgKTtcblx0XHRcdFx0dGhpcy5fYW5pbWF0ZU9mZiA9IGZhbHNlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJ2YWx1ZXNcIjpcblx0XHRcdFx0dGhpcy5fYW5pbWF0ZU9mZiA9IHRydWU7XG5cdFx0XHRcdHRoaXMuX3JlZnJlc2hWYWx1ZSgpO1xuXG5cdFx0XHRcdC8vIFN0YXJ0IGZyb20gdGhlIGxhc3QgaGFuZGxlIHRvIHByZXZlbnQgdW5yZWFjaGFibGUgaGFuZGxlcyAoIzkwNDYpXG5cdFx0XHRcdGZvciAoIGkgPSB2YWxzTGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0gKSB7XG5cdFx0XHRcdFx0dGhpcy5fY2hhbmdlKCBudWxsLCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5fYW5pbWF0ZU9mZiA9IGZhbHNlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJzdGVwXCI6XG5cdFx0XHRjYXNlIFwibWluXCI6XG5cdFx0XHRjYXNlIFwibWF4XCI6XG5cdFx0XHRcdHRoaXMuX2FuaW1hdGVPZmYgPSB0cnVlO1xuXHRcdFx0XHR0aGlzLl9jYWxjdWxhdGVOZXdNYXgoKTtcblx0XHRcdFx0dGhpcy5fcmVmcmVzaFZhbHVlKCk7XG5cdFx0XHRcdHRoaXMuX2FuaW1hdGVPZmYgPSBmYWxzZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwicmFuZ2VcIjpcblx0XHRcdFx0dGhpcy5fYW5pbWF0ZU9mZiA9IHRydWU7XG5cdFx0XHRcdHRoaXMuX3JlZnJlc2goKTtcblx0XHRcdFx0dGhpcy5fYW5pbWF0ZU9mZiA9IGZhbHNlO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH0sXG5cblx0X3NldE9wdGlvbkRpc2FibGVkOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dGhpcy5fc3VwZXIoIHZhbHVlICk7XG5cblx0XHR0aGlzLl90b2dnbGVDbGFzcyggbnVsbCwgXCJ1aS1zdGF0ZS1kaXNhYmxlZFwiLCAhIXZhbHVlICk7XG5cdH0sXG5cblx0Ly9pbnRlcm5hbCB2YWx1ZSBnZXR0ZXJcblx0Ly8gX3ZhbHVlKCkgcmV0dXJucyB2YWx1ZSB0cmltbWVkIGJ5IG1pbiBhbmQgbWF4LCBhbGlnbmVkIGJ5IHN0ZXBcblx0X3ZhbHVlOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdmFsID0gdGhpcy5vcHRpb25zLnZhbHVlO1xuXHRcdHZhbCA9IHRoaXMuX3RyaW1BbGlnblZhbHVlKCB2YWwgKTtcblxuXHRcdHJldHVybiB2YWw7XG5cdH0sXG5cblx0Ly9pbnRlcm5hbCB2YWx1ZXMgZ2V0dGVyXG5cdC8vIF92YWx1ZXMoKSByZXR1cm5zIGFycmF5IG9mIHZhbHVlcyB0cmltbWVkIGJ5IG1pbiBhbmQgbWF4LCBhbGlnbmVkIGJ5IHN0ZXBcblx0Ly8gX3ZhbHVlcyggaW5kZXggKSByZXR1cm5zIHNpbmdsZSB2YWx1ZSB0cmltbWVkIGJ5IG1pbiBhbmQgbWF4LCBhbGlnbmVkIGJ5IHN0ZXBcblx0X3ZhbHVlczogZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdHZhciB2YWwsXG5cdFx0XHR2YWxzLFxuXHRcdFx0aTtcblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHZhbCA9IHRoaXMub3B0aW9ucy52YWx1ZXNbIGluZGV4IF07XG5cdFx0XHR2YWwgPSB0aGlzLl90cmltQWxpZ25WYWx1ZSggdmFsICk7XG5cblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fSBlbHNlIGlmICggdGhpcy5faGFzTXVsdGlwbGVWYWx1ZXMoKSApIHtcblxuXHRcdFx0Ly8gLnNsaWNlKCkgY3JlYXRlcyBhIGNvcHkgb2YgdGhlIGFycmF5XG5cdFx0XHQvLyB0aGlzIGNvcHkgZ2V0cyB0cmltbWVkIGJ5IG1pbiBhbmQgbWF4IGFuZCB0aGVuIHJldHVybmVkXG5cdFx0XHR2YWxzID0gdGhpcy5vcHRpb25zLnZhbHVlcy5zbGljZSgpO1xuXHRcdFx0Zm9yICggaSA9IDA7IGkgPCB2YWxzLmxlbmd0aDsgaSArPSAxICkge1xuXHRcdFx0XHR2YWxzWyBpIF0gPSB0aGlzLl90cmltQWxpZ25WYWx1ZSggdmFsc1sgaSBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWxzO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gW107XG5cdFx0fVxuXHR9LFxuXG5cdC8vIFJldHVybnMgdGhlIHN0ZXAtYWxpZ25lZCB2YWx1ZSB0aGF0IHZhbCBpcyBjbG9zZXN0IHRvLCBiZXR3ZWVuIChpbmNsdXNpdmUpIG1pbiBhbmQgbWF4XG5cdF90cmltQWxpZ25WYWx1ZTogZnVuY3Rpb24oIHZhbCApIHtcblx0XHRpZiAoIHZhbCA8PSB0aGlzLl92YWx1ZU1pbigpICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuX3ZhbHVlTWluKCk7XG5cdFx0fVxuXHRcdGlmICggdmFsID49IHRoaXMuX3ZhbHVlTWF4KCkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fdmFsdWVNYXgoKTtcblx0XHR9XG5cdFx0dmFyIHN0ZXAgPSAoIHRoaXMub3B0aW9ucy5zdGVwID4gMCApID8gdGhpcy5vcHRpb25zLnN0ZXAgOiAxLFxuXHRcdFx0dmFsTW9kU3RlcCA9ICggdmFsIC0gdGhpcy5fdmFsdWVNaW4oKSApICUgc3RlcCxcblx0XHRcdGFsaWduVmFsdWUgPSB2YWwgLSB2YWxNb2RTdGVwO1xuXG5cdFx0aWYgKCBNYXRoLmFicyggdmFsTW9kU3RlcCApICogMiA+PSBzdGVwICkge1xuXHRcdFx0YWxpZ25WYWx1ZSArPSAoIHZhbE1vZFN0ZXAgPiAwICkgPyBzdGVwIDogKCAtc3RlcCApO1xuXHRcdH1cblxuXHRcdC8vIFNpbmNlIEphdmFTY3JpcHQgaGFzIHByb2JsZW1zIHdpdGggbGFyZ2UgZmxvYXRzLCByb3VuZFxuXHRcdC8vIHRoZSBmaW5hbCB2YWx1ZSB0byA1IGRpZ2l0cyBhZnRlciB0aGUgZGVjaW1hbCBwb2ludCAoc2VlICM0MTI0KVxuXHRcdHJldHVybiBwYXJzZUZsb2F0KCBhbGlnblZhbHVlLnRvRml4ZWQoIDUgKSApO1xuXHR9LFxuXG5cdF9jYWxjdWxhdGVOZXdNYXg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtYXggPSB0aGlzLm9wdGlvbnMubWF4LFxuXHRcdFx0bWluID0gdGhpcy5fdmFsdWVNaW4oKSxcblx0XHRcdHN0ZXAgPSB0aGlzLm9wdGlvbnMuc3RlcCxcblx0XHRcdGFib3ZlTWluID0gTWF0aC5yb3VuZCggKCBtYXggLSBtaW4gKSAvIHN0ZXAgKSAqIHN0ZXA7XG5cdFx0bWF4ID0gYWJvdmVNaW4gKyBtaW47XG5cdFx0aWYgKCBtYXggPiB0aGlzLm9wdGlvbnMubWF4ICkge1xuXG5cdFx0XHQvL0lmIG1heCBpcyBub3QgZGl2aXNpYmxlIGJ5IHN0ZXAsIHJvdW5kaW5nIG9mZiBtYXkgaW5jcmVhc2UgaXRzIHZhbHVlXG5cdFx0XHRtYXggLT0gc3RlcDtcblx0XHR9XG5cdFx0dGhpcy5tYXggPSBwYXJzZUZsb2F0KCBtYXgudG9GaXhlZCggdGhpcy5fcHJlY2lzaW9uKCkgKSApO1xuXHR9LFxuXG5cdF9wcmVjaXNpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwcmVjaXNpb24gPSB0aGlzLl9wcmVjaXNpb25PZiggdGhpcy5vcHRpb25zLnN0ZXAgKTtcblx0XHRpZiAoIHRoaXMub3B0aW9ucy5taW4gIT09IG51bGwgKSB7XG5cdFx0XHRwcmVjaXNpb24gPSBNYXRoLm1heCggcHJlY2lzaW9uLCB0aGlzLl9wcmVjaXNpb25PZiggdGhpcy5vcHRpb25zLm1pbiApICk7XG5cdFx0fVxuXHRcdHJldHVybiBwcmVjaXNpb247XG5cdH0sXG5cblx0X3ByZWNpc2lvbk9mOiBmdW5jdGlvbiggbnVtICkge1xuXHRcdHZhciBzdHIgPSBudW0udG9TdHJpbmcoKSxcblx0XHRcdGRlY2ltYWwgPSBzdHIuaW5kZXhPZiggXCIuXCIgKTtcblx0XHRyZXR1cm4gZGVjaW1hbCA9PT0gLTEgPyAwIDogc3RyLmxlbmd0aCAtIGRlY2ltYWwgLSAxO1xuXHR9LFxuXG5cdF92YWx1ZU1pbjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMub3B0aW9ucy5taW47XG5cdH0sXG5cblx0X3ZhbHVlTWF4OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXg7XG5cdH0sXG5cblx0X3JlZnJlc2hSYW5nZTogZnVuY3Rpb24oIG9yaWVudGF0aW9uICkge1xuXHRcdGlmICggb3JpZW50YXRpb24gPT09IFwidmVydGljYWxcIiApIHtcblx0XHRcdHRoaXMucmFuZ2UuY3NzKCB7IFwid2lkdGhcIjogXCJcIiwgXCJsZWZ0XCI6IFwiXCIgfSApO1xuXHRcdH1cblx0XHRpZiAoIG9yaWVudGF0aW9uID09PSBcImhvcml6b250YWxcIiApIHtcblx0XHRcdHRoaXMucmFuZ2UuY3NzKCB7IFwiaGVpZ2h0XCI6IFwiXCIsIFwiYm90dG9tXCI6IFwiXCIgfSApO1xuXHRcdH1cblx0fSxcblxuXHRfcmVmcmVzaFZhbHVlOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbGFzdFZhbFBlcmNlbnQsIHZhbFBlcmNlbnQsIHZhbHVlLCB2YWx1ZU1pbiwgdmFsdWVNYXgsXG5cdFx0XHRvUmFuZ2UgPSB0aGlzLm9wdGlvbnMucmFuZ2UsXG5cdFx0XHRvID0gdGhpcy5vcHRpb25zLFxuXHRcdFx0dGhhdCA9IHRoaXMsXG5cdFx0XHRhbmltYXRlID0gKCAhdGhpcy5fYW5pbWF0ZU9mZiApID8gby5hbmltYXRlIDogZmFsc2UsXG5cdFx0XHRfc2V0ID0ge307XG5cblx0XHRpZiAoIHRoaXMuX2hhc011bHRpcGxlVmFsdWVzKCkgKSB7XG5cdFx0XHR0aGlzLmhhbmRsZXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdHZhbFBlcmNlbnQgPSAoIHRoYXQudmFsdWVzKCBpICkgLSB0aGF0Ll92YWx1ZU1pbigpICkgLyAoIHRoYXQuX3ZhbHVlTWF4KCkgLVxuXHRcdFx0XHRcdHRoYXQuX3ZhbHVlTWluKCkgKSAqIDEwMDtcblx0XHRcdFx0X3NldFsgdGhhdC5vcmllbnRhdGlvbiA9PT0gXCJob3Jpem9udGFsXCIgPyBcImxlZnRcIiA6IFwiYm90dG9tXCIgXSA9IHZhbFBlcmNlbnQgKyBcIiVcIjtcblx0XHRcdFx0JCggdGhpcyApLnN0b3AoIDEsIDEgKVsgYW5pbWF0ZSA/IFwiYW5pbWF0ZVwiIDogXCJjc3NcIiBdKCBfc2V0LCBvLmFuaW1hdGUgKTtcblx0XHRcdFx0aWYgKCB0aGF0Lm9wdGlvbnMucmFuZ2UgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGF0Lm9yaWVudGF0aW9uID09PSBcImhvcml6b250YWxcIiApIHtcblx0XHRcdFx0XHRcdGlmICggaSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0dGhhdC5yYW5nZS5zdG9wKCAxLCAxIClbIGFuaW1hdGUgPyBcImFuaW1hdGVcIiA6IFwiY3NzXCIgXSgge1xuXHRcdFx0XHRcdFx0XHRcdGxlZnQ6IHZhbFBlcmNlbnQgKyBcIiVcIlxuXHRcdFx0XHRcdFx0XHR9LCBvLmFuaW1hdGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggaSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0dGhhdC5yYW5nZVsgYW5pbWF0ZSA/IFwiYW5pbWF0ZVwiIDogXCJjc3NcIiBdKCB7XG5cdFx0XHRcdFx0XHRcdFx0d2lkdGg6ICggdmFsUGVyY2VudCAtIGxhc3RWYWxQZXJjZW50ICkgKyBcIiVcIlxuXHRcdFx0XHRcdFx0XHR9LCB7XG5cdFx0XHRcdFx0XHRcdFx0cXVldWU6IGZhbHNlLFxuXHRcdFx0XHRcdFx0XHRcdGR1cmF0aW9uOiBvLmFuaW1hdGVcblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRpZiAoIGkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdHRoYXQucmFuZ2Uuc3RvcCggMSwgMSApWyBhbmltYXRlID8gXCJhbmltYXRlXCIgOiBcImNzc1wiIF0oIHtcblx0XHRcdFx0XHRcdFx0XHRib3R0b206ICggdmFsUGVyY2VudCApICsgXCIlXCJcblx0XHRcdFx0XHRcdFx0fSwgby5hbmltYXRlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIGkgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdHRoYXQucmFuZ2VbIGFuaW1hdGUgPyBcImFuaW1hdGVcIiA6IFwiY3NzXCIgXSgge1xuXHRcdFx0XHRcdFx0XHRcdGhlaWdodDogKCB2YWxQZXJjZW50IC0gbGFzdFZhbFBlcmNlbnQgKSArIFwiJVwiXG5cdFx0XHRcdFx0XHRcdH0sIHtcblx0XHRcdFx0XHRcdFx0XHRxdWV1ZTogZmFsc2UsXG5cdFx0XHRcdFx0XHRcdFx0ZHVyYXRpb246IG8uYW5pbWF0ZVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGxhc3RWYWxQZXJjZW50ID0gdmFsUGVyY2VudDtcblx0XHRcdH0gKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFsdWUgPSB0aGlzLnZhbHVlKCk7XG5cdFx0XHR2YWx1ZU1pbiA9IHRoaXMuX3ZhbHVlTWluKCk7XG5cdFx0XHR2YWx1ZU1heCA9IHRoaXMuX3ZhbHVlTWF4KCk7XG5cdFx0XHR2YWxQZXJjZW50ID0gKCB2YWx1ZU1heCAhPT0gdmFsdWVNaW4gKSA/XG5cdFx0XHRcdFx0KCB2YWx1ZSAtIHZhbHVlTWluICkgLyAoIHZhbHVlTWF4IC0gdmFsdWVNaW4gKSAqIDEwMCA6XG5cdFx0XHRcdFx0MDtcblx0XHRcdF9zZXRbIHRoaXMub3JpZW50YXRpb24gPT09IFwiaG9yaXpvbnRhbFwiID8gXCJsZWZ0XCIgOiBcImJvdHRvbVwiIF0gPSB2YWxQZXJjZW50ICsgXCIlXCI7XG5cdFx0XHR0aGlzLmhhbmRsZS5zdG9wKCAxLCAxIClbIGFuaW1hdGUgPyBcImFuaW1hdGVcIiA6IFwiY3NzXCIgXSggX3NldCwgby5hbmltYXRlICk7XG5cblx0XHRcdGlmICggb1JhbmdlID09PSBcIm1pblwiICYmIHRoaXMub3JpZW50YXRpb24gPT09IFwiaG9yaXpvbnRhbFwiICkge1xuXHRcdFx0XHR0aGlzLnJhbmdlLnN0b3AoIDEsIDEgKVsgYW5pbWF0ZSA/IFwiYW5pbWF0ZVwiIDogXCJjc3NcIiBdKCB7XG5cdFx0XHRcdFx0d2lkdGg6IHZhbFBlcmNlbnQgKyBcIiVcIlxuXHRcdFx0XHR9LCBvLmFuaW1hdGUgKTtcblx0XHRcdH1cblx0XHRcdGlmICggb1JhbmdlID09PSBcIm1heFwiICYmIHRoaXMub3JpZW50YXRpb24gPT09IFwiaG9yaXpvbnRhbFwiICkge1xuXHRcdFx0XHR0aGlzLnJhbmdlLnN0b3AoIDEsIDEgKVsgYW5pbWF0ZSA/IFwiYW5pbWF0ZVwiIDogXCJjc3NcIiBdKCB7XG5cdFx0XHRcdFx0d2lkdGg6ICggMTAwIC0gdmFsUGVyY2VudCApICsgXCIlXCJcblx0XHRcdFx0fSwgby5hbmltYXRlICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIG9SYW5nZSA9PT0gXCJtaW5cIiAmJiB0aGlzLm9yaWVudGF0aW9uID09PSBcInZlcnRpY2FsXCIgKSB7XG5cdFx0XHRcdHRoaXMucmFuZ2Uuc3RvcCggMSwgMSApWyBhbmltYXRlID8gXCJhbmltYXRlXCIgOiBcImNzc1wiIF0oIHtcblx0XHRcdFx0XHRoZWlnaHQ6IHZhbFBlcmNlbnQgKyBcIiVcIlxuXHRcdFx0XHR9LCBvLmFuaW1hdGUgKTtcblx0XHRcdH1cblx0XHRcdGlmICggb1JhbmdlID09PSBcIm1heFwiICYmIHRoaXMub3JpZW50YXRpb24gPT09IFwidmVydGljYWxcIiApIHtcblx0XHRcdFx0dGhpcy5yYW5nZS5zdG9wKCAxLCAxIClbIGFuaW1hdGUgPyBcImFuaW1hdGVcIiA6IFwiY3NzXCIgXSgge1xuXHRcdFx0XHRcdGhlaWdodDogKCAxMDAgLSB2YWxQZXJjZW50ICkgKyBcIiVcIlxuXHRcdFx0XHR9LCBvLmFuaW1hdGUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0X2hhbmRsZUV2ZW50czoge1xuXHRcdGtleWRvd246IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciBhbGxvd2VkLCBjdXJWYWwsIG5ld1ZhbCwgc3RlcCxcblx0XHRcdFx0aW5kZXggPSAkKCBldmVudC50YXJnZXQgKS5kYXRhKCBcInVpLXNsaWRlci1oYW5kbGUtaW5kZXhcIiApO1xuXG5cdFx0XHRzd2l0Y2ggKCBldmVudC5rZXlDb2RlICkge1xuXHRcdFx0XHRjYXNlICQudWkua2V5Q29kZS5IT01FOlxuXHRcdFx0XHRjYXNlICQudWkua2V5Q29kZS5FTkQ6XG5cdFx0XHRcdGNhc2UgJC51aS5rZXlDb2RlLlBBR0VfVVA6XG5cdFx0XHRcdGNhc2UgJC51aS5rZXlDb2RlLlBBR0VfRE9XTjpcblx0XHRcdFx0Y2FzZSAkLnVpLmtleUNvZGUuVVA6XG5cdFx0XHRcdGNhc2UgJC51aS5rZXlDb2RlLlJJR0hUOlxuXHRcdFx0XHRjYXNlICQudWkua2V5Q29kZS5ET1dOOlxuXHRcdFx0XHRjYXNlICQudWkua2V5Q29kZS5MRUZUOlxuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0aWYgKCAhdGhpcy5fa2V5U2xpZGluZyApIHtcblx0XHRcdFx0XHRcdHRoaXMuX2tleVNsaWRpbmcgPSB0cnVlO1xuXHRcdFx0XHRcdFx0dGhpcy5fYWRkQ2xhc3MoICQoIGV2ZW50LnRhcmdldCApLCBudWxsLCBcInVpLXN0YXRlLWFjdGl2ZVwiICk7XG5cdFx0XHRcdFx0XHRhbGxvd2VkID0gdGhpcy5fc3RhcnQoIGV2ZW50LCBpbmRleCApO1xuXHRcdFx0XHRcdFx0aWYgKCBhbGxvd2VkID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblxuXHRcdFx0c3RlcCA9IHRoaXMub3B0aW9ucy5zdGVwO1xuXHRcdFx0aWYgKCB0aGlzLl9oYXNNdWx0aXBsZVZhbHVlcygpICkge1xuXHRcdFx0XHRjdXJWYWwgPSBuZXdWYWwgPSB0aGlzLnZhbHVlcyggaW5kZXggKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGN1clZhbCA9IG5ld1ZhbCA9IHRoaXMudmFsdWUoKTtcblx0XHRcdH1cblxuXHRcdFx0c3dpdGNoICggZXZlbnQua2V5Q29kZSApIHtcblx0XHRcdFx0Y2FzZSAkLnVpLmtleUNvZGUuSE9NRTpcblx0XHRcdFx0XHRuZXdWYWwgPSB0aGlzLl92YWx1ZU1pbigpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICQudWkua2V5Q29kZS5FTkQ6XG5cdFx0XHRcdFx0bmV3VmFsID0gdGhpcy5fdmFsdWVNYXgoKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAkLnVpLmtleUNvZGUuUEFHRV9VUDpcblx0XHRcdFx0XHRuZXdWYWwgPSB0aGlzLl90cmltQWxpZ25WYWx1ZShcblx0XHRcdFx0XHRcdGN1clZhbCArICggKCB0aGlzLl92YWx1ZU1heCgpIC0gdGhpcy5fdmFsdWVNaW4oKSApIC8gdGhpcy5udW1QYWdlcyApXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAkLnVpLmtleUNvZGUuUEFHRV9ET1dOOlxuXHRcdFx0XHRcdG5ld1ZhbCA9IHRoaXMuX3RyaW1BbGlnblZhbHVlKFxuXHRcdFx0XHRcdFx0Y3VyVmFsIC0gKCAoIHRoaXMuX3ZhbHVlTWF4KCkgLSB0aGlzLl92YWx1ZU1pbigpICkgLyB0aGlzLm51bVBhZ2VzICkgKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAkLnVpLmtleUNvZGUuVVA6XG5cdFx0XHRcdGNhc2UgJC51aS5rZXlDb2RlLlJJR0hUOlxuXHRcdFx0XHRcdGlmICggY3VyVmFsID09PSB0aGlzLl92YWx1ZU1heCgpICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdWYWwgPSB0aGlzLl90cmltQWxpZ25WYWx1ZSggY3VyVmFsICsgc3RlcCApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICQudWkua2V5Q29kZS5ET1dOOlxuXHRcdFx0XHRjYXNlICQudWkua2V5Q29kZS5MRUZUOlxuXHRcdFx0XHRcdGlmICggY3VyVmFsID09PSB0aGlzLl92YWx1ZU1pbigpICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdWYWwgPSB0aGlzLl90cmltQWxpZ25WYWx1ZSggY3VyVmFsIC0gc3RlcCApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9zbGlkZSggZXZlbnQsIGluZGV4LCBuZXdWYWwgKTtcblx0XHR9LFxuXHRcdGtleXVwOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgaW5kZXggPSAkKCBldmVudC50YXJnZXQgKS5kYXRhKCBcInVpLXNsaWRlci1oYW5kbGUtaW5kZXhcIiApO1xuXG5cdFx0XHRpZiAoIHRoaXMuX2tleVNsaWRpbmcgKSB7XG5cdFx0XHRcdHRoaXMuX2tleVNsaWRpbmcgPSBmYWxzZTtcblx0XHRcdFx0dGhpcy5fc3RvcCggZXZlbnQsIGluZGV4ICk7XG5cdFx0XHRcdHRoaXMuX2NoYW5nZSggZXZlbnQsIGluZGV4ICk7XG5cdFx0XHRcdHRoaXMuX3JlbW92ZUNsYXNzKCAkKCBldmVudC50YXJnZXQgKSwgbnVsbCwgXCJ1aS1zdGF0ZS1hY3RpdmVcIiApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5cbi8qIVxuICogalF1ZXJ5IFVJIFNwaW5uZXIgMS4xMi4xXG4gKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqL1xuXG4vLz4+bGFiZWw6IFNwaW5uZXJcbi8vPj5ncm91cDogV2lkZ2V0c1xuLy8+PmRlc2NyaXB0aW9uOiBEaXNwbGF5cyBidXR0b25zIHRvIGVhc2lseSBpbnB1dCBudW1iZXJzIHZpYSB0aGUga2V5Ym9hcmQgb3IgbW91c2UuXG4vLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vc3Bpbm5lci9cbi8vPj5kZW1vczogaHR0cDovL2pxdWVyeXVpLmNvbS9zcGlubmVyL1xuLy8+PmNzcy5zdHJ1Y3R1cmU6IC4uLy4uL3RoZW1lcy9iYXNlL2NvcmUuY3NzXG4vLz4+Y3NzLnN0cnVjdHVyZTogLi4vLi4vdGhlbWVzL2Jhc2Uvc3Bpbm5lci5jc3Ncbi8vPj5jc3MudGhlbWU6IC4uLy4uL3RoZW1lcy9iYXNlL3RoZW1lLmNzc1xuXG5cblxuZnVuY3Rpb24gc3Bpbm5lck1vZGlmZXIoIGZuICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHByZXZpb3VzID0gdGhpcy5lbGVtZW50LnZhbCgpO1xuXHRcdGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR0aGlzLl9yZWZyZXNoKCk7XG5cdFx0aWYgKCBwcmV2aW91cyAhPT0gdGhpcy5lbGVtZW50LnZhbCgpICkge1xuXHRcdFx0dGhpcy5fdHJpZ2dlciggXCJjaGFuZ2VcIiApO1xuXHRcdH1cblx0fTtcbn1cblxuJC53aWRnZXQoIFwidWkuc3Bpbm5lclwiLCB7XG5cdHZlcnNpb246IFwiMS4xMi4xXCIsXG5cdGRlZmF1bHRFbGVtZW50OiBcIjxpbnB1dD5cIixcblx0d2lkZ2V0RXZlbnRQcmVmaXg6IFwic3BpblwiLFxuXHRvcHRpb25zOiB7XG5cdFx0Y2xhc3Nlczoge1xuXHRcdFx0XCJ1aS1zcGlubmVyXCI6IFwidWktY29ybmVyLWFsbFwiLFxuXHRcdFx0XCJ1aS1zcGlubmVyLWRvd25cIjogXCJ1aS1jb3JuZXItYnJcIixcblx0XHRcdFwidWktc3Bpbm5lci11cFwiOiBcInVpLWNvcm5lci10clwiXG5cdFx0fSxcblx0XHRjdWx0dXJlOiBudWxsLFxuXHRcdGljb25zOiB7XG5cdFx0XHRkb3duOiBcInVpLWljb24tdHJpYW5nbGUtMS1zXCIsXG5cdFx0XHR1cDogXCJ1aS1pY29uLXRyaWFuZ2xlLTEtblwiXG5cdFx0fSxcblx0XHRpbmNyZW1lbnRhbDogdHJ1ZSxcblx0XHRtYXg6IG51bGwsXG5cdFx0bWluOiBudWxsLFxuXHRcdG51bWJlckZvcm1hdDogbnVsbCxcblx0XHRwYWdlOiAxMCxcblx0XHRzdGVwOiAxLFxuXG5cdFx0Y2hhbmdlOiBudWxsLFxuXHRcdHNwaW46IG51bGwsXG5cdFx0c3RhcnQ6IG51bGwsXG5cdFx0c3RvcDogbnVsbFxuXHR9LFxuXG5cdF9jcmVhdGU6IGZ1bmN0aW9uKCkge1xuXG5cdFx0Ly8gaGFuZGxlIHN0cmluZyB2YWx1ZXMgdGhhdCBuZWVkIHRvIGJlIHBhcnNlZFxuXHRcdHRoaXMuX3NldE9wdGlvbiggXCJtYXhcIiwgdGhpcy5vcHRpb25zLm1heCApO1xuXHRcdHRoaXMuX3NldE9wdGlvbiggXCJtaW5cIiwgdGhpcy5vcHRpb25zLm1pbiApO1xuXHRcdHRoaXMuX3NldE9wdGlvbiggXCJzdGVwXCIsIHRoaXMub3B0aW9ucy5zdGVwICk7XG5cblx0XHQvLyBPbmx5IGZvcm1hdCBpZiB0aGVyZSBpcyBhIHZhbHVlLCBwcmV2ZW50cyB0aGUgZmllbGQgZnJvbSBiZWluZyBtYXJrZWRcblx0XHQvLyBhcyBpbnZhbGlkIGluIEZpcmVmb3gsIHNlZSAjOTU3My5cblx0XHRpZiAoIHRoaXMudmFsdWUoKSAhPT0gXCJcIiApIHtcblxuXHRcdFx0Ly8gRm9ybWF0IHRoZSB2YWx1ZSwgYnV0IGRvbid0IGNvbnN0cmFpbi5cblx0XHRcdHRoaXMuX3ZhbHVlKCB0aGlzLmVsZW1lbnQudmFsKCksIHRydWUgKTtcblx0XHR9XG5cblx0XHR0aGlzLl9kcmF3KCk7XG5cdFx0dGhpcy5fb24oIHRoaXMuX2V2ZW50cyApO1xuXHRcdHRoaXMuX3JlZnJlc2goKTtcblxuXHRcdC8vIFR1cm5pbmcgb2ZmIGF1dG9jb21wbGV0ZSBwcmV2ZW50cyB0aGUgYnJvd3NlciBmcm9tIHJlbWVtYmVyaW5nIHRoZVxuXHRcdC8vIHZhbHVlIHdoZW4gbmF2aWdhdGluZyB0aHJvdWdoIGhpc3RvcnksIHNvIHdlIHJlLWVuYWJsZSBhdXRvY29tcGxldGVcblx0XHQvLyBpZiB0aGUgcGFnZSBpcyB1bmxvYWRlZCBiZWZvcmUgdGhlIHdpZGdldCBpcyBkZXN0cm95ZWQuICM3NzkwXG5cdFx0dGhpcy5fb24oIHRoaXMud2luZG93LCB7XG5cdFx0XHRiZWZvcmV1bmxvYWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQucmVtb3ZlQXR0ciggXCJhdXRvY29tcGxldGVcIiApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRfZ2V0Q3JlYXRlT3B0aW9uczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG9wdGlvbnMgPSB0aGlzLl9zdXBlcigpO1xuXHRcdHZhciBlbGVtZW50ID0gdGhpcy5lbGVtZW50O1xuXG5cdFx0JC5lYWNoKCBbIFwibWluXCIsIFwibWF4XCIsIFwic3RlcFwiIF0sIGZ1bmN0aW9uKCBpLCBvcHRpb24gKSB7XG5cdFx0XHR2YXIgdmFsdWUgPSBlbGVtZW50LmF0dHIoIG9wdGlvbiApO1xuXHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICYmIHZhbHVlLmxlbmd0aCApIHtcblx0XHRcdFx0b3B0aW9uc1sgb3B0aW9uIF0gPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0XHRyZXR1cm4gb3B0aW9ucztcblx0fSxcblxuXHRfZXZlbnRzOiB7XG5cdFx0a2V5ZG93bjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0aWYgKCB0aGlzLl9zdGFydCggZXZlbnQgKSAmJiB0aGlzLl9rZXlkb3duKCBldmVudCApICkge1xuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0a2V5dXA6IFwiX3N0b3BcIixcblx0XHRmb2N1czogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLnByZXZpb3VzID0gdGhpcy5lbGVtZW50LnZhbCgpO1xuXHRcdH0sXG5cdFx0Ymx1cjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0aWYgKCB0aGlzLmNhbmNlbEJsdXIgKSB7XG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmNhbmNlbEJsdXI7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fc3RvcCgpO1xuXHRcdFx0dGhpcy5fcmVmcmVzaCgpO1xuXHRcdFx0aWYgKCB0aGlzLnByZXZpb3VzICE9PSB0aGlzLmVsZW1lbnQudmFsKCkgKSB7XG5cdFx0XHRcdHRoaXMuX3RyaWdnZXIoIFwiY2hhbmdlXCIsIGV2ZW50ICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRtb3VzZXdoZWVsOiBmdW5jdGlvbiggZXZlbnQsIGRlbHRhICkge1xuXHRcdFx0aWYgKCAhZGVsdGEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGlmICggIXRoaXMuc3Bpbm5pbmcgJiYgIXRoaXMuX3N0YXJ0KCBldmVudCApICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX3NwaW4oICggZGVsdGEgPiAwID8gMSA6IC0xICkgKiB0aGlzLm9wdGlvbnMuc3RlcCwgZXZlbnQgKTtcblx0XHRcdGNsZWFyVGltZW91dCggdGhpcy5tb3VzZXdoZWVsVGltZXIgKTtcblx0XHRcdHRoaXMubW91c2V3aGVlbFRpbWVyID0gdGhpcy5fZGVsYXkoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMuc3Bpbm5pbmcgKSB7XG5cdFx0XHRcdFx0dGhpcy5fc3RvcCggZXZlbnQgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgMTAwICk7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH0sXG5cdFx0XCJtb3VzZWRvd24gLnVpLXNwaW5uZXItYnV0dG9uXCI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciBwcmV2aW91cztcblxuXHRcdFx0Ly8gV2UgbmV2ZXIgd2FudCB0aGUgYnV0dG9ucyB0byBoYXZlIGZvY3VzOyB3aGVuZXZlciB0aGUgdXNlciBpc1xuXHRcdFx0Ly8gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgc3Bpbm5lciwgdGhlIGZvY3VzIHNob3VsZCBiZSBvbiB0aGUgaW5wdXQuXG5cdFx0XHQvLyBJZiB0aGUgaW5wdXQgaXMgZm9jdXNlZCB0aGVuIHRoaXMucHJldmlvdXMgaXMgcHJvcGVybHkgc2V0IGZyb21cblx0XHRcdC8vIHdoZW4gdGhlIGlucHV0IGZpcnN0IHJlY2VpdmVkIGZvY3VzLiBJZiB0aGUgaW5wdXQgaXMgbm90IGZvY3VzZWRcblx0XHRcdC8vIHRoZW4gd2UgbmVlZCB0byBzZXQgdGhpcy5wcmV2aW91cyBiYXNlZCBvbiB0aGUgdmFsdWUgYmVmb3JlIHNwaW5uaW5nLlxuXHRcdFx0cHJldmlvdXMgPSB0aGlzLmVsZW1lbnRbIDAgXSA9PT0gJC51aS5zYWZlQWN0aXZlRWxlbWVudCggdGhpcy5kb2N1bWVudFsgMCBdICkgP1xuXHRcdFx0XHR0aGlzLnByZXZpb3VzIDogdGhpcy5lbGVtZW50LnZhbCgpO1xuXHRcdFx0ZnVuY3Rpb24gY2hlY2tGb2N1cygpIHtcblx0XHRcdFx0dmFyIGlzQWN0aXZlID0gdGhpcy5lbGVtZW50WyAwIF0gPT09ICQudWkuc2FmZUFjdGl2ZUVsZW1lbnQoIHRoaXMuZG9jdW1lbnRbIDAgXSApO1xuXHRcdFx0XHRpZiAoICFpc0FjdGl2ZSApIHtcblx0XHRcdFx0XHR0aGlzLmVsZW1lbnQudHJpZ2dlciggXCJmb2N1c1wiICk7XG5cdFx0XHRcdFx0dGhpcy5wcmV2aW91cyA9IHByZXZpb3VzO1xuXG5cdFx0XHRcdFx0Ly8gc3VwcG9ydDogSUVcblx0XHRcdFx0XHQvLyBJRSBzZXRzIGZvY3VzIGFzeW5jaHJvbm91c2x5LCBzbyB3ZSBuZWVkIHRvIGNoZWNrIGlmIGZvY3VzXG5cdFx0XHRcdFx0Ly8gbW92ZWQgb2ZmIG9mIHRoZSBpbnB1dCBiZWNhdXNlIHRoZSB1c2VyIGNsaWNrZWQgb24gdGhlIGJ1dHRvbi5cblx0XHRcdFx0XHR0aGlzLl9kZWxheSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnByZXZpb3VzID0gcHJldmlvdXM7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEVuc3VyZSBmb2N1cyBpcyBvbiAob3Igc3RheXMgb24pIHRoZSB0ZXh0IGZpZWxkXG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0Y2hlY2tGb2N1cy5jYWxsKCB0aGlzICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFXG5cdFx0XHQvLyBJRSBkb2Vzbid0IHByZXZlbnQgbW92aW5nIGZvY3VzIGV2ZW4gd2l0aCBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG5cdFx0XHQvLyBzbyB3ZSBzZXQgYSBmbGFnIHRvIGtub3cgd2hlbiB3ZSBzaG91bGQgaWdub3JlIHRoZSBibHVyIGV2ZW50XG5cdFx0XHQvLyBhbmQgY2hlY2sgKGFnYWluKSBpZiBmb2N1cyBtb3ZlZCBvZmYgb2YgdGhlIGlucHV0LlxuXHRcdFx0dGhpcy5jYW5jZWxCbHVyID0gdHJ1ZTtcblx0XHRcdHRoaXMuX2RlbGF5KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVsZXRlIHRoaXMuY2FuY2VsQmx1cjtcblx0XHRcdFx0Y2hlY2tGb2N1cy5jYWxsKCB0aGlzICk7XG5cdFx0XHR9ICk7XG5cblx0XHRcdGlmICggdGhpcy5fc3RhcnQoIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX3JlcGVhdCggbnVsbCwgJCggZXZlbnQuY3VycmVudFRhcmdldCApXG5cdFx0XHRcdC5oYXNDbGFzcyggXCJ1aS1zcGlubmVyLXVwXCIgKSA/IDEgOiAtMSwgZXZlbnQgKTtcblx0XHR9LFxuXHRcdFwibW91c2V1cCAudWktc3Bpbm5lci1idXR0b25cIjogXCJfc3RvcFwiLFxuXHRcdFwibW91c2VlbnRlciAudWktc3Bpbm5lci1idXR0b25cIjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBidXR0b24gd2lsbCBhZGQgdWktc3RhdGUtYWN0aXZlIGlmIG1vdXNlIHdhcyBkb3duIHdoaWxlIG1vdXNlbGVhdmUgYW5kIGtlcHQgZG93blxuXHRcdFx0aWYgKCAhJCggZXZlbnQuY3VycmVudFRhcmdldCApLmhhc0NsYXNzKCBcInVpLXN0YXRlLWFjdGl2ZVwiICkgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0aGlzLl9zdGFydCggZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX3JlcGVhdCggbnVsbCwgJCggZXZlbnQuY3VycmVudFRhcmdldCApXG5cdFx0XHRcdC5oYXNDbGFzcyggXCJ1aS1zcGlubmVyLXVwXCIgKSA/IDEgOiAtMSwgZXZlbnQgKTtcblx0XHR9LFxuXG5cdFx0Ly8gVE9ETzogZG8gd2UgcmVhbGx5IHdhbnQgdG8gY29uc2lkZXIgdGhpcyBhIHN0b3A/XG5cdFx0Ly8gc2hvdWxkbid0IHdlIGp1c3Qgc3RvcCB0aGUgcmVwZWF0ZXIgYW5kIHdhaXQgdW50aWwgbW91c2V1cCBiZWZvcmVcblx0XHQvLyB3ZSB0cmlnZ2VyIHRoZSBzdG9wIGV2ZW50P1xuXHRcdFwibW91c2VsZWF2ZSAudWktc3Bpbm5lci1idXR0b25cIjogXCJfc3RvcFwiXG5cdH0sXG5cblx0Ly8gU3VwcG9ydCBtb2JpbGUgZW5oYW5jZWQgb3B0aW9uIGFuZCBtYWtlIGJhY2tjb21wYXQgbW9yZSBzYW5lXG5cdF9lbmhhbmNlOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLnVpU3Bpbm5lciA9IHRoaXMuZWxlbWVudFxuXHRcdFx0LmF0dHIoIFwiYXV0b2NvbXBsZXRlXCIsIFwib2ZmXCIgKVxuXHRcdFx0LndyYXAoIFwiPHNwYW4+XCIgKVxuXHRcdFx0LnBhcmVudCgpXG5cblx0XHRcdFx0Ly8gQWRkIGJ1dHRvbnNcblx0XHRcdFx0LmFwcGVuZChcblx0XHRcdFx0XHRcIjxhPjwvYT48YT48L2E+XCJcblx0XHRcdFx0KTtcblx0fSxcblxuXHRfZHJhdzogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5fZW5oYW5jZSgpO1xuXG5cdFx0dGhpcy5fYWRkQ2xhc3MoIHRoaXMudWlTcGlubmVyLCBcInVpLXNwaW5uZXJcIiwgXCJ1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnRcIiApO1xuXHRcdHRoaXMuX2FkZENsYXNzKCBcInVpLXNwaW5uZXItaW5wdXRcIiApO1xuXG5cdFx0dGhpcy5lbGVtZW50LmF0dHIoIFwicm9sZVwiLCBcInNwaW5idXR0b25cIiApO1xuXG5cdFx0Ly8gQnV0dG9uIGJpbmRpbmdzXG5cdFx0dGhpcy5idXR0b25zID0gdGhpcy51aVNwaW5uZXIuY2hpbGRyZW4oIFwiYVwiIClcblx0XHRcdC5hdHRyKCBcInRhYkluZGV4XCIsIC0xIClcblx0XHRcdC5hdHRyKCBcImFyaWEtaGlkZGVuXCIsIHRydWUgKVxuXHRcdFx0LmJ1dHRvbigge1xuXHRcdFx0XHRjbGFzc2VzOiB7XG5cdFx0XHRcdFx0XCJ1aS1idXR0b25cIjogXCJcIlxuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cblx0XHQvLyBUT0RPOiBSaWdodCBub3cgYnV0dG9uIGRvZXMgbm90IHN1cHBvcnQgY2xhc3NlcyB0aGlzIGlzIGFscmVhZHkgdXBkYXRlZCBpbiBidXR0b24gUFJcblx0XHR0aGlzLl9yZW1vdmVDbGFzcyggdGhpcy5idXR0b25zLCBcInVpLWNvcm5lci1hbGxcIiApO1xuXG5cdFx0dGhpcy5fYWRkQ2xhc3MoIHRoaXMuYnV0dG9ucy5maXJzdCgpLCBcInVpLXNwaW5uZXItYnV0dG9uIHVpLXNwaW5uZXItdXBcIiApO1xuXHRcdHRoaXMuX2FkZENsYXNzKCB0aGlzLmJ1dHRvbnMubGFzdCgpLCBcInVpLXNwaW5uZXItYnV0dG9uIHVpLXNwaW5uZXItZG93blwiICk7XG5cdFx0dGhpcy5idXR0b25zLmZpcnN0KCkuYnV0dG9uKCB7XG5cdFx0XHRcImljb25cIjogdGhpcy5vcHRpb25zLmljb25zLnVwLFxuXHRcdFx0XCJzaG93TGFiZWxcIjogZmFsc2Vcblx0XHR9ICk7XG5cdFx0dGhpcy5idXR0b25zLmxhc3QoKS5idXR0b24oIHtcblx0XHRcdFwiaWNvblwiOiB0aGlzLm9wdGlvbnMuaWNvbnMuZG93bixcblx0XHRcdFwic2hvd0xhYmVsXCI6IGZhbHNlXG5cdFx0fSApO1xuXG5cdFx0Ly8gSUUgNiBkb2Vzbid0IHVuZGVyc3RhbmQgaGVpZ2h0OiA1MCUgZm9yIHRoZSBidXR0b25zXG5cdFx0Ly8gdW5sZXNzIHRoZSB3cmFwcGVyIGhhcyBhbiBleHBsaWNpdCBoZWlnaHRcblx0XHRpZiAoIHRoaXMuYnV0dG9ucy5oZWlnaHQoKSA+IE1hdGguY2VpbCggdGhpcy51aVNwaW5uZXIuaGVpZ2h0KCkgKiAwLjUgKSAmJlxuXHRcdFx0XHR0aGlzLnVpU3Bpbm5lci5oZWlnaHQoKSA+IDAgKSB7XG5cdFx0XHR0aGlzLnVpU3Bpbm5lci5oZWlnaHQoIHRoaXMudWlTcGlubmVyLmhlaWdodCgpICk7XG5cdFx0fVxuXHR9LFxuXG5cdF9rZXlkb3duOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG5cdFx0XHRrZXlDb2RlID0gJC51aS5rZXlDb2RlO1xuXG5cdFx0c3dpdGNoICggZXZlbnQua2V5Q29kZSApIHtcblx0XHRjYXNlIGtleUNvZGUuVVA6XG5cdFx0XHR0aGlzLl9yZXBlYXQoIG51bGwsIDEsIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRjYXNlIGtleUNvZGUuRE9XTjpcblx0XHRcdHRoaXMuX3JlcGVhdCggbnVsbCwgLTEsIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRjYXNlIGtleUNvZGUuUEFHRV9VUDpcblx0XHRcdHRoaXMuX3JlcGVhdCggbnVsbCwgb3B0aW9ucy5wYWdlLCBldmVudCApO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0Y2FzZSBrZXlDb2RlLlBBR0VfRE9XTjpcblx0XHRcdHRoaXMuX3JlcGVhdCggbnVsbCwgLW9wdGlvbnMucGFnZSwgZXZlbnQgKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblxuXHRfc3RhcnQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRpZiAoICF0aGlzLnNwaW5uaW5nICYmIHRoaXMuX3RyaWdnZXIoIFwic3RhcnRcIiwgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYgKCAhdGhpcy5jb3VudGVyICkge1xuXHRcdFx0dGhpcy5jb3VudGVyID0gMTtcblx0XHR9XG5cdFx0dGhpcy5zcGlubmluZyA9IHRydWU7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0X3JlcGVhdDogZnVuY3Rpb24oIGksIHN0ZXBzLCBldmVudCApIHtcblx0XHRpID0gaSB8fCA1MDA7XG5cblx0XHRjbGVhclRpbWVvdXQoIHRoaXMudGltZXIgKTtcblx0XHR0aGlzLnRpbWVyID0gdGhpcy5fZGVsYXkoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5fcmVwZWF0KCA0MCwgc3RlcHMsIGV2ZW50ICk7XG5cdFx0fSwgaSApO1xuXG5cdFx0dGhpcy5fc3Bpbiggc3RlcHMgKiB0aGlzLm9wdGlvbnMuc3RlcCwgZXZlbnQgKTtcblx0fSxcblxuXHRfc3BpbjogZnVuY3Rpb24oIHN0ZXAsIGV2ZW50ICkge1xuXHRcdHZhciB2YWx1ZSA9IHRoaXMudmFsdWUoKSB8fCAwO1xuXG5cdFx0aWYgKCAhdGhpcy5jb3VudGVyICkge1xuXHRcdFx0dGhpcy5jb3VudGVyID0gMTtcblx0XHR9XG5cblx0XHR2YWx1ZSA9IHRoaXMuX2FkanVzdFZhbHVlKCB2YWx1ZSArIHN0ZXAgKiB0aGlzLl9pbmNyZW1lbnQoIHRoaXMuY291bnRlciApICk7XG5cblx0XHRpZiAoICF0aGlzLnNwaW5uaW5nIHx8IHRoaXMuX3RyaWdnZXIoIFwic3BpblwiLCBldmVudCwgeyB2YWx1ZTogdmFsdWUgfSApICE9PSBmYWxzZSApIHtcblx0XHRcdHRoaXMuX3ZhbHVlKCB2YWx1ZSApO1xuXHRcdFx0dGhpcy5jb3VudGVyKys7XG5cdFx0fVxuXHR9LFxuXG5cdF9pbmNyZW1lbnQ6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBpbmNyZW1lbnRhbCA9IHRoaXMub3B0aW9ucy5pbmNyZW1lbnRhbDtcblxuXHRcdGlmICggaW5jcmVtZW50YWwgKSB7XG5cdFx0XHRyZXR1cm4gJC5pc0Z1bmN0aW9uKCBpbmNyZW1lbnRhbCApID9cblx0XHRcdFx0aW5jcmVtZW50YWwoIGkgKSA6XG5cdFx0XHRcdE1hdGguZmxvb3IoIGkgKiBpICogaSAvIDUwMDAwIC0gaSAqIGkgLyA1MDAgKyAxNyAqIGkgLyAyMDAgKyAxICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIDE7XG5cdH0sXG5cblx0X3ByZWNpc2lvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHByZWNpc2lvbiA9IHRoaXMuX3ByZWNpc2lvbk9mKCB0aGlzLm9wdGlvbnMuc3RlcCApO1xuXHRcdGlmICggdGhpcy5vcHRpb25zLm1pbiAhPT0gbnVsbCApIHtcblx0XHRcdHByZWNpc2lvbiA9IE1hdGgubWF4KCBwcmVjaXNpb24sIHRoaXMuX3ByZWNpc2lvbk9mKCB0aGlzLm9wdGlvbnMubWluICkgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHByZWNpc2lvbjtcblx0fSxcblxuXHRfcHJlY2lzaW9uT2Y6IGZ1bmN0aW9uKCBudW0gKSB7XG5cdFx0dmFyIHN0ciA9IG51bS50b1N0cmluZygpLFxuXHRcdFx0ZGVjaW1hbCA9IHN0ci5pbmRleE9mKCBcIi5cIiApO1xuXHRcdHJldHVybiBkZWNpbWFsID09PSAtMSA/IDAgOiBzdHIubGVuZ3RoIC0gZGVjaW1hbCAtIDE7XG5cdH0sXG5cblx0X2FkanVzdFZhbHVlOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGJhc2UsIGFib3ZlTWluLFxuXHRcdFx0b3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSdyZSBhdCBhIHZhbGlkIHN0ZXBcblx0XHQvLyAtIGZpbmQgb3V0IHdoZXJlIHdlIGFyZSByZWxhdGl2ZSB0byB0aGUgYmFzZSAobWluIG9yIDApXG5cdFx0YmFzZSA9IG9wdGlvbnMubWluICE9PSBudWxsID8gb3B0aW9ucy5taW4gOiAwO1xuXHRcdGFib3ZlTWluID0gdmFsdWUgLSBiYXNlO1xuXG5cdFx0Ly8gLSByb3VuZCB0byB0aGUgbmVhcmVzdCBzdGVwXG5cdFx0YWJvdmVNaW4gPSBNYXRoLnJvdW5kKCBhYm92ZU1pbiAvIG9wdGlvbnMuc3RlcCApICogb3B0aW9ucy5zdGVwO1xuXG5cdFx0Ly8gLSByb3VuZGluZyBpcyBiYXNlZCBvbiAwLCBzbyBhZGp1c3QgYmFjayB0byBvdXIgYmFzZVxuXHRcdHZhbHVlID0gYmFzZSArIGFib3ZlTWluO1xuXG5cdFx0Ly8gRml4IHByZWNpc2lvbiBmcm9tIGJhZCBKUyBmbG9hdGluZyBwb2ludCBtYXRoXG5cdFx0dmFsdWUgPSBwYXJzZUZsb2F0KCB2YWx1ZS50b0ZpeGVkKCB0aGlzLl9wcmVjaXNpb24oKSApICk7XG5cblx0XHQvLyBDbGFtcCB0aGUgdmFsdWVcblx0XHRpZiAoIG9wdGlvbnMubWF4ICE9PSBudWxsICYmIHZhbHVlID4gb3B0aW9ucy5tYXggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucy5tYXg7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5taW4gIT09IG51bGwgJiYgdmFsdWUgPCBvcHRpb25zLm1pbiApIHtcblx0XHRcdHJldHVybiBvcHRpb25zLm1pbjtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cblx0X3N0b3A6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRpZiAoICF0aGlzLnNwaW5uaW5nICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNsZWFyVGltZW91dCggdGhpcy50aW1lciApO1xuXHRcdGNsZWFyVGltZW91dCggdGhpcy5tb3VzZXdoZWVsVGltZXIgKTtcblx0XHR0aGlzLmNvdW50ZXIgPSAwO1xuXHRcdHRoaXMuc3Bpbm5pbmcgPSBmYWxzZTtcblx0XHR0aGlzLl90cmlnZ2VyKCBcInN0b3BcIiwgZXZlbnQgKTtcblx0fSxcblxuXHRfc2V0T3B0aW9uOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgcHJldlZhbHVlLCBmaXJzdCwgbGFzdDtcblxuXHRcdGlmICgga2V5ID09PSBcImN1bHR1cmVcIiB8fCBrZXkgPT09IFwibnVtYmVyRm9ybWF0XCIgKSB7XG5cdFx0XHRwcmV2VmFsdWUgPSB0aGlzLl9wYXJzZSggdGhpcy5lbGVtZW50LnZhbCgpICk7XG5cdFx0XHR0aGlzLm9wdGlvbnNbIGtleSBdID0gdmFsdWU7XG5cdFx0XHR0aGlzLmVsZW1lbnQudmFsKCB0aGlzLl9mb3JtYXQoIHByZXZWYWx1ZSApICk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgPT09IFwibWF4XCIgfHwga2V5ID09PSBcIm1pblwiIHx8IGtleSA9PT0gXCJzdGVwXCIgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0dmFsdWUgPSB0aGlzLl9wYXJzZSggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKCBrZXkgPT09IFwiaWNvbnNcIiApIHtcblx0XHRcdGZpcnN0ID0gdGhpcy5idXR0b25zLmZpcnN0KCkuZmluZCggXCIudWktaWNvblwiICk7XG5cdFx0XHR0aGlzLl9yZW1vdmVDbGFzcyggZmlyc3QsIG51bGwsIHRoaXMub3B0aW9ucy5pY29ucy51cCApO1xuXHRcdFx0dGhpcy5fYWRkQ2xhc3MoIGZpcnN0LCBudWxsLCB2YWx1ZS51cCApO1xuXHRcdFx0bGFzdCA9IHRoaXMuYnV0dG9ucy5sYXN0KCkuZmluZCggXCIudWktaWNvblwiICk7XG5cdFx0XHR0aGlzLl9yZW1vdmVDbGFzcyggbGFzdCwgbnVsbCwgdGhpcy5vcHRpb25zLmljb25zLmRvd24gKTtcblx0XHRcdHRoaXMuX2FkZENsYXNzKCBsYXN0LCBudWxsLCB2YWx1ZS5kb3duICk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fc3VwZXIoIGtleSwgdmFsdWUgKTtcblx0fSxcblxuXHRfc2V0T3B0aW9uRGlzYWJsZWQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR0aGlzLl9zdXBlciggdmFsdWUgKTtcblxuXHRcdHRoaXMuX3RvZ2dsZUNsYXNzKCB0aGlzLnVpU3Bpbm5lciwgbnVsbCwgXCJ1aS1zdGF0ZS1kaXNhYmxlZFwiLCAhIXZhbHVlICk7XG5cdFx0dGhpcy5lbGVtZW50LnByb3AoIFwiZGlzYWJsZWRcIiwgISF2YWx1ZSApO1xuXHRcdHRoaXMuYnV0dG9ucy5idXR0b24oIHZhbHVlID8gXCJkaXNhYmxlXCIgOiBcImVuYWJsZVwiICk7XG5cdH0sXG5cblx0X3NldE9wdGlvbnM6IHNwaW5uZXJNb2RpZmVyKCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0XHR0aGlzLl9zdXBlciggb3B0aW9ucyApO1xuXHR9ICksXG5cblx0X3BhcnNlOiBmdW5jdGlvbiggdmFsICkge1xuXHRcdGlmICggdHlwZW9mIHZhbCA9PT0gXCJzdHJpbmdcIiAmJiB2YWwgIT09IFwiXCIgKSB7XG5cdFx0XHR2YWwgPSB3aW5kb3cuR2xvYmFsaXplICYmIHRoaXMub3B0aW9ucy5udW1iZXJGb3JtYXQgP1xuXHRcdFx0XHRHbG9iYWxpemUucGFyc2VGbG9hdCggdmFsLCAxMCwgdGhpcy5vcHRpb25zLmN1bHR1cmUgKSA6ICt2YWw7XG5cdFx0fVxuXHRcdHJldHVybiB2YWwgPT09IFwiXCIgfHwgaXNOYU4oIHZhbCApID8gbnVsbCA6IHZhbDtcblx0fSxcblxuXHRfZm9ybWF0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gXCJcIiApIHtcblx0XHRcdHJldHVybiBcIlwiO1xuXHRcdH1cblx0XHRyZXR1cm4gd2luZG93Lkdsb2JhbGl6ZSAmJiB0aGlzLm9wdGlvbnMubnVtYmVyRm9ybWF0ID9cblx0XHRcdEdsb2JhbGl6ZS5mb3JtYXQoIHZhbHVlLCB0aGlzLm9wdGlvbnMubnVtYmVyRm9ybWF0LCB0aGlzLm9wdGlvbnMuY3VsdHVyZSApIDpcblx0XHRcdHZhbHVlO1xuXHR9LFxuXG5cdF9yZWZyZXNoOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmVsZW1lbnQuYXR0cigge1xuXHRcdFx0XCJhcmlhLXZhbHVlbWluXCI6IHRoaXMub3B0aW9ucy5taW4sXG5cdFx0XHRcImFyaWEtdmFsdWVtYXhcIjogdGhpcy5vcHRpb25zLm1heCxcblxuXHRcdFx0Ly8gVE9ETzogd2hhdCBzaG91bGQgd2UgZG8gd2l0aCB2YWx1ZXMgdGhhdCBjYW4ndCBiZSBwYXJzZWQ/XG5cdFx0XHRcImFyaWEtdmFsdWVub3dcIjogdGhpcy5fcGFyc2UoIHRoaXMuZWxlbWVudC52YWwoKSApXG5cdFx0fSApO1xuXHR9LFxuXG5cdGlzVmFsaWQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB2YWx1ZSA9IHRoaXMudmFsdWUoKTtcblxuXHRcdC8vIE51bGwgaXMgaW52YWxpZFxuXHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdmFsdWUgZ2V0cyBhZGp1c3RlZCwgaXQncyBpbnZhbGlkXG5cdFx0cmV0dXJuIHZhbHVlID09PSB0aGlzLl9hZGp1c3RWYWx1ZSggdmFsdWUgKTtcblx0fSxcblxuXHQvLyBVcGRhdGUgdGhlIHZhbHVlIHdpdGhvdXQgdHJpZ2dlcmluZyBjaGFuZ2Vcblx0X3ZhbHVlOiBmdW5jdGlvbiggdmFsdWUsIGFsbG93QW55ICkge1xuXHRcdHZhciBwYXJzZWQ7XG5cdFx0aWYgKCB2YWx1ZSAhPT0gXCJcIiApIHtcblx0XHRcdHBhcnNlZCA9IHRoaXMuX3BhcnNlKCB2YWx1ZSApO1xuXHRcdFx0aWYgKCBwYXJzZWQgIT09IG51bGwgKSB7XG5cdFx0XHRcdGlmICggIWFsbG93QW55ICkge1xuXHRcdFx0XHRcdHBhcnNlZCA9IHRoaXMuX2FkanVzdFZhbHVlKCBwYXJzZWQgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR2YWx1ZSA9IHRoaXMuX2Zvcm1hdCggcGFyc2VkICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHRoaXMuZWxlbWVudC52YWwoIHZhbHVlICk7XG5cdFx0dGhpcy5fcmVmcmVzaCgpO1xuXHR9LFxuXG5cdF9kZXN0cm95OiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmVsZW1lbnRcblx0XHRcdC5wcm9wKCBcImRpc2FibGVkXCIsIGZhbHNlIClcblx0XHRcdC5yZW1vdmVBdHRyKCBcImF1dG9jb21wbGV0ZSByb2xlIGFyaWEtdmFsdWVtaW4gYXJpYS12YWx1ZW1heCBhcmlhLXZhbHVlbm93XCIgKTtcblxuXHRcdHRoaXMudWlTcGlubmVyLnJlcGxhY2VXaXRoKCB0aGlzLmVsZW1lbnQgKTtcblx0fSxcblxuXHRzdGVwVXA6IHNwaW5uZXJNb2RpZmVyKCBmdW5jdGlvbiggc3RlcHMgKSB7XG5cdFx0dGhpcy5fc3RlcFVwKCBzdGVwcyApO1xuXHR9ICksXG5cdF9zdGVwVXA6IGZ1bmN0aW9uKCBzdGVwcyApIHtcblx0XHRpZiAoIHRoaXMuX3N0YXJ0KCkgKSB7XG5cdFx0XHR0aGlzLl9zcGluKCAoIHN0ZXBzIHx8IDEgKSAqIHRoaXMub3B0aW9ucy5zdGVwICk7XG5cdFx0XHR0aGlzLl9zdG9wKCk7XG5cdFx0fVxuXHR9LFxuXG5cdHN0ZXBEb3duOiBzcGlubmVyTW9kaWZlciggZnVuY3Rpb24oIHN0ZXBzICkge1xuXHRcdHRoaXMuX3N0ZXBEb3duKCBzdGVwcyApO1xuXHR9ICksXG5cdF9zdGVwRG93bjogZnVuY3Rpb24oIHN0ZXBzICkge1xuXHRcdGlmICggdGhpcy5fc3RhcnQoKSApIHtcblx0XHRcdHRoaXMuX3NwaW4oICggc3RlcHMgfHwgMSApICogLXRoaXMub3B0aW9ucy5zdGVwICk7XG5cdFx0XHR0aGlzLl9zdG9wKCk7XG5cdFx0fVxuXHR9LFxuXG5cdHBhZ2VVcDogc3Bpbm5lck1vZGlmZXIoIGZ1bmN0aW9uKCBwYWdlcyApIHtcblx0XHR0aGlzLl9zdGVwVXAoICggcGFnZXMgfHwgMSApICogdGhpcy5vcHRpb25zLnBhZ2UgKTtcblx0fSApLFxuXG5cdHBhZ2VEb3duOiBzcGlubmVyTW9kaWZlciggZnVuY3Rpb24oIHBhZ2VzICkge1xuXHRcdHRoaXMuX3N0ZXBEb3duKCAoIHBhZ2VzIHx8IDEgKSAqIHRoaXMub3B0aW9ucy5wYWdlICk7XG5cdH0gKSxcblxuXHR2YWx1ZTogZnVuY3Rpb24oIG5ld1ZhbCApIHtcblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuX3BhcnNlKCB0aGlzLmVsZW1lbnQudmFsKCkgKTtcblx0XHR9XG5cdFx0c3Bpbm5lck1vZGlmZXIoIHRoaXMuX3ZhbHVlICkuY2FsbCggdGhpcywgbmV3VmFsICk7XG5cdH0sXG5cblx0d2lkZ2V0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy51aVNwaW5uZXI7XG5cdH1cbn0gKTtcblxuLy8gREVQUkVDQVRFRFxuLy8gVE9ETzogc3dpdGNoIHJldHVybiBiYWNrIHRvIHdpZGdldCBkZWNsYXJhdGlvbiBhdCB0b3Agb2YgZmlsZSB3aGVuIHRoaXMgaXMgcmVtb3ZlZFxuaWYgKCAkLnVpQmFja0NvbXBhdCAhPT0gZmFsc2UgKSB7XG5cblx0Ly8gQmFja2NvbXBhdCBmb3Igc3Bpbm5lciBodG1sIGV4dGVuc2lvbiBwb2ludHNcblx0JC53aWRnZXQoIFwidWkuc3Bpbm5lclwiLCAkLnVpLnNwaW5uZXIsIHtcblx0XHRfZW5oYW5jZTogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLnVpU3Bpbm5lciA9IHRoaXMuZWxlbWVudFxuXHRcdFx0XHQuYXR0ciggXCJhdXRvY29tcGxldGVcIiwgXCJvZmZcIiApXG5cdFx0XHRcdC53cmFwKCB0aGlzLl91aVNwaW5uZXJIdG1sKCkgKVxuXHRcdFx0XHQucGFyZW50KClcblxuXHRcdFx0XHRcdC8vIEFkZCBidXR0b25zXG5cdFx0XHRcdFx0LmFwcGVuZCggdGhpcy5fYnV0dG9uSHRtbCgpICk7XG5cdFx0fSxcblx0XHRfdWlTcGlubmVySHRtbDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gXCI8c3Bhbj5cIjtcblx0XHR9LFxuXG5cdFx0X2J1dHRvbkh0bWw6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFwiPGE+PC9hPjxhPjwvYT5cIjtcblx0XHR9XG5cdH0gKTtcbn1cblxudmFyIHdpZGdldHNTcGlubmVyID0gJC51aS5zcGlubmVyO1xuXG5cbi8qIVxuICogalF1ZXJ5IFVJIFRhYnMgMS4xMi4xXG4gKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqL1xuXG4vLz4+bGFiZWw6IFRhYnNcbi8vPj5ncm91cDogV2lkZ2V0c1xuLy8+PmRlc2NyaXB0aW9uOiBUcmFuc2Zvcm1zIGEgc2V0IG9mIGNvbnRhaW5lciBlbGVtZW50cyBpbnRvIGEgdGFiIHN0cnVjdHVyZS5cbi8vPj5kb2NzOiBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS90YWJzL1xuLy8+PmRlbW9zOiBodHRwOi8vanF1ZXJ5dWkuY29tL3RhYnMvXG4vLz4+Y3NzLnN0cnVjdHVyZTogLi4vLi4vdGhlbWVzL2Jhc2UvY29yZS5jc3Ncbi8vPj5jc3Muc3RydWN0dXJlOiAuLi8uLi90aGVtZXMvYmFzZS90YWJzLmNzc1xuLy8+PmNzcy50aGVtZTogLi4vLi4vdGhlbWVzL2Jhc2UvdGhlbWUuY3NzXG5cblxuXG4kLndpZGdldCggXCJ1aS50YWJzXCIsIHtcblx0dmVyc2lvbjogXCIxLjEyLjFcIixcblx0ZGVsYXk6IDMwMCxcblx0b3B0aW9uczoge1xuXHRcdGFjdGl2ZTogbnVsbCxcblx0XHRjbGFzc2VzOiB7XG5cdFx0XHRcInVpLXRhYnNcIjogXCJ1aS1jb3JuZXItYWxsXCIsXG5cdFx0XHRcInVpLXRhYnMtbmF2XCI6IFwidWktY29ybmVyLWFsbFwiLFxuXHRcdFx0XCJ1aS10YWJzLXBhbmVsXCI6IFwidWktY29ybmVyLWJvdHRvbVwiLFxuXHRcdFx0XCJ1aS10YWJzLXRhYlwiOiBcInVpLWNvcm5lci10b3BcIlxuXHRcdH0sXG5cdFx0Y29sbGFwc2libGU6IGZhbHNlLFxuXHRcdGV2ZW50OiBcImNsaWNrXCIsXG5cdFx0aGVpZ2h0U3R5bGU6IFwiY29udGVudFwiLFxuXHRcdGhpZGU6IG51bGwsXG5cdFx0c2hvdzogbnVsbCxcblxuXHRcdC8vIENhbGxiYWNrc1xuXHRcdGFjdGl2YXRlOiBudWxsLFxuXHRcdGJlZm9yZUFjdGl2YXRlOiBudWxsLFxuXHRcdGJlZm9yZUxvYWQ6IG51bGwsXG5cdFx0bG9hZDogbnVsbFxuXHR9LFxuXG5cdF9pc0xvY2FsOiAoIGZ1bmN0aW9uKCkge1xuXHRcdHZhciByaGFzaCA9IC8jLiokLztcblxuXHRcdHJldHVybiBmdW5jdGlvbiggYW5jaG9yICkge1xuXHRcdFx0dmFyIGFuY2hvclVybCwgbG9jYXRpb25Vcmw7XG5cblx0XHRcdGFuY2hvclVybCA9IGFuY2hvci5ocmVmLnJlcGxhY2UoIHJoYXNoLCBcIlwiICk7XG5cdFx0XHRsb2NhdGlvblVybCA9IGxvY2F0aW9uLmhyZWYucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblxuXHRcdFx0Ly8gRGVjb2RpbmcgbWF5IHRocm93IGFuIGVycm9yIGlmIHRoZSBVUkwgaXNuJ3QgVVRGLTggKCM5NTE4KVxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0YW5jaG9yVXJsID0gZGVjb2RlVVJJQ29tcG9uZW50KCBhbmNob3JVcmwgKTtcblx0XHRcdH0gY2F0Y2ggKCBlcnJvciApIHt9XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRsb2NhdGlvblVybCA9IGRlY29kZVVSSUNvbXBvbmVudCggbG9jYXRpb25VcmwgKTtcblx0XHRcdH0gY2F0Y2ggKCBlcnJvciApIHt9XG5cblx0XHRcdHJldHVybiBhbmNob3IuaGFzaC5sZW5ndGggPiAxICYmIGFuY2hvclVybCA9PT0gbG9jYXRpb25Vcmw7XG5cdFx0fTtcblx0fSApKCksXG5cblx0X2NyZWF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0b3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuXHRcdHRoaXMucnVubmluZyA9IGZhbHNlO1xuXG5cdFx0dGhpcy5fYWRkQ2xhc3MoIFwidWktdGFic1wiLCBcInVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudFwiICk7XG5cdFx0dGhpcy5fdG9nZ2xlQ2xhc3MoIFwidWktdGFicy1jb2xsYXBzaWJsZVwiLCBudWxsLCBvcHRpb25zLmNvbGxhcHNpYmxlICk7XG5cblx0XHR0aGlzLl9wcm9jZXNzVGFicygpO1xuXHRcdG9wdGlvbnMuYWN0aXZlID0gdGhpcy5faW5pdGlhbEFjdGl2ZSgpO1xuXG5cdFx0Ly8gVGFrZSBkaXNhYmxpbmcgdGFicyB2aWEgY2xhc3MgYXR0cmlidXRlIGZyb20gSFRNTFxuXHRcdC8vIGludG8gYWNjb3VudCBhbmQgdXBkYXRlIG9wdGlvbiBwcm9wZXJseS5cblx0XHRpZiAoICQuaXNBcnJheSggb3B0aW9ucy5kaXNhYmxlZCApICkge1xuXHRcdFx0b3B0aW9ucy5kaXNhYmxlZCA9ICQudW5pcXVlKCBvcHRpb25zLmRpc2FibGVkLmNvbmNhdChcblx0XHRcdFx0JC5tYXAoIHRoaXMudGFicy5maWx0ZXIoIFwiLnVpLXN0YXRlLWRpc2FibGVkXCIgKSwgZnVuY3Rpb24oIGxpICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGF0LnRhYnMuaW5kZXgoIGxpICk7XG5cdFx0XHRcdH0gKVxuXHRcdFx0KSApLnNvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBDaGVjayBmb3IgbGVuZ3RoIGF2b2lkcyBlcnJvciB3aGVuIGluaXRpYWxpemluZyBlbXB0eSBsaXN0XG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuYWN0aXZlICE9PSBmYWxzZSAmJiB0aGlzLmFuY2hvcnMubGVuZ3RoICkge1xuXHRcdFx0dGhpcy5hY3RpdmUgPSB0aGlzLl9maW5kQWN0aXZlKCBvcHRpb25zLmFjdGl2ZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmFjdGl2ZSA9ICQoKTtcblx0XHR9XG5cblx0XHR0aGlzLl9yZWZyZXNoKCk7XG5cblx0XHRpZiAoIHRoaXMuYWN0aXZlLmxlbmd0aCApIHtcblx0XHRcdHRoaXMubG9hZCggb3B0aW9ucy5hY3RpdmUgKTtcblx0XHR9XG5cdH0sXG5cblx0X2luaXRpYWxBY3RpdmU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBhY3RpdmUgPSB0aGlzLm9wdGlvbnMuYWN0aXZlLFxuXHRcdFx0Y29sbGFwc2libGUgPSB0aGlzLm9wdGlvbnMuY29sbGFwc2libGUsXG5cdFx0XHRsb2NhdGlvbkhhc2ggPSBsb2NhdGlvbi5oYXNoLnN1YnN0cmluZyggMSApO1xuXG5cdFx0aWYgKCBhY3RpdmUgPT09IG51bGwgKSB7XG5cblx0XHRcdC8vIGNoZWNrIHRoZSBmcmFnbWVudCBpZGVudGlmaWVyIGluIHRoZSBVUkxcblx0XHRcdGlmICggbG9jYXRpb25IYXNoICkge1xuXHRcdFx0XHR0aGlzLnRhYnMuZWFjaCggZnVuY3Rpb24oIGksIHRhYiApIHtcblx0XHRcdFx0XHRpZiAoICQoIHRhYiApLmF0dHIoIFwiYXJpYS1jb250cm9sc1wiICkgPT09IGxvY2F0aW9uSGFzaCApIHtcblx0XHRcdFx0XHRcdGFjdGl2ZSA9IGk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENoZWNrIGZvciBhIHRhYiBtYXJrZWQgYWN0aXZlIHZpYSBhIGNsYXNzXG5cdFx0XHRpZiAoIGFjdGl2ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0YWN0aXZlID0gdGhpcy50YWJzLmluZGV4KCB0aGlzLnRhYnMuZmlsdGVyKCBcIi51aS10YWJzLWFjdGl2ZVwiICkgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTm8gYWN0aXZlIHRhYiwgc2V0IHRvIGZhbHNlXG5cdFx0XHRpZiAoIGFjdGl2ZSA9PT0gbnVsbCB8fCBhY3RpdmUgPT09IC0xICkge1xuXHRcdFx0XHRhY3RpdmUgPSB0aGlzLnRhYnMubGVuZ3RoID8gMCA6IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBudW1iZXJzOiBuZWdhdGl2ZSwgb3V0IG9mIHJhbmdlXG5cdFx0aWYgKCBhY3RpdmUgIT09IGZhbHNlICkge1xuXHRcdFx0YWN0aXZlID0gdGhpcy50YWJzLmluZGV4KCB0aGlzLnRhYnMuZXEoIGFjdGl2ZSApICk7XG5cdFx0XHRpZiAoIGFjdGl2ZSA9PT0gLTEgKSB7XG5cdFx0XHRcdGFjdGl2ZSA9IGNvbGxhcHNpYmxlID8gZmFsc2UgOiAwO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIERvbid0IGFsbG93IGNvbGxhcHNpYmxlOiBmYWxzZSBhbmQgYWN0aXZlOiBmYWxzZVxuXHRcdGlmICggIWNvbGxhcHNpYmxlICYmIGFjdGl2ZSA9PT0gZmFsc2UgJiYgdGhpcy5hbmNob3JzLmxlbmd0aCApIHtcblx0XHRcdGFjdGl2ZSA9IDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjdGl2ZTtcblx0fSxcblxuXHRfZ2V0Q3JlYXRlRXZlbnREYXRhOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0dGFiOiB0aGlzLmFjdGl2ZSxcblx0XHRcdHBhbmVsOiAhdGhpcy5hY3RpdmUubGVuZ3RoID8gJCgpIDogdGhpcy5fZ2V0UGFuZWxGb3JUYWIoIHRoaXMuYWN0aXZlIClcblx0XHR9O1xuXHR9LFxuXG5cdF90YWJLZXlkb3duOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGZvY3VzZWRUYWIgPSAkKCAkLnVpLnNhZmVBY3RpdmVFbGVtZW50KCB0aGlzLmRvY3VtZW50WyAwIF0gKSApLmNsb3Nlc3QoIFwibGlcIiApLFxuXHRcdFx0c2VsZWN0ZWRJbmRleCA9IHRoaXMudGFicy5pbmRleCggZm9jdXNlZFRhYiApLFxuXHRcdFx0Z29pbmdGb3J3YXJkID0gdHJ1ZTtcblxuXHRcdGlmICggdGhpcy5faGFuZGxlUGFnZU5hdiggZXZlbnQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRzd2l0Y2ggKCBldmVudC5rZXlDb2RlICkge1xuXHRcdGNhc2UgJC51aS5rZXlDb2RlLlJJR0hUOlxuXHRcdGNhc2UgJC51aS5rZXlDb2RlLkRPV046XG5cdFx0XHRzZWxlY3RlZEluZGV4Kys7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICQudWkua2V5Q29kZS5VUDpcblx0XHRjYXNlICQudWkua2V5Q29kZS5MRUZUOlxuXHRcdFx0Z29pbmdGb3J3YXJkID0gZmFsc2U7XG5cdFx0XHRzZWxlY3RlZEluZGV4LS07XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICQudWkua2V5Q29kZS5FTkQ6XG5cdFx0XHRzZWxlY3RlZEluZGV4ID0gdGhpcy5hbmNob3JzLmxlbmd0aCAtIDE7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICQudWkua2V5Q29kZS5IT01FOlxuXHRcdFx0c2VsZWN0ZWRJbmRleCA9IDA7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICQudWkua2V5Q29kZS5TUEFDRTpcblxuXHRcdFx0Ly8gQWN0aXZhdGUgb25seSwgbm8gY29sbGFwc2luZ1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdGNsZWFyVGltZW91dCggdGhpcy5hY3RpdmF0aW5nICk7XG5cdFx0XHR0aGlzLl9hY3RpdmF0ZSggc2VsZWN0ZWRJbmRleCApO1xuXHRcdFx0cmV0dXJuO1xuXHRcdGNhc2UgJC51aS5rZXlDb2RlLkVOVEVSOlxuXG5cdFx0XHQvLyBUb2dnbGUgKGNhbmNlbCBkZWxheWVkIGFjdGl2YXRpb24sIGFsbG93IGNvbGxhcHNpbmcpXG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0Y2xlYXJUaW1lb3V0KCB0aGlzLmFjdGl2YXRpbmcgKTtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHdlIHNob3VsZCBjb2xsYXBzZSBvciBhY3RpdmF0ZVxuXHRcdFx0dGhpcy5fYWN0aXZhdGUoIHNlbGVjdGVkSW5kZXggPT09IHRoaXMub3B0aW9ucy5hY3RpdmUgPyBmYWxzZSA6IHNlbGVjdGVkSW5kZXggKTtcblx0XHRcdHJldHVybjtcblx0XHRkZWZhdWx0OlxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZvY3VzIHRoZSBhcHByb3ByaWF0ZSB0YWIsIGJhc2VkIG9uIHdoaWNoIGtleSB3YXMgcHJlc3NlZFxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0Y2xlYXJUaW1lb3V0KCB0aGlzLmFjdGl2YXRpbmcgKTtcblx0XHRzZWxlY3RlZEluZGV4ID0gdGhpcy5fZm9jdXNOZXh0VGFiKCBzZWxlY3RlZEluZGV4LCBnb2luZ0ZvcndhcmQgKTtcblxuXHRcdC8vIE5hdmlnYXRpbmcgd2l0aCBjb250cm9sL2NvbW1hbmQga2V5IHdpbGwgcHJldmVudCBhdXRvbWF0aWMgYWN0aXZhdGlvblxuXHRcdGlmICggIWV2ZW50LmN0cmxLZXkgJiYgIWV2ZW50Lm1ldGFLZXkgKSB7XG5cblx0XHRcdC8vIFVwZGF0ZSBhcmlhLXNlbGVjdGVkIGltbWVkaWF0ZWx5IHNvIHRoYXQgQVQgdGhpbmsgdGhlIHRhYiBpcyBhbHJlYWR5IHNlbGVjdGVkLlxuXHRcdFx0Ly8gT3RoZXJ3aXNlIEFUIG1heSBjb25mdXNlIHRoZSB1c2VyIGJ5IHN0YXRpbmcgdGhhdCB0aGV5IG5lZWQgdG8gYWN0aXZhdGUgdGhlIHRhYixcblx0XHRcdC8vIGJ1dCB0aGUgdGFiIHdpbGwgYWxyZWFkeSBiZSBhY3RpdmF0ZWQgYnkgdGhlIHRpbWUgdGhlIGFubm91bmNlbWVudCBmaW5pc2hlcy5cblx0XHRcdGZvY3VzZWRUYWIuYXR0ciggXCJhcmlhLXNlbGVjdGVkXCIsIFwiZmFsc2VcIiApO1xuXHRcdFx0dGhpcy50YWJzLmVxKCBzZWxlY3RlZEluZGV4ICkuYXR0ciggXCJhcmlhLXNlbGVjdGVkXCIsIFwidHJ1ZVwiICk7XG5cblx0XHRcdHRoaXMuYWN0aXZhdGluZyA9IHRoaXMuX2RlbGF5KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dGhpcy5vcHRpb24oIFwiYWN0aXZlXCIsIHNlbGVjdGVkSW5kZXggKTtcblx0XHRcdH0sIHRoaXMuZGVsYXkgKTtcblx0XHR9XG5cdH0sXG5cblx0X3BhbmVsS2V5ZG93bjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdGlmICggdGhpcy5faGFuZGxlUGFnZU5hdiggZXZlbnQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDdHJsK3VwIG1vdmVzIGZvY3VzIHRvIHRoZSBjdXJyZW50IHRhYlxuXHRcdGlmICggZXZlbnQuY3RybEtleSAmJiBldmVudC5rZXlDb2RlID09PSAkLnVpLmtleUNvZGUuVVAgKSB7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0dGhpcy5hY3RpdmUudHJpZ2dlciggXCJmb2N1c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIEFsdCtwYWdlIHVwL2Rvd24gbW92ZXMgZm9jdXMgdG8gdGhlIHByZXZpb3VzL25leHQgdGFiIChhbmQgYWN0aXZhdGVzKVxuXHRfaGFuZGxlUGFnZU5hdjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdGlmICggZXZlbnQuYWx0S2V5ICYmIGV2ZW50LmtleUNvZGUgPT09ICQudWkua2V5Q29kZS5QQUdFX1VQICkge1xuXHRcdFx0dGhpcy5fYWN0aXZhdGUoIHRoaXMuX2ZvY3VzTmV4dFRhYiggdGhpcy5vcHRpb25zLmFjdGl2ZSAtIDEsIGZhbHNlICkgKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRpZiAoIGV2ZW50LmFsdEtleSAmJiBldmVudC5rZXlDb2RlID09PSAkLnVpLmtleUNvZGUuUEFHRV9ET1dOICkge1xuXHRcdFx0dGhpcy5fYWN0aXZhdGUoIHRoaXMuX2ZvY3VzTmV4dFRhYiggdGhpcy5vcHRpb25zLmFjdGl2ZSArIDEsIHRydWUgKSApO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHR9LFxuXG5cdF9maW5kTmV4dFRhYjogZnVuY3Rpb24oIGluZGV4LCBnb2luZ0ZvcndhcmQgKSB7XG5cdFx0dmFyIGxhc3RUYWJJbmRleCA9IHRoaXMudGFicy5sZW5ndGggLSAxO1xuXG5cdFx0ZnVuY3Rpb24gY29uc3RyYWluKCkge1xuXHRcdFx0aWYgKCBpbmRleCA+IGxhc3RUYWJJbmRleCApIHtcblx0XHRcdFx0aW5kZXggPSAwO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBpbmRleCA8IDAgKSB7XG5cdFx0XHRcdGluZGV4ID0gbGFzdFRhYkluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGluZGV4O1xuXHRcdH1cblxuXHRcdHdoaWxlICggJC5pbkFycmF5KCBjb25zdHJhaW4oKSwgdGhpcy5vcHRpb25zLmRpc2FibGVkICkgIT09IC0xICkge1xuXHRcdFx0aW5kZXggPSBnb2luZ0ZvcndhcmQgPyBpbmRleCArIDEgOiBpbmRleCAtIDE7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGluZGV4O1xuXHR9LFxuXG5cdF9mb2N1c05leHRUYWI6IGZ1bmN0aW9uKCBpbmRleCwgZ29pbmdGb3J3YXJkICkge1xuXHRcdGluZGV4ID0gdGhpcy5fZmluZE5leHRUYWIoIGluZGV4LCBnb2luZ0ZvcndhcmQgKTtcblx0XHR0aGlzLnRhYnMuZXEoIGluZGV4ICkudHJpZ2dlciggXCJmb2N1c1wiICk7XG5cdFx0cmV0dXJuIGluZGV4O1xuXHR9LFxuXG5cdF9zZXRPcHRpb246IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdGlmICgga2V5ID09PSBcImFjdGl2ZVwiICkge1xuXG5cdFx0XHQvLyBfYWN0aXZhdGUoKSB3aWxsIGhhbmRsZSBpbnZhbGlkIHZhbHVlcyBhbmQgdXBkYXRlIHRoaXMub3B0aW9uc1xuXHRcdFx0dGhpcy5fYWN0aXZhdGUoIHZhbHVlICk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5fc3VwZXIoIGtleSwgdmFsdWUgKTtcblxuXHRcdGlmICgga2V5ID09PSBcImNvbGxhcHNpYmxlXCIgKSB7XG5cdFx0XHR0aGlzLl90b2dnbGVDbGFzcyggXCJ1aS10YWJzLWNvbGxhcHNpYmxlXCIsIG51bGwsIHZhbHVlICk7XG5cblx0XHRcdC8vIFNldHRpbmcgY29sbGFwc2libGU6IGZhbHNlIHdoaWxlIGNvbGxhcHNlZDsgb3BlbiBmaXJzdCBwYW5lbFxuXHRcdFx0aWYgKCAhdmFsdWUgJiYgdGhpcy5vcHRpb25zLmFjdGl2ZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdHRoaXMuX2FjdGl2YXRlKCAwICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgPT09IFwiZXZlbnRcIiApIHtcblx0XHRcdHRoaXMuX3NldHVwRXZlbnRzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ID09PSBcImhlaWdodFN0eWxlXCIgKSB7XG5cdFx0XHR0aGlzLl9zZXR1cEhlaWdodFN0eWxlKCB2YWx1ZSApO1xuXHRcdH1cblx0fSxcblxuXHRfc2FuaXRpemVTZWxlY3RvcjogZnVuY3Rpb24oIGhhc2ggKSB7XG5cdFx0cmV0dXJuIGhhc2ggPyBoYXNoLnJlcGxhY2UoIC9bIVwiJCUmJygpKissLlxcLzo7PD0+P0BcXFtcXF1cXF5ge3x9fl0vZywgXCJcXFxcJCZcIiApIDogXCJcIjtcblx0fSxcblxuXHRyZWZyZXNoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcblx0XHRcdGxpcyA9IHRoaXMudGFibGlzdC5jaGlsZHJlbiggXCI6aGFzKGFbaHJlZl0pXCIgKTtcblxuXHRcdC8vIEdldCBkaXNhYmxlZCB0YWJzIGZyb20gY2xhc3MgYXR0cmlidXRlIGZyb20gSFRNTFxuXHRcdC8vIHRoaXMgd2lsbCBnZXQgY29udmVydGVkIHRvIGEgYm9vbGVhbiBpZiBuZWVkZWQgaW4gX3JlZnJlc2goKVxuXHRcdG9wdGlvbnMuZGlzYWJsZWQgPSAkLm1hcCggbGlzLmZpbHRlciggXCIudWktc3RhdGUtZGlzYWJsZWRcIiApLCBmdW5jdGlvbiggdGFiICkge1xuXHRcdFx0cmV0dXJuIGxpcy5pbmRleCggdGFiICk7XG5cdFx0fSApO1xuXG5cdFx0dGhpcy5fcHJvY2Vzc1RhYnMoKTtcblxuXHRcdC8vIFdhcyBjb2xsYXBzZWQgb3Igbm8gdGFic1xuXHRcdGlmICggb3B0aW9ucy5hY3RpdmUgPT09IGZhbHNlIHx8ICF0aGlzLmFuY2hvcnMubGVuZ3RoICkge1xuXHRcdFx0b3B0aW9ucy5hY3RpdmUgPSBmYWxzZTtcblx0XHRcdHRoaXMuYWN0aXZlID0gJCgpO1xuXG5cdFx0Ly8gd2FzIGFjdGl2ZSwgYnV0IGFjdGl2ZSB0YWIgaXMgZ29uZVxuXHRcdH0gZWxzZSBpZiAoIHRoaXMuYWN0aXZlLmxlbmd0aCAmJiAhJC5jb250YWlucyggdGhpcy50YWJsaXN0WyAwIF0sIHRoaXMuYWN0aXZlWyAwIF0gKSApIHtcblxuXHRcdFx0Ly8gYWxsIHJlbWFpbmluZyB0YWJzIGFyZSBkaXNhYmxlZFxuXHRcdFx0aWYgKCB0aGlzLnRhYnMubGVuZ3RoID09PSBvcHRpb25zLmRpc2FibGVkLmxlbmd0aCApIHtcblx0XHRcdFx0b3B0aW9ucy5hY3RpdmUgPSBmYWxzZTtcblx0XHRcdFx0dGhpcy5hY3RpdmUgPSAkKCk7XG5cblx0XHRcdC8vIGFjdGl2YXRlIHByZXZpb3VzIHRhYlxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5fYWN0aXZhdGUoIHRoaXMuX2ZpbmROZXh0VGFiKCBNYXRoLm1heCggMCwgb3B0aW9ucy5hY3RpdmUgLSAxICksIGZhbHNlICkgKTtcblx0XHRcdH1cblxuXHRcdC8vIHdhcyBhY3RpdmUsIGFjdGl2ZSB0YWIgc3RpbGwgZXhpc3RzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gbWFrZSBzdXJlIGFjdGl2ZSBpbmRleCBpcyBjb3JyZWN0XG5cdFx0XHRvcHRpb25zLmFjdGl2ZSA9IHRoaXMudGFicy5pbmRleCggdGhpcy5hY3RpdmUgKTtcblx0XHR9XG5cblx0XHR0aGlzLl9yZWZyZXNoKCk7XG5cdH0sXG5cblx0X3JlZnJlc2g6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuX3NldE9wdGlvbkRpc2FibGVkKCB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgKTtcblx0XHR0aGlzLl9zZXR1cEV2ZW50cyggdGhpcy5vcHRpb25zLmV2ZW50ICk7XG5cdFx0dGhpcy5fc2V0dXBIZWlnaHRTdHlsZSggdGhpcy5vcHRpb25zLmhlaWdodFN0eWxlICk7XG5cblx0XHR0aGlzLnRhYnMubm90KCB0aGlzLmFjdGl2ZSApLmF0dHIoIHtcblx0XHRcdFwiYXJpYS1zZWxlY3RlZFwiOiBcImZhbHNlXCIsXG5cdFx0XHRcImFyaWEtZXhwYW5kZWRcIjogXCJmYWxzZVwiLFxuXHRcdFx0dGFiSW5kZXg6IC0xXG5cdFx0fSApO1xuXHRcdHRoaXMucGFuZWxzLm5vdCggdGhpcy5fZ2V0UGFuZWxGb3JUYWIoIHRoaXMuYWN0aXZlICkgKVxuXHRcdFx0LmhpZGUoKVxuXHRcdFx0LmF0dHIoIHtcblx0XHRcdFx0XCJhcmlhLWhpZGRlblwiOiBcInRydWVcIlxuXHRcdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIG9uZSB0YWIgaXMgaW4gdGhlIHRhYiBvcmRlclxuXHRcdGlmICggIXRoaXMuYWN0aXZlLmxlbmd0aCApIHtcblx0XHRcdHRoaXMudGFicy5lcSggMCApLmF0dHIoIFwidGFiSW5kZXhcIiwgMCApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmFjdGl2ZVxuXHRcdFx0XHQuYXR0cigge1xuXHRcdFx0XHRcdFwiYXJpYS1zZWxlY3RlZFwiOiBcInRydWVcIixcblx0XHRcdFx0XHRcImFyaWEtZXhwYW5kZWRcIjogXCJ0cnVlXCIsXG5cdFx0XHRcdFx0dGFiSW5kZXg6IDBcblx0XHRcdFx0fSApO1xuXHRcdFx0dGhpcy5fYWRkQ2xhc3MoIHRoaXMuYWN0aXZlLCBcInVpLXRhYnMtYWN0aXZlXCIsIFwidWktc3RhdGUtYWN0aXZlXCIgKTtcblx0XHRcdHRoaXMuX2dldFBhbmVsRm9yVGFiKCB0aGlzLmFjdGl2ZSApXG5cdFx0XHRcdC5zaG93KClcblx0XHRcdFx0LmF0dHIoIHtcblx0XHRcdFx0XHRcImFyaWEtaGlkZGVuXCI6IFwiZmFsc2VcIlxuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXHR9LFxuXG5cdF9wcm9jZXNzVGFiczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0cHJldlRhYnMgPSB0aGlzLnRhYnMsXG5cdFx0XHRwcmV2QW5jaG9ycyA9IHRoaXMuYW5jaG9ycyxcblx0XHRcdHByZXZQYW5lbHMgPSB0aGlzLnBhbmVscztcblxuXHRcdHRoaXMudGFibGlzdCA9IHRoaXMuX2dldExpc3QoKS5hdHRyKCBcInJvbGVcIiwgXCJ0YWJsaXN0XCIgKTtcblx0XHR0aGlzLl9hZGRDbGFzcyggdGhpcy50YWJsaXN0LCBcInVpLXRhYnMtbmF2XCIsXG5cdFx0XHRcInVpLWhlbHBlci1yZXNldCB1aS1oZWxwZXItY2xlYXJmaXggdWktd2lkZ2V0LWhlYWRlclwiICk7XG5cblx0XHQvLyBQcmV2ZW50IHVzZXJzIGZyb20gZm9jdXNpbmcgZGlzYWJsZWQgdGFicyB2aWEgY2xpY2tcblx0XHR0aGlzLnRhYmxpc3Rcblx0XHRcdC5vbiggXCJtb3VzZWRvd25cIiArIHRoaXMuZXZlbnROYW1lc3BhY2UsIFwiPiBsaVwiLCBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdGlmICggJCggdGhpcyApLmlzKCBcIi51aS1zdGF0ZS1kaXNhYmxlZFwiICkgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5XG5cdFx0XHQvLyBQcmV2ZW50aW5nIHRoZSBkZWZhdWx0IGFjdGlvbiBpbiBtb3VzZWRvd24gZG9lc24ndCBwcmV2ZW50IElFXG5cdFx0XHQvLyBmcm9tIGZvY3VzaW5nIHRoZSBlbGVtZW50LCBzbyBpZiB0aGUgYW5jaG9yIGdldHMgZm9jdXNlZCwgYmx1ci5cblx0XHRcdC8vIFdlIGRvbid0IGhhdmUgdG8gd29ycnkgYWJvdXQgZm9jdXNpbmcgdGhlIHByZXZpb3VzbHkgZm9jdXNlZFxuXHRcdFx0Ly8gZWxlbWVudCBzaW5jZSBjbGlja2luZyBvbiBhIG5vbi1mb2N1c2FibGUgZWxlbWVudCBzaG91bGQgZm9jdXNcblx0XHRcdC8vIHRoZSBib2R5IGFueXdheS5cblx0XHRcdC5vbiggXCJmb2N1c1wiICsgdGhpcy5ldmVudE5hbWVzcGFjZSwgXCIudWktdGFicy1hbmNob3JcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggJCggdGhpcyApLmNsb3Nlc3QoIFwibGlcIiApLmlzKCBcIi51aS1zdGF0ZS1kaXNhYmxlZFwiICkgKSB7XG5cdFx0XHRcdFx0dGhpcy5ibHVyKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblxuXHRcdHRoaXMudGFicyA9IHRoaXMudGFibGlzdC5maW5kKCBcIj4gbGk6aGFzKGFbaHJlZl0pXCIgKVxuXHRcdFx0LmF0dHIoIHtcblx0XHRcdFx0cm9sZTogXCJ0YWJcIixcblx0XHRcdFx0dGFiSW5kZXg6IC0xXG5cdFx0XHR9ICk7XG5cdFx0dGhpcy5fYWRkQ2xhc3MoIHRoaXMudGFicywgXCJ1aS10YWJzLXRhYlwiLCBcInVpLXN0YXRlLWRlZmF1bHRcIiApO1xuXG5cdFx0dGhpcy5hbmNob3JzID0gdGhpcy50YWJzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gJCggXCJhXCIsIHRoaXMgKVsgMCBdO1xuXHRcdH0gKVxuXHRcdFx0LmF0dHIoIHtcblx0XHRcdFx0cm9sZTogXCJwcmVzZW50YXRpb25cIixcblx0XHRcdFx0dGFiSW5kZXg6IC0xXG5cdFx0XHR9ICk7XG5cdFx0dGhpcy5fYWRkQ2xhc3MoIHRoaXMuYW5jaG9ycywgXCJ1aS10YWJzLWFuY2hvclwiICk7XG5cblx0XHR0aGlzLnBhbmVscyA9ICQoKTtcblxuXHRcdHRoaXMuYW5jaG9ycy5lYWNoKCBmdW5jdGlvbiggaSwgYW5jaG9yICkge1xuXHRcdFx0dmFyIHNlbGVjdG9yLCBwYW5lbCwgcGFuZWxJZCxcblx0XHRcdFx0YW5jaG9ySWQgPSAkKCBhbmNob3IgKS51bmlxdWVJZCgpLmF0dHIoIFwiaWRcIiApLFxuXHRcdFx0XHR0YWIgPSAkKCBhbmNob3IgKS5jbG9zZXN0KCBcImxpXCIgKSxcblx0XHRcdFx0b3JpZ2luYWxBcmlhQ29udHJvbHMgPSB0YWIuYXR0ciggXCJhcmlhLWNvbnRyb2xzXCIgKTtcblxuXHRcdFx0Ly8gSW5saW5lIHRhYlxuXHRcdFx0aWYgKCB0aGF0Ll9pc0xvY2FsKCBhbmNob3IgKSApIHtcblx0XHRcdFx0c2VsZWN0b3IgPSBhbmNob3IuaGFzaDtcblx0XHRcdFx0cGFuZWxJZCA9IHNlbGVjdG9yLnN1YnN0cmluZyggMSApO1xuXHRcdFx0XHRwYW5lbCA9IHRoYXQuZWxlbWVudC5maW5kKCB0aGF0Ll9zYW5pdGl6ZVNlbGVjdG9yKCBzZWxlY3RvciApICk7XG5cblx0XHRcdC8vIHJlbW90ZSB0YWJcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlIHRhYiBkb2Vzbid0IGFscmVhZHkgaGF2ZSBhcmlhLWNvbnRyb2xzLFxuXHRcdFx0XHQvLyBnZW5lcmF0ZSBhbiBpZCBieSB1c2luZyBhIHRocm93LWF3YXkgZWxlbWVudFxuXHRcdFx0XHRwYW5lbElkID0gdGFiLmF0dHIoIFwiYXJpYS1jb250cm9sc1wiICkgfHwgJCgge30gKS51bmlxdWVJZCgpWyAwIF0uaWQ7XG5cdFx0XHRcdHNlbGVjdG9yID0gXCIjXCIgKyBwYW5lbElkO1xuXHRcdFx0XHRwYW5lbCA9IHRoYXQuZWxlbWVudC5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0XHRpZiAoICFwYW5lbC5sZW5ndGggKSB7XG5cdFx0XHRcdFx0cGFuZWwgPSB0aGF0Ll9jcmVhdGVQYW5lbCggcGFuZWxJZCApO1xuXHRcdFx0XHRcdHBhbmVsLmluc2VydEFmdGVyKCB0aGF0LnBhbmVsc1sgaSAtIDEgXSB8fCB0aGF0LnRhYmxpc3QgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRwYW5lbC5hdHRyKCBcImFyaWEtbGl2ZVwiLCBcInBvbGl0ZVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggcGFuZWwubGVuZ3RoICkge1xuXHRcdFx0XHR0aGF0LnBhbmVscyA9IHRoYXQucGFuZWxzLmFkZCggcGFuZWwgKTtcblx0XHRcdH1cblx0XHRcdGlmICggb3JpZ2luYWxBcmlhQ29udHJvbHMgKSB7XG5cdFx0XHRcdHRhYi5kYXRhKCBcInVpLXRhYnMtYXJpYS1jb250cm9sc1wiLCBvcmlnaW5hbEFyaWFDb250cm9scyApO1xuXHRcdFx0fVxuXHRcdFx0dGFiLmF0dHIoIHtcblx0XHRcdFx0XCJhcmlhLWNvbnRyb2xzXCI6IHBhbmVsSWQsXG5cdFx0XHRcdFwiYXJpYS1sYWJlbGxlZGJ5XCI6IGFuY2hvcklkXG5cdFx0XHR9ICk7XG5cdFx0XHRwYW5lbC5hdHRyKCBcImFyaWEtbGFiZWxsZWRieVwiLCBhbmNob3JJZCApO1xuXHRcdH0gKTtcblxuXHRcdHRoaXMucGFuZWxzLmF0dHIoIFwicm9sZVwiLCBcInRhYnBhbmVsXCIgKTtcblx0XHR0aGlzLl9hZGRDbGFzcyggdGhpcy5wYW5lbHMsIFwidWktdGFicy1wYW5lbFwiLCBcInVpLXdpZGdldC1jb250ZW50XCIgKTtcblxuXHRcdC8vIEF2b2lkIG1lbW9yeSBsZWFrcyAoIzEwMDU2KVxuXHRcdGlmICggcHJldlRhYnMgKSB7XG5cdFx0XHR0aGlzLl9vZmYoIHByZXZUYWJzLm5vdCggdGhpcy50YWJzICkgKTtcblx0XHRcdHRoaXMuX29mZiggcHJldkFuY2hvcnMubm90KCB0aGlzLmFuY2hvcnMgKSApO1xuXHRcdFx0dGhpcy5fb2ZmKCBwcmV2UGFuZWxzLm5vdCggdGhpcy5wYW5lbHMgKSApO1xuXHRcdH1cblx0fSxcblxuXHQvLyBBbGxvdyBvdmVycmlkaW5nIGhvdyB0byBmaW5kIHRoZSBsaXN0IGZvciByYXJlIHVzYWdlIHNjZW5hcmlvcyAoIzc3MTUpXG5cdF9nZXRMaXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy50YWJsaXN0IHx8IHRoaXMuZWxlbWVudC5maW5kKCBcIm9sLCB1bFwiICkuZXEoIDAgKTtcblx0fSxcblxuXHRfY3JlYXRlUGFuZWw6IGZ1bmN0aW9uKCBpZCApIHtcblx0XHRyZXR1cm4gJCggXCI8ZGl2PlwiIClcblx0XHRcdC5hdHRyKCBcImlkXCIsIGlkIClcblx0XHRcdC5kYXRhKCBcInVpLXRhYnMtZGVzdHJveVwiLCB0cnVlICk7XG5cdH0sXG5cblx0X3NldE9wdGlvbkRpc2FibGVkOiBmdW5jdGlvbiggZGlzYWJsZWQgKSB7XG5cdFx0dmFyIGN1cnJlbnRJdGVtLCBsaSwgaTtcblxuXHRcdGlmICggJC5pc0FycmF5KCBkaXNhYmxlZCApICkge1xuXHRcdFx0aWYgKCAhZGlzYWJsZWQubGVuZ3RoICkge1xuXHRcdFx0XHRkaXNhYmxlZCA9IGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggZGlzYWJsZWQubGVuZ3RoID09PSB0aGlzLmFuY2hvcnMubGVuZ3RoICkge1xuXHRcdFx0XHRkaXNhYmxlZCA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRGlzYWJsZSB0YWJzXG5cdFx0Zm9yICggaSA9IDA7ICggbGkgPSB0aGlzLnRhYnNbIGkgXSApOyBpKysgKSB7XG5cdFx0XHRjdXJyZW50SXRlbSA9ICQoIGxpICk7XG5cdFx0XHRpZiAoIGRpc2FibGVkID09PSB0cnVlIHx8ICQuaW5BcnJheSggaSwgZGlzYWJsZWQgKSAhPT0gLTEgKSB7XG5cdFx0XHRcdGN1cnJlbnRJdGVtLmF0dHIoIFwiYXJpYS1kaXNhYmxlZFwiLCBcInRydWVcIiApO1xuXHRcdFx0XHR0aGlzLl9hZGRDbGFzcyggY3VycmVudEl0ZW0sIG51bGwsIFwidWktc3RhdGUtZGlzYWJsZWRcIiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3VycmVudEl0ZW0ucmVtb3ZlQXR0ciggXCJhcmlhLWRpc2FibGVkXCIgKTtcblx0XHRcdFx0dGhpcy5fcmVtb3ZlQ2xhc3MoIGN1cnJlbnRJdGVtLCBudWxsLCBcInVpLXN0YXRlLWRpc2FibGVkXCIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLm9wdGlvbnMuZGlzYWJsZWQgPSBkaXNhYmxlZDtcblxuXHRcdHRoaXMuX3RvZ2dsZUNsYXNzKCB0aGlzLndpZGdldCgpLCB0aGlzLndpZGdldEZ1bGxOYW1lICsgXCItZGlzYWJsZWRcIiwgbnVsbCxcblx0XHRcdGRpc2FibGVkID09PSB0cnVlICk7XG5cdH0sXG5cblx0X3NldHVwRXZlbnRzOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGV2ZW50cyA9IHt9O1xuXHRcdGlmICggZXZlbnQgKSB7XG5cdFx0XHQkLmVhY2goIGV2ZW50LnNwbGl0KCBcIiBcIiApLCBmdW5jdGlvbiggaW5kZXgsIGV2ZW50TmFtZSApIHtcblx0XHRcdFx0ZXZlbnRzWyBldmVudE5hbWUgXSA9IFwiX2V2ZW50SGFuZGxlclwiO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHRoaXMuX29mZiggdGhpcy5hbmNob3JzLmFkZCggdGhpcy50YWJzICkuYWRkKCB0aGlzLnBhbmVscyApICk7XG5cblx0XHQvLyBBbHdheXMgcHJldmVudCB0aGUgZGVmYXVsdCBhY3Rpb24sIGV2ZW4gd2hlbiBkaXNhYmxlZFxuXHRcdHRoaXMuX29uKCB0cnVlLCB0aGlzLmFuY2hvcnMsIHtcblx0XHRcdGNsaWNrOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHRoaXMuX29uKCB0aGlzLmFuY2hvcnMsIGV2ZW50cyApO1xuXHRcdHRoaXMuX29uKCB0aGlzLnRhYnMsIHsga2V5ZG93bjogXCJfdGFiS2V5ZG93blwiIH0gKTtcblx0XHR0aGlzLl9vbiggdGhpcy5wYW5lbHMsIHsga2V5ZG93bjogXCJfcGFuZWxLZXlkb3duXCIgfSApO1xuXG5cdFx0dGhpcy5fZm9jdXNhYmxlKCB0aGlzLnRhYnMgKTtcblx0XHR0aGlzLl9ob3ZlcmFibGUoIHRoaXMudGFicyApO1xuXHR9LFxuXG5cdF9zZXR1cEhlaWdodFN0eWxlOiBmdW5jdGlvbiggaGVpZ2h0U3R5bGUgKSB7XG5cdFx0dmFyIG1heEhlaWdodCxcblx0XHRcdHBhcmVudCA9IHRoaXMuZWxlbWVudC5wYXJlbnQoKTtcblxuXHRcdGlmICggaGVpZ2h0U3R5bGUgPT09IFwiZmlsbFwiICkge1xuXHRcdFx0bWF4SGVpZ2h0ID0gcGFyZW50LmhlaWdodCgpO1xuXHRcdFx0bWF4SGVpZ2h0IC09IHRoaXMuZWxlbWVudC5vdXRlckhlaWdodCgpIC0gdGhpcy5lbGVtZW50LmhlaWdodCgpO1xuXG5cdFx0XHR0aGlzLmVsZW1lbnQuc2libGluZ3MoIFwiOnZpc2libGVcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9ICQoIHRoaXMgKSxcblx0XHRcdFx0XHRwb3NpdGlvbiA9IGVsZW0uY3NzKCBcInBvc2l0aW9uXCIgKTtcblxuXHRcdFx0XHRpZiAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0bWF4SGVpZ2h0IC09IGVsZW0ub3V0ZXJIZWlnaHQoIHRydWUgKTtcblx0XHRcdH0gKTtcblxuXHRcdFx0dGhpcy5lbGVtZW50LmNoaWxkcmVuKCkubm90KCB0aGlzLnBhbmVscyApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRtYXhIZWlnaHQgLT0gJCggdGhpcyApLm91dGVySGVpZ2h0KCB0cnVlICk7XG5cdFx0XHR9ICk7XG5cblx0XHRcdHRoaXMucGFuZWxzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQkKCB0aGlzICkuaGVpZ2h0KCBNYXRoLm1heCggMCwgbWF4SGVpZ2h0IC1cblx0XHRcdFx0XHQkKCB0aGlzICkuaW5uZXJIZWlnaHQoKSArICQoIHRoaXMgKS5oZWlnaHQoKSApICk7XG5cdFx0XHR9IClcblx0XHRcdFx0LmNzcyggXCJvdmVyZmxvd1wiLCBcImF1dG9cIiApO1xuXHRcdH0gZWxzZSBpZiAoIGhlaWdodFN0eWxlID09PSBcImF1dG9cIiApIHtcblx0XHRcdG1heEhlaWdodCA9IDA7XG5cdFx0XHR0aGlzLnBhbmVscy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0bWF4SGVpZ2h0ID0gTWF0aC5tYXgoIG1heEhlaWdodCwgJCggdGhpcyApLmhlaWdodCggXCJcIiApLmhlaWdodCgpICk7XG5cdFx0XHR9ICkuaGVpZ2h0KCBtYXhIZWlnaHQgKTtcblx0XHR9XG5cdH0sXG5cblx0X2V2ZW50SGFuZGxlcjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuXHRcdFx0YWN0aXZlID0gdGhpcy5hY3RpdmUsXG5cdFx0XHRhbmNob3IgPSAkKCBldmVudC5jdXJyZW50VGFyZ2V0ICksXG5cdFx0XHR0YWIgPSBhbmNob3IuY2xvc2VzdCggXCJsaVwiICksXG5cdFx0XHRjbGlja2VkSXNBY3RpdmUgPSB0YWJbIDAgXSA9PT0gYWN0aXZlWyAwIF0sXG5cdFx0XHRjb2xsYXBzaW5nID0gY2xpY2tlZElzQWN0aXZlICYmIG9wdGlvbnMuY29sbGFwc2libGUsXG5cdFx0XHR0b1Nob3cgPSBjb2xsYXBzaW5nID8gJCgpIDogdGhpcy5fZ2V0UGFuZWxGb3JUYWIoIHRhYiApLFxuXHRcdFx0dG9IaWRlID0gIWFjdGl2ZS5sZW5ndGggPyAkKCkgOiB0aGlzLl9nZXRQYW5lbEZvclRhYiggYWN0aXZlICksXG5cdFx0XHRldmVudERhdGEgPSB7XG5cdFx0XHRcdG9sZFRhYjogYWN0aXZlLFxuXHRcdFx0XHRvbGRQYW5lbDogdG9IaWRlLFxuXHRcdFx0XHRuZXdUYWI6IGNvbGxhcHNpbmcgPyAkKCkgOiB0YWIsXG5cdFx0XHRcdG5ld1BhbmVsOiB0b1Nob3dcblx0XHRcdH07XG5cblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0aWYgKCB0YWIuaGFzQ2xhc3MoIFwidWktc3RhdGUtZGlzYWJsZWRcIiApIHx8XG5cblx0XHRcdFx0Ly8gdGFiIGlzIGFscmVhZHkgbG9hZGluZ1xuXHRcdFx0XHR0YWIuaGFzQ2xhc3MoIFwidWktdGFicy1sb2FkaW5nXCIgKSB8fFxuXG5cdFx0XHRcdC8vIGNhbid0IHN3aXRjaCBkdXJuaW5nIGFuIGFuaW1hdGlvblxuXHRcdFx0XHR0aGlzLnJ1bm5pbmcgfHxcblxuXHRcdFx0XHQvLyBjbGljayBvbiBhY3RpdmUgaGVhZGVyLCBidXQgbm90IGNvbGxhcHNpYmxlXG5cdFx0XHRcdCggY2xpY2tlZElzQWN0aXZlICYmICFvcHRpb25zLmNvbGxhcHNpYmxlICkgfHxcblxuXHRcdFx0XHQvLyBhbGxvdyBjYW5jZWxpbmcgYWN0aXZhdGlvblxuXHRcdFx0XHQoIHRoaXMuX3RyaWdnZXIoIFwiYmVmb3JlQWN0aXZhdGVcIiwgZXZlbnQsIGV2ZW50RGF0YSApID09PSBmYWxzZSApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdG9wdGlvbnMuYWN0aXZlID0gY29sbGFwc2luZyA/IGZhbHNlIDogdGhpcy50YWJzLmluZGV4KCB0YWIgKTtcblxuXHRcdHRoaXMuYWN0aXZlID0gY2xpY2tlZElzQWN0aXZlID8gJCgpIDogdGFiO1xuXHRcdGlmICggdGhpcy54aHIgKSB7XG5cdFx0XHR0aGlzLnhoci5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdGlmICggIXRvSGlkZS5sZW5ndGggJiYgIXRvU2hvdy5sZW5ndGggKSB7XG5cdFx0XHQkLmVycm9yKCBcImpRdWVyeSBVSSBUYWJzOiBNaXNtYXRjaGluZyBmcmFnbWVudCBpZGVudGlmaWVyLlwiICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0b1Nob3cubGVuZ3RoICkge1xuXHRcdFx0dGhpcy5sb2FkKCB0aGlzLnRhYnMuaW5kZXgoIHRhYiApLCBldmVudCApO1xuXHRcdH1cblx0XHR0aGlzLl90b2dnbGUoIGV2ZW50LCBldmVudERhdGEgKTtcblx0fSxcblxuXHQvLyBIYW5kbGVzIHNob3cvaGlkZSBmb3Igc2VsZWN0aW5nIHRhYnNcblx0X3RvZ2dsZTogZnVuY3Rpb24oIGV2ZW50LCBldmVudERhdGEgKSB7XG5cdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0dG9TaG93ID0gZXZlbnREYXRhLm5ld1BhbmVsLFxuXHRcdFx0dG9IaWRlID0gZXZlbnREYXRhLm9sZFBhbmVsO1xuXG5cdFx0dGhpcy5ydW5uaW5nID0gdHJ1ZTtcblxuXHRcdGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuXHRcdFx0dGhhdC5ydW5uaW5nID0gZmFsc2U7XG5cdFx0XHR0aGF0Ll90cmlnZ2VyKCBcImFjdGl2YXRlXCIsIGV2ZW50LCBldmVudERhdGEgKTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBzaG93KCkge1xuXHRcdFx0dGhhdC5fYWRkQ2xhc3MoIGV2ZW50RGF0YS5uZXdUYWIuY2xvc2VzdCggXCJsaVwiICksIFwidWktdGFicy1hY3RpdmVcIiwgXCJ1aS1zdGF0ZS1hY3RpdmVcIiApO1xuXG5cdFx0XHRpZiAoIHRvU2hvdy5sZW5ndGggJiYgdGhhdC5vcHRpb25zLnNob3cgKSB7XG5cdFx0XHRcdHRoYXQuX3Nob3coIHRvU2hvdywgdGhhdC5vcHRpb25zLnNob3csIGNvbXBsZXRlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0b1Nob3cuc2hvdygpO1xuXHRcdFx0XHRjb21wbGV0ZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFN0YXJ0IG91dCBieSBoaWRpbmcsIHRoZW4gc2hvd2luZywgdGhlbiBjb21wbGV0aW5nXG5cdFx0aWYgKCB0b0hpZGUubGVuZ3RoICYmIHRoaXMub3B0aW9ucy5oaWRlICkge1xuXHRcdFx0dGhpcy5faGlkZSggdG9IaWRlLCB0aGlzLm9wdGlvbnMuaGlkZSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHRoYXQuX3JlbW92ZUNsYXNzKCBldmVudERhdGEub2xkVGFiLmNsb3Nlc3QoIFwibGlcIiApLFxuXHRcdFx0XHRcdFwidWktdGFicy1hY3RpdmVcIiwgXCJ1aS1zdGF0ZS1hY3RpdmVcIiApO1xuXHRcdFx0XHRzaG93KCk7XG5cdFx0XHR9ICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuX3JlbW92ZUNsYXNzKCBldmVudERhdGEub2xkVGFiLmNsb3Nlc3QoIFwibGlcIiApLFxuXHRcdFx0XHRcInVpLXRhYnMtYWN0aXZlXCIsIFwidWktc3RhdGUtYWN0aXZlXCIgKTtcblx0XHRcdHRvSGlkZS5oaWRlKCk7XG5cdFx0XHRzaG93KCk7XG5cdFx0fVxuXG5cdFx0dG9IaWRlLmF0dHIoIFwiYXJpYS1oaWRkZW5cIiwgXCJ0cnVlXCIgKTtcblx0XHRldmVudERhdGEub2xkVGFiLmF0dHIoIHtcblx0XHRcdFwiYXJpYS1zZWxlY3RlZFwiOiBcImZhbHNlXCIsXG5cdFx0XHRcImFyaWEtZXhwYW5kZWRcIjogXCJmYWxzZVwiXG5cdFx0fSApO1xuXG5cdFx0Ly8gSWYgd2UncmUgc3dpdGNoaW5nIHRhYnMsIHJlbW92ZSB0aGUgb2xkIHRhYiBmcm9tIHRoZSB0YWIgb3JkZXIuXG5cdFx0Ly8gSWYgd2UncmUgb3BlbmluZyBmcm9tIGNvbGxhcHNlZCBzdGF0ZSwgcmVtb3ZlIHRoZSBwcmV2aW91cyB0YWIgZnJvbSB0aGUgdGFiIG9yZGVyLlxuXHRcdC8vIElmIHdlJ3JlIGNvbGxhcHNpbmcsIHRoZW4ga2VlcCB0aGUgY29sbGFwc2luZyB0YWIgaW4gdGhlIHRhYiBvcmRlci5cblx0XHRpZiAoIHRvU2hvdy5sZW5ndGggJiYgdG9IaWRlLmxlbmd0aCApIHtcblx0XHRcdGV2ZW50RGF0YS5vbGRUYWIuYXR0ciggXCJ0YWJJbmRleFwiLCAtMSApO1xuXHRcdH0gZWxzZSBpZiAoIHRvU2hvdy5sZW5ndGggKSB7XG5cdFx0XHR0aGlzLnRhYnMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICQoIHRoaXMgKS5hdHRyKCBcInRhYkluZGV4XCIgKSA9PT0gMDtcblx0XHRcdH0gKVxuXHRcdFx0XHQuYXR0ciggXCJ0YWJJbmRleFwiLCAtMSApO1xuXHRcdH1cblxuXHRcdHRvU2hvdy5hdHRyKCBcImFyaWEtaGlkZGVuXCIsIFwiZmFsc2VcIiApO1xuXHRcdGV2ZW50RGF0YS5uZXdUYWIuYXR0cigge1xuXHRcdFx0XCJhcmlhLXNlbGVjdGVkXCI6IFwidHJ1ZVwiLFxuXHRcdFx0XCJhcmlhLWV4cGFuZGVkXCI6IFwidHJ1ZVwiLFxuXHRcdFx0dGFiSW5kZXg6IDBcblx0XHR9ICk7XG5cdH0sXG5cblx0X2FjdGl2YXRlOiBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0dmFyIGFuY2hvcixcblx0XHRcdGFjdGl2ZSA9IHRoaXMuX2ZpbmRBY3RpdmUoIGluZGV4ICk7XG5cblx0XHQvLyBUcnlpbmcgdG8gYWN0aXZhdGUgdGhlIGFscmVhZHkgYWN0aXZlIHBhbmVsXG5cdFx0aWYgKCBhY3RpdmVbIDAgXSA9PT0gdGhpcy5hY3RpdmVbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBUcnlpbmcgdG8gY29sbGFwc2UsIHNpbXVsYXRlIGEgY2xpY2sgb24gdGhlIGN1cnJlbnQgYWN0aXZlIGhlYWRlclxuXHRcdGlmICggIWFjdGl2ZS5sZW5ndGggKSB7XG5cdFx0XHRhY3RpdmUgPSB0aGlzLmFjdGl2ZTtcblx0XHR9XG5cblx0XHRhbmNob3IgPSBhY3RpdmUuZmluZCggXCIudWktdGFicy1hbmNob3JcIiApWyAwIF07XG5cdFx0dGhpcy5fZXZlbnRIYW5kbGVyKCB7XG5cdFx0XHR0YXJnZXQ6IGFuY2hvcixcblx0XHRcdGN1cnJlbnRUYXJnZXQ6IGFuY2hvcixcblx0XHRcdHByZXZlbnREZWZhdWx0OiAkLm5vb3Bcblx0XHR9ICk7XG5cdH0sXG5cblx0X2ZpbmRBY3RpdmU6IGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRyZXR1cm4gaW5kZXggPT09IGZhbHNlID8gJCgpIDogdGhpcy50YWJzLmVxKCBpbmRleCApO1xuXHR9LFxuXG5cdF9nZXRJbmRleDogZnVuY3Rpb24oIGluZGV4ICkge1xuXG5cdFx0Ly8gbWV0YS1mdW5jdGlvbiB0byBnaXZlIHVzZXJzIG9wdGlvbiB0byBwcm92aWRlIGEgaHJlZiBzdHJpbmcgaW5zdGVhZCBvZiBhIG51bWVyaWNhbCBpbmRleC5cblx0XHRpZiAoIHR5cGVvZiBpbmRleCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGluZGV4ID0gdGhpcy5hbmNob3JzLmluZGV4KCB0aGlzLmFuY2hvcnMuZmlsdGVyKCBcIltocmVmJD0nXCIgK1xuXHRcdFx0XHQkLnVpLmVzY2FwZVNlbGVjdG9yKCBpbmRleCApICsgXCInXVwiICkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaW5kZXg7XG5cdH0sXG5cblx0X2Rlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggdGhpcy54aHIgKSB7XG5cdFx0XHR0aGlzLnhoci5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdHRoaXMudGFibGlzdFxuXHRcdFx0LnJlbW92ZUF0dHIoIFwicm9sZVwiIClcblx0XHRcdC5vZmYoIHRoaXMuZXZlbnROYW1lc3BhY2UgKTtcblxuXHRcdHRoaXMuYW5jaG9yc1xuXHRcdFx0LnJlbW92ZUF0dHIoIFwicm9sZSB0YWJJbmRleFwiIClcblx0XHRcdC5yZW1vdmVVbmlxdWVJZCgpO1xuXG5cdFx0dGhpcy50YWJzLmFkZCggdGhpcy5wYW5lbHMgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggJC5kYXRhKCB0aGlzLCBcInVpLXRhYnMtZGVzdHJveVwiICkgKSB7XG5cdFx0XHRcdCQoIHRoaXMgKS5yZW1vdmUoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdCQoIHRoaXMgKS5yZW1vdmVBdHRyKCBcInJvbGUgdGFiSW5kZXggXCIgK1xuXHRcdFx0XHRcdFwiYXJpYS1saXZlIGFyaWEtYnVzeSBhcmlhLXNlbGVjdGVkIGFyaWEtbGFiZWxsZWRieSBhcmlhLWhpZGRlbiBhcmlhLWV4cGFuZGVkXCIgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0XHR0aGlzLnRhYnMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbGkgPSAkKCB0aGlzICksXG5cdFx0XHRcdHByZXYgPSBsaS5kYXRhKCBcInVpLXRhYnMtYXJpYS1jb250cm9sc1wiICk7XG5cdFx0XHRpZiAoIHByZXYgKSB7XG5cdFx0XHRcdGxpXG5cdFx0XHRcdFx0LmF0dHIoIFwiYXJpYS1jb250cm9sc1wiLCBwcmV2IClcblx0XHRcdFx0XHQucmVtb3ZlRGF0YSggXCJ1aS10YWJzLWFyaWEtY29udHJvbHNcIiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bGkucmVtb3ZlQXR0ciggXCJhcmlhLWNvbnRyb2xzXCIgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0XHR0aGlzLnBhbmVscy5zaG93KCk7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5oZWlnaHRTdHlsZSAhPT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHR0aGlzLnBhbmVscy5jc3MoIFwiaGVpZ2h0XCIsIFwiXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0ZW5hYmxlOiBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0dmFyIGRpc2FibGVkID0gdGhpcy5vcHRpb25zLmRpc2FibGVkO1xuXHRcdGlmICggZGlzYWJsZWQgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGRpc2FibGVkID0gZmFsc2U7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGluZGV4ID0gdGhpcy5fZ2V0SW5kZXgoIGluZGV4ICk7XG5cdFx0XHRpZiAoICQuaXNBcnJheSggZGlzYWJsZWQgKSApIHtcblx0XHRcdFx0ZGlzYWJsZWQgPSAkLm1hcCggZGlzYWJsZWQsIGZ1bmN0aW9uKCBudW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG51bSAhPT0gaW5kZXggPyBudW0gOiBudWxsO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkaXNhYmxlZCA9ICQubWFwKCB0aGlzLnRhYnMsIGZ1bmN0aW9uKCBsaSwgbnVtICkge1xuXHRcdFx0XHRcdHJldHVybiBudW0gIT09IGluZGV4ID8gbnVtIDogbnVsbDtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR0aGlzLl9zZXRPcHRpb25EaXNhYmxlZCggZGlzYWJsZWQgKTtcblx0fSxcblxuXHRkaXNhYmxlOiBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0dmFyIGRpc2FibGVkID0gdGhpcy5vcHRpb25zLmRpc2FibGVkO1xuXHRcdGlmICggZGlzYWJsZWQgPT09IHRydWUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0ZGlzYWJsZWQgPSB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpbmRleCA9IHRoaXMuX2dldEluZGV4KCBpbmRleCApO1xuXHRcdFx0aWYgKCAkLmluQXJyYXkoIGluZGV4LCBkaXNhYmxlZCApICE9PSAtMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAkLmlzQXJyYXkoIGRpc2FibGVkICkgKSB7XG5cdFx0XHRcdGRpc2FibGVkID0gJC5tZXJnZSggWyBpbmRleCBdLCBkaXNhYmxlZCApLnNvcnQoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRpc2FibGVkID0gWyBpbmRleCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR0aGlzLl9zZXRPcHRpb25EaXNhYmxlZCggZGlzYWJsZWQgKTtcblx0fSxcblxuXHRsb2FkOiBmdW5jdGlvbiggaW5kZXgsIGV2ZW50ICkge1xuXHRcdGluZGV4ID0gdGhpcy5fZ2V0SW5kZXgoIGluZGV4ICk7XG5cdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0dGFiID0gdGhpcy50YWJzLmVxKCBpbmRleCApLFxuXHRcdFx0YW5jaG9yID0gdGFiLmZpbmQoIFwiLnVpLXRhYnMtYW5jaG9yXCIgKSxcblx0XHRcdHBhbmVsID0gdGhpcy5fZ2V0UGFuZWxGb3JUYWIoIHRhYiApLFxuXHRcdFx0ZXZlbnREYXRhID0ge1xuXHRcdFx0XHR0YWI6IHRhYixcblx0XHRcdFx0cGFuZWw6IHBhbmVsXG5cdFx0XHR9LFxuXHRcdFx0Y29tcGxldGUgPSBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHR0aGF0LnBhbmVscy5zdG9wKCBmYWxzZSwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhhdC5fcmVtb3ZlQ2xhc3MoIHRhYiwgXCJ1aS10YWJzLWxvYWRpbmdcIiApO1xuXHRcdFx0XHRwYW5lbC5yZW1vdmVBdHRyKCBcImFyaWEtYnVzeVwiICk7XG5cblx0XHRcdFx0aWYgKCBqcVhIUiA9PT0gdGhhdC54aHIgKSB7XG5cdFx0XHRcdFx0ZGVsZXRlIHRoYXQueGhyO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gTm90IHJlbW90ZVxuXHRcdGlmICggdGhpcy5faXNMb2NhbCggYW5jaG9yWyAwIF0gKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLnhociA9ICQuYWpheCggdGhpcy5fYWpheFNldHRpbmdzKCBhbmNob3IsIGV2ZW50LCBldmVudERhdGEgKSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogalF1ZXJ5IDwxLjhcblx0XHQvLyBqUXVlcnkgPDEuOCByZXR1cm5zIGZhbHNlIGlmIHRoZSByZXF1ZXN0IGlzIGNhbmNlbGVkIGluIGJlZm9yZVNlbmQsXG5cdFx0Ly8gYnV0IGFzIG9mIDEuOCwgJC5hamF4KCkgYWx3YXlzIHJldHVybnMgYSBqcVhIUiBvYmplY3QuXG5cdFx0aWYgKCB0aGlzLnhociAmJiB0aGlzLnhoci5zdGF0dXNUZXh0ICE9PSBcImNhbmNlbGVkXCIgKSB7XG5cdFx0XHR0aGlzLl9hZGRDbGFzcyggdGFiLCBcInVpLXRhYnMtbG9hZGluZ1wiICk7XG5cdFx0XHRwYW5lbC5hdHRyKCBcImFyaWEtYnVzeVwiLCBcInRydWVcIiApO1xuXG5cdFx0XHR0aGlzLnhoclxuXHRcdFx0XHQuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlLCBzdGF0dXMsIGpxWEhSICkge1xuXG5cdFx0XHRcdFx0Ly8gc3VwcG9ydDogalF1ZXJ5IDwxLjhcblx0XHRcdFx0XHQvLyBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMTc3OFxuXHRcdFx0XHRcdHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cGFuZWwuaHRtbCggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHRcdHRoYXQuX3RyaWdnZXIoIFwibG9hZFwiLCBldmVudCwgZXZlbnREYXRhICk7XG5cblx0XHRcdFx0XHRcdGNvbXBsZXRlKCBqcVhIUiwgc3RhdHVzICk7XG5cdFx0XHRcdFx0fSwgMSApO1xuXHRcdFx0XHR9IClcblx0XHRcdFx0LmZhaWwoIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXG5cdFx0XHRcdFx0Ly8gc3VwcG9ydDogalF1ZXJ5IDwxLjhcblx0XHRcdFx0XHQvLyBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMTc3OFxuXHRcdFx0XHRcdHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0Y29tcGxldGUoIGpxWEhSLCBzdGF0dXMgKTtcblx0XHRcdFx0XHR9LCAxICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cdH0sXG5cblx0X2FqYXhTZXR0aW5nczogZnVuY3Rpb24oIGFuY2hvciwgZXZlbnQsIGV2ZW50RGF0YSApIHtcblx0XHR2YXIgdGhhdCA9IHRoaXM7XG5cdFx0cmV0dXJuIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPDExIG9ubHlcblx0XHRcdC8vIFN0cmlwIGFueSBoYXNoIHRoYXQgZXhpc3RzIHRvIHByZXZlbnQgZXJyb3JzIHdpdGggdGhlIEFqYXggcmVxdWVzdFxuXHRcdFx0dXJsOiBhbmNob3IuYXR0ciggXCJocmVmXCIgKS5yZXBsYWNlKCAvIy4qJC8sIFwiXCIgKSxcblx0XHRcdGJlZm9yZVNlbmQ6IGZ1bmN0aW9uKCBqcVhIUiwgc2V0dGluZ3MgKSB7XG5cdFx0XHRcdHJldHVybiB0aGF0Ll90cmlnZ2VyKCBcImJlZm9yZUxvYWRcIiwgZXZlbnQsXG5cdFx0XHRcdFx0JC5leHRlbmQoIHsganFYSFI6IGpxWEhSLCBhamF4U2V0dGluZ3M6IHNldHRpbmdzIH0sIGV2ZW50RGF0YSApICk7XG5cdFx0XHR9XG5cdFx0fTtcblx0fSxcblxuXHRfZ2V0UGFuZWxGb3JUYWI6IGZ1bmN0aW9uKCB0YWIgKSB7XG5cdFx0dmFyIGlkID0gJCggdGFiICkuYXR0ciggXCJhcmlhLWNvbnRyb2xzXCIgKTtcblx0XHRyZXR1cm4gdGhpcy5lbGVtZW50LmZpbmQoIHRoaXMuX3Nhbml0aXplU2VsZWN0b3IoIFwiI1wiICsgaWQgKSApO1xuXHR9XG59ICk7XG5cbi8vIERFUFJFQ0FURURcbi8vIFRPRE86IFN3aXRjaCByZXR1cm4gYmFjayB0byB3aWRnZXQgZGVjbGFyYXRpb24gYXQgdG9wIG9mIGZpbGUgd2hlbiB0aGlzIGlzIHJlbW92ZWRcbmlmICggJC51aUJhY2tDb21wYXQgIT09IGZhbHNlICkge1xuXG5cdC8vIEJhY2tjb21wYXQgZm9yIHVpLXRhYiBjbGFzcyAobm93IHVpLXRhYnMtdGFiKVxuXHQkLndpZGdldCggXCJ1aS50YWJzXCIsICQudWkudGFicywge1xuXHRcdF9wcm9jZXNzVGFiczogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLl9zdXBlckFwcGx5KCBhcmd1bWVudHMgKTtcblx0XHRcdHRoaXMuX2FkZENsYXNzKCB0aGlzLnRhYnMsIFwidWktdGFiXCIgKTtcblx0XHR9XG5cdH0gKTtcbn1cblxudmFyIHdpZGdldHNUYWJzID0gJC51aS50YWJzO1xuXG5cbi8qIVxuICogalF1ZXJ5IFVJIFRvb2x0aXAgMS4xMi4xXG4gKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqL1xuXG4vLz4+bGFiZWw6IFRvb2x0aXBcbi8vPj5ncm91cDogV2lkZ2V0c1xuLy8+PmRlc2NyaXB0aW9uOiBTaG93cyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGZvciBhbnkgZWxlbWVudCBvbiBob3ZlciBvciBmb2N1cy5cbi8vPj5kb2NzOiBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS90b29sdGlwL1xuLy8+PmRlbW9zOiBodHRwOi8vanF1ZXJ5dWkuY29tL3Rvb2x0aXAvXG4vLz4+Y3NzLnN0cnVjdHVyZTogLi4vLi4vdGhlbWVzL2Jhc2UvY29yZS5jc3Ncbi8vPj5jc3Muc3RydWN0dXJlOiAuLi8uLi90aGVtZXMvYmFzZS90b29sdGlwLmNzc1xuLy8+PmNzcy50aGVtZTogLi4vLi4vdGhlbWVzL2Jhc2UvdGhlbWUuY3NzXG5cblxuXG4kLndpZGdldCggXCJ1aS50b29sdGlwXCIsIHtcblx0dmVyc2lvbjogXCIxLjEyLjFcIixcblx0b3B0aW9uczoge1xuXHRcdGNsYXNzZXM6IHtcblx0XHRcdFwidWktdG9vbHRpcFwiOiBcInVpLWNvcm5lci1hbGwgdWktd2lkZ2V0LXNoYWRvd1wiXG5cdFx0fSxcblx0XHRjb250ZW50OiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gc3VwcG9ydDogSUU8OSwgT3BlcmEgaW4galF1ZXJ5IDwxLjdcblx0XHRcdC8vIC50ZXh0KCkgY2FuJ3QgYWNjZXB0IHVuZGVmaW5lZCwgc28gY29lcmNlIHRvIGEgc3RyaW5nXG5cdFx0XHR2YXIgdGl0bGUgPSAkKCB0aGlzICkuYXR0ciggXCJ0aXRsZVwiICkgfHwgXCJcIjtcblxuXHRcdFx0Ly8gRXNjYXBlIHRpdGxlLCBzaW5jZSB3ZSdyZSBnb2luZyBmcm9tIGFuIGF0dHJpYnV0ZSB0byByYXcgSFRNTFxuXHRcdFx0cmV0dXJuICQoIFwiPGE+XCIgKS50ZXh0KCB0aXRsZSApLmh0bWwoKTtcblx0XHR9LFxuXHRcdGhpZGU6IHRydWUsXG5cblx0XHQvLyBEaXNhYmxlZCBlbGVtZW50cyBoYXZlIGluY29uc2lzdGVudCBiZWhhdmlvciBhY3Jvc3MgYnJvd3NlcnMgKCM4NjYxKVxuXHRcdGl0ZW1zOiBcIlt0aXRsZV06bm90KFtkaXNhYmxlZF0pXCIsXG5cdFx0cG9zaXRpb246IHtcblx0XHRcdG15OiBcImxlZnQgdG9wKzE1XCIsXG5cdFx0XHRhdDogXCJsZWZ0IGJvdHRvbVwiLFxuXHRcdFx0Y29sbGlzaW9uOiBcImZsaXBmaXQgZmxpcFwiXG5cdFx0fSxcblx0XHRzaG93OiB0cnVlLFxuXHRcdHRyYWNrOiBmYWxzZSxcblxuXHRcdC8vIENhbGxiYWNrc1xuXHRcdGNsb3NlOiBudWxsLFxuXHRcdG9wZW46IG51bGxcblx0fSxcblxuXHRfYWRkRGVzY3JpYmVkQnk6IGZ1bmN0aW9uKCBlbGVtLCBpZCApIHtcblx0XHR2YXIgZGVzY3JpYmVkYnkgPSAoIGVsZW0uYXR0ciggXCJhcmlhLWRlc2NyaWJlZGJ5XCIgKSB8fCBcIlwiICkuc3BsaXQoIC9cXHMrLyApO1xuXHRcdGRlc2NyaWJlZGJ5LnB1c2goIGlkICk7XG5cdFx0ZWxlbVxuXHRcdFx0LmRhdGEoIFwidWktdG9vbHRpcC1pZFwiLCBpZCApXG5cdFx0XHQuYXR0ciggXCJhcmlhLWRlc2NyaWJlZGJ5XCIsICQudHJpbSggZGVzY3JpYmVkYnkuam9pbiggXCIgXCIgKSApICk7XG5cdH0sXG5cblx0X3JlbW92ZURlc2NyaWJlZEJ5OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgaWQgPSBlbGVtLmRhdGEoIFwidWktdG9vbHRpcC1pZFwiICksXG5cdFx0XHRkZXNjcmliZWRieSA9ICggZWxlbS5hdHRyKCBcImFyaWEtZGVzY3JpYmVkYnlcIiApIHx8IFwiXCIgKS5zcGxpdCggL1xccysvICksXG5cdFx0XHRpbmRleCA9ICQuaW5BcnJheSggaWQsIGRlc2NyaWJlZGJ5ICk7XG5cblx0XHRpZiAoIGluZGV4ICE9PSAtMSApIHtcblx0XHRcdGRlc2NyaWJlZGJ5LnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHR9XG5cblx0XHRlbGVtLnJlbW92ZURhdGEoIFwidWktdG9vbHRpcC1pZFwiICk7XG5cdFx0ZGVzY3JpYmVkYnkgPSAkLnRyaW0oIGRlc2NyaWJlZGJ5LmpvaW4oIFwiIFwiICkgKTtcblx0XHRpZiAoIGRlc2NyaWJlZGJ5ICkge1xuXHRcdFx0ZWxlbS5hdHRyKCBcImFyaWEtZGVzY3JpYmVkYnlcIiwgZGVzY3JpYmVkYnkgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5yZW1vdmVBdHRyKCBcImFyaWEtZGVzY3JpYmVkYnlcIiApO1xuXHRcdH1cblx0fSxcblxuXHRfY3JlYXRlOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLl9vbigge1xuXHRcdFx0bW91c2VvdmVyOiBcIm9wZW5cIixcblx0XHRcdGZvY3VzaW46IFwib3BlblwiXG5cdFx0fSApO1xuXG5cdFx0Ly8gSURzIG9mIGdlbmVyYXRlZCB0b29sdGlwcywgbmVlZGVkIGZvciBkZXN0cm95XG5cdFx0dGhpcy50b29sdGlwcyA9IHt9O1xuXG5cdFx0Ly8gSURzIG9mIHBhcmVudCB0b29sdGlwcyB3aGVyZSB3ZSByZW1vdmVkIHRoZSB0aXRsZSBhdHRyaWJ1dGVcblx0XHR0aGlzLnBhcmVudHMgPSB7fTtcblxuXHRcdC8vIEFwcGVuZCB0aGUgYXJpYS1saXZlIHJlZ2lvbiBzbyB0b29sdGlwcyBhbm5vdW5jZSBjb3JyZWN0bHlcblx0XHR0aGlzLmxpdmVSZWdpb24gPSAkKCBcIjxkaXY+XCIgKVxuXHRcdFx0LmF0dHIoIHtcblx0XHRcdFx0cm9sZTogXCJsb2dcIixcblx0XHRcdFx0XCJhcmlhLWxpdmVcIjogXCJhc3NlcnRpdmVcIixcblx0XHRcdFx0XCJhcmlhLXJlbGV2YW50XCI6IFwiYWRkaXRpb25zXCJcblx0XHRcdH0gKVxuXHRcdFx0LmFwcGVuZFRvKCB0aGlzLmRvY3VtZW50WyAwIF0uYm9keSApO1xuXHRcdHRoaXMuX2FkZENsYXNzKCB0aGlzLmxpdmVSZWdpb24sIG51bGwsIFwidWktaGVscGVyLWhpZGRlbi1hY2Nlc3NpYmxlXCIgKTtcblxuXHRcdHRoaXMuZGlzYWJsZWRUaXRsZXMgPSAkKCBbXSApO1xuXHR9LFxuXG5cdF9zZXRPcHRpb246IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciB0aGF0ID0gdGhpcztcblxuXHRcdHRoaXMuX3N1cGVyKCBrZXksIHZhbHVlICk7XG5cblx0XHRpZiAoIGtleSA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHQkLmVhY2goIHRoaXMudG9vbHRpcHMsIGZ1bmN0aW9uKCBpZCwgdG9vbHRpcERhdGEgKSB7XG5cdFx0XHRcdHRoYXQuX3VwZGF0ZUNvbnRlbnQoIHRvb2x0aXBEYXRhLmVsZW1lbnQgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cdH0sXG5cblx0X3NldE9wdGlvbkRpc2FibGVkOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dGhpc1sgdmFsdWUgPyBcIl9kaXNhYmxlXCIgOiBcIl9lbmFibGVcIiBdKCk7XG5cdH0sXG5cblx0X2Rpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB0aGF0ID0gdGhpcztcblxuXHRcdC8vIENsb3NlIG9wZW4gdG9vbHRpcHNcblx0XHQkLmVhY2goIHRoaXMudG9vbHRpcHMsIGZ1bmN0aW9uKCBpZCwgdG9vbHRpcERhdGEgKSB7XG5cdFx0XHR2YXIgZXZlbnQgPSAkLkV2ZW50KCBcImJsdXJcIiApO1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZXZlbnQuY3VycmVudFRhcmdldCA9IHRvb2x0aXBEYXRhLmVsZW1lbnRbIDAgXTtcblx0XHRcdHRoYXQuY2xvc2UoIGV2ZW50LCB0cnVlICk7XG5cdFx0fSApO1xuXG5cdFx0Ly8gUmVtb3ZlIHRpdGxlIGF0dHJpYnV0ZXMgdG8gcHJldmVudCBuYXRpdmUgdG9vbHRpcHNcblx0XHR0aGlzLmRpc2FibGVkVGl0bGVzID0gdGhpcy5kaXNhYmxlZFRpdGxlcy5hZGQoXG5cdFx0XHR0aGlzLmVsZW1lbnQuZmluZCggdGhpcy5vcHRpb25zLml0ZW1zICkuYWRkQmFjaygpXG5cdFx0XHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHZhciBlbGVtZW50ID0gJCggdGhpcyApO1xuXHRcdFx0XHRcdGlmICggZWxlbWVudC5pcyggXCJbdGl0bGVdXCIgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdC5kYXRhKCBcInVpLXRvb2x0aXAtdGl0bGVcIiwgZWxlbWVudC5hdHRyKCBcInRpdGxlXCIgKSApXG5cdFx0XHRcdFx0XHRcdC5yZW1vdmVBdHRyKCBcInRpdGxlXCIgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKVxuXHRcdCk7XG5cdH0sXG5cblx0X2VuYWJsZTogZnVuY3Rpb24oKSB7XG5cblx0XHQvLyByZXN0b3JlIHRpdGxlIGF0dHJpYnV0ZXNcblx0XHR0aGlzLmRpc2FibGVkVGl0bGVzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGVsZW1lbnQgPSAkKCB0aGlzICk7XG5cdFx0XHRpZiAoIGVsZW1lbnQuZGF0YSggXCJ1aS10b29sdGlwLXRpdGxlXCIgKSApIHtcblx0XHRcdFx0ZWxlbWVudC5hdHRyKCBcInRpdGxlXCIsIGVsZW1lbnQuZGF0YSggXCJ1aS10b29sdGlwLXRpdGxlXCIgKSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHR0aGlzLmRpc2FibGVkVGl0bGVzID0gJCggW10gKTtcblx0fSxcblxuXHRvcGVuOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0dGFyZ2V0ID0gJCggZXZlbnQgPyBldmVudC50YXJnZXQgOiB0aGlzLmVsZW1lbnQgKVxuXG5cdFx0XHRcdC8vIHdlIG5lZWQgY2xvc2VzdCBoZXJlIGR1ZSB0byBtb3VzZW92ZXIgYnViYmxpbmcsXG5cdFx0XHRcdC8vIGJ1dCBhbHdheXMgcG9pbnRpbmcgYXQgdGhlIHNhbWUgZXZlbnQgdGFyZ2V0XG5cdFx0XHRcdC5jbG9zZXN0KCB0aGlzLm9wdGlvbnMuaXRlbXMgKTtcblxuXHRcdC8vIE5vIGVsZW1lbnQgdG8gc2hvdyBhIHRvb2x0aXAgZm9yIG9yIHRoZSB0b29sdGlwIGlzIGFscmVhZHkgb3BlblxuXHRcdGlmICggIXRhcmdldC5sZW5ndGggfHwgdGFyZ2V0LmRhdGEoIFwidWktdG9vbHRpcC1pZFwiICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0YXJnZXQuYXR0ciggXCJ0aXRsZVwiICkgKSB7XG5cdFx0XHR0YXJnZXQuZGF0YSggXCJ1aS10b29sdGlwLXRpdGxlXCIsIHRhcmdldC5hdHRyKCBcInRpdGxlXCIgKSApO1xuXHRcdH1cblxuXHRcdHRhcmdldC5kYXRhKCBcInVpLXRvb2x0aXAtb3BlblwiLCB0cnVlICk7XG5cblx0XHQvLyBLaWxsIHBhcmVudCB0b29sdGlwcywgY3VzdG9tIG9yIG5hdGl2ZSwgZm9yIGhvdmVyXG5cdFx0aWYgKCBldmVudCAmJiBldmVudC50eXBlID09PSBcIm1vdXNlb3ZlclwiICkge1xuXHRcdFx0dGFyZ2V0LnBhcmVudHMoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHBhcmVudCA9ICQoIHRoaXMgKSxcblx0XHRcdFx0XHRibHVyRXZlbnQ7XG5cdFx0XHRcdGlmICggcGFyZW50LmRhdGEoIFwidWktdG9vbHRpcC1vcGVuXCIgKSApIHtcblx0XHRcdFx0XHRibHVyRXZlbnQgPSAkLkV2ZW50KCBcImJsdXJcIiApO1xuXHRcdFx0XHRcdGJsdXJFdmVudC50YXJnZXQgPSBibHVyRXZlbnQuY3VycmVudFRhcmdldCA9IHRoaXM7XG5cdFx0XHRcdFx0dGhhdC5jbG9zZSggYmx1ckV2ZW50LCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBwYXJlbnQuYXR0ciggXCJ0aXRsZVwiICkgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnVuaXF1ZUlkKCk7XG5cdFx0XHRcdFx0dGhhdC5wYXJlbnRzWyB0aGlzLmlkIF0gPSB7XG5cdFx0XHRcdFx0XHRlbGVtZW50OiB0aGlzLFxuXHRcdFx0XHRcdFx0dGl0bGU6IHBhcmVudC5hdHRyKCBcInRpdGxlXCIgKVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0cGFyZW50LmF0dHIoIFwidGl0bGVcIiwgXCJcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fcmVnaXN0ZXJDbG9zZUhhbmRsZXJzKCBldmVudCwgdGFyZ2V0ICk7XG5cdFx0dGhpcy5fdXBkYXRlQ29udGVudCggdGFyZ2V0LCBldmVudCApO1xuXHR9LFxuXG5cdF91cGRhdGVDb250ZW50OiBmdW5jdGlvbiggdGFyZ2V0LCBldmVudCApIHtcblx0XHR2YXIgY29udGVudCxcblx0XHRcdGNvbnRlbnRPcHRpb24gPSB0aGlzLm9wdGlvbnMuY29udGVudCxcblx0XHRcdHRoYXQgPSB0aGlzLFxuXHRcdFx0ZXZlbnRUeXBlID0gZXZlbnQgPyBldmVudC50eXBlIDogbnVsbDtcblxuXHRcdGlmICggdHlwZW9mIGNvbnRlbnRPcHRpb24gPT09IFwic3RyaW5nXCIgfHwgY29udGVudE9wdGlvbi5ub2RlVHlwZSB8fFxuXHRcdFx0XHRjb250ZW50T3B0aW9uLmpxdWVyeSApIHtcblx0XHRcdHJldHVybiB0aGlzLl9vcGVuKCBldmVudCwgdGFyZ2V0LCBjb250ZW50T3B0aW9uICk7XG5cdFx0fVxuXG5cdFx0Y29udGVudCA9IGNvbnRlbnRPcHRpb24uY2FsbCggdGFyZ2V0WyAwIF0sIGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblxuXHRcdFx0Ly8gSUUgbWF5IGluc3RhbnRseSBzZXJ2ZSBhIGNhY2hlZCByZXNwb25zZSBmb3IgYWpheCByZXF1ZXN0c1xuXHRcdFx0Ly8gZGVsYXkgdGhpcyBjYWxsIHRvIF9vcGVuIHNvIHRoZSBvdGhlciBjYWxsIHRvIF9vcGVuIHJ1bnMgZmlyc3Rcblx0XHRcdHRoYXQuX2RlbGF5KCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYXN5bmMgcmVzcG9uc2UgaWYgdG9vbHRpcCB3YXMgY2xvc2VkIGFscmVhZHlcblx0XHRcdFx0aWYgKCAhdGFyZ2V0LmRhdGEoIFwidWktdG9vbHRpcC1vcGVuXCIgKSApIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBKUXVlcnkgY3JlYXRlcyBhIHNwZWNpYWwgZXZlbnQgZm9yIGZvY3VzaW4gd2hlbiBpdCBkb2Vzbid0XG5cdFx0XHRcdC8vIGV4aXN0IG5hdGl2ZWx5LiBUbyBpbXByb3ZlIHBlcmZvcm1hbmNlLCB0aGUgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdC8vIG9iamVjdCBpcyByZXVzZWQgYW5kIHRoZSB0eXBlIGlzIGNoYW5nZWQuIFRoZXJlZm9yZSwgd2UgY2FuJ3Rcblx0XHRcdFx0Ly8gcmVseSBvbiB0aGUgdHlwZSBiZWluZyBjb3JyZWN0IGFmdGVyIHRoZSBldmVudCBmaW5pc2hlZFxuXHRcdFx0XHQvLyBidWJibGluZywgc28gd2Ugc2V0IGl0IGJhY2sgdG8gdGhlIHByZXZpb3VzIHZhbHVlLiAoIzg3NDApXG5cdFx0XHRcdGlmICggZXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQudHlwZSA9IGV2ZW50VHlwZTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLl9vcGVuKCBldmVudCwgdGFyZ2V0LCByZXNwb25zZSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0XHRpZiAoIGNvbnRlbnQgKSB7XG5cdFx0XHR0aGlzLl9vcGVuKCBldmVudCwgdGFyZ2V0LCBjb250ZW50ICk7XG5cdFx0fVxuXHR9LFxuXG5cdF9vcGVuOiBmdW5jdGlvbiggZXZlbnQsIHRhcmdldCwgY29udGVudCApIHtcblx0XHR2YXIgdG9vbHRpcERhdGEsIHRvb2x0aXAsIGRlbGF5ZWRTaG93LCBhMTF5Q29udGVudCxcblx0XHRcdHBvc2l0aW9uT3B0aW9uID0gJC5leHRlbmQoIHt9LCB0aGlzLm9wdGlvbnMucG9zaXRpb24gKTtcblxuXHRcdGlmICggIWNvbnRlbnQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ29udGVudCBjYW4gYmUgdXBkYXRlZCBtdWx0aXBsZSB0aW1lcy4gSWYgdGhlIHRvb2x0aXAgYWxyZWFkeVxuXHRcdC8vIGV4aXN0cywgdGhlbiBqdXN0IHVwZGF0ZSB0aGUgY29udGVudCBhbmQgYmFpbC5cblx0XHR0b29sdGlwRGF0YSA9IHRoaXMuX2ZpbmQoIHRhcmdldCApO1xuXHRcdGlmICggdG9vbHRpcERhdGEgKSB7XG5cdFx0XHR0b29sdGlwRGF0YS50b29sdGlwLmZpbmQoIFwiLnVpLXRvb2x0aXAtY29udGVudFwiICkuaHRtbCggY29udGVudCApO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGhhdmUgYSB0aXRsZSwgY2xlYXIgaXQgdG8gcHJldmVudCB0aGUgbmF0aXZlIHRvb2x0aXBcblx0XHQvLyB3ZSBoYXZlIHRvIGNoZWNrIGZpcnN0IHRvIGF2b2lkIGRlZmluaW5nIGEgdGl0bGUgaWYgbm9uZSBleGlzdHNcblx0XHQvLyAod2UgZG9uJ3Qgd2FudCB0byBjYXVzZSBhbiBlbGVtZW50IHRvIHN0YXJ0IG1hdGNoaW5nIFt0aXRsZV0pXG5cdFx0Ly9cblx0XHQvLyBXZSB1c2UgcmVtb3ZlQXR0ciBvbmx5IGZvciBrZXkgZXZlbnRzLCB0byBhbGxvdyBJRSB0byBleHBvcnQgdGhlIGNvcnJlY3Rcblx0XHQvLyBhY2Nlc3NpYmxlIGF0dHJpYnV0ZXMuIEZvciBtb3VzZSBldmVudHMsIHNldCB0byBlbXB0eSBzdHJpbmcgdG8gYXZvaWRcblx0XHQvLyBuYXRpdmUgdG9vbHRpcCBzaG93aW5nIHVwIChoYXBwZW5zIG9ubHkgd2hlbiByZW1vdmluZyBpbnNpZGUgbW91c2VvdmVyKS5cblx0XHRpZiAoIHRhcmdldC5pcyggXCJbdGl0bGVdXCIgKSApIHtcblx0XHRcdGlmICggZXZlbnQgJiYgZXZlbnQudHlwZSA9PT0gXCJtb3VzZW92ZXJcIiApIHtcblx0XHRcdFx0dGFyZ2V0LmF0dHIoIFwidGl0bGVcIiwgXCJcIiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGFyZ2V0LnJlbW92ZUF0dHIoIFwidGl0bGVcIiApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRvb2x0aXBEYXRhID0gdGhpcy5fdG9vbHRpcCggdGFyZ2V0ICk7XG5cdFx0dG9vbHRpcCA9IHRvb2x0aXBEYXRhLnRvb2x0aXA7XG5cdFx0dGhpcy5fYWRkRGVzY3JpYmVkQnkoIHRhcmdldCwgdG9vbHRpcC5hdHRyKCBcImlkXCIgKSApO1xuXHRcdHRvb2x0aXAuZmluZCggXCIudWktdG9vbHRpcC1jb250ZW50XCIgKS5odG1sKCBjb250ZW50ICk7XG5cblx0XHQvLyBTdXBwb3J0OiBWb2ljZW92ZXIgb24gT1MgWCwgSkFXUyBvbiBJRSA8PSA5XG5cdFx0Ly8gSkFXUyBhbm5vdW5jZXMgZGVsZXRpb25zIGV2ZW4gd2hlbiBhcmlhLXJlbGV2YW50PVwiYWRkaXRpb25zXCJcblx0XHQvLyBWb2ljZW92ZXIgd2lsbCBzb21ldGltZXMgcmUtcmVhZCB0aGUgZW50aXJlIGxvZyByZWdpb24ncyBjb250ZW50cyBmcm9tIHRoZSBiZWdpbm5pbmdcblx0XHR0aGlzLmxpdmVSZWdpb24uY2hpbGRyZW4oKS5oaWRlKCk7XG5cdFx0YTExeUNvbnRlbnQgPSAkKCBcIjxkaXY+XCIgKS5odG1sKCB0b29sdGlwLmZpbmQoIFwiLnVpLXRvb2x0aXAtY29udGVudFwiICkuaHRtbCgpICk7XG5cdFx0YTExeUNvbnRlbnQucmVtb3ZlQXR0ciggXCJuYW1lXCIgKS5maW5kKCBcIltuYW1lXVwiICkucmVtb3ZlQXR0ciggXCJuYW1lXCIgKTtcblx0XHRhMTF5Q29udGVudC5yZW1vdmVBdHRyKCBcImlkXCIgKS5maW5kKCBcIltpZF1cIiApLnJlbW92ZUF0dHIoIFwiaWRcIiApO1xuXHRcdGExMXlDb250ZW50LmFwcGVuZFRvKCB0aGlzLmxpdmVSZWdpb24gKTtcblxuXHRcdGZ1bmN0aW9uIHBvc2l0aW9uKCBldmVudCApIHtcblx0XHRcdHBvc2l0aW9uT3B0aW9uLm9mID0gZXZlbnQ7XG5cdFx0XHRpZiAoIHRvb2x0aXAuaXMoIFwiOmhpZGRlblwiICkgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHRvb2x0aXAucG9zaXRpb24oIHBvc2l0aW9uT3B0aW9uICk7XG5cdFx0fVxuXHRcdGlmICggdGhpcy5vcHRpb25zLnRyYWNrICYmIGV2ZW50ICYmIC9ebW91c2UvLnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdHRoaXMuX29uKCB0aGlzLmRvY3VtZW50LCB7XG5cdFx0XHRcdG1vdXNlbW92ZTogcG9zaXRpb25cblx0XHRcdH0gKTtcblxuXHRcdFx0Ly8gdHJpZ2dlciBvbmNlIHRvIG92ZXJyaWRlIGVsZW1lbnQtcmVsYXRpdmUgcG9zaXRpb25pbmdcblx0XHRcdHBvc2l0aW9uKCBldmVudCApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0b29sdGlwLnBvc2l0aW9uKCAkLmV4dGVuZCgge1xuXHRcdFx0XHRvZjogdGFyZ2V0XG5cdFx0XHR9LCB0aGlzLm9wdGlvbnMucG9zaXRpb24gKSApO1xuXHRcdH1cblxuXHRcdHRvb2x0aXAuaGlkZSgpO1xuXG5cdFx0dGhpcy5fc2hvdyggdG9vbHRpcCwgdGhpcy5vcHRpb25zLnNob3cgKTtcblxuXHRcdC8vIEhhbmRsZSB0cmFja2luZyB0b29sdGlwcyB0aGF0IGFyZSBzaG93biB3aXRoIGEgZGVsYXkgKCM4NjQ0KS4gQXMgc29vblxuXHRcdC8vIGFzIHRoZSB0b29sdGlwIGlzIHZpc2libGUsIHBvc2l0aW9uIHRoZSB0b29sdGlwIHVzaW5nIHRoZSBtb3N0IHJlY2VudFxuXHRcdC8vIGV2ZW50LlxuXHRcdC8vIEFkZHMgdGhlIGNoZWNrIHRvIGFkZCB0aGUgdGltZXJzIG9ubHkgd2hlbiBib3RoIGRlbGF5IGFuZCB0cmFjayBvcHRpb25zIGFyZSBzZXQgKCMxNDY4Milcblx0XHRpZiAoIHRoaXMub3B0aW9ucy50cmFjayAmJiB0aGlzLm9wdGlvbnMuc2hvdyAmJiB0aGlzLm9wdGlvbnMuc2hvdy5kZWxheSApIHtcblx0XHRcdGRlbGF5ZWRTaG93ID0gdGhpcy5kZWxheWVkU2hvdyA9IHNldEludGVydmFsKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0b29sdGlwLmlzKCBcIjp2aXNpYmxlXCIgKSApIHtcblx0XHRcdFx0XHRwb3NpdGlvbiggcG9zaXRpb25PcHRpb24ub2YgKTtcblx0XHRcdFx0XHRjbGVhckludGVydmFsKCBkZWxheWVkU2hvdyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCAkLmZ4LmludGVydmFsICk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fdHJpZ2dlciggXCJvcGVuXCIsIGV2ZW50LCB7IHRvb2x0aXA6IHRvb2x0aXAgfSApO1xuXHR9LFxuXG5cdF9yZWdpc3RlckNsb3NlSGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgdGFyZ2V0ICkge1xuXHRcdHZhciBldmVudHMgPSB7XG5cdFx0XHRrZXl1cDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRpZiAoIGV2ZW50LmtleUNvZGUgPT09ICQudWkua2V5Q29kZS5FU0NBUEUgKSB7XG5cdFx0XHRcdFx0dmFyIGZha2VFdmVudCA9ICQuRXZlbnQoIGV2ZW50ICk7XG5cdFx0XHRcdFx0ZmFrZUV2ZW50LmN1cnJlbnRUYXJnZXQgPSB0YXJnZXRbIDAgXTtcblx0XHRcdFx0XHR0aGlzLmNsb3NlKCBmYWtlRXZlbnQsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHQvLyBPbmx5IGJpbmQgcmVtb3ZlIGhhbmRsZXIgZm9yIGRlbGVnYXRlZCB0YXJnZXRzLiBOb24tZGVsZWdhdGVkXG5cdFx0Ly8gdG9vbHRpcHMgd2lsbCBoYW5kbGUgdGhpcyBpbiBkZXN0cm95LlxuXHRcdGlmICggdGFyZ2V0WyAwIF0gIT09IHRoaXMuZWxlbWVudFsgMCBdICkge1xuXHRcdFx0ZXZlbnRzLnJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR0aGlzLl9yZW1vdmVUb29sdGlwKCB0aGlzLl9maW5kKCB0YXJnZXQgKS50b29sdGlwICk7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdGlmICggIWV2ZW50IHx8IGV2ZW50LnR5cGUgPT09IFwibW91c2VvdmVyXCIgKSB7XG5cdFx0XHRldmVudHMubW91c2VsZWF2ZSA9IFwiY2xvc2VcIjtcblx0XHR9XG5cdFx0aWYgKCAhZXZlbnQgfHwgZXZlbnQudHlwZSA9PT0gXCJmb2N1c2luXCIgKSB7XG5cdFx0XHRldmVudHMuZm9jdXNvdXQgPSBcImNsb3NlXCI7XG5cdFx0fVxuXHRcdHRoaXMuX29uKCB0cnVlLCB0YXJnZXQsIGV2ZW50cyApO1xuXHR9LFxuXG5cdGNsb3NlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIHRvb2x0aXAsXG5cdFx0XHR0aGF0ID0gdGhpcyxcblx0XHRcdHRhcmdldCA9ICQoIGV2ZW50ID8gZXZlbnQuY3VycmVudFRhcmdldCA6IHRoaXMuZWxlbWVudCApLFxuXHRcdFx0dG9vbHRpcERhdGEgPSB0aGlzLl9maW5kKCB0YXJnZXQgKTtcblxuXHRcdC8vIFRoZSB0b29sdGlwIG1heSBhbHJlYWR5IGJlIGNsb3NlZFxuXHRcdGlmICggIXRvb2x0aXBEYXRhICkge1xuXG5cdFx0XHQvLyBXZSBzZXQgdWktdG9vbHRpcC1vcGVuIGltbWVkaWF0ZWx5IHVwb24gb3BlbiAoaW4gb3BlbigpKSwgYnV0IG9ubHkgc2V0IHRoZVxuXHRcdFx0Ly8gYWRkaXRpb25hbCBkYXRhIG9uY2UgdGhlcmUncyBhY3R1YWxseSBjb250ZW50IHRvIHNob3cgKGluIF9vcGVuKCkpLiBTbyBldmVuIGlmIHRoZVxuXHRcdFx0Ly8gdG9vbHRpcCBkb2Vzbid0IGhhdmUgZnVsbCBkYXRhLCB3ZSBhbHdheXMgcmVtb3ZlIHVpLXRvb2x0aXAtb3BlbiBpbiBjYXNlIHdlJ3JlIGluXG5cdFx0XHQvLyB0aGUgcGVyaW9kIGJldHdlZW4gb3BlbigpIGFuZCBfb3BlbigpLlxuXHRcdFx0dGFyZ2V0LnJlbW92ZURhdGEoIFwidWktdG9vbHRpcC1vcGVuXCIgKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0b29sdGlwID0gdG9vbHRpcERhdGEudG9vbHRpcDtcblxuXHRcdC8vIERpc2FibGluZyBjbG9zZXMgdGhlIHRvb2x0aXAsIHNvIHdlIG5lZWQgdG8gdHJhY2sgd2hlbiB3ZSdyZSBjbG9zaW5nXG5cdFx0Ly8gdG8gYXZvaWQgYW4gaW5maW5pdGUgbG9vcCBpbiBjYXNlIHRoZSB0b29sdGlwIGJlY29tZXMgZGlzYWJsZWQgb24gY2xvc2Vcblx0XHRpZiAoIHRvb2x0aXBEYXRhLmNsb3NpbmcgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2xlYXIgdGhlIGludGVydmFsIGZvciBkZWxheWVkIHRyYWNraW5nIHRvb2x0aXBzXG5cdFx0Y2xlYXJJbnRlcnZhbCggdGhpcy5kZWxheWVkU2hvdyApO1xuXG5cdFx0Ly8gT25seSBzZXQgdGl0bGUgaWYgd2UgaGFkIG9uZSBiZWZvcmUgKHNlZSBjb21tZW50IGluIF9vcGVuKCkpXG5cdFx0Ly8gSWYgdGhlIHRpdGxlIGF0dHJpYnV0ZSBoYXMgY2hhbmdlZCBzaW5jZSBvcGVuKCksIGRvbid0IHJlc3RvcmVcblx0XHRpZiAoIHRhcmdldC5kYXRhKCBcInVpLXRvb2x0aXAtdGl0bGVcIiApICYmICF0YXJnZXQuYXR0ciggXCJ0aXRsZVwiICkgKSB7XG5cdFx0XHR0YXJnZXQuYXR0ciggXCJ0aXRsZVwiLCB0YXJnZXQuZGF0YSggXCJ1aS10b29sdGlwLXRpdGxlXCIgKSApO1xuXHRcdH1cblxuXHRcdHRoaXMuX3JlbW92ZURlc2NyaWJlZEJ5KCB0YXJnZXQgKTtcblxuXHRcdHRvb2x0aXBEYXRhLmhpZGluZyA9IHRydWU7XG5cdFx0dG9vbHRpcC5zdG9wKCB0cnVlICk7XG5cdFx0dGhpcy5faGlkZSggdG9vbHRpcCwgdGhpcy5vcHRpb25zLmhpZGUsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhhdC5fcmVtb3ZlVG9vbHRpcCggJCggdGhpcyApICk7XG5cdFx0fSApO1xuXG5cdFx0dGFyZ2V0LnJlbW92ZURhdGEoIFwidWktdG9vbHRpcC1vcGVuXCIgKTtcblx0XHR0aGlzLl9vZmYoIHRhcmdldCwgXCJtb3VzZWxlYXZlIGZvY3Vzb3V0IGtleXVwXCIgKTtcblxuXHRcdC8vIFJlbW92ZSAncmVtb3ZlJyBiaW5kaW5nIG9ubHkgb24gZGVsZWdhdGVkIHRhcmdldHNcblx0XHRpZiAoIHRhcmdldFsgMCBdICE9PSB0aGlzLmVsZW1lbnRbIDAgXSApIHtcblx0XHRcdHRoaXMuX29mZiggdGFyZ2V0LCBcInJlbW92ZVwiICk7XG5cdFx0fVxuXHRcdHRoaXMuX29mZiggdGhpcy5kb2N1bWVudCwgXCJtb3VzZW1vdmVcIiApO1xuXG5cdFx0aWYgKCBldmVudCAmJiBldmVudC50eXBlID09PSBcIm1vdXNlbGVhdmVcIiApIHtcblx0XHRcdCQuZWFjaCggdGhpcy5wYXJlbnRzLCBmdW5jdGlvbiggaWQsIHBhcmVudCApIHtcblx0XHRcdFx0JCggcGFyZW50LmVsZW1lbnQgKS5hdHRyKCBcInRpdGxlXCIsIHBhcmVudC50aXRsZSApO1xuXHRcdFx0XHRkZWxldGUgdGhhdC5wYXJlbnRzWyBpZCBdO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHRvb2x0aXBEYXRhLmNsb3NpbmcgPSB0cnVlO1xuXHRcdHRoaXMuX3RyaWdnZXIoIFwiY2xvc2VcIiwgZXZlbnQsIHsgdG9vbHRpcDogdG9vbHRpcCB9ICk7XG5cdFx0aWYgKCAhdG9vbHRpcERhdGEuaGlkaW5nICkge1xuXHRcdFx0dG9vbHRpcERhdGEuY2xvc2luZyA9IGZhbHNlO1xuXHRcdH1cblx0fSxcblxuXHRfdG9vbHRpcDogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0dmFyIHRvb2x0aXAgPSAkKCBcIjxkaXY+XCIgKS5hdHRyKCBcInJvbGVcIiwgXCJ0b29sdGlwXCIgKSxcblx0XHRcdGNvbnRlbnQgPSAkKCBcIjxkaXY+XCIgKS5hcHBlbmRUbyggdG9vbHRpcCApLFxuXHRcdFx0aWQgPSB0b29sdGlwLnVuaXF1ZUlkKCkuYXR0ciggXCJpZFwiICk7XG5cblx0XHR0aGlzLl9hZGRDbGFzcyggY29udGVudCwgXCJ1aS10b29sdGlwLWNvbnRlbnRcIiApO1xuXHRcdHRoaXMuX2FkZENsYXNzKCB0b29sdGlwLCBcInVpLXRvb2x0aXBcIiwgXCJ1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnRcIiApO1xuXG5cdFx0dG9vbHRpcC5hcHBlbmRUbyggdGhpcy5fYXBwZW5kVG8oIGVsZW1lbnQgKSApO1xuXG5cdFx0cmV0dXJuIHRoaXMudG9vbHRpcHNbIGlkIF0gPSB7XG5cdFx0XHRlbGVtZW50OiBlbGVtZW50LFxuXHRcdFx0dG9vbHRpcDogdG9vbHRpcFxuXHRcdH07XG5cdH0sXG5cblx0X2ZpbmQ6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIGlkID0gdGFyZ2V0LmRhdGEoIFwidWktdG9vbHRpcC1pZFwiICk7XG5cdFx0cmV0dXJuIGlkID8gdGhpcy50b29sdGlwc1sgaWQgXSA6IG51bGw7XG5cdH0sXG5cblx0X3JlbW92ZVRvb2x0aXA6IGZ1bmN0aW9uKCB0b29sdGlwICkge1xuXHRcdHRvb2x0aXAucmVtb3ZlKCk7XG5cdFx0ZGVsZXRlIHRoaXMudG9vbHRpcHNbIHRvb2x0aXAuYXR0ciggXCJpZFwiICkgXTtcblx0fSxcblxuXHRfYXBwZW5kVG86IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIGVsZW1lbnQgPSB0YXJnZXQuY2xvc2VzdCggXCIudWktZnJvbnQsIGRpYWxvZ1wiICk7XG5cblx0XHRpZiAoICFlbGVtZW50Lmxlbmd0aCApIHtcblx0XHRcdGVsZW1lbnQgPSB0aGlzLmRvY3VtZW50WyAwIF0uYm9keTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbWVudDtcblx0fSxcblxuXHRfZGVzdHJveTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHRoYXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2xvc2Ugb3BlbiB0b29sdGlwc1xuXHRcdCQuZWFjaCggdGhpcy50b29sdGlwcywgZnVuY3Rpb24oIGlkLCB0b29sdGlwRGF0YSApIHtcblxuXHRcdFx0Ly8gRGVsZWdhdGUgdG8gY2xvc2UgbWV0aG9kIHRvIGhhbmRsZSBjb21tb24gY2xlYW51cFxuXHRcdFx0dmFyIGV2ZW50ID0gJC5FdmVudCggXCJibHVyXCIgKSxcblx0XHRcdFx0ZWxlbWVudCA9IHRvb2x0aXBEYXRhLmVsZW1lbnQ7XG5cdFx0XHRldmVudC50YXJnZXQgPSBldmVudC5jdXJyZW50VGFyZ2V0ID0gZWxlbWVudFsgMCBdO1xuXHRcdFx0dGhhdC5jbG9zZSggZXZlbnQsIHRydWUgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIGltbWVkaWF0ZWx5OyBkZXN0cm95aW5nIGFuIG9wZW4gdG9vbHRpcCBkb2Vzbid0IHVzZSB0aGVcblx0XHRcdC8vIGhpZGUgYW5pbWF0aW9uXG5cdFx0XHQkKCBcIiNcIiArIGlkICkucmVtb3ZlKCk7XG5cblx0XHRcdC8vIFJlc3RvcmUgdGhlIHRpdGxlXG5cdFx0XHRpZiAoIGVsZW1lbnQuZGF0YSggXCJ1aS10b29sdGlwLXRpdGxlXCIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGUgdGl0bGUgYXR0cmlidXRlIGhhcyBjaGFuZ2VkIHNpbmNlIG9wZW4oKSwgZG9uJ3QgcmVzdG9yZVxuXHRcdFx0XHRpZiAoICFlbGVtZW50LmF0dHIoIFwidGl0bGVcIiApICkge1xuXHRcdFx0XHRcdGVsZW1lbnQuYXR0ciggXCJ0aXRsZVwiLCBlbGVtZW50LmRhdGEoIFwidWktdG9vbHRpcC10aXRsZVwiICkgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbGVtZW50LnJlbW92ZURhdGEoIFwidWktdG9vbHRpcC10aXRsZVwiICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHRoaXMubGl2ZVJlZ2lvbi5yZW1vdmUoKTtcblx0fVxufSApO1xuXG4vLyBERVBSRUNBVEVEXG4vLyBUT0RPOiBTd2l0Y2ggcmV0dXJuIGJhY2sgdG8gd2lkZ2V0IGRlY2xhcmF0aW9uIGF0IHRvcCBvZiBmaWxlIHdoZW4gdGhpcyBpcyByZW1vdmVkXG5pZiAoICQudWlCYWNrQ29tcGF0ICE9PSBmYWxzZSApIHtcblxuXHQvLyBCYWNrY29tcGF0IGZvciB0b29sdGlwQ2xhc3Mgb3B0aW9uXG5cdCQud2lkZ2V0KCBcInVpLnRvb2x0aXBcIiwgJC51aS50b29sdGlwLCB7XG5cdFx0b3B0aW9uczoge1xuXHRcdFx0dG9vbHRpcENsYXNzOiBudWxsXG5cdFx0fSxcblx0XHRfdG9vbHRpcDogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdG9vbHRpcERhdGEgPSB0aGlzLl9zdXBlckFwcGx5KCBhcmd1bWVudHMgKTtcblx0XHRcdGlmICggdGhpcy5vcHRpb25zLnRvb2x0aXBDbGFzcyApIHtcblx0XHRcdFx0dG9vbHRpcERhdGEudG9vbHRpcC5hZGRDbGFzcyggdGhpcy5vcHRpb25zLnRvb2x0aXBDbGFzcyApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRvb2x0aXBEYXRhO1xuXHRcdH1cblx0fSApO1xufVxuXG52YXIgd2lkZ2V0c1Rvb2x0aXAgPSAkLnVpLnRvb2x0aXA7XG5cblxuLyohXG4gKiBqUXVlcnkgVUkgRWZmZWN0cyAxLjEyLjFcbiAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICovXG5cbi8vPj5sYWJlbDogRWZmZWN0cyBDb3JlXG4vLz4+Z3JvdXA6IEVmZmVjdHNcbi8vIGpzY3M6ZGlzYWJsZSBtYXhpbXVtTGluZUxlbmd0aFxuLy8+PmRlc2NyaXB0aW9uOiBFeHRlbmRzIHRoZSBpbnRlcm5hbCBqUXVlcnkgZWZmZWN0cy4gSW5jbHVkZXMgbW9ycGhpbmcgYW5kIGVhc2luZy4gUmVxdWlyZWQgYnkgYWxsIG90aGVyIGVmZmVjdHMuXG4vLyBqc2NzOmVuYWJsZSBtYXhpbXVtTGluZUxlbmd0aFxuLy8+PmRvY3M6IGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL2NhdGVnb3J5L2VmZmVjdHMtY29yZS9cbi8vPj5kZW1vczogaHR0cDovL2pxdWVyeXVpLmNvbS9lZmZlY3QvXG5cblxuXG52YXIgZGF0YVNwYWNlID0gXCJ1aS1lZmZlY3RzLVwiLFxuXHRkYXRhU3BhY2VTdHlsZSA9IFwidWktZWZmZWN0cy1zdHlsZVwiLFxuXHRkYXRhU3BhY2VBbmltYXRlZCA9IFwidWktZWZmZWN0cy1hbmltYXRlZFwiLFxuXG5cdC8vIENyZWF0ZSBhIGxvY2FsIGpRdWVyeSBiZWNhdXNlIGpRdWVyeSBDb2xvciByZWxpZXMgb24gaXQgYW5kIHRoZVxuXHQvLyBnbG9iYWwgbWF5IG5vdCBleGlzdCB3aXRoIEFNRCBhbmQgYSBjdXN0b20gYnVpbGQgKCMxMDE5OSlcblx0alF1ZXJ5ID0gJDtcblxuJC5lZmZlY3RzID0ge1xuXHRlZmZlY3Q6IHt9XG59O1xuXG4vKiFcbiAqIGpRdWVyeSBDb2xvciBBbmltYXRpb25zIHYyLjEuMlxuICogaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnktY29sb3JcbiAqXG4gKiBDb3B5cmlnaHQgMjAxNCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogV2VkIEphbiAxNiAwODo0NzowOSAyMDEzIC0wNjAwXG4gKi9cbiggZnVuY3Rpb24oIGpRdWVyeSwgdW5kZWZpbmVkICkge1xuXG5cdHZhciBzdGVwSG9va3MgPSBcImJhY2tncm91bmRDb2xvciBib3JkZXJCb3R0b21Db2xvciBib3JkZXJMZWZ0Q29sb3IgYm9yZGVyUmlnaHRDb2xvciBcIiArXG5cdFx0XCJib3JkZXJUb3BDb2xvciBjb2xvciBjb2x1bW5SdWxlQ29sb3Igb3V0bGluZUNvbG9yIHRleHREZWNvcmF0aW9uQ29sb3IgdGV4dEVtcGhhc2lzQ29sb3JcIixcblxuXHQvLyBQbHVzZXF1YWxzIHRlc3QgZm9yICs9IDEwMCAtPSAxMDBcblx0cnBsdXNlcXVhbHMgPSAvXihbXFwtK10pPVxccyooXFxkK1xcLj9cXGQqKS8sXG5cblx0Ly8gQSBzZXQgb2YgUkUncyB0aGF0IGNhbiBtYXRjaCBzdHJpbmdzIGFuZCBnZW5lcmF0ZSBjb2xvciB0dXBsZXMuXG5cdHN0cmluZ1BhcnNlcnMgPSBbIHtcblx0XHRcdHJlOiAvcmdiYT9cXChcXHMqKFxcZHsxLDN9KVxccyosXFxzKihcXGR7MSwzfSlcXHMqLFxccyooXFxkezEsM30pXFxzKig/OixcXHMqKFxcZD8oPzpcXC5cXGQrKT8pXFxzKik/XFwpLyxcblx0XHRcdHBhcnNlOiBmdW5jdGlvbiggZXhlY1Jlc3VsdCApIHtcblx0XHRcdFx0cmV0dXJuIFtcblx0XHRcdFx0XHRleGVjUmVzdWx0WyAxIF0sXG5cdFx0XHRcdFx0ZXhlY1Jlc3VsdFsgMiBdLFxuXHRcdFx0XHRcdGV4ZWNSZXN1bHRbIDMgXSxcblx0XHRcdFx0XHRleGVjUmVzdWx0WyA0IF1cblx0XHRcdFx0XTtcblx0XHRcdH1cblx0XHR9LCB7XG5cdFx0XHRyZTogL3JnYmE/XFwoXFxzKihcXGQrKD86XFwuXFxkKyk/KVxcJVxccyosXFxzKihcXGQrKD86XFwuXFxkKyk/KVxcJVxccyosXFxzKihcXGQrKD86XFwuXFxkKyk/KVxcJVxccyooPzosXFxzKihcXGQ/KD86XFwuXFxkKyk/KVxccyopP1xcKS8sXG5cdFx0XHRwYXJzZTogZnVuY3Rpb24oIGV4ZWNSZXN1bHQgKSB7XG5cdFx0XHRcdHJldHVybiBbXG5cdFx0XHRcdFx0ZXhlY1Jlc3VsdFsgMSBdICogMi41NSxcblx0XHRcdFx0XHRleGVjUmVzdWx0WyAyIF0gKiAyLjU1LFxuXHRcdFx0XHRcdGV4ZWNSZXN1bHRbIDMgXSAqIDIuNTUsXG5cdFx0XHRcdFx0ZXhlY1Jlc3VsdFsgNCBdXG5cdFx0XHRcdF07XG5cdFx0XHR9XG5cdFx0fSwge1xuXG5cdFx0XHQvLyBUaGlzIHJlZ2V4IGlnbm9yZXMgQS1GIGJlY2F1c2UgaXQncyBjb21wYXJlZCBhZ2FpbnN0IGFuIGFscmVhZHkgbG93ZXJjYXNlZCBzdHJpbmdcblx0XHRcdHJlOiAvIyhbYS1mMC05XXsyfSkoW2EtZjAtOV17Mn0pKFthLWYwLTldezJ9KS8sXG5cdFx0XHRwYXJzZTogZnVuY3Rpb24oIGV4ZWNSZXN1bHQgKSB7XG5cdFx0XHRcdHJldHVybiBbXG5cdFx0XHRcdFx0cGFyc2VJbnQoIGV4ZWNSZXN1bHRbIDEgXSwgMTYgKSxcblx0XHRcdFx0XHRwYXJzZUludCggZXhlY1Jlc3VsdFsgMiBdLCAxNiApLFxuXHRcdFx0XHRcdHBhcnNlSW50KCBleGVjUmVzdWx0WyAzIF0sIDE2IClcblx0XHRcdFx0XTtcblx0XHRcdH1cblx0XHR9LCB7XG5cblx0XHRcdC8vIFRoaXMgcmVnZXggaWdub3JlcyBBLUYgYmVjYXVzZSBpdCdzIGNvbXBhcmVkIGFnYWluc3QgYW4gYWxyZWFkeSBsb3dlcmNhc2VkIHN0cmluZ1xuXHRcdFx0cmU6IC8jKFthLWYwLTldKShbYS1mMC05XSkoW2EtZjAtOV0pLyxcblx0XHRcdHBhcnNlOiBmdW5jdGlvbiggZXhlY1Jlc3VsdCApIHtcblx0XHRcdFx0cmV0dXJuIFtcblx0XHRcdFx0XHRwYXJzZUludCggZXhlY1Jlc3VsdFsgMSBdICsgZXhlY1Jlc3VsdFsgMSBdLCAxNiApLFxuXHRcdFx0XHRcdHBhcnNlSW50KCBleGVjUmVzdWx0WyAyIF0gKyBleGVjUmVzdWx0WyAyIF0sIDE2ICksXG5cdFx0XHRcdFx0cGFyc2VJbnQoIGV4ZWNSZXN1bHRbIDMgXSArIGV4ZWNSZXN1bHRbIDMgXSwgMTYgKVxuXHRcdFx0XHRdO1xuXHRcdFx0fVxuXHRcdH0sIHtcblx0XHRcdHJlOiAvaHNsYT9cXChcXHMqKFxcZCsoPzpcXC5cXGQrKT8pXFxzKixcXHMqKFxcZCsoPzpcXC5cXGQrKT8pXFwlXFxzKixcXHMqKFxcZCsoPzpcXC5cXGQrKT8pXFwlXFxzKig/OixcXHMqKFxcZD8oPzpcXC5cXGQrKT8pXFxzKik/XFwpLyxcblx0XHRcdHNwYWNlOiBcImhzbGFcIixcblx0XHRcdHBhcnNlOiBmdW5jdGlvbiggZXhlY1Jlc3VsdCApIHtcblx0XHRcdFx0cmV0dXJuIFtcblx0XHRcdFx0XHRleGVjUmVzdWx0WyAxIF0sXG5cdFx0XHRcdFx0ZXhlY1Jlc3VsdFsgMiBdIC8gMTAwLFxuXHRcdFx0XHRcdGV4ZWNSZXN1bHRbIDMgXSAvIDEwMCxcblx0XHRcdFx0XHRleGVjUmVzdWx0WyA0IF1cblx0XHRcdFx0XTtcblx0XHRcdH1cblx0XHR9IF0sXG5cblx0Ly8gSlF1ZXJ5LkNvbG9yKCApXG5cdGNvbG9yID0galF1ZXJ5LkNvbG9yID0gZnVuY3Rpb24oIGNvbG9yLCBncmVlbiwgYmx1ZSwgYWxwaGEgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuQ29sb3IuZm4ucGFyc2UoIGNvbG9yLCBncmVlbiwgYmx1ZSwgYWxwaGEgKTtcblx0fSxcblx0c3BhY2VzID0ge1xuXHRcdHJnYmE6IHtcblx0XHRcdHByb3BzOiB7XG5cdFx0XHRcdHJlZDoge1xuXHRcdFx0XHRcdGlkeDogMCxcblx0XHRcdFx0XHR0eXBlOiBcImJ5dGVcIlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRncmVlbjoge1xuXHRcdFx0XHRcdGlkeDogMSxcblx0XHRcdFx0XHR0eXBlOiBcImJ5dGVcIlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRibHVlOiB7XG5cdFx0XHRcdFx0aWR4OiAyLFxuXHRcdFx0XHRcdHR5cGU6IFwiYnl0ZVwiXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0aHNsYToge1xuXHRcdFx0cHJvcHM6IHtcblx0XHRcdFx0aHVlOiB7XG5cdFx0XHRcdFx0aWR4OiAwLFxuXHRcdFx0XHRcdHR5cGU6IFwiZGVncmVlc1wiXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHNhdHVyYXRpb246IHtcblx0XHRcdFx0XHRpZHg6IDEsXG5cdFx0XHRcdFx0dHlwZTogXCJwZXJjZW50XCJcblx0XHRcdFx0fSxcblx0XHRcdFx0bGlnaHRuZXNzOiB7XG5cdFx0XHRcdFx0aWR4OiAyLFxuXHRcdFx0XHRcdHR5cGU6IFwicGVyY2VudFwiXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdHByb3BUeXBlcyA9IHtcblx0XHRcImJ5dGVcIjoge1xuXHRcdFx0Zmxvb3I6IHRydWUsXG5cdFx0XHRtYXg6IDI1NVxuXHRcdH0sXG5cdFx0XCJwZXJjZW50XCI6IHtcblx0XHRcdG1heDogMVxuXHRcdH0sXG5cdFx0XCJkZWdyZWVzXCI6IHtcblx0XHRcdG1vZDogMzYwLFxuXHRcdFx0Zmxvb3I6IHRydWVcblx0XHR9XG5cdH0sXG5cdHN1cHBvcnQgPSBjb2xvci5zdXBwb3J0ID0ge30sXG5cblx0Ly8gRWxlbWVudCBmb3Igc3VwcG9ydCB0ZXN0c1xuXHRzdXBwb3J0RWxlbSA9IGpRdWVyeSggXCI8cD5cIiApWyAwIF0sXG5cblx0Ly8gQ29sb3JzID0galF1ZXJ5LkNvbG9yLm5hbWVzXG5cdGNvbG9ycyxcblxuXHQvLyBMb2NhbCBhbGlhc2VzIG9mIGZ1bmN0aW9ucyBjYWxsZWQgb2Z0ZW5cblx0ZWFjaCA9IGpRdWVyeS5lYWNoO1xuXG4vLyBEZXRlcm1pbmUgcmdiYSBzdXBwb3J0IGltbWVkaWF0ZWx5XG5zdXBwb3J0RWxlbS5zdHlsZS5jc3NUZXh0ID0gXCJiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMSwxLDEsLjUpXCI7XG5zdXBwb3J0LnJnYmEgPSBzdXBwb3J0RWxlbS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IuaW5kZXhPZiggXCJyZ2JhXCIgKSA+IC0xO1xuXG4vLyBEZWZpbmUgY2FjaGUgbmFtZSBhbmQgYWxwaGEgcHJvcGVydGllc1xuLy8gZm9yIHJnYmEgYW5kIGhzbGEgc3BhY2VzXG5lYWNoKCBzcGFjZXMsIGZ1bmN0aW9uKCBzcGFjZU5hbWUsIHNwYWNlICkge1xuXHRzcGFjZS5jYWNoZSA9IFwiX1wiICsgc3BhY2VOYW1lO1xuXHRzcGFjZS5wcm9wcy5hbHBoYSA9IHtcblx0XHRpZHg6IDMsXG5cdFx0dHlwZTogXCJwZXJjZW50XCIsXG5cdFx0ZGVmOiAxXG5cdH07XG59ICk7XG5cbmZ1bmN0aW9uIGNsYW1wKCB2YWx1ZSwgcHJvcCwgYWxsb3dFbXB0eSApIHtcblx0dmFyIHR5cGUgPSBwcm9wVHlwZXNbIHByb3AudHlwZSBdIHx8IHt9O1xuXG5cdGlmICggdmFsdWUgPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gKCBhbGxvd0VtcHR5IHx8ICFwcm9wLmRlZiApID8gbnVsbCA6IHByb3AuZGVmO1xuXHR9XG5cblx0Ly8gfn4gaXMgYW4gc2hvcnQgd2F5IG9mIGRvaW5nIGZsb29yIGZvciBwb3NpdGl2ZSBudW1iZXJzXG5cdHZhbHVlID0gdHlwZS5mbG9vciA/IH5+dmFsdWUgOiBwYXJzZUZsb2F0KCB2YWx1ZSApO1xuXG5cdC8vIElFIHdpbGwgcGFzcyBpbiBlbXB0eSBzdHJpbmdzIGFzIHZhbHVlIGZvciBhbHBoYSxcblx0Ly8gd2hpY2ggd2lsbCBoaXQgdGhpcyBjYXNlXG5cdGlmICggaXNOYU4oIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuIHByb3AuZGVmO1xuXHR9XG5cblx0aWYgKCB0eXBlLm1vZCApIHtcblxuXHRcdC8vIFdlIGFkZCBtb2QgYmVmb3JlIG1vZGRpbmcgdG8gbWFrZSBzdXJlIHRoYXQgbmVnYXRpdmVzIHZhbHVlc1xuXHRcdC8vIGdldCBjb252ZXJ0ZWQgcHJvcGVybHk6IC0xMCAtPiAzNTBcblx0XHRyZXR1cm4gKCB2YWx1ZSArIHR5cGUubW9kICkgJSB0eXBlLm1vZDtcblx0fVxuXG5cdC8vIEZvciBub3cgYWxsIHByb3BlcnR5IHR5cGVzIHdpdGhvdXQgbW9kIGhhdmUgbWluIGFuZCBtYXhcblx0cmV0dXJuIDAgPiB2YWx1ZSA/IDAgOiB0eXBlLm1heCA8IHZhbHVlID8gdHlwZS5tYXggOiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gc3RyaW5nUGFyc2UoIHN0cmluZyApIHtcblx0dmFyIGluc3QgPSBjb2xvcigpLFxuXHRcdHJnYmEgPSBpbnN0Ll9yZ2JhID0gW107XG5cblx0c3RyaW5nID0gc3RyaW5nLnRvTG93ZXJDYXNlKCk7XG5cblx0ZWFjaCggc3RyaW5nUGFyc2VycywgZnVuY3Rpb24oIGksIHBhcnNlciApIHtcblx0XHR2YXIgcGFyc2VkLFxuXHRcdFx0bWF0Y2ggPSBwYXJzZXIucmUuZXhlYyggc3RyaW5nICksXG5cdFx0XHR2YWx1ZXMgPSBtYXRjaCAmJiBwYXJzZXIucGFyc2UoIG1hdGNoICksXG5cdFx0XHRzcGFjZU5hbWUgPSBwYXJzZXIuc3BhY2UgfHwgXCJyZ2JhXCI7XG5cblx0XHRpZiAoIHZhbHVlcyApIHtcblx0XHRcdHBhcnNlZCA9IGluc3RbIHNwYWNlTmFtZSBdKCB2YWx1ZXMgKTtcblxuXHRcdFx0Ly8gSWYgdGhpcyB3YXMgYW4gcmdiYSBwYXJzZSB0aGUgYXNzaWdubWVudCBtaWdodCBoYXBwZW4gdHdpY2Vcblx0XHRcdC8vIG9oIHdlbGwuLi4uXG5cdFx0XHRpbnN0WyBzcGFjZXNbIHNwYWNlTmFtZSBdLmNhY2hlIF0gPSBwYXJzZWRbIHNwYWNlc1sgc3BhY2VOYW1lIF0uY2FjaGUgXTtcblx0XHRcdHJnYmEgPSBpbnN0Ll9yZ2JhID0gcGFyc2VkLl9yZ2JhO1xuXG5cdFx0XHQvLyBFeGl0IGVhY2goIHN0cmluZ1BhcnNlcnMgKSBoZXJlIGJlY2F1c2Ugd2UgbWF0Y2hlZFxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fSApO1xuXG5cdC8vIEZvdW5kIGEgc3RyaW5nUGFyc2VyIHRoYXQgaGFuZGxlZCBpdFxuXHRpZiAoIHJnYmEubGVuZ3RoICkge1xuXG5cdFx0Ly8gSWYgdGhpcyBjYW1lIGZyb20gYSBwYXJzZWQgc3RyaW5nLCBmb3JjZSBcInRyYW5zcGFyZW50XCIgd2hlbiBhbHBoYSBpcyAwXG5cdFx0Ly8gY2hyb21lLCAoYW5kIG1heWJlIG90aGVycykgcmV0dXJuIFwidHJhbnNwYXJlbnRcIiBhcyByZ2JhKDAsMCwwLDApXG5cdFx0aWYgKCByZ2JhLmpvaW4oKSA9PT0gXCIwLDAsMCwwXCIgKSB7XG5cdFx0XHRqUXVlcnkuZXh0ZW5kKCByZ2JhLCBjb2xvcnMudHJhbnNwYXJlbnQgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGluc3Q7XG5cdH1cblxuXHQvLyBOYW1lZCBjb2xvcnNcblx0cmV0dXJuIGNvbG9yc1sgc3RyaW5nIF07XG59XG5cbmNvbG9yLmZuID0galF1ZXJ5LmV4dGVuZCggY29sb3IucHJvdG90eXBlLCB7XG5cdHBhcnNlOiBmdW5jdGlvbiggcmVkLCBncmVlbiwgYmx1ZSwgYWxwaGEgKSB7XG5cdFx0aWYgKCByZWQgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHRoaXMuX3JnYmEgPSBbIG51bGwsIG51bGwsIG51bGwsIG51bGwgXTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHJlZC5qcXVlcnkgfHwgcmVkLm5vZGVUeXBlICkge1xuXHRcdFx0cmVkID0galF1ZXJ5KCByZWQgKS5jc3MoIGdyZWVuICk7XG5cdFx0XHRncmVlbiA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHR2YXIgaW5zdCA9IHRoaXMsXG5cdFx0XHR0eXBlID0galF1ZXJ5LnR5cGUoIHJlZCApLFxuXHRcdFx0cmdiYSA9IHRoaXMuX3JnYmEgPSBbXTtcblxuXHRcdC8vIE1vcmUgdGhhbiAxIGFyZ3VtZW50IHNwZWNpZmllZCAtIGFzc3VtZSAoIHJlZCwgZ3JlZW4sIGJsdWUsIGFscGhhIClcblx0XHRpZiAoIGdyZWVuICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZWQgPSBbIHJlZCwgZ3JlZW4sIGJsdWUsIGFscGhhIF07XG5cdFx0XHR0eXBlID0gXCJhcnJheVwiO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnBhcnNlKCBzdHJpbmdQYXJzZSggcmVkICkgfHwgY29sb3JzLl9kZWZhdWx0ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlID09PSBcImFycmF5XCIgKSB7XG5cdFx0XHRlYWNoKCBzcGFjZXMucmdiYS5wcm9wcywgZnVuY3Rpb24oIGtleSwgcHJvcCApIHtcblx0XHRcdFx0cmdiYVsgcHJvcC5pZHggXSA9IGNsYW1wKCByZWRbIHByb3AuaWR4IF0sIHByb3AgKTtcblx0XHRcdH0gKTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdGlmICggcmVkIGluc3RhbmNlb2YgY29sb3IgKSB7XG5cdFx0XHRcdGVhY2goIHNwYWNlcywgZnVuY3Rpb24oIHNwYWNlTmFtZSwgc3BhY2UgKSB7XG5cdFx0XHRcdFx0aWYgKCByZWRbIHNwYWNlLmNhY2hlIF0gKSB7XG5cdFx0XHRcdFx0XHRpbnN0WyBzcGFjZS5jYWNoZSBdID0gcmVkWyBzcGFjZS5jYWNoZSBdLnNsaWNlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlYWNoKCBzcGFjZXMsIGZ1bmN0aW9uKCBzcGFjZU5hbWUsIHNwYWNlICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSA9IHNwYWNlLmNhY2hlO1xuXHRcdFx0XHRcdGVhY2goIHNwYWNlLnByb3BzLCBmdW5jdGlvbigga2V5LCBwcm9wICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgY2FjaGUgZG9lc24ndCBleGlzdCwgYW5kIHdlIGtub3cgaG93IHRvIGNvbnZlcnRcblx0XHRcdFx0XHRcdGlmICggIWluc3RbIGNhY2hlIF0gJiYgc3BhY2UudG8gKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHZhbHVlIHdhcyBudWxsLCB3ZSBkb24ndCBuZWVkIHRvIGNvcHkgaXRcblx0XHRcdFx0XHRcdFx0Ly8gaWYgdGhlIGtleSB3YXMgYWxwaGEsIHdlIGRvbid0IG5lZWQgdG8gY29weSBpdCBlaXRoZXJcblx0XHRcdFx0XHRcdFx0aWYgKCBrZXkgPT09IFwiYWxwaGFcIiB8fCByZWRbIGtleSBdID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGluc3RbIGNhY2hlIF0gPSBzcGFjZS50byggaW5zdC5fcmdiYSApO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBUaGlzIGlzIHRoZSBvbmx5IGNhc2Ugd2hlcmUgd2UgYWxsb3cgbnVsbHMgZm9yIEFMTCBwcm9wZXJ0aWVzLlxuXHRcdFx0XHRcdFx0Ly8gY2FsbCBjbGFtcCB3aXRoIGFsd2F5c0FsbG93RW1wdHlcblx0XHRcdFx0XHRcdGluc3RbIGNhY2hlIF1bIHByb3AuaWR4IF0gPSBjbGFtcCggcmVkWyBrZXkgXSwgcHJvcCwgdHJ1ZSApO1xuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRcdC8vIEV2ZXJ5dGhpbmcgZGVmaW5lZCBidXQgYWxwaGE/XG5cdFx0XHRcdFx0aWYgKCBpbnN0WyBjYWNoZSBdICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBudWxsLCBpbnN0WyBjYWNoZSBdLnNsaWNlKCAwLCAzICkgKSA8IDAgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgZGVmYXVsdCBvZiAxXG5cdFx0XHRcdFx0XHRpbnN0WyBjYWNoZSBdWyAzIF0gPSAxO1xuXHRcdFx0XHRcdFx0aWYgKCBzcGFjZS5mcm9tICkge1xuXHRcdFx0XHRcdFx0XHRpbnN0Ll9yZ2JhID0gc3BhY2UuZnJvbSggaW5zdFsgY2FjaGUgXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHR9LFxuXHRpczogZnVuY3Rpb24oIGNvbXBhcmUgKSB7XG5cdFx0dmFyIGlzID0gY29sb3IoIGNvbXBhcmUgKSxcblx0XHRcdHNhbWUgPSB0cnVlLFxuXHRcdFx0aW5zdCA9IHRoaXM7XG5cblx0XHRlYWNoKCBzcGFjZXMsIGZ1bmN0aW9uKCBfLCBzcGFjZSApIHtcblx0XHRcdHZhciBsb2NhbENhY2hlLFxuXHRcdFx0XHRpc0NhY2hlID0gaXNbIHNwYWNlLmNhY2hlIF07XG5cdFx0XHRpZiAoIGlzQ2FjaGUgKSB7XG5cdFx0XHRcdGxvY2FsQ2FjaGUgPSBpbnN0WyBzcGFjZS5jYWNoZSBdIHx8IHNwYWNlLnRvICYmIHNwYWNlLnRvKCBpbnN0Ll9yZ2JhICkgfHwgW107XG5cdFx0XHRcdGVhY2goIHNwYWNlLnByb3BzLCBmdW5jdGlvbiggXywgcHJvcCApIHtcblx0XHRcdFx0XHRpZiAoIGlzQ2FjaGVbIHByb3AuaWR4IF0gIT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHNhbWUgPSAoIGlzQ2FjaGVbIHByb3AuaWR4IF0gPT09IGxvY2FsQ2FjaGVbIHByb3AuaWR4IF0gKTtcblx0XHRcdFx0XHRcdHJldHVybiBzYW1lO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHNhbWU7XG5cdFx0fSApO1xuXHRcdHJldHVybiBzYW1lO1xuXHR9LFxuXHRfc3BhY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB1c2VkID0gW10sXG5cdFx0XHRpbnN0ID0gdGhpcztcblx0XHRlYWNoKCBzcGFjZXMsIGZ1bmN0aW9uKCBzcGFjZU5hbWUsIHNwYWNlICkge1xuXHRcdFx0aWYgKCBpbnN0WyBzcGFjZS5jYWNoZSBdICkge1xuXHRcdFx0XHR1c2VkLnB1c2goIHNwYWNlTmFtZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gdXNlZC5wb3AoKTtcblx0fSxcblx0dHJhbnNpdGlvbjogZnVuY3Rpb24oIG90aGVyLCBkaXN0YW5jZSApIHtcblx0XHR2YXIgZW5kID0gY29sb3IoIG90aGVyICksXG5cdFx0XHRzcGFjZU5hbWUgPSBlbmQuX3NwYWNlKCksXG5cdFx0XHRzcGFjZSA9IHNwYWNlc1sgc3BhY2VOYW1lIF0sXG5cdFx0XHRzdGFydENvbG9yID0gdGhpcy5hbHBoYSgpID09PSAwID8gY29sb3IoIFwidHJhbnNwYXJlbnRcIiApIDogdGhpcyxcblx0XHRcdHN0YXJ0ID0gc3RhcnRDb2xvclsgc3BhY2UuY2FjaGUgXSB8fCBzcGFjZS50byggc3RhcnRDb2xvci5fcmdiYSApLFxuXHRcdFx0cmVzdWx0ID0gc3RhcnQuc2xpY2UoKTtcblxuXHRcdGVuZCA9IGVuZFsgc3BhY2UuY2FjaGUgXTtcblx0XHRlYWNoKCBzcGFjZS5wcm9wcywgZnVuY3Rpb24oIGtleSwgcHJvcCApIHtcblx0XHRcdHZhciBpbmRleCA9IHByb3AuaWR4LFxuXHRcdFx0XHRzdGFydFZhbHVlID0gc3RhcnRbIGluZGV4IF0sXG5cdFx0XHRcdGVuZFZhbHVlID0gZW5kWyBpbmRleCBdLFxuXHRcdFx0XHR0eXBlID0gcHJvcFR5cGVzWyBwcm9wLnR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgbnVsbCwgZG9uJ3Qgb3ZlcnJpZGUgc3RhcnQgdmFsdWVcblx0XHRcdGlmICggZW5kVmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgbnVsbCAtIHVzZSBlbmRcblx0XHRcdGlmICggc3RhcnRWYWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0cmVzdWx0WyBpbmRleCBdID0gZW5kVmFsdWU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoIHR5cGUubW9kICkge1xuXHRcdFx0XHRcdGlmICggZW5kVmFsdWUgLSBzdGFydFZhbHVlID4gdHlwZS5tb2QgLyAyICkge1xuXHRcdFx0XHRcdFx0c3RhcnRWYWx1ZSArPSB0eXBlLm1vZDtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBzdGFydFZhbHVlIC0gZW5kVmFsdWUgPiB0eXBlLm1vZCAvIDIgKSB7XG5cdFx0XHRcdFx0XHRzdGFydFZhbHVlIC09IHR5cGUubW9kO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXN1bHRbIGluZGV4IF0gPSBjbGFtcCggKCBlbmRWYWx1ZSAtIHN0YXJ0VmFsdWUgKSAqIGRpc3RhbmNlICsgc3RhcnRWYWx1ZSwgcHJvcCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gdGhpc1sgc3BhY2VOYW1lIF0oIHJlc3VsdCApO1xuXHR9LFxuXHRibGVuZDogZnVuY3Rpb24oIG9wYXF1ZSApIHtcblxuXHRcdC8vIElmIHdlIGFyZSBhbHJlYWR5IG9wYXF1ZSAtIHJldHVybiBvdXJzZWxmXG5cdFx0aWYgKCB0aGlzLl9yZ2JhWyAzIF0gPT09IDEgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHR2YXIgcmdiID0gdGhpcy5fcmdiYS5zbGljZSgpLFxuXHRcdFx0YSA9IHJnYi5wb3AoKSxcblx0XHRcdGJsZW5kID0gY29sb3IoIG9wYXF1ZSApLl9yZ2JhO1xuXG5cdFx0cmV0dXJuIGNvbG9yKCBqUXVlcnkubWFwKCByZ2IsIGZ1bmN0aW9uKCB2LCBpICkge1xuXHRcdFx0cmV0dXJuICggMSAtIGEgKSAqIGJsZW5kWyBpIF0gKyBhICogdjtcblx0XHR9ICkgKTtcblx0fSxcblx0dG9SZ2JhU3RyaW5nOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgcHJlZml4ID0gXCJyZ2JhKFwiLFxuXHRcdFx0cmdiYSA9IGpRdWVyeS5tYXAoIHRoaXMuX3JnYmEsIGZ1bmN0aW9uKCB2LCBpICkge1xuXHRcdFx0XHRyZXR1cm4gdiA9PSBudWxsID8gKCBpID4gMiA/IDEgOiAwICkgOiB2O1xuXHRcdFx0fSApO1xuXG5cdFx0aWYgKCByZ2JhWyAzIF0gPT09IDEgKSB7XG5cdFx0XHRyZ2JhLnBvcCgpO1xuXHRcdFx0cHJlZml4ID0gXCJyZ2IoXCI7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHByZWZpeCArIHJnYmEuam9pbigpICsgXCIpXCI7XG5cdH0sXG5cdHRvSHNsYVN0cmluZzogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHByZWZpeCA9IFwiaHNsYShcIixcblx0XHRcdGhzbGEgPSBqUXVlcnkubWFwKCB0aGlzLmhzbGEoKSwgZnVuY3Rpb24oIHYsIGkgKSB7XG5cdFx0XHRcdGlmICggdiA9PSBudWxsICkge1xuXHRcdFx0XHRcdHYgPSBpID4gMiA/IDEgOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2F0Y2ggMSBhbmQgMlxuXHRcdFx0XHRpZiAoIGkgJiYgaSA8IDMgKSB7XG5cdFx0XHRcdFx0diA9IE1hdGgucm91bmQoIHYgKiAxMDAgKSArIFwiJVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2O1xuXHRcdFx0fSApO1xuXG5cdFx0aWYgKCBoc2xhWyAzIF0gPT09IDEgKSB7XG5cdFx0XHRoc2xhLnBvcCgpO1xuXHRcdFx0cHJlZml4ID0gXCJoc2woXCI7XG5cdFx0fVxuXHRcdHJldHVybiBwcmVmaXggKyBoc2xhLmpvaW4oKSArIFwiKVwiO1xuXHR9LFxuXHR0b0hleFN0cmluZzogZnVuY3Rpb24oIGluY2x1ZGVBbHBoYSApIHtcblx0XHR2YXIgcmdiYSA9IHRoaXMuX3JnYmEuc2xpY2UoKSxcblx0XHRcdGFscGhhID0gcmdiYS5wb3AoKTtcblxuXHRcdGlmICggaW5jbHVkZUFscGhhICkge1xuXHRcdFx0cmdiYS5wdXNoKCB+figgYWxwaGEgKiAyNTUgKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBcIiNcIiArIGpRdWVyeS5tYXAoIHJnYmEsIGZ1bmN0aW9uKCB2ICkge1xuXG5cdFx0XHQvLyBEZWZhdWx0IHRvIDAgd2hlbiBudWxscyBleGlzdFxuXHRcdFx0diA9ICggdiB8fCAwICkudG9TdHJpbmcoIDE2ICk7XG5cdFx0XHRyZXR1cm4gdi5sZW5ndGggPT09IDEgPyBcIjBcIiArIHYgOiB2O1xuXHRcdH0gKS5qb2luKCBcIlwiICk7XG5cdH0sXG5cdHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fcmdiYVsgMyBdID09PSAwID8gXCJ0cmFuc3BhcmVudFwiIDogdGhpcy50b1JnYmFTdHJpbmcoKTtcblx0fVxufSApO1xuY29sb3IuZm4ucGFyc2UucHJvdG90eXBlID0gY29sb3IuZm47XG5cbi8vIEhzbGEgY29udmVyc2lvbnMgYWRhcHRlZCBmcm9tOlxuLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9tYWFzaGFhY2svc291cmNlL2Jyb3dzZS9wYWNrYWdlcy9ncmFwaGljcy90cnVuay9zcmMvZ3JhcGhpY3MvY29sb3JzL0hVRTJSR0IuYXM/cj01MDIxXG5cbmZ1bmN0aW9uIGh1ZTJyZ2IoIHAsIHEsIGggKSB7XG5cdGggPSAoIGggKyAxICkgJSAxO1xuXHRpZiAoIGggKiA2IDwgMSApIHtcblx0XHRyZXR1cm4gcCArICggcSAtIHAgKSAqIGggKiA2O1xuXHR9XG5cdGlmICggaCAqIDIgPCAxICkge1xuXHRcdHJldHVybiBxO1xuXHR9XG5cdGlmICggaCAqIDMgPCAyICkge1xuXHRcdHJldHVybiBwICsgKCBxIC0gcCApICogKCAoIDIgLyAzICkgLSBoICkgKiA2O1xuXHR9XG5cdHJldHVybiBwO1xufVxuXG5zcGFjZXMuaHNsYS50byA9IGZ1bmN0aW9uKCByZ2JhICkge1xuXHRpZiAoIHJnYmFbIDAgXSA9PSBudWxsIHx8IHJnYmFbIDEgXSA9PSBudWxsIHx8IHJnYmFbIDIgXSA9PSBudWxsICkge1xuXHRcdHJldHVybiBbIG51bGwsIG51bGwsIG51bGwsIHJnYmFbIDMgXSBdO1xuXHR9XG5cdHZhciByID0gcmdiYVsgMCBdIC8gMjU1LFxuXHRcdGcgPSByZ2JhWyAxIF0gLyAyNTUsXG5cdFx0YiA9IHJnYmFbIDIgXSAvIDI1NSxcblx0XHRhID0gcmdiYVsgMyBdLFxuXHRcdG1heCA9IE1hdGgubWF4KCByLCBnLCBiICksXG5cdFx0bWluID0gTWF0aC5taW4oIHIsIGcsIGIgKSxcblx0XHRkaWZmID0gbWF4IC0gbWluLFxuXHRcdGFkZCA9IG1heCArIG1pbixcblx0XHRsID0gYWRkICogMC41LFxuXHRcdGgsIHM7XG5cblx0aWYgKCBtaW4gPT09IG1heCApIHtcblx0XHRoID0gMDtcblx0fSBlbHNlIGlmICggciA9PT0gbWF4ICkge1xuXHRcdGggPSAoIDYwICogKCBnIC0gYiApIC8gZGlmZiApICsgMzYwO1xuXHR9IGVsc2UgaWYgKCBnID09PSBtYXggKSB7XG5cdFx0aCA9ICggNjAgKiAoIGIgLSByICkgLyBkaWZmICkgKyAxMjA7XG5cdH0gZWxzZSB7XG5cdFx0aCA9ICggNjAgKiAoIHIgLSBnICkgLyBkaWZmICkgKyAyNDA7XG5cdH1cblxuXHQvLyBDaHJvbWEgKGRpZmYpID09IDAgbWVhbnMgZ3JleXNjYWxlIHdoaWNoLCBieSBkZWZpbml0aW9uLCBzYXR1cmF0aW9uID0gMCVcblx0Ly8gb3RoZXJ3aXNlLCBzYXR1cmF0aW9uIGlzIGJhc2VkIG9uIHRoZSByYXRpbyBvZiBjaHJvbWEgKGRpZmYpIHRvIGxpZ2h0bmVzcyAoYWRkKVxuXHRpZiAoIGRpZmYgPT09IDAgKSB7XG5cdFx0cyA9IDA7XG5cdH0gZWxzZSBpZiAoIGwgPD0gMC41ICkge1xuXHRcdHMgPSBkaWZmIC8gYWRkO1xuXHR9IGVsc2Uge1xuXHRcdHMgPSBkaWZmIC8gKCAyIC0gYWRkICk7XG5cdH1cblx0cmV0dXJuIFsgTWF0aC5yb3VuZCggaCApICUgMzYwLCBzLCBsLCBhID09IG51bGwgPyAxIDogYSBdO1xufTtcblxuc3BhY2VzLmhzbGEuZnJvbSA9IGZ1bmN0aW9uKCBoc2xhICkge1xuXHRpZiAoIGhzbGFbIDAgXSA9PSBudWxsIHx8IGhzbGFbIDEgXSA9PSBudWxsIHx8IGhzbGFbIDIgXSA9PSBudWxsICkge1xuXHRcdHJldHVybiBbIG51bGwsIG51bGwsIG51bGwsIGhzbGFbIDMgXSBdO1xuXHR9XG5cdHZhciBoID0gaHNsYVsgMCBdIC8gMzYwLFxuXHRcdHMgPSBoc2xhWyAxIF0sXG5cdFx0bCA9IGhzbGFbIDIgXSxcblx0XHRhID0gaHNsYVsgMyBdLFxuXHRcdHEgPSBsIDw9IDAuNSA/IGwgKiAoIDEgKyBzICkgOiBsICsgcyAtIGwgKiBzLFxuXHRcdHAgPSAyICogbCAtIHE7XG5cblx0cmV0dXJuIFtcblx0XHRNYXRoLnJvdW5kKCBodWUycmdiKCBwLCBxLCBoICsgKCAxIC8gMyApICkgKiAyNTUgKSxcblx0XHRNYXRoLnJvdW5kKCBodWUycmdiKCBwLCBxLCBoICkgKiAyNTUgKSxcblx0XHRNYXRoLnJvdW5kKCBodWUycmdiKCBwLCBxLCBoIC0gKCAxIC8gMyApICkgKiAyNTUgKSxcblx0XHRhXG5cdF07XG59O1xuXG5lYWNoKCBzcGFjZXMsIGZ1bmN0aW9uKCBzcGFjZU5hbWUsIHNwYWNlICkge1xuXHR2YXIgcHJvcHMgPSBzcGFjZS5wcm9wcyxcblx0XHRjYWNoZSA9IHNwYWNlLmNhY2hlLFxuXHRcdHRvID0gc3BhY2UudG8sXG5cdFx0ZnJvbSA9IHNwYWNlLmZyb207XG5cblx0Ly8gTWFrZXMgcmdiYSgpIGFuZCBoc2xhKClcblx0Y29sb3IuZm5bIHNwYWNlTmFtZSBdID0gZnVuY3Rpb24oIHZhbHVlICkge1xuXG5cdFx0Ly8gR2VuZXJhdGUgYSBjYWNoZSBmb3IgdGhpcyBzcGFjZSBpZiBpdCBkb2Vzbid0IGV4aXN0XG5cdFx0aWYgKCB0byAmJiAhdGhpc1sgY2FjaGUgXSApIHtcblx0XHRcdHRoaXNbIGNhY2hlIF0gPSB0byggdGhpcy5fcmdiYSApO1xuXHRcdH1cblx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm4gdGhpc1sgY2FjaGUgXS5zbGljZSgpO1xuXHRcdH1cblxuXHRcdHZhciByZXQsXG5cdFx0XHR0eXBlID0galF1ZXJ5LnR5cGUoIHZhbHVlICksXG5cdFx0XHRhcnIgPSAoIHR5cGUgPT09IFwiYXJyYXlcIiB8fCB0eXBlID09PSBcIm9iamVjdFwiICkgPyB2YWx1ZSA6IGFyZ3VtZW50cyxcblx0XHRcdGxvY2FsID0gdGhpc1sgY2FjaGUgXS5zbGljZSgpO1xuXG5cdFx0ZWFjaCggcHJvcHMsIGZ1bmN0aW9uKCBrZXksIHByb3AgKSB7XG5cdFx0XHR2YXIgdmFsID0gYXJyWyB0eXBlID09PSBcIm9iamVjdFwiID8ga2V5IDogcHJvcC5pZHggXTtcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IGxvY2FsWyBwcm9wLmlkeCBdO1xuXHRcdFx0fVxuXHRcdFx0bG9jYWxbIHByb3AuaWR4IF0gPSBjbGFtcCggdmFsLCBwcm9wICk7XG5cdFx0fSApO1xuXG5cdFx0aWYgKCBmcm9tICkge1xuXHRcdFx0cmV0ID0gY29sb3IoIGZyb20oIGxvY2FsICkgKTtcblx0XHRcdHJldFsgY2FjaGUgXSA9IGxvY2FsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIGNvbG9yKCBsb2NhbCApO1xuXHRcdH1cblx0fTtcblxuXHQvLyBNYWtlcyByZWQoKSBncmVlbigpIGJsdWUoKSBhbHBoYSgpIGh1ZSgpIHNhdHVyYXRpb24oKSBsaWdodG5lc3MoKVxuXHRlYWNoKCBwcm9wcywgZnVuY3Rpb24oIGtleSwgcHJvcCApIHtcblxuXHRcdC8vIEFscGhhIGlzIGluY2x1ZGVkIGluIG1vcmUgdGhhbiBvbmUgc3BhY2Vcblx0XHRpZiAoIGNvbG9yLmZuWyBrZXkgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y29sb3IuZm5bIGtleSBdID0gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIHZ0eXBlID0galF1ZXJ5LnR5cGUoIHZhbHVlICksXG5cdFx0XHRcdGZuID0gKCBrZXkgPT09IFwiYWxwaGFcIiA/ICggdGhpcy5faHNsYSA/IFwiaHNsYVwiIDogXCJyZ2JhXCIgKSA6IHNwYWNlTmFtZSApLFxuXHRcdFx0XHRsb2NhbCA9IHRoaXNbIGZuIF0oKSxcblx0XHRcdFx0Y3VyID0gbG9jYWxbIHByb3AuaWR4IF0sXG5cdFx0XHRcdG1hdGNoO1xuXG5cdFx0XHRpZiAoIHZ0eXBlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZ0eXBlID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdFx0XHRcdHZhbHVlID0gdmFsdWUuY2FsbCggdGhpcywgY3VyICk7XG5cdFx0XHRcdHZ0eXBlID0galF1ZXJ5LnR5cGUoIHZhbHVlICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgJiYgcHJvcC5lbXB0eSApIHtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHZ0eXBlID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRtYXRjaCA9IHJwbHVzZXF1YWxzLmV4ZWMoIHZhbHVlICk7XG5cdFx0XHRcdGlmICggbWF0Y2ggKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBjdXIgKyBwYXJzZUZsb2F0KCBtYXRjaFsgMiBdICkgKiAoIG1hdGNoWyAxIF0gPT09IFwiK1wiID8gMSA6IC0xICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGxvY2FsWyBwcm9wLmlkeCBdID0gdmFsdWU7XG5cdFx0XHRyZXR1cm4gdGhpc1sgZm4gXSggbG9jYWwgKTtcblx0XHR9O1xuXHR9ICk7XG59ICk7XG5cbi8vIEFkZCBjc3NIb29rIGFuZCAuZnguc3RlcCBmdW5jdGlvbiBmb3IgZWFjaCBuYW1lZCBob29rLlxuLy8gYWNjZXB0IGEgc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBwcm9wZXJ0aWVzXG5jb2xvci5ob29rID0gZnVuY3Rpb24oIGhvb2sgKSB7XG5cdHZhciBob29rcyA9IGhvb2suc3BsaXQoIFwiIFwiICk7XG5cdGVhY2goIGhvb2tzLCBmdW5jdGlvbiggaSwgaG9vayApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIGhvb2sgXSA9IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgcGFyc2VkLCBjdXJFbGVtLFxuXHRcdFx0XHRcdGJhY2tncm91bmRDb2xvciA9IFwiXCI7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPT0gXCJ0cmFuc3BhcmVudFwiICYmICggalF1ZXJ5LnR5cGUoIHZhbHVlICkgIT09IFwic3RyaW5nXCIgfHxcblx0XHRcdFx0XHRcdCggcGFyc2VkID0gc3RyaW5nUGFyc2UoIHZhbHVlICkgKSApICkge1xuXHRcdFx0XHRcdHZhbHVlID0gY29sb3IoIHBhcnNlZCB8fCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggIXN1cHBvcnQucmdiYSAmJiB2YWx1ZS5fcmdiYVsgMyBdICE9PSAxICkge1xuXHRcdFx0XHRcdFx0Y3VyRWxlbSA9IGhvb2sgPT09IFwiYmFja2dyb3VuZENvbG9yXCIgPyBlbGVtLnBhcmVudE5vZGUgOiBlbGVtO1xuXHRcdFx0XHRcdFx0d2hpbGUgKFxuXHRcdFx0XHRcdFx0XHQoIGJhY2tncm91bmRDb2xvciA9PT0gXCJcIiB8fCBiYWNrZ3JvdW5kQ29sb3IgPT09IFwidHJhbnNwYXJlbnRcIiApICYmXG5cdFx0XHRcdFx0XHRcdGN1ckVsZW0gJiYgY3VyRWxlbS5zdHlsZVxuXHRcdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0YmFja2dyb3VuZENvbG9yID0galF1ZXJ5LmNzcyggY3VyRWxlbSwgXCJiYWNrZ3JvdW5kQ29sb3JcIiApO1xuXHRcdFx0XHRcdFx0XHRcdGN1ckVsZW0gPSBjdXJFbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHZhbHVlID0gdmFsdWUuYmxlbmQoIGJhY2tncm91bmRDb2xvciAmJiBiYWNrZ3JvdW5kQ29sb3IgIT09IFwidHJhbnNwYXJlbnRcIiA/XG5cdFx0XHRcdFx0XHRcdGJhY2tncm91bmRDb2xvciA6XG5cdFx0XHRcdFx0XHRcdFwiX2RlZmF1bHRcIiApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHZhbHVlID0gdmFsdWUudG9SZ2JhU3RyaW5nKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRlbGVtLnN0eWxlWyBob29rIF0gPSB2YWx1ZTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHQvLyBXcmFwcGVkIHRvIHByZXZlbnQgSUUgZnJvbSB0aHJvd2luZyBlcnJvcnMgb24gXCJpbnZhbGlkXCIgdmFsdWVzIGxpa2Vcblx0XHRcdFx0XHQvLyAnYXV0bycgb3IgJ2luaGVyaXQnXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHRcdGpRdWVyeS5meC5zdGVwWyBob29rIF0gPSBmdW5jdGlvbiggZnggKSB7XG5cdFx0XHRpZiAoICFmeC5jb2xvckluaXQgKSB7XG5cdFx0XHRcdGZ4LnN0YXJ0ID0gY29sb3IoIGZ4LmVsZW0sIGhvb2sgKTtcblx0XHRcdFx0ZnguZW5kID0gY29sb3IoIGZ4LmVuZCApO1xuXHRcdFx0XHRmeC5jb2xvckluaXQgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyBob29rIF0uc2V0KCBmeC5lbGVtLCBmeC5zdGFydC50cmFuc2l0aW9uKCBmeC5lbmQsIGZ4LnBvcyApICk7XG5cdFx0fTtcblx0fSApO1xuXG59O1xuXG5jb2xvci5ob29rKCBzdGVwSG9va3MgKTtcblxualF1ZXJ5LmNzc0hvb2tzLmJvcmRlckNvbG9yID0ge1xuXHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgZXhwYW5kZWQgPSB7fTtcblxuXHRcdGVhY2goIFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdLCBmdW5jdGlvbiggaSwgcGFydCApIHtcblx0XHRcdGV4cGFuZGVkWyBcImJvcmRlclwiICsgcGFydCArIFwiQ29sb3JcIiBdID0gdmFsdWU7XG5cdFx0fSApO1xuXHRcdHJldHVybiBleHBhbmRlZDtcblx0fVxufTtcblxuLy8gQmFzaWMgY29sb3IgbmFtZXMgb25seS5cbi8vIFVzYWdlIG9mIGFueSBvZiB0aGUgb3RoZXIgY29sb3IgbmFtZXMgcmVxdWlyZXMgYWRkaW5nIHlvdXJzZWxmIG9yIGluY2x1ZGluZ1xuLy8ganF1ZXJ5LmNvbG9yLnN2Zy1uYW1lcy5qcy5cbmNvbG9ycyA9IGpRdWVyeS5Db2xvci5uYW1lcyA9IHtcblxuXHQvLyA0LjEuIEJhc2ljIGNvbG9yIGtleXdvcmRzXG5cdGFxdWE6IFwiIzAwZmZmZlwiLFxuXHRibGFjazogXCIjMDAwMDAwXCIsXG5cdGJsdWU6IFwiIzAwMDBmZlwiLFxuXHRmdWNoc2lhOiBcIiNmZjAwZmZcIixcblx0Z3JheTogXCIjODA4MDgwXCIsXG5cdGdyZWVuOiBcIiMwMDgwMDBcIixcblx0bGltZTogXCIjMDBmZjAwXCIsXG5cdG1hcm9vbjogXCIjODAwMDAwXCIsXG5cdG5hdnk6IFwiIzAwMDA4MFwiLFxuXHRvbGl2ZTogXCIjODA4MDAwXCIsXG5cdHB1cnBsZTogXCIjODAwMDgwXCIsXG5cdHJlZDogXCIjZmYwMDAwXCIsXG5cdHNpbHZlcjogXCIjYzBjMGMwXCIsXG5cdHRlYWw6IFwiIzAwODA4MFwiLFxuXHR3aGl0ZTogXCIjZmZmZmZmXCIsXG5cdHllbGxvdzogXCIjZmZmZjAwXCIsXG5cblx0Ly8gNC4yLjMuIFwidHJhbnNwYXJlbnRcIiBjb2xvciBrZXl3b3JkXG5cdHRyYW5zcGFyZW50OiBbIG51bGwsIG51bGwsIG51bGwsIDAgXSxcblxuXHRfZGVmYXVsdDogXCIjZmZmZmZmXCJcbn07XG5cbn0gKSggalF1ZXJ5ICk7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIENMQVNTIEFOSU1BVElPTlMgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiggZnVuY3Rpb24oKSB7XG5cbnZhciBjbGFzc0FuaW1hdGlvbkFjdGlvbnMgPSBbIFwiYWRkXCIsIFwicmVtb3ZlXCIsIFwidG9nZ2xlXCIgXSxcblx0c2hvcnRoYW5kU3R5bGVzID0ge1xuXHRcdGJvcmRlcjogMSxcblx0XHRib3JkZXJCb3R0b206IDEsXG5cdFx0Ym9yZGVyQ29sb3I6IDEsXG5cdFx0Ym9yZGVyTGVmdDogMSxcblx0XHRib3JkZXJSaWdodDogMSxcblx0XHRib3JkZXJUb3A6IDEsXG5cdFx0Ym9yZGVyV2lkdGg6IDEsXG5cdFx0bWFyZ2luOiAxLFxuXHRcdHBhZGRpbmc6IDFcblx0fTtcblxuJC5lYWNoKFxuXHRbIFwiYm9yZGVyTGVmdFN0eWxlXCIsIFwiYm9yZGVyUmlnaHRTdHlsZVwiLCBcImJvcmRlckJvdHRvbVN0eWxlXCIsIFwiYm9yZGVyVG9wU3R5bGVcIiBdLFxuXHRmdW5jdGlvbiggXywgcHJvcCApIHtcblx0XHQkLmZ4LnN0ZXBbIHByb3AgXSA9IGZ1bmN0aW9uKCBmeCApIHtcblx0XHRcdGlmICggZnguZW5kICE9PSBcIm5vbmVcIiAmJiAhZnguc2V0QXR0ciB8fCBmeC5wb3MgPT09IDEgJiYgIWZ4LnNldEF0dHIgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZnguZWxlbSwgcHJvcCwgZnguZW5kICk7XG5cdFx0XHRcdGZ4LnNldEF0dHIgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cbik7XG5cbmZ1bmN0aW9uIGdldEVsZW1lbnRTdHlsZXMoIGVsZW0gKSB7XG5cdHZhciBrZXksIGxlbixcblx0XHRzdHlsZSA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyA/XG5cdFx0XHRlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSwgbnVsbCApIDpcblx0XHRcdGVsZW0uY3VycmVudFN0eWxlLFxuXHRcdHN0eWxlcyA9IHt9O1xuXG5cdGlmICggc3R5bGUgJiYgc3R5bGUubGVuZ3RoICYmIHN0eWxlWyAwIF0gJiYgc3R5bGVbIHN0eWxlWyAwIF0gXSApIHtcblx0XHRsZW4gPSBzdHlsZS5sZW5ndGg7XG5cdFx0d2hpbGUgKCBsZW4tLSApIHtcblx0XHRcdGtleSA9IHN0eWxlWyBsZW4gXTtcblx0XHRcdGlmICggdHlwZW9mIHN0eWxlWyBrZXkgXSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0c3R5bGVzWyAkLmNhbWVsQ2FzZSgga2V5ICkgXSA9IHN0eWxlWyBrZXkgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0Ly8gU3VwcG9ydDogT3BlcmEsIElFIDw5XG5cdH0gZWxzZSB7XG5cdFx0Zm9yICgga2V5IGluIHN0eWxlICkge1xuXHRcdFx0aWYgKCB0eXBlb2Ygc3R5bGVbIGtleSBdID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRzdHlsZXNbIGtleSBdID0gc3R5bGVbIGtleSBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIHN0eWxlRGlmZmVyZW5jZSggb2xkU3R5bGUsIG5ld1N0eWxlICkge1xuXHR2YXIgZGlmZiA9IHt9LFxuXHRcdG5hbWUsIHZhbHVlO1xuXG5cdGZvciAoIG5hbWUgaW4gbmV3U3R5bGUgKSB7XG5cdFx0dmFsdWUgPSBuZXdTdHlsZVsgbmFtZSBdO1xuXHRcdGlmICggb2xkU3R5bGVbIG5hbWUgXSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRpZiAoICFzaG9ydGhhbmRTdHlsZXNbIG5hbWUgXSApIHtcblx0XHRcdFx0aWYgKCAkLmZ4LnN0ZXBbIG5hbWUgXSB8fCAhaXNOYU4oIHBhcnNlRmxvYXQoIHZhbHVlICkgKSApIHtcblx0XHRcdFx0XHRkaWZmWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBkaWZmO1xufVxuXG4vLyBTdXBwb3J0OiBqUXVlcnkgPDEuOFxuaWYgKCAhJC5mbi5hZGRCYWNrICkge1xuXHQkLmZuLmFkZEJhY2sgPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9O1xufVxuXG4kLmVmZmVjdHMuYW5pbWF0ZUNsYXNzID0gZnVuY3Rpb24oIHZhbHVlLCBkdXJhdGlvbiwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0dmFyIG8gPSAkLnNwZWVkKCBkdXJhdGlvbiwgZWFzaW5nLCBjYWxsYmFjayApO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCBmdW5jdGlvbigpIHtcblx0XHR2YXIgYW5pbWF0ZWQgPSAkKCB0aGlzICksXG5cdFx0XHRiYXNlQ2xhc3MgPSBhbmltYXRlZC5hdHRyKCBcImNsYXNzXCIgKSB8fCBcIlwiLFxuXHRcdFx0YXBwbHlDbGFzc0NoYW5nZSxcblx0XHRcdGFsbEFuaW1hdGlvbnMgPSBvLmNoaWxkcmVuID8gYW5pbWF0ZWQuZmluZCggXCIqXCIgKS5hZGRCYWNrKCkgOiBhbmltYXRlZDtcblxuXHRcdC8vIE1hcCB0aGUgYW5pbWF0ZWQgb2JqZWN0cyB0byBzdG9yZSB0aGUgb3JpZ2luYWwgc3R5bGVzLlxuXHRcdGFsbEFuaW1hdGlvbnMgPSBhbGxBbmltYXRpb25zLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZWwgPSAkKCB0aGlzICk7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRlbDogZWwsXG5cdFx0XHRcdHN0YXJ0OiBnZXRFbGVtZW50U3R5bGVzKCB0aGlzIClcblx0XHRcdH07XG5cdFx0fSApO1xuXG5cdFx0Ly8gQXBwbHkgY2xhc3MgY2hhbmdlXG5cdFx0YXBwbHlDbGFzc0NoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0JC5lYWNoKCBjbGFzc0FuaW1hdGlvbkFjdGlvbnMsIGZ1bmN0aW9uKCBpLCBhY3Rpb24gKSB7XG5cdFx0XHRcdGlmICggdmFsdWVbIGFjdGlvbiBdICkge1xuXHRcdFx0XHRcdGFuaW1hdGVkWyBhY3Rpb24gKyBcIkNsYXNzXCIgXSggdmFsdWVbIGFjdGlvbiBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9O1xuXHRcdGFwcGx5Q2xhc3NDaGFuZ2UoKTtcblxuXHRcdC8vIE1hcCBhbGwgYW5pbWF0ZWQgb2JqZWN0cyBhZ2FpbiAtIGNhbGN1bGF0ZSBuZXcgc3R5bGVzIGFuZCBkaWZmXG5cdFx0YWxsQW5pbWF0aW9ucyA9IGFsbEFuaW1hdGlvbnMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuZW5kID0gZ2V0RWxlbWVudFN0eWxlcyggdGhpcy5lbFsgMCBdICk7XG5cdFx0XHR0aGlzLmRpZmYgPSBzdHlsZURpZmZlcmVuY2UoIHRoaXMuc3RhcnQsIHRoaXMuZW5kICk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9ICk7XG5cblx0XHQvLyBBcHBseSBvcmlnaW5hbCBjbGFzc1xuXHRcdGFuaW1hdGVkLmF0dHIoIFwiY2xhc3NcIiwgYmFzZUNsYXNzICk7XG5cblx0XHQvLyBNYXAgYWxsIGFuaW1hdGVkIG9iamVjdHMgYWdhaW4gLSB0aGlzIHRpbWUgY29sbGVjdGluZyBhIHByb21pc2Vcblx0XHRhbGxBbmltYXRpb25zID0gYWxsQW5pbWF0aW9ucy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHN0eWxlSW5mbyA9IHRoaXMsXG5cdFx0XHRcdGRmZCA9ICQuRGVmZXJyZWQoKSxcblx0XHRcdFx0b3B0cyA9ICQuZXh0ZW5kKCB7fSwgbywge1xuXHRcdFx0XHRcdHF1ZXVlOiBmYWxzZSxcblx0XHRcdFx0XHRjb21wbGV0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRkZmQucmVzb2x2ZSggc3R5bGVJbmZvICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdHRoaXMuZWwuYW5pbWF0ZSggdGhpcy5kaWZmLCBvcHRzICk7XG5cdFx0XHRyZXR1cm4gZGZkLnByb21pc2UoKTtcblx0XHR9ICk7XG5cblx0XHQvLyBPbmNlIGFsbCBhbmltYXRpb25zIGhhdmUgY29tcGxldGVkOlxuXHRcdCQud2hlbi5hcHBseSggJCwgYWxsQW5pbWF0aW9ucy5nZXQoKSApLmRvbmUoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBTZXQgdGhlIGZpbmFsIGNsYXNzXG5cdFx0XHRhcHBseUNsYXNzQ2hhbmdlKCk7XG5cblx0XHRcdC8vIEZvciBlYWNoIGFuaW1hdGVkIGVsZW1lbnQsXG5cdFx0XHQvLyBjbGVhciBhbGwgY3NzIHByb3BlcnRpZXMgdGhhdCB3ZXJlIGFuaW1hdGVkXG5cdFx0XHQkLmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbCA9IHRoaXMuZWw7XG5cdFx0XHRcdCQuZWFjaCggdGhpcy5kaWZmLCBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdGVsLmNzcygga2V5LCBcIlwiICk7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH0gKTtcblxuXHRcdFx0Ly8gVGhpcyBpcyBndWFybnRlZWQgdG8gYmUgdGhlcmUgaWYgeW91IHVzZSBqUXVlcnkuc3BlZWQoKVxuXHRcdFx0Ly8gaXQgYWxzbyBoYW5kbGVzIGRlcXVldWluZyB0aGUgbmV4dCBhbmltLi4uXG5cdFx0XHRvLmNvbXBsZXRlLmNhbGwoIGFuaW1hdGVkWyAwIF0gKTtcblx0XHR9ICk7XG5cdH0gKTtcbn07XG5cbiQuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiAoIGZ1bmN0aW9uKCBvcmlnICkge1xuXHRcdHJldHVybiBmdW5jdGlvbiggY2xhc3NOYW1lcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0XHRyZXR1cm4gc3BlZWQgP1xuXHRcdFx0XHQkLmVmZmVjdHMuYW5pbWF0ZUNsYXNzLmNhbGwoIHRoaXMsXG5cdFx0XHRcdFx0eyBhZGQ6IGNsYXNzTmFtZXMgfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSA6XG5cdFx0XHRcdG9yaWcuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cdH0gKSggJC5mbi5hZGRDbGFzcyApLFxuXG5cdHJlbW92ZUNsYXNzOiAoIGZ1bmN0aW9uKCBvcmlnICkge1xuXHRcdHJldHVybiBmdW5jdGlvbiggY2xhc3NOYW1lcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDEgP1xuXHRcdFx0XHQkLmVmZmVjdHMuYW5pbWF0ZUNsYXNzLmNhbGwoIHRoaXMsXG5cdFx0XHRcdFx0eyByZW1vdmU6IGNsYXNzTmFtZXMgfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSA6XG5cdFx0XHRcdG9yaWcuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cdH0gKSggJC5mbi5yZW1vdmVDbGFzcyApLFxuXG5cdHRvZ2dsZUNsYXNzOiAoIGZ1bmN0aW9uKCBvcmlnICkge1xuXHRcdHJldHVybiBmdW5jdGlvbiggY2xhc3NOYW1lcywgZm9yY2UsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgZm9yY2UgPT09IFwiYm9vbGVhblwiIHx8IGZvcmNlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGlmICggIXNwZWVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2l0aG91dCBzcGVlZCBwYXJhbWV0ZXJcblx0XHRcdFx0XHRyZXR1cm4gb3JpZy5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmV0dXJuICQuZWZmZWN0cy5hbmltYXRlQ2xhc3MuY2FsbCggdGhpcyxcblx0XHRcdFx0XHRcdCggZm9yY2UgPyB7IGFkZDogY2xhc3NOYW1lcyB9IDogeyByZW1vdmU6IGNsYXNzTmFtZXMgfSApLFxuXHRcdFx0XHRcdFx0c3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBXaXRob3V0IGZvcmNlIHBhcmFtZXRlclxuXHRcdFx0XHRyZXR1cm4gJC5lZmZlY3RzLmFuaW1hdGVDbGFzcy5jYWxsKCB0aGlzLFxuXHRcdFx0XHRcdHsgdG9nZ2xlOiBjbGFzc05hbWVzIH0sIGZvcmNlLCBzcGVlZCwgZWFzaW5nICk7XG5cdFx0XHR9XG5cdFx0fTtcblx0fSApKCAkLmZuLnRvZ2dsZUNsYXNzICksXG5cblx0c3dpdGNoQ2xhc3M6IGZ1bmN0aW9uKCByZW1vdmUsIGFkZCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuICQuZWZmZWN0cy5hbmltYXRlQ2xhc3MuY2FsbCggdGhpcywge1xuXHRcdFx0YWRkOiBhZGQsXG5cdFx0XHRyZW1vdmU6IHJlbW92ZVxuXHRcdH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH1cbn0gKTtcblxufSApKCk7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogRUZGRUNUUyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuKCBmdW5jdGlvbigpIHtcblxuaWYgKCAkLmV4cHIgJiYgJC5leHByLnBzZXVkb3MgJiYgJC5leHByLnBzZXVkb3MuYW5pbWF0ZWQgKSB7XG5cdCQuZXhwci5wc2V1ZG9zLmFuaW1hdGVkID0gKCBmdW5jdGlvbiggb3JpZyApIHtcblx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gISEkKCBlbGVtICkuZGF0YSggZGF0YVNwYWNlQW5pbWF0ZWQgKSB8fCBvcmlnKCBlbGVtICk7XG5cdFx0fTtcblx0fSApKCAkLmV4cHIucHNldWRvcy5hbmltYXRlZCApO1xufVxuXG5pZiAoICQudWlCYWNrQ29tcGF0ICE9PSBmYWxzZSApIHtcblx0JC5leHRlbmQoICQuZWZmZWN0cywge1xuXG5cdFx0Ly8gU2F2ZXMgYSBzZXQgb2YgcHJvcGVydGllcyBpbiBhIGRhdGEgc3RvcmFnZVxuXHRcdHNhdmU6IGZ1bmN0aW9uKCBlbGVtZW50LCBzZXQgKSB7XG5cdFx0XHR2YXIgaSA9IDAsIGxlbmd0aCA9IHNldC5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBzZXRbIGkgXSAhPT0gbnVsbCApIHtcblx0XHRcdFx0XHRlbGVtZW50LmRhdGEoIGRhdGFTcGFjZSArIHNldFsgaSBdLCBlbGVtZW50WyAwIF0uc3R5bGVbIHNldFsgaSBdIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBSZXN0b3JlcyBhIHNldCBvZiBwcmV2aW91c2x5IHNhdmVkIHByb3BlcnRpZXMgZnJvbSBhIGRhdGEgc3RvcmFnZVxuXHRcdHJlc3RvcmU6IGZ1bmN0aW9uKCBlbGVtZW50LCBzZXQgKSB7XG5cdFx0XHR2YXIgdmFsLCBpID0gMCwgbGVuZ3RoID0gc2V0Lmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIHNldFsgaSBdICE9PSBudWxsICkge1xuXHRcdFx0XHRcdHZhbCA9IGVsZW1lbnQuZGF0YSggZGF0YVNwYWNlICsgc2V0WyBpIF0gKTtcblx0XHRcdFx0XHRlbGVtZW50LmNzcyggc2V0WyBpIF0sIHZhbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldE1vZGU6IGZ1bmN0aW9uKCBlbCwgbW9kZSApIHtcblx0XHRcdGlmICggbW9kZSA9PT0gXCJ0b2dnbGVcIiApIHtcblx0XHRcdFx0bW9kZSA9IGVsLmlzKCBcIjpoaWRkZW5cIiApID8gXCJzaG93XCIgOiBcImhpZGVcIjtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtb2RlO1xuXHRcdH0sXG5cblx0XHQvLyBXcmFwcyB0aGUgZWxlbWVudCBhcm91bmQgYSB3cmFwcGVyIHRoYXQgY29waWVzIHBvc2l0aW9uIHByb3BlcnRpZXNcblx0XHRjcmVhdGVXcmFwcGVyOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaXMgYWxyZWFkeSB3cmFwcGVkLCByZXR1cm4gaXRcblx0XHRcdGlmICggZWxlbWVudC5wYXJlbnQoKS5pcyggXCIudWktZWZmZWN0cy13cmFwcGVyXCIgKSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW1lbnQucGFyZW50KCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdyYXAgdGhlIGVsZW1lbnRcblx0XHRcdHZhciBwcm9wcyA9IHtcblx0XHRcdFx0XHR3aWR0aDogZWxlbWVudC5vdXRlcldpZHRoKCB0cnVlICksXG5cdFx0XHRcdFx0aGVpZ2h0OiBlbGVtZW50Lm91dGVySGVpZ2h0KCB0cnVlICksXG5cdFx0XHRcdFx0XCJmbG9hdFwiOiBlbGVtZW50LmNzcyggXCJmbG9hdFwiIClcblx0XHRcdFx0fSxcblx0XHRcdFx0d3JhcHBlciA9ICQoIFwiPGRpdj48L2Rpdj5cIiApXG5cdFx0XHRcdFx0LmFkZENsYXNzKCBcInVpLWVmZmVjdHMtd3JhcHBlclwiIClcblx0XHRcdFx0XHQuY3NzKCB7XG5cdFx0XHRcdFx0XHRmb250U2l6ZTogXCIxMDAlXCIsXG5cdFx0XHRcdFx0XHRiYWNrZ3JvdW5kOiBcInRyYW5zcGFyZW50XCIsXG5cdFx0XHRcdFx0XHRib3JkZXI6IFwibm9uZVwiLFxuXHRcdFx0XHRcdFx0bWFyZ2luOiAwLFxuXHRcdFx0XHRcdFx0cGFkZGluZzogMFxuXHRcdFx0XHRcdH0gKSxcblxuXHRcdFx0XHQvLyBTdG9yZSB0aGUgc2l6ZSBpbiBjYXNlIHdpZHRoL2hlaWdodCBhcmUgZGVmaW5lZCBpbiAlIC0gRml4ZXMgIzUyNDVcblx0XHRcdFx0c2l6ZSA9IHtcblx0XHRcdFx0XHR3aWR0aDogZWxlbWVudC53aWR0aCgpLFxuXHRcdFx0XHRcdGhlaWdodDogZWxlbWVudC5oZWlnaHQoKVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRhY3RpdmUgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94XG5cdFx0XHQvLyBGaXJlZm94IGluY29ycmVjdGx5IGV4cG9zZXMgYW5vbnltb3VzIGNvbnRlbnRcblx0XHRcdC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTU2MTY2NFxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0YWN0aXZlLmlkO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdGFjdGl2ZSA9IGRvY3VtZW50LmJvZHk7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW1lbnQud3JhcCggd3JhcHBlciApO1xuXG5cdFx0XHQvLyBGaXhlcyAjNzU5NSAtIEVsZW1lbnRzIGxvc2UgZm9jdXMgd2hlbiB3cmFwcGVkLlxuXHRcdFx0aWYgKCBlbGVtZW50WyAwIF0gPT09IGFjdGl2ZSB8fCAkLmNvbnRhaW5zKCBlbGVtZW50WyAwIF0sIGFjdGl2ZSApICkge1xuXHRcdFx0XHQkKCBhY3RpdmUgKS50cmlnZ2VyKCBcImZvY3VzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG90Zml4IGZvciBqUXVlcnkgMS40IHNpbmNlIHNvbWUgY2hhbmdlIGluIHdyYXAoKSBzZWVtcyB0byBhY3R1YWxseVxuXHRcdFx0Ly8gbG9zZSB0aGUgcmVmZXJlbmNlIHRvIHRoZSB3cmFwcGVkIGVsZW1lbnRcblx0XHRcdHdyYXBwZXIgPSBlbGVtZW50LnBhcmVudCgpO1xuXG5cdFx0XHQvLyBUcmFuc2ZlciBwb3NpdGlvbmluZyBwcm9wZXJ0aWVzIHRvIHRoZSB3cmFwcGVyXG5cdFx0XHRpZiAoIGVsZW1lbnQuY3NzKCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0d3JhcHBlci5jc3MoIHsgcG9zaXRpb246IFwicmVsYXRpdmVcIiB9ICk7XG5cdFx0XHRcdGVsZW1lbnQuY3NzKCB7IHBvc2l0aW9uOiBcInJlbGF0aXZlXCIgfSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0JC5leHRlbmQoIHByb3BzLCB7XG5cdFx0XHRcdFx0cG9zaXRpb246IGVsZW1lbnQuY3NzKCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdFx0XHR6SW5kZXg6IGVsZW1lbnQuY3NzKCBcInotaW5kZXhcIiApXG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0JC5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiLCBcImJvdHRvbVwiLCBcInJpZ2h0XCIgXSwgZnVuY3Rpb24oIGksIHBvcyApIHtcblx0XHRcdFx0XHRwcm9wc1sgcG9zIF0gPSBlbGVtZW50LmNzcyggcG9zICk7XG5cdFx0XHRcdFx0aWYgKCBpc05hTiggcGFyc2VJbnQoIHByb3BzWyBwb3MgXSwgMTAgKSApICkge1xuXHRcdFx0XHRcdFx0cHJvcHNbIHBvcyBdID0gXCJhdXRvXCI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdGVsZW1lbnQuY3NzKCB7XG5cdFx0XHRcdFx0cG9zaXRpb246IFwicmVsYXRpdmVcIixcblx0XHRcdFx0XHR0b3A6IDAsXG5cdFx0XHRcdFx0bGVmdDogMCxcblx0XHRcdFx0XHRyaWdodDogXCJhdXRvXCIsXG5cdFx0XHRcdFx0Ym90dG9tOiBcImF1dG9cIlxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0XHRlbGVtZW50LmNzcyggc2l6ZSApO1xuXG5cdFx0XHRyZXR1cm4gd3JhcHBlci5jc3MoIHByb3BzICkuc2hvdygpO1xuXHRcdH0sXG5cblx0XHRyZW1vdmVXcmFwcGVyOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdHZhciBhY3RpdmUgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXG5cdFx0XHRpZiAoIGVsZW1lbnQucGFyZW50KCkuaXMoIFwiLnVpLWVmZmVjdHMtd3JhcHBlclwiICkgKSB7XG5cdFx0XHRcdGVsZW1lbnQucGFyZW50KCkucmVwbGFjZVdpdGgoIGVsZW1lbnQgKTtcblxuXHRcdFx0XHQvLyBGaXhlcyAjNzU5NSAtIEVsZW1lbnRzIGxvc2UgZm9jdXMgd2hlbiB3cmFwcGVkLlxuXHRcdFx0XHRpZiAoIGVsZW1lbnRbIDAgXSA9PT0gYWN0aXZlIHx8ICQuY29udGFpbnMoIGVsZW1lbnRbIDAgXSwgYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0JCggYWN0aXZlICkudHJpZ2dlciggXCJmb2N1c1wiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW1lbnQ7XG5cdFx0fVxuXHR9ICk7XG59XG5cbiQuZXh0ZW5kKCAkLmVmZmVjdHMsIHtcblx0dmVyc2lvbjogXCIxLjEyLjFcIixcblxuXHRkZWZpbmU6IGZ1bmN0aW9uKCBuYW1lLCBtb2RlLCBlZmZlY3QgKSB7XG5cdFx0aWYgKCAhZWZmZWN0ICkge1xuXHRcdFx0ZWZmZWN0ID0gbW9kZTtcblx0XHRcdG1vZGUgPSBcImVmZmVjdFwiO1xuXHRcdH1cblxuXHRcdCQuZWZmZWN0cy5lZmZlY3RbIG5hbWUgXSA9IGVmZmVjdDtcblx0XHQkLmVmZmVjdHMuZWZmZWN0WyBuYW1lIF0ubW9kZSA9IG1vZGU7XG5cblx0XHRyZXR1cm4gZWZmZWN0O1xuXHR9LFxuXG5cdHNjYWxlZERpbWVuc2lvbnM6IGZ1bmN0aW9uKCBlbGVtZW50LCBwZXJjZW50LCBkaXJlY3Rpb24gKSB7XG5cdFx0aWYgKCBwZXJjZW50ID09PSAwICkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0aGVpZ2h0OiAwLFxuXHRcdFx0XHR3aWR0aDogMCxcblx0XHRcdFx0b3V0ZXJIZWlnaHQ6IDAsXG5cdFx0XHRcdG91dGVyV2lkdGg6IDBcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0dmFyIHggPSBkaXJlY3Rpb24gIT09IFwiaG9yaXpvbnRhbFwiID8gKCAoIHBlcmNlbnQgfHwgMTAwICkgLyAxMDAgKSA6IDEsXG5cdFx0XHR5ID0gZGlyZWN0aW9uICE9PSBcInZlcnRpY2FsXCIgPyAoICggcGVyY2VudCB8fCAxMDAgKSAvIDEwMCApIDogMTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRoZWlnaHQ6IGVsZW1lbnQuaGVpZ2h0KCkgKiB5LFxuXHRcdFx0d2lkdGg6IGVsZW1lbnQud2lkdGgoKSAqIHgsXG5cdFx0XHRvdXRlckhlaWdodDogZWxlbWVudC5vdXRlckhlaWdodCgpICogeSxcblx0XHRcdG91dGVyV2lkdGg6IGVsZW1lbnQub3V0ZXJXaWR0aCgpICogeFxuXHRcdH07XG5cblx0fSxcblxuXHRjbGlwVG9Cb3g6IGZ1bmN0aW9uKCBhbmltYXRpb24gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHdpZHRoOiBhbmltYXRpb24uY2xpcC5yaWdodCAtIGFuaW1hdGlvbi5jbGlwLmxlZnQsXG5cdFx0XHRoZWlnaHQ6IGFuaW1hdGlvbi5jbGlwLmJvdHRvbSAtIGFuaW1hdGlvbi5jbGlwLnRvcCxcblx0XHRcdGxlZnQ6IGFuaW1hdGlvbi5jbGlwLmxlZnQsXG5cdFx0XHR0b3A6IGFuaW1hdGlvbi5jbGlwLnRvcFxuXHRcdH07XG5cdH0sXG5cblx0Ly8gSW5qZWN0cyByZWNlbnRseSBxdWV1ZWQgZnVuY3Rpb25zIHRvIGJlIGZpcnN0IGluIGxpbmUgKGFmdGVyIFwiaW5wcm9ncmVzc1wiKVxuXHR1bnNoaWZ0OiBmdW5jdGlvbiggZWxlbWVudCwgcXVldWVMZW5ndGgsIGNvdW50ICkge1xuXHRcdHZhciBxdWV1ZSA9IGVsZW1lbnQucXVldWUoKTtcblxuXHRcdGlmICggcXVldWVMZW5ndGggPiAxICkge1xuXHRcdFx0cXVldWUuc3BsaWNlLmFwcGx5KCBxdWV1ZSxcblx0XHRcdFx0WyAxLCAwIF0uY29uY2F0KCBxdWV1ZS5zcGxpY2UoIHF1ZXVlTGVuZ3RoLCBjb3VudCApICkgKTtcblx0XHR9XG5cdFx0ZWxlbWVudC5kZXF1ZXVlKCk7XG5cdH0sXG5cblx0c2F2ZVN0eWxlOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRlbGVtZW50LmRhdGEoIGRhdGFTcGFjZVN0eWxlLCBlbGVtZW50WyAwIF0uc3R5bGUuY3NzVGV4dCApO1xuXHR9LFxuXG5cdHJlc3RvcmVTdHlsZTogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0ZWxlbWVudFsgMCBdLnN0eWxlLmNzc1RleHQgPSBlbGVtZW50LmRhdGEoIGRhdGFTcGFjZVN0eWxlICkgfHwgXCJcIjtcblx0XHRlbGVtZW50LnJlbW92ZURhdGEoIGRhdGFTcGFjZVN0eWxlICk7XG5cdH0sXG5cblx0bW9kZTogZnVuY3Rpb24oIGVsZW1lbnQsIG1vZGUgKSB7XG5cdFx0dmFyIGhpZGRlbiA9IGVsZW1lbnQuaXMoIFwiOmhpZGRlblwiICk7XG5cblx0XHRpZiAoIG1vZGUgPT09IFwidG9nZ2xlXCIgKSB7XG5cdFx0XHRtb2RlID0gaGlkZGVuID8gXCJzaG93XCIgOiBcImhpZGVcIjtcblx0XHR9XG5cdFx0aWYgKCBoaWRkZW4gPyBtb2RlID09PSBcImhpZGVcIiA6IG1vZGUgPT09IFwic2hvd1wiICkge1xuXHRcdFx0bW9kZSA9IFwibm9uZVwiO1xuXHRcdH1cblx0XHRyZXR1cm4gbW9kZTtcblx0fSxcblxuXHQvLyBUcmFuc2xhdGVzIGEgW3RvcCxsZWZ0XSBhcnJheSBpbnRvIGEgYmFzZWxpbmUgdmFsdWVcblx0Z2V0QmFzZWxpbmU6IGZ1bmN0aW9uKCBvcmlnaW4sIG9yaWdpbmFsICkge1xuXHRcdHZhciB5LCB4O1xuXG5cdFx0c3dpdGNoICggb3JpZ2luWyAwIF0gKSB7XG5cdFx0Y2FzZSBcInRvcFwiOlxuXHRcdFx0eSA9IDA7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIFwibWlkZGxlXCI6XG5cdFx0XHR5ID0gMC41O1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBcImJvdHRvbVwiOlxuXHRcdFx0eSA9IDE7XG5cdFx0XHRicmVhaztcblx0XHRkZWZhdWx0OlxuXHRcdFx0eSA9IG9yaWdpblsgMCBdIC8gb3JpZ2luYWwuaGVpZ2h0O1xuXHRcdH1cblxuXHRcdHN3aXRjaCAoIG9yaWdpblsgMSBdICkge1xuXHRcdGNhc2UgXCJsZWZ0XCI6XG5cdFx0XHR4ID0gMDtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgXCJjZW50ZXJcIjpcblx0XHRcdHggPSAwLjU7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIFwicmlnaHRcIjpcblx0XHRcdHggPSAxO1xuXHRcdFx0YnJlYWs7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHggPSBvcmlnaW5bIDEgXSAvIG9yaWdpbmFsLndpZHRoO1xuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHR4OiB4LFxuXHRcdFx0eTogeVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIHBsYWNlaG9sZGVyIGVsZW1lbnQgc28gdGhhdCB0aGUgb3JpZ2luYWwgZWxlbWVudCBjYW4gYmUgbWFkZSBhYnNvbHV0ZVxuXHRjcmVhdGVQbGFjZWhvbGRlcjogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0dmFyIHBsYWNlaG9sZGVyLFxuXHRcdFx0Y3NzUG9zaXRpb24gPSBlbGVtZW50LmNzcyggXCJwb3NpdGlvblwiICksXG5cdFx0XHRwb3NpdGlvbiA9IGVsZW1lbnQucG9zaXRpb24oKTtcblxuXHRcdC8vIExvY2sgaW4gbWFyZ2lucyBmaXJzdCB0byBhY2NvdW50IGZvciBmb3JtIGVsZW1lbnRzLCB3aGljaFxuXHRcdC8vIHdpbGwgY2hhbmdlIG1hcmdpbiBpZiB5b3UgZXhwbGljaXRseSBzZXQgaGVpZ2h0XG5cdFx0Ly8gc2VlOiBodHRwOi8vanNmaWRkbGUubmV0L0paU010LzMvIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMDczODBcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmlcblx0XHRlbGVtZW50LmNzcygge1xuXHRcdFx0bWFyZ2luVG9wOiBlbGVtZW50LmNzcyggXCJtYXJnaW5Ub3BcIiApLFxuXHRcdFx0bWFyZ2luQm90dG9tOiBlbGVtZW50LmNzcyggXCJtYXJnaW5Cb3R0b21cIiApLFxuXHRcdFx0bWFyZ2luTGVmdDogZWxlbWVudC5jc3MoIFwibWFyZ2luTGVmdFwiICksXG5cdFx0XHRtYXJnaW5SaWdodDogZWxlbWVudC5jc3MoIFwibWFyZ2luUmlnaHRcIiApXG5cdFx0fSApXG5cdFx0Lm91dGVyV2lkdGgoIGVsZW1lbnQub3V0ZXJXaWR0aCgpIClcblx0XHQub3V0ZXJIZWlnaHQoIGVsZW1lbnQub3V0ZXJIZWlnaHQoKSApO1xuXG5cdFx0aWYgKCAvXihzdGF0aWN8cmVsYXRpdmUpLy50ZXN0KCBjc3NQb3NpdGlvbiApICkge1xuXHRcdFx0Y3NzUG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cblx0XHRcdHBsYWNlaG9sZGVyID0gJCggXCI8XCIgKyBlbGVtZW50WyAwIF0ubm9kZU5hbWUgKyBcIj5cIiApLmluc2VydEFmdGVyKCBlbGVtZW50ICkuY3NzKCB7XG5cblx0XHRcdFx0Ly8gQ29udmVydCBpbmxpbmUgdG8gaW5saW5lIGJsb2NrIHRvIGFjY291bnQgZm9yIGlubGluZSBlbGVtZW50c1xuXHRcdFx0XHQvLyB0aGF0IHR1cm4gdG8gaW5saW5lIGJsb2NrIGJhc2VkIG9uIGNvbnRlbnQgKGxpa2UgaW1nKVxuXHRcdFx0XHRkaXNwbGF5OiAvXihpbmxpbmV8cnVieSkvLnRlc3QoIGVsZW1lbnQuY3NzKCBcImRpc3BsYXlcIiApICkgP1xuXHRcdFx0XHRcdFwiaW5saW5lLWJsb2NrXCIgOlxuXHRcdFx0XHRcdFwiYmxvY2tcIixcblx0XHRcdFx0dmlzaWJpbGl0eTogXCJoaWRkZW5cIixcblxuXHRcdFx0XHQvLyBNYXJnaW5zIG5lZWQgdG8gYmUgc2V0IHRvIGFjY291bnQgZm9yIG1hcmdpbiBjb2xsYXBzZVxuXHRcdFx0XHRtYXJnaW5Ub3A6IGVsZW1lbnQuY3NzKCBcIm1hcmdpblRvcFwiICksXG5cdFx0XHRcdG1hcmdpbkJvdHRvbTogZWxlbWVudC5jc3MoIFwibWFyZ2luQm90dG9tXCIgKSxcblx0XHRcdFx0bWFyZ2luTGVmdDogZWxlbWVudC5jc3MoIFwibWFyZ2luTGVmdFwiICksXG5cdFx0XHRcdG1hcmdpblJpZ2h0OiBlbGVtZW50LmNzcyggXCJtYXJnaW5SaWdodFwiICksXG5cdFx0XHRcdFwiZmxvYXRcIjogZWxlbWVudC5jc3MoIFwiZmxvYXRcIiApXG5cdFx0XHR9IClcblx0XHRcdC5vdXRlcldpZHRoKCBlbGVtZW50Lm91dGVyV2lkdGgoKSApXG5cdFx0XHQub3V0ZXJIZWlnaHQoIGVsZW1lbnQub3V0ZXJIZWlnaHQoKSApXG5cdFx0XHQuYWRkQ2xhc3MoIFwidWktZWZmZWN0cy1wbGFjZWhvbGRlclwiICk7XG5cblx0XHRcdGVsZW1lbnQuZGF0YSggZGF0YVNwYWNlICsgXCJwbGFjZWhvbGRlclwiLCBwbGFjZWhvbGRlciApO1xuXHRcdH1cblxuXHRcdGVsZW1lbnQuY3NzKCB7XG5cdFx0XHRwb3NpdGlvbjogY3NzUG9zaXRpb24sXG5cdFx0XHRsZWZ0OiBwb3NpdGlvbi5sZWZ0LFxuXHRcdFx0dG9wOiBwb3NpdGlvbi50b3Bcblx0XHR9ICk7XG5cblx0XHRyZXR1cm4gcGxhY2Vob2xkZXI7XG5cdH0sXG5cblx0cmVtb3ZlUGxhY2Vob2xkZXI6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdHZhciBkYXRhS2V5ID0gZGF0YVNwYWNlICsgXCJwbGFjZWhvbGRlclwiLFxuXHRcdFx0XHRwbGFjZWhvbGRlciA9IGVsZW1lbnQuZGF0YSggZGF0YUtleSApO1xuXG5cdFx0aWYgKCBwbGFjZWhvbGRlciApIHtcblx0XHRcdHBsYWNlaG9sZGVyLnJlbW92ZSgpO1xuXHRcdFx0ZWxlbWVudC5yZW1vdmVEYXRhKCBkYXRhS2V5ICk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIFJlbW92ZXMgYSBwbGFjZWhvbGRlciBpZiBpdCBleGlzdHMgYW5kIHJlc3RvcmVzXG5cdC8vIHByb3BlcnRpZXMgdGhhdCB3ZXJlIG1vZGlmaWVkIGR1cmluZyBwbGFjZWhvbGRlciBjcmVhdGlvblxuXHRjbGVhblVwOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHQkLmVmZmVjdHMucmVzdG9yZVN0eWxlKCBlbGVtZW50ICk7XG5cdFx0JC5lZmZlY3RzLnJlbW92ZVBsYWNlaG9sZGVyKCBlbGVtZW50ICk7XG5cdH0sXG5cblx0c2V0VHJhbnNpdGlvbjogZnVuY3Rpb24oIGVsZW1lbnQsIGxpc3QsIGZhY3RvciwgdmFsdWUgKSB7XG5cdFx0dmFsdWUgPSB2YWx1ZSB8fCB7fTtcblx0XHQkLmVhY2goIGxpc3QsIGZ1bmN0aW9uKCBpLCB4ICkge1xuXHRcdFx0dmFyIHVuaXQgPSBlbGVtZW50LmNzc1VuaXQoIHggKTtcblx0XHRcdGlmICggdW5pdFsgMCBdID4gMCApIHtcblx0XHRcdFx0dmFsdWVbIHggXSA9IHVuaXRbIDAgXSAqIGZhY3RvciArIHVuaXRbIDEgXTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG59ICk7XG5cbi8vIFJldHVybiBhbiBlZmZlY3Qgb3B0aW9ucyBvYmplY3QgZm9yIHRoZSBnaXZlbiBwYXJhbWV0ZXJzOlxuZnVuY3Rpb24gX25vcm1hbGl6ZUFyZ3VtZW50cyggZWZmZWN0LCBvcHRpb25zLCBzcGVlZCwgY2FsbGJhY2sgKSB7XG5cblx0Ly8gQWxsb3cgcGFzc2luZyBhbGwgb3B0aW9ucyBhcyB0aGUgZmlyc3QgcGFyYW1ldGVyXG5cdGlmICggJC5pc1BsYWluT2JqZWN0KCBlZmZlY3QgKSApIHtcblx0XHRvcHRpb25zID0gZWZmZWN0O1xuXHRcdGVmZmVjdCA9IGVmZmVjdC5lZmZlY3Q7XG5cdH1cblxuXHQvLyBDb252ZXJ0IHRvIGFuIG9iamVjdFxuXHRlZmZlY3QgPSB7IGVmZmVjdDogZWZmZWN0IH07XG5cblx0Ly8gQ2F0Y2ggKGVmZmVjdCwgbnVsbCwgLi4uKVxuXHRpZiAoIG9wdGlvbnMgPT0gbnVsbCApIHtcblx0XHRvcHRpb25zID0ge307XG5cdH1cblxuXHQvLyBDYXRjaCAoZWZmZWN0LCBjYWxsYmFjaylcblx0aWYgKCAkLmlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblx0XHRjYWxsYmFjayA9IG9wdGlvbnM7XG5cdFx0c3BlZWQgPSBudWxsO1xuXHRcdG9wdGlvbnMgPSB7fTtcblx0fVxuXG5cdC8vIENhdGNoIChlZmZlY3QsIHNwZWVkLCA/KVxuXHRpZiAoIHR5cGVvZiBvcHRpb25zID09PSBcIm51bWJlclwiIHx8ICQuZnguc3BlZWRzWyBvcHRpb25zIF0gKSB7XG5cdFx0Y2FsbGJhY2sgPSBzcGVlZDtcblx0XHRzcGVlZCA9IG9wdGlvbnM7XG5cdFx0b3B0aW9ucyA9IHt9O1xuXHR9XG5cblx0Ly8gQ2F0Y2ggKGVmZmVjdCwgb3B0aW9ucywgY2FsbGJhY2spXG5cdGlmICggJC5pc0Z1bmN0aW9uKCBzcGVlZCApICkge1xuXHRcdGNhbGxiYWNrID0gc3BlZWQ7XG5cdFx0c3BlZWQgPSBudWxsO1xuXHR9XG5cblx0Ly8gQWRkIG9wdGlvbnMgdG8gZWZmZWN0XG5cdGlmICggb3B0aW9ucyApIHtcblx0XHQkLmV4dGVuZCggZWZmZWN0LCBvcHRpb25zICk7XG5cdH1cblxuXHRzcGVlZCA9IHNwZWVkIHx8IG9wdGlvbnMuZHVyYXRpb247XG5cdGVmZmVjdC5kdXJhdGlvbiA9ICQuZngub2ZmID8gMCA6XG5cdFx0dHlwZW9mIHNwZWVkID09PSBcIm51bWJlclwiID8gc3BlZWQgOlxuXHRcdHNwZWVkIGluICQuZnguc3BlZWRzID8gJC5meC5zcGVlZHNbIHNwZWVkIF0gOlxuXHRcdCQuZnguc3BlZWRzLl9kZWZhdWx0O1xuXG5cdGVmZmVjdC5jb21wbGV0ZSA9IGNhbGxiYWNrIHx8IG9wdGlvbnMuY29tcGxldGU7XG5cblx0cmV0dXJuIGVmZmVjdDtcbn1cblxuZnVuY3Rpb24gc3RhbmRhcmRBbmltYXRpb25PcHRpb24oIG9wdGlvbiApIHtcblxuXHQvLyBWYWxpZCBzdGFuZGFyZCBzcGVlZHMgKG5vdGhpbmcsIG51bWJlciwgbmFtZWQgc3BlZWQpXG5cdGlmICggIW9wdGlvbiB8fCB0eXBlb2Ygb3B0aW9uID09PSBcIm51bWJlclwiIHx8ICQuZnguc3BlZWRzWyBvcHRpb24gXSApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdC8vIEludmFsaWQgc3RyaW5ncyAtIHRyZWF0IGFzIFwibm9ybWFsXCIgc3BlZWRcblx0aWYgKCB0eXBlb2Ygb3B0aW9uID09PSBcInN0cmluZ1wiICYmICEkLmVmZmVjdHMuZWZmZWN0WyBvcHRpb24gXSApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdC8vIENvbXBsZXRlIGNhbGxiYWNrXG5cdGlmICggJC5pc0Z1bmN0aW9uKCBvcHRpb24gKSApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdC8vIE9wdGlvbnMgaGFzaCAoYnV0IG5vdCBuYW1pbmcgYW4gZWZmZWN0KVxuXHRpZiAoIHR5cGVvZiBvcHRpb24gPT09IFwib2JqZWN0XCIgJiYgIW9wdGlvbi5lZmZlY3QgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHQvLyBEaWRuJ3QgbWF0Y2ggYW55IHN0YW5kYXJkIEFQSVxuXHRyZXR1cm4gZmFsc2U7XG59XG5cbiQuZm4uZXh0ZW5kKCB7XG5cdGVmZmVjdDogZnVuY3Rpb24oIC8qIGVmZmVjdCwgb3B0aW9ucywgc3BlZWQsIGNhbGxiYWNrICovICkge1xuXHRcdHZhciBhcmdzID0gX25vcm1hbGl6ZUFyZ3VtZW50cy5hcHBseSggdGhpcywgYXJndW1lbnRzICksXG5cdFx0XHRlZmZlY3RNZXRob2QgPSAkLmVmZmVjdHMuZWZmZWN0WyBhcmdzLmVmZmVjdCBdLFxuXHRcdFx0ZGVmYXVsdE1vZGUgPSBlZmZlY3RNZXRob2QubW9kZSxcblx0XHRcdHF1ZXVlID0gYXJncy5xdWV1ZSxcblx0XHRcdHF1ZXVlTmFtZSA9IHF1ZXVlIHx8IFwiZnhcIixcblx0XHRcdGNvbXBsZXRlID0gYXJncy5jb21wbGV0ZSxcblx0XHRcdG1vZGUgPSBhcmdzLm1vZGUsXG5cdFx0XHRtb2RlcyA9IFtdLFxuXHRcdFx0cHJlZmlsdGVyID0gZnVuY3Rpb24oIG5leHQgKSB7XG5cdFx0XHRcdHZhciBlbCA9ICQoIHRoaXMgKSxcblx0XHRcdFx0XHRub3JtYWxpemVkTW9kZSA9ICQuZWZmZWN0cy5tb2RlKCBlbCwgbW9kZSApIHx8IGRlZmF1bHRNb2RlO1xuXG5cdFx0XHRcdC8vIFNlbnRpbmVsIGZvciBkdWNrLXB1bmNoaW5nIHRoZSA6YW5pbWF0ZWQgcHN1ZWRvLXNlbGVjdG9yXG5cdFx0XHRcdGVsLmRhdGEoIGRhdGFTcGFjZUFuaW1hdGVkLCB0cnVlICk7XG5cblx0XHRcdFx0Ly8gU2F2ZSBlZmZlY3QgbW9kZSBmb3IgbGF0ZXIgdXNlLFxuXHRcdFx0XHQvLyB3ZSBjYW4ndCBqdXN0IGNhbGwgJC5lZmZlY3RzLm1vZGUgYWdhaW4gbGF0ZXIsXG5cdFx0XHRcdC8vIGFzIHRoZSAuc2hvdygpIGJlbG93IGRlc3Ryb3lzIHRoZSBpbml0aWFsIHN0YXRlXG5cdFx0XHRcdG1vZGVzLnB1c2goIG5vcm1hbGl6ZWRNb2RlICk7XG5cblx0XHRcdFx0Ly8gU2VlICQudWlCYWNrQ29tcGF0IGluc2lkZSBvZiBydW4oKSBmb3IgcmVtb3ZhbCBvZiBkZWZhdWx0TW9kZSBpbiAxLjEzXG5cdFx0XHRcdGlmICggZGVmYXVsdE1vZGUgJiYgKCBub3JtYWxpemVkTW9kZSA9PT0gXCJzaG93XCIgfHxcblx0XHRcdFx0XHRcdCggbm9ybWFsaXplZE1vZGUgPT09IGRlZmF1bHRNb2RlICYmIG5vcm1hbGl6ZWRNb2RlID09PSBcImhpZGVcIiApICkgKSB7XG5cdFx0XHRcdFx0ZWwuc2hvdygpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCAhZGVmYXVsdE1vZGUgfHwgbm9ybWFsaXplZE1vZGUgIT09IFwibm9uZVwiICkge1xuXHRcdFx0XHRcdCQuZWZmZWN0cy5zYXZlU3R5bGUoIGVsICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoICQuaXNGdW5jdGlvbiggbmV4dCApICkge1xuXHRcdFx0XHRcdG5leHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggJC5meC5vZmYgfHwgIWVmZmVjdE1ldGhvZCApIHtcblxuXHRcdFx0Ly8gRGVsZWdhdGUgdG8gdGhlIG9yaWdpbmFsIG1ldGhvZCAoZS5nLiwgLnNob3coKSkgaWYgcG9zc2libGVcblx0XHRcdGlmICggbW9kZSApIHtcblx0XHRcdFx0cmV0dXJuIHRoaXNbIG1vZGUgXSggYXJncy5kdXJhdGlvbiwgY29tcGxldGUgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGUgKSB7XG5cdFx0XHRcdFx0XHRjb21wbGV0ZS5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gcnVuKCBuZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0gPSAkKCB0aGlzICk7XG5cblx0XHRcdGZ1bmN0aW9uIGNsZWFudXAoKSB7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlRGF0YSggZGF0YVNwYWNlQW5pbWF0ZWQgKTtcblxuXHRcdFx0XHQkLmVmZmVjdHMuY2xlYW5VcCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggYXJncy5tb2RlID09PSBcImhpZGVcIiApIHtcblx0XHRcdFx0XHRlbGVtLmhpZGUoKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRvbmUoKTtcblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gZG9uZSgpIHtcblx0XHRcdFx0aWYgKCAkLmlzRnVuY3Rpb24oIGNvbXBsZXRlICkgKSB7XG5cdFx0XHRcdFx0Y29tcGxldGUuY2FsbCggZWxlbVsgMCBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoICQuaXNGdW5jdGlvbiggbmV4dCApICkge1xuXHRcdFx0XHRcdG5leHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtb2RlIG9wdGlvbiBvbiBhIHBlciBlbGVtZW50IGJhc2lzLFxuXHRcdFx0Ly8gYXMgdG9nZ2xlIGNhbiBiZSBlaXRoZXIgc2hvdyBvciBoaWRlIGRlcGVuZGluZyBvbiBlbGVtZW50IHN0YXRlXG5cdFx0XHRhcmdzLm1vZGUgPSBtb2Rlcy5zaGlmdCgpO1xuXG5cdFx0XHRpZiAoICQudWlCYWNrQ29tcGF0ICE9PSBmYWxzZSAmJiAhZGVmYXVsdE1vZGUgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5pcyggXCI6aGlkZGVuXCIgKSA/IG1vZGUgPT09IFwiaGlkZVwiIDogbW9kZSA9PT0gXCJzaG93XCIgKSB7XG5cblx0XHRcdFx0XHQvLyBDYWxsIHRoZSBjb3JlIG1ldGhvZCB0byB0cmFjayBcIm9sZGRpc3BsYXlcIiBwcm9wZXJseVxuXHRcdFx0XHRcdGVsZW1bIG1vZGUgXSgpO1xuXHRcdFx0XHRcdGRvbmUoKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlZmZlY3RNZXRob2QuY2FsbCggZWxlbVsgMCBdLCBhcmdzLCBkb25lICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmICggYXJncy5tb2RlID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHRcdC8vIENhbGwgdGhlIGNvcmUgbWV0aG9kIHRvIHRyYWNrIFwib2xkZGlzcGxheVwiIHByb3Blcmx5XG5cdFx0XHRcdFx0ZWxlbVsgbW9kZSBdKCk7XG5cdFx0XHRcdFx0ZG9uZSgpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVmZmVjdE1ldGhvZC5jYWxsKCBlbGVtWyAwIF0sIGFyZ3MsIGNsZWFudXAgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJ1biBwcmVmaWx0ZXIgb24gYWxsIGVsZW1lbnRzIGZpcnN0IHRvIGVuc3VyZSB0aGF0XG5cdFx0Ly8gYW55IHNob3dpbmcgb3IgaGlkaW5nIGhhcHBlbnMgYmVmb3JlIHBsYWNlaG9sZGVyIGNyZWF0aW9uLFxuXHRcdC8vIHdoaWNoIGVuc3VyZXMgdGhhdCBhbnkgbGF5b3V0IGNoYW5nZXMgYXJlIGNvcnJlY3RseSBjYXB0dXJlZC5cblx0XHRyZXR1cm4gcXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggcHJlZmlsdGVyICkuZWFjaCggcnVuICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggcXVldWVOYW1lLCBwcmVmaWx0ZXIgKS5xdWV1ZSggcXVldWVOYW1lLCBydW4gKTtcblx0fSxcblxuXHRzaG93OiAoIGZ1bmN0aW9uKCBvcmlnICkge1xuXHRcdHJldHVybiBmdW5jdGlvbiggb3B0aW9uICkge1xuXHRcdFx0aWYgKCBzdGFuZGFyZEFuaW1hdGlvbk9wdGlvbiggb3B0aW9uICkgKSB7XG5cdFx0XHRcdHJldHVybiBvcmlnLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhciBhcmdzID0gX25vcm1hbGl6ZUFyZ3VtZW50cy5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGFyZ3MubW9kZSA9IFwic2hvd1wiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5lZmZlY3QuY2FsbCggdGhpcywgYXJncyApO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0gKSggJC5mbi5zaG93ICksXG5cblx0aGlkZTogKCBmdW5jdGlvbiggb3JpZyApIHtcblx0XHRyZXR1cm4gZnVuY3Rpb24oIG9wdGlvbiApIHtcblx0XHRcdGlmICggc3RhbmRhcmRBbmltYXRpb25PcHRpb24oIG9wdGlvbiApICkge1xuXHRcdFx0XHRyZXR1cm4gb3JpZy5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YXIgYXJncyA9IF9ub3JtYWxpemVBcmd1bWVudHMuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRhcmdzLm1vZGUgPSBcImhpZGVcIjtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZWZmZWN0LmNhbGwoIHRoaXMsIGFyZ3MgKTtcblx0XHRcdH1cblx0XHR9O1xuXHR9ICkoICQuZm4uaGlkZSApLFxuXG5cdHRvZ2dsZTogKCBmdW5jdGlvbiggb3JpZyApIHtcblx0XHRyZXR1cm4gZnVuY3Rpb24oIG9wdGlvbiApIHtcblx0XHRcdGlmICggc3RhbmRhcmRBbmltYXRpb25PcHRpb24oIG9wdGlvbiApIHx8IHR5cGVvZiBvcHRpb24gPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRyZXR1cm4gb3JpZy5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YXIgYXJncyA9IF9ub3JtYWxpemVBcmd1bWVudHMuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRhcmdzLm1vZGUgPSBcInRvZ2dsZVwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5lZmZlY3QuY2FsbCggdGhpcywgYXJncyApO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0gKSggJC5mbi50b2dnbGUgKSxcblxuXHRjc3NVbml0OiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHZhciBzdHlsZSA9IHRoaXMuY3NzKCBrZXkgKSxcblx0XHRcdHZhbCA9IFtdO1xuXG5cdFx0JC5lYWNoKCBbIFwiZW1cIiwgXCJweFwiLCBcIiVcIiwgXCJwdFwiIF0sIGZ1bmN0aW9uKCBpLCB1bml0ICkge1xuXHRcdFx0aWYgKCBzdHlsZS5pbmRleE9mKCB1bml0ICkgPiAwICkge1xuXHRcdFx0XHR2YWwgPSBbIHBhcnNlRmxvYXQoIHN0eWxlICksIHVuaXQgXTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHZhbDtcblx0fSxcblxuXHRjc3NDbGlwOiBmdW5jdGlvbiggY2xpcE9iaiApIHtcblx0XHRpZiAoIGNsaXBPYmogKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5jc3MoIFwiY2xpcFwiLCBcInJlY3QoXCIgKyBjbGlwT2JqLnRvcCArIFwicHggXCIgKyBjbGlwT2JqLnJpZ2h0ICsgXCJweCBcIiArXG5cdFx0XHRcdGNsaXBPYmouYm90dG9tICsgXCJweCBcIiArIGNsaXBPYmoubGVmdCArIFwicHgpXCIgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHBhcnNlQ2xpcCggdGhpcy5jc3MoIFwiY2xpcFwiICksIHRoaXMgKTtcblx0fSxcblxuXHR0cmFuc2ZlcjogZnVuY3Rpb24oIG9wdGlvbnMsIGRvbmUgKSB7XG5cdFx0dmFyIGVsZW1lbnQgPSAkKCB0aGlzICksXG5cdFx0XHR0YXJnZXQgPSAkKCBvcHRpb25zLnRvICksXG5cdFx0XHR0YXJnZXRGaXhlZCA9IHRhcmdldC5jc3MoIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIsXG5cdFx0XHRib2R5ID0gJCggXCJib2R5XCIgKSxcblx0XHRcdGZpeFRvcCA9IHRhcmdldEZpeGVkID8gYm9keS5zY3JvbGxUb3AoKSA6IDAsXG5cdFx0XHRmaXhMZWZ0ID0gdGFyZ2V0Rml4ZWQgPyBib2R5LnNjcm9sbExlZnQoKSA6IDAsXG5cdFx0XHRlbmRQb3NpdGlvbiA9IHRhcmdldC5vZmZzZXQoKSxcblx0XHRcdGFuaW1hdGlvbiA9IHtcblx0XHRcdFx0dG9wOiBlbmRQb3NpdGlvbi50b3AgLSBmaXhUb3AsXG5cdFx0XHRcdGxlZnQ6IGVuZFBvc2l0aW9uLmxlZnQgLSBmaXhMZWZ0LFxuXHRcdFx0XHRoZWlnaHQ6IHRhcmdldC5pbm5lckhlaWdodCgpLFxuXHRcdFx0XHR3aWR0aDogdGFyZ2V0LmlubmVyV2lkdGgoKVxuXHRcdFx0fSxcblx0XHRcdHN0YXJ0UG9zaXRpb24gPSBlbGVtZW50Lm9mZnNldCgpLFxuXHRcdFx0dHJhbnNmZXIgPSAkKCBcIjxkaXYgY2xhc3M9J3VpLWVmZmVjdHMtdHJhbnNmZXInPjwvZGl2PlwiIClcblx0XHRcdFx0LmFwcGVuZFRvKCBcImJvZHlcIiApXG5cdFx0XHRcdC5hZGRDbGFzcyggb3B0aW9ucy5jbGFzc05hbWUgKVxuXHRcdFx0XHQuY3NzKCB7XG5cdFx0XHRcdFx0dG9wOiBzdGFydFBvc2l0aW9uLnRvcCAtIGZpeFRvcCxcblx0XHRcdFx0XHRsZWZ0OiBzdGFydFBvc2l0aW9uLmxlZnQgLSBmaXhMZWZ0LFxuXHRcdFx0XHRcdGhlaWdodDogZWxlbWVudC5pbm5lckhlaWdodCgpLFxuXHRcdFx0XHRcdHdpZHRoOiBlbGVtZW50LmlubmVyV2lkdGgoKSxcblx0XHRcdFx0XHRwb3NpdGlvbjogdGFyZ2V0Rml4ZWQgPyBcImZpeGVkXCIgOiBcImFic29sdXRlXCJcblx0XHRcdFx0fSApXG5cdFx0XHRcdC5hbmltYXRlKCBhbmltYXRpb24sIG9wdGlvbnMuZHVyYXRpb24sIG9wdGlvbnMuZWFzaW5nLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHR0cmFuc2Zlci5yZW1vdmUoKTtcblx0XHRcdFx0XHRpZiAoICQuaXNGdW5jdGlvbiggZG9uZSApICkge1xuXHRcdFx0XHRcdFx0ZG9uZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHBhcnNlQ2xpcCggc3RyLCBlbGVtZW50ICkge1xuXHRcdHZhciBvdXRlcldpZHRoID0gZWxlbWVudC5vdXRlcldpZHRoKCksXG5cdFx0XHRvdXRlckhlaWdodCA9IGVsZW1lbnQub3V0ZXJIZWlnaHQoKSxcblx0XHRcdGNsaXBSZWdleCA9IC9ecmVjdFxcKCgtP1xcZCpcXC4/XFxkKnB4fC0/XFxkKyV8YXV0byksP1xccyooLT9cXGQqXFwuP1xcZCpweHwtP1xcZCslfGF1dG8pLD9cXHMqKC0/XFxkKlxcLj9cXGQqcHh8LT9cXGQrJXxhdXRvKSw/XFxzKigtP1xcZCpcXC4/XFxkKnB4fC0/XFxkKyV8YXV0bylcXCkkLyxcblx0XHRcdHZhbHVlcyA9IGNsaXBSZWdleC5leGVjKCBzdHIgKSB8fCBbIFwiXCIsIDAsIG91dGVyV2lkdGgsIG91dGVySGVpZ2h0LCAwIF07XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBwYXJzZUZsb2F0KCB2YWx1ZXNbIDEgXSApIHx8IDAsXG5cdFx0XHRyaWdodDogdmFsdWVzWyAyIF0gPT09IFwiYXV0b1wiID8gb3V0ZXJXaWR0aCA6IHBhcnNlRmxvYXQoIHZhbHVlc1sgMiBdICksXG5cdFx0XHRib3R0b206IHZhbHVlc1sgMyBdID09PSBcImF1dG9cIiA/IG91dGVySGVpZ2h0IDogcGFyc2VGbG9hdCggdmFsdWVzWyAzIF0gKSxcblx0XHRcdGxlZnQ6IHBhcnNlRmxvYXQoIHZhbHVlc1sgNCBdICkgfHwgMFxuXHRcdH07XG59XG5cbiQuZnguc3RlcC5jbGlwID0gZnVuY3Rpb24oIGZ4ICkge1xuXHRpZiAoICFmeC5jbGlwSW5pdCApIHtcblx0XHRmeC5zdGFydCA9ICQoIGZ4LmVsZW0gKS5jc3NDbGlwKCk7XG5cdFx0aWYgKCB0eXBlb2YgZnguZW5kID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnguZW5kID0gcGFyc2VDbGlwKCBmeC5lbmQsIGZ4LmVsZW0gKTtcblx0XHR9XG5cdFx0ZnguY2xpcEluaXQgPSB0cnVlO1xuXHR9XG5cblx0JCggZnguZWxlbSApLmNzc0NsaXAoIHtcblx0XHR0b3A6IGZ4LnBvcyAqICggZnguZW5kLnRvcCAtIGZ4LnN0YXJ0LnRvcCApICsgZnguc3RhcnQudG9wLFxuXHRcdHJpZ2h0OiBmeC5wb3MgKiAoIGZ4LmVuZC5yaWdodCAtIGZ4LnN0YXJ0LnJpZ2h0ICkgKyBmeC5zdGFydC5yaWdodCxcblx0XHRib3R0b206IGZ4LnBvcyAqICggZnguZW5kLmJvdHRvbSAtIGZ4LnN0YXJ0LmJvdHRvbSApICsgZnguc3RhcnQuYm90dG9tLFxuXHRcdGxlZnQ6IGZ4LnBvcyAqICggZnguZW5kLmxlZnQgLSBmeC5zdGFydC5sZWZ0ICkgKyBmeC5zdGFydC5sZWZ0XG5cdH0gKTtcbn07XG5cbn0gKSgpO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEVBU0lORyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiggZnVuY3Rpb24oKSB7XG5cbi8vIEJhc2VkIG9uIGVhc2luZyBlcXVhdGlvbnMgZnJvbSBSb2JlcnQgUGVubmVyIChodHRwOi8vd3d3LnJvYmVydHBlbm5lci5jb20vZWFzaW5nKVxuXG52YXIgYmFzZUVhc2luZ3MgPSB7fTtcblxuJC5lYWNoKCBbIFwiUXVhZFwiLCBcIkN1YmljXCIsIFwiUXVhcnRcIiwgXCJRdWludFwiLCBcIkV4cG9cIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0YmFzZUVhc2luZ3NbIG5hbWUgXSA9IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBNYXRoLnBvdyggcCwgaSArIDIgKTtcblx0fTtcbn0gKTtcblxuJC5leHRlbmQoIGJhc2VFYXNpbmdzLCB7XG5cdFNpbmU6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAxIC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJIC8gMiApO1xuXHR9LFxuXHRDaXJjOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMSAtIE1hdGguc3FydCggMSAtIHAgKiBwICk7XG5cdH0sXG5cdEVsYXN0aWM6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwID09PSAwIHx8IHAgPT09IDEgPyBwIDpcblx0XHRcdC1NYXRoLnBvdyggMiwgOCAqICggcCAtIDEgKSApICogTWF0aC5zaW4oICggKCBwIC0gMSApICogODAgLSA3LjUgKSAqIE1hdGguUEkgLyAxNSApO1xuXHR9LFxuXHRCYWNrOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcCAqIHAgKiAoIDMgKiBwIC0gMiApO1xuXHR9LFxuXHRCb3VuY2U6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHZhciBwb3cyLFxuXHRcdFx0Ym91bmNlID0gNDtcblxuXHRcdHdoaWxlICggcCA8ICggKCBwb3cyID0gTWF0aC5wb3coIDIsIC0tYm91bmNlICkgKSAtIDEgKSAvIDExICkge31cblx0XHRyZXR1cm4gMSAvIE1hdGgucG93KCA0LCAzIC0gYm91bmNlICkgLSA3LjU2MjUgKiBNYXRoLnBvdyggKCBwb3cyICogMyAtIDIgKSAvIDIyIC0gcCwgMiApO1xuXHR9XG59ICk7XG5cbiQuZWFjaCggYmFzZUVhc2luZ3MsIGZ1bmN0aW9uKCBuYW1lLCBlYXNlSW4gKSB7XG5cdCQuZWFzaW5nWyBcImVhc2VJblwiICsgbmFtZSBdID0gZWFzZUluO1xuXHQkLmVhc2luZ1sgXCJlYXNlT3V0XCIgKyBuYW1lIF0gPSBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMSAtIGVhc2VJbiggMSAtIHAgKTtcblx0fTtcblx0JC5lYXNpbmdbIFwiZWFzZUluT3V0XCIgKyBuYW1lIF0gPSBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcCA8IDAuNSA/XG5cdFx0XHRlYXNlSW4oIHAgKiAyICkgLyAyIDpcblx0XHRcdDEgLSBlYXNlSW4oIHAgKiAtMiArIDIgKSAvIDI7XG5cdH07XG59ICk7XG5cbn0gKSgpO1xuXG52YXIgZWZmZWN0ID0gJC5lZmZlY3RzO1xuXG5cbi8qIVxuICogalF1ZXJ5IFVJIEVmZmVjdHMgQmxpbmQgMS4xMi4xXG4gKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqL1xuXG4vLz4+bGFiZWw6IEJsaW5kIEVmZmVjdFxuLy8+Pmdyb3VwOiBFZmZlY3RzXG4vLz4+ZGVzY3JpcHRpb246IEJsaW5kcyB0aGUgZWxlbWVudC5cbi8vPj5kb2NzOiBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9ibGluZC1lZmZlY3QvXG4vLz4+ZGVtb3M6IGh0dHA6Ly9qcXVlcnl1aS5jb20vZWZmZWN0L1xuXG5cblxudmFyIGVmZmVjdHNFZmZlY3RCbGluZCA9ICQuZWZmZWN0cy5kZWZpbmUoIFwiYmxpbmRcIiwgXCJoaWRlXCIsIGZ1bmN0aW9uKCBvcHRpb25zLCBkb25lICkge1xuXHR2YXIgbWFwID0ge1xuXHRcdFx0dXA6IFsgXCJib3R0b21cIiwgXCJ0b3BcIiBdLFxuXHRcdFx0dmVydGljYWw6IFsgXCJib3R0b21cIiwgXCJ0b3BcIiBdLFxuXHRcdFx0ZG93bjogWyBcInRvcFwiLCBcImJvdHRvbVwiIF0sXG5cdFx0XHRsZWZ0OiBbIFwicmlnaHRcIiwgXCJsZWZ0XCIgXSxcblx0XHRcdGhvcml6b250YWw6IFsgXCJyaWdodFwiLCBcImxlZnRcIiBdLFxuXHRcdFx0cmlnaHQ6IFsgXCJsZWZ0XCIsIFwicmlnaHRcIiBdXG5cdFx0fSxcblx0XHRlbGVtZW50ID0gJCggdGhpcyApLFxuXHRcdGRpcmVjdGlvbiA9IG9wdGlvbnMuZGlyZWN0aW9uIHx8IFwidXBcIixcblx0XHRzdGFydCA9IGVsZW1lbnQuY3NzQ2xpcCgpLFxuXHRcdGFuaW1hdGUgPSB7IGNsaXA6ICQuZXh0ZW5kKCB7fSwgc3RhcnQgKSB9LFxuXHRcdHBsYWNlaG9sZGVyID0gJC5lZmZlY3RzLmNyZWF0ZVBsYWNlaG9sZGVyKCBlbGVtZW50ICk7XG5cblx0YW5pbWF0ZS5jbGlwWyBtYXBbIGRpcmVjdGlvbiBdWyAwIF0gXSA9IGFuaW1hdGUuY2xpcFsgbWFwWyBkaXJlY3Rpb24gXVsgMSBdIF07XG5cblx0aWYgKCBvcHRpb25zLm1vZGUgPT09IFwic2hvd1wiICkge1xuXHRcdGVsZW1lbnQuY3NzQ2xpcCggYW5pbWF0ZS5jbGlwICk7XG5cdFx0aWYgKCBwbGFjZWhvbGRlciApIHtcblx0XHRcdHBsYWNlaG9sZGVyLmNzcyggJC5lZmZlY3RzLmNsaXBUb0JveCggYW5pbWF0ZSApICk7XG5cdFx0fVxuXG5cdFx0YW5pbWF0ZS5jbGlwID0gc3RhcnQ7XG5cdH1cblxuXHRpZiAoIHBsYWNlaG9sZGVyICkge1xuXHRcdHBsYWNlaG9sZGVyLmFuaW1hdGUoICQuZWZmZWN0cy5jbGlwVG9Cb3goIGFuaW1hdGUgKSwgb3B0aW9ucy5kdXJhdGlvbiwgb3B0aW9ucy5lYXNpbmcgKTtcblx0fVxuXG5cdGVsZW1lbnQuYW5pbWF0ZSggYW5pbWF0ZSwge1xuXHRcdHF1ZXVlOiBmYWxzZSxcblx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRlYXNpbmc6IG9wdGlvbnMuZWFzaW5nLFxuXHRcdGNvbXBsZXRlOiBkb25lXG5cdH0gKTtcbn0gKTtcblxuXG4vKiFcbiAqIGpRdWVyeSBVSSBFZmZlY3RzIEJvdW5jZSAxLjEyLjFcbiAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICovXG5cbi8vPj5sYWJlbDogQm91bmNlIEVmZmVjdFxuLy8+Pmdyb3VwOiBFZmZlY3RzXG4vLz4+ZGVzY3JpcHRpb246IEJvdW5jZXMgYW4gZWxlbWVudCBob3Jpem9udGFsbHkgb3IgdmVydGljYWxseSBuIHRpbWVzLlxuLy8+PmRvY3M6IGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL2JvdW5jZS1lZmZlY3QvXG4vLz4+ZGVtb3M6IGh0dHA6Ly9qcXVlcnl1aS5jb20vZWZmZWN0L1xuXG5cblxudmFyIGVmZmVjdHNFZmZlY3RCb3VuY2UgPSAkLmVmZmVjdHMuZGVmaW5lKCBcImJvdW5jZVwiLCBmdW5jdGlvbiggb3B0aW9ucywgZG9uZSApIHtcblx0dmFyIHVwQW5pbSwgZG93bkFuaW0sIHJlZlZhbHVlLFxuXHRcdGVsZW1lbnQgPSAkKCB0aGlzICksXG5cblx0XHQvLyBEZWZhdWx0czpcblx0XHRtb2RlID0gb3B0aW9ucy5tb2RlLFxuXHRcdGhpZGUgPSBtb2RlID09PSBcImhpZGVcIixcblx0XHRzaG93ID0gbW9kZSA9PT0gXCJzaG93XCIsXG5cdFx0ZGlyZWN0aW9uID0gb3B0aW9ucy5kaXJlY3Rpb24gfHwgXCJ1cFwiLFxuXHRcdGRpc3RhbmNlID0gb3B0aW9ucy5kaXN0YW5jZSxcblx0XHR0aW1lcyA9IG9wdGlvbnMudGltZXMgfHwgNSxcblxuXHRcdC8vIE51bWJlciBvZiBpbnRlcm5hbCBhbmltYXRpb25zXG5cdFx0YW5pbXMgPSB0aW1lcyAqIDIgKyAoIHNob3cgfHwgaGlkZSA/IDEgOiAwICksXG5cdFx0c3BlZWQgPSBvcHRpb25zLmR1cmF0aW9uIC8gYW5pbXMsXG5cdFx0ZWFzaW5nID0gb3B0aW9ucy5lYXNpbmcsXG5cblx0XHQvLyBVdGlsaXR5OlxuXHRcdHJlZiA9ICggZGlyZWN0aW9uID09PSBcInVwXCIgfHwgZGlyZWN0aW9uID09PSBcImRvd25cIiApID8gXCJ0b3BcIiA6IFwibGVmdFwiLFxuXHRcdG1vdGlvbiA9ICggZGlyZWN0aW9uID09PSBcInVwXCIgfHwgZGlyZWN0aW9uID09PSBcImxlZnRcIiApLFxuXHRcdGkgPSAwLFxuXG5cdFx0cXVldWVsZW4gPSBlbGVtZW50LnF1ZXVlKCkubGVuZ3RoO1xuXG5cdCQuZWZmZWN0cy5jcmVhdGVQbGFjZWhvbGRlciggZWxlbWVudCApO1xuXG5cdHJlZlZhbHVlID0gZWxlbWVudC5jc3MoIHJlZiApO1xuXG5cdC8vIERlZmF1bHQgZGlzdGFuY2UgZm9yIHRoZSBCSUdHRVNUIGJvdW5jZSBpcyB0aGUgb3V0ZXIgRGlzdGFuY2UgLyAzXG5cdGlmICggIWRpc3RhbmNlICkge1xuXHRcdGRpc3RhbmNlID0gZWxlbWVudFsgcmVmID09PSBcInRvcFwiID8gXCJvdXRlckhlaWdodFwiIDogXCJvdXRlcldpZHRoXCIgXSgpIC8gMztcblx0fVxuXG5cdGlmICggc2hvdyApIHtcblx0XHRkb3duQW5pbSA9IHsgb3BhY2l0eTogMSB9O1xuXHRcdGRvd25BbmltWyByZWYgXSA9IHJlZlZhbHVlO1xuXG5cdFx0Ly8gSWYgd2UgYXJlIHNob3dpbmcsIGZvcmNlIG9wYWNpdHkgMCBhbmQgc2V0IHRoZSBpbml0aWFsIHBvc2l0aW9uXG5cdFx0Ly8gdGhlbiBkbyB0aGUgXCJmaXJzdFwiIGFuaW1hdGlvblxuXHRcdGVsZW1lbnRcblx0XHRcdC5jc3MoIFwib3BhY2l0eVwiLCAwIClcblx0XHRcdC5jc3MoIHJlZiwgbW90aW9uID8gLWRpc3RhbmNlICogMiA6IGRpc3RhbmNlICogMiApXG5cdFx0XHQuYW5pbWF0ZSggZG93bkFuaW0sIHNwZWVkLCBlYXNpbmcgKTtcblx0fVxuXG5cdC8vIFN0YXJ0IGF0IHRoZSBzbWFsbGVzdCBkaXN0YW5jZSBpZiB3ZSBhcmUgaGlkaW5nXG5cdGlmICggaGlkZSApIHtcblx0XHRkaXN0YW5jZSA9IGRpc3RhbmNlIC8gTWF0aC5wb3coIDIsIHRpbWVzIC0gMSApO1xuXHR9XG5cblx0ZG93bkFuaW0gPSB7fTtcblx0ZG93bkFuaW1bIHJlZiBdID0gcmVmVmFsdWU7XG5cblx0Ly8gQm91bmNlcyB1cC9kb3duL2xlZnQvcmlnaHQgdGhlbiBiYWNrIHRvIDAgLS0gdGltZXMgKiAyIGFuaW1hdGlvbnMgaGFwcGVuIGhlcmVcblx0Zm9yICggOyBpIDwgdGltZXM7IGkrKyApIHtcblx0XHR1cEFuaW0gPSB7fTtcblx0XHR1cEFuaW1bIHJlZiBdID0gKCBtb3Rpb24gPyBcIi09XCIgOiBcIis9XCIgKSArIGRpc3RhbmNlO1xuXG5cdFx0ZWxlbWVudFxuXHRcdFx0LmFuaW1hdGUoIHVwQW5pbSwgc3BlZWQsIGVhc2luZyApXG5cdFx0XHQuYW5pbWF0ZSggZG93bkFuaW0sIHNwZWVkLCBlYXNpbmcgKTtcblxuXHRcdGRpc3RhbmNlID0gaGlkZSA/IGRpc3RhbmNlICogMiA6IGRpc3RhbmNlIC8gMjtcblx0fVxuXG5cdC8vIExhc3QgQm91bmNlIHdoZW4gSGlkaW5nXG5cdGlmICggaGlkZSApIHtcblx0XHR1cEFuaW0gPSB7IG9wYWNpdHk6IDAgfTtcblx0XHR1cEFuaW1bIHJlZiBdID0gKCBtb3Rpb24gPyBcIi09XCIgOiBcIis9XCIgKSArIGRpc3RhbmNlO1xuXG5cdFx0ZWxlbWVudC5hbmltYXRlKCB1cEFuaW0sIHNwZWVkLCBlYXNpbmcgKTtcblx0fVxuXG5cdGVsZW1lbnQucXVldWUoIGRvbmUgKTtcblxuXHQkLmVmZmVjdHMudW5zaGlmdCggZWxlbWVudCwgcXVldWVsZW4sIGFuaW1zICsgMSApO1xufSApO1xuXG5cbi8qIVxuICogalF1ZXJ5IFVJIEVmZmVjdHMgQ2xpcCAxLjEyLjFcbiAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICovXG5cbi8vPj5sYWJlbDogQ2xpcCBFZmZlY3Rcbi8vPj5ncm91cDogRWZmZWN0c1xuLy8+PmRlc2NyaXB0aW9uOiBDbGlwcyB0aGUgZWxlbWVudCBvbiBhbmQgb2ZmIGxpa2UgYW4gb2xkIFRWLlxuLy8+PmRvY3M6IGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL2NsaXAtZWZmZWN0L1xuLy8+PmRlbW9zOiBodHRwOi8vanF1ZXJ5dWkuY29tL2VmZmVjdC9cblxuXG5cbnZhciBlZmZlY3RzRWZmZWN0Q2xpcCA9ICQuZWZmZWN0cy5kZWZpbmUoIFwiY2xpcFwiLCBcImhpZGVcIiwgZnVuY3Rpb24oIG9wdGlvbnMsIGRvbmUgKSB7XG5cdHZhciBzdGFydCxcblx0XHRhbmltYXRlID0ge30sXG5cdFx0ZWxlbWVudCA9ICQoIHRoaXMgKSxcblx0XHRkaXJlY3Rpb24gPSBvcHRpb25zLmRpcmVjdGlvbiB8fCBcInZlcnRpY2FsXCIsXG5cdFx0Ym90aCA9IGRpcmVjdGlvbiA9PT0gXCJib3RoXCIsXG5cdFx0aG9yaXpvbnRhbCA9IGJvdGggfHwgZGlyZWN0aW9uID09PSBcImhvcml6b250YWxcIixcblx0XHR2ZXJ0aWNhbCA9IGJvdGggfHwgZGlyZWN0aW9uID09PSBcInZlcnRpY2FsXCI7XG5cblx0c3RhcnQgPSBlbGVtZW50LmNzc0NsaXAoKTtcblx0YW5pbWF0ZS5jbGlwID0ge1xuXHRcdHRvcDogdmVydGljYWwgPyAoIHN0YXJ0LmJvdHRvbSAtIHN0YXJ0LnRvcCApIC8gMiA6IHN0YXJ0LnRvcCxcblx0XHRyaWdodDogaG9yaXpvbnRhbCA/ICggc3RhcnQucmlnaHQgLSBzdGFydC5sZWZ0ICkgLyAyIDogc3RhcnQucmlnaHQsXG5cdFx0Ym90dG9tOiB2ZXJ0aWNhbCA/ICggc3RhcnQuYm90dG9tIC0gc3RhcnQudG9wICkgLyAyIDogc3RhcnQuYm90dG9tLFxuXHRcdGxlZnQ6IGhvcml6b250YWwgPyAoIHN0YXJ0LnJpZ2h0IC0gc3RhcnQubGVmdCApIC8gMiA6IHN0YXJ0LmxlZnRcblx0fTtcblxuXHQkLmVmZmVjdHMuY3JlYXRlUGxhY2Vob2xkZXIoIGVsZW1lbnQgKTtcblxuXHRpZiAoIG9wdGlvbnMubW9kZSA9PT0gXCJzaG93XCIgKSB7XG5cdFx0ZWxlbWVudC5jc3NDbGlwKCBhbmltYXRlLmNsaXAgKTtcblx0XHRhbmltYXRlLmNsaXAgPSBzdGFydDtcblx0fVxuXG5cdGVsZW1lbnQuYW5pbWF0ZSggYW5pbWF0ZSwge1xuXHRcdHF1ZXVlOiBmYWxzZSxcblx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRlYXNpbmc6IG9wdGlvbnMuZWFzaW5nLFxuXHRcdGNvbXBsZXRlOiBkb25lXG5cdH0gKTtcblxufSApO1xuXG5cbi8qIVxuICogalF1ZXJ5IFVJIEVmZmVjdHMgRHJvcCAxLjEyLjFcbiAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICovXG5cbi8vPj5sYWJlbDogRHJvcCBFZmZlY3Rcbi8vPj5ncm91cDogRWZmZWN0c1xuLy8+PmRlc2NyaXB0aW9uOiBNb3ZlcyBhbiBlbGVtZW50IGluIG9uZSBkaXJlY3Rpb24gYW5kIGhpZGVzIGl0IGF0IHRoZSBzYW1lIHRpbWUuXG4vLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vZHJvcC1lZmZlY3QvXG4vLz4+ZGVtb3M6IGh0dHA6Ly9qcXVlcnl1aS5jb20vZWZmZWN0L1xuXG5cblxudmFyIGVmZmVjdHNFZmZlY3REcm9wID0gJC5lZmZlY3RzLmRlZmluZSggXCJkcm9wXCIsIFwiaGlkZVwiLCBmdW5jdGlvbiggb3B0aW9ucywgZG9uZSApIHtcblxuXHR2YXIgZGlzdGFuY2UsXG5cdFx0ZWxlbWVudCA9ICQoIHRoaXMgKSxcblx0XHRtb2RlID0gb3B0aW9ucy5tb2RlLFxuXHRcdHNob3cgPSBtb2RlID09PSBcInNob3dcIixcblx0XHRkaXJlY3Rpb24gPSBvcHRpb25zLmRpcmVjdGlvbiB8fCBcImxlZnRcIixcblx0XHRyZWYgPSAoIGRpcmVjdGlvbiA9PT0gXCJ1cFwiIHx8IGRpcmVjdGlvbiA9PT0gXCJkb3duXCIgKSA/IFwidG9wXCIgOiBcImxlZnRcIixcblx0XHRtb3Rpb24gPSAoIGRpcmVjdGlvbiA9PT0gXCJ1cFwiIHx8IGRpcmVjdGlvbiA9PT0gXCJsZWZ0XCIgKSA/IFwiLT1cIiA6IFwiKz1cIixcblx0XHRvcHBvc2l0ZU1vdGlvbiA9ICggbW90aW9uID09PSBcIis9XCIgKSA/IFwiLT1cIiA6IFwiKz1cIixcblx0XHRhbmltYXRpb24gPSB7XG5cdFx0XHRvcGFjaXR5OiAwXG5cdFx0fTtcblxuXHQkLmVmZmVjdHMuY3JlYXRlUGxhY2Vob2xkZXIoIGVsZW1lbnQgKTtcblxuXHRkaXN0YW5jZSA9IG9wdGlvbnMuZGlzdGFuY2UgfHxcblx0XHRlbGVtZW50WyByZWYgPT09IFwidG9wXCIgPyBcIm91dGVySGVpZ2h0XCIgOiBcIm91dGVyV2lkdGhcIiBdKCB0cnVlICkgLyAyO1xuXG5cdGFuaW1hdGlvblsgcmVmIF0gPSBtb3Rpb24gKyBkaXN0YW5jZTtcblxuXHRpZiAoIHNob3cgKSB7XG5cdFx0ZWxlbWVudC5jc3MoIGFuaW1hdGlvbiApO1xuXG5cdFx0YW5pbWF0aW9uWyByZWYgXSA9IG9wcG9zaXRlTW90aW9uICsgZGlzdGFuY2U7XG5cdFx0YW5pbWF0aW9uLm9wYWNpdHkgPSAxO1xuXHR9XG5cblx0Ly8gQW5pbWF0ZVxuXHRlbGVtZW50LmFuaW1hdGUoIGFuaW1hdGlvbiwge1xuXHRcdHF1ZXVlOiBmYWxzZSxcblx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRlYXNpbmc6IG9wdGlvbnMuZWFzaW5nLFxuXHRcdGNvbXBsZXRlOiBkb25lXG5cdH0gKTtcbn0gKTtcblxuXG4vKiFcbiAqIGpRdWVyeSBVSSBFZmZlY3RzIEV4cGxvZGUgMS4xMi4xXG4gKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqL1xuXG4vLz4+bGFiZWw6IEV4cGxvZGUgRWZmZWN0XG4vLz4+Z3JvdXA6IEVmZmVjdHNcbi8vIGpzY3M6ZGlzYWJsZSBtYXhpbXVtTGluZUxlbmd0aFxuLy8+PmRlc2NyaXB0aW9uOiBFeHBsb2RlcyBhbiBlbGVtZW50IGluIGFsbCBkaXJlY3Rpb25zIGludG8gbiBwaWVjZXMuIEltcGxvZGVzIGFuIGVsZW1lbnQgdG8gaXRzIG9yaWdpbmFsIHdob2xlbmVzcy5cbi8vIGpzY3M6ZW5hYmxlIG1heGltdW1MaW5lTGVuZ3RoXG4vLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vZXhwbG9kZS1lZmZlY3QvXG4vLz4+ZGVtb3M6IGh0dHA6Ly9qcXVlcnl1aS5jb20vZWZmZWN0L1xuXG5cblxudmFyIGVmZmVjdHNFZmZlY3RFeHBsb2RlID0gJC5lZmZlY3RzLmRlZmluZSggXCJleHBsb2RlXCIsIFwiaGlkZVwiLCBmdW5jdGlvbiggb3B0aW9ucywgZG9uZSApIHtcblxuXHR2YXIgaSwgaiwgbGVmdCwgdG9wLCBteCwgbXksXG5cdFx0cm93cyA9IG9wdGlvbnMucGllY2VzID8gTWF0aC5yb3VuZCggTWF0aC5zcXJ0KCBvcHRpb25zLnBpZWNlcyApICkgOiAzLFxuXHRcdGNlbGxzID0gcm93cyxcblx0XHRlbGVtZW50ID0gJCggdGhpcyApLFxuXHRcdG1vZGUgPSBvcHRpb25zLm1vZGUsXG5cdFx0c2hvdyA9IG1vZGUgPT09IFwic2hvd1wiLFxuXG5cdFx0Ly8gU2hvdyBhbmQgdGhlbiB2aXNpYmlsaXR5OmhpZGRlbiB0aGUgZWxlbWVudCBiZWZvcmUgY2FsY3VsYXRpbmcgb2Zmc2V0XG5cdFx0b2Zmc2V0ID0gZWxlbWVudC5zaG93KCkuY3NzKCBcInZpc2liaWxpdHlcIiwgXCJoaWRkZW5cIiApLm9mZnNldCgpLFxuXG5cdFx0Ly8gV2lkdGggYW5kIGhlaWdodCBvZiBhIHBpZWNlXG5cdFx0d2lkdGggPSBNYXRoLmNlaWwoIGVsZW1lbnQub3V0ZXJXaWR0aCgpIC8gY2VsbHMgKSxcblx0XHRoZWlnaHQgPSBNYXRoLmNlaWwoIGVsZW1lbnQub3V0ZXJIZWlnaHQoKSAvIHJvd3MgKSxcblx0XHRwaWVjZXMgPSBbXTtcblxuXHQvLyBDaGlsZHJlbiBhbmltYXRlIGNvbXBsZXRlOlxuXHRmdW5jdGlvbiBjaGlsZENvbXBsZXRlKCkge1xuXHRcdHBpZWNlcy5wdXNoKCB0aGlzICk7XG5cdFx0aWYgKCBwaWVjZXMubGVuZ3RoID09PSByb3dzICogY2VsbHMgKSB7XG5cdFx0XHRhbmltQ29tcGxldGUoKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbG9uZSB0aGUgZWxlbWVudCBmb3IgZWFjaCByb3cgYW5kIGNlbGwuXG5cdGZvciAoIGkgPSAwOyBpIDwgcm93czsgaSsrICkgeyAvLyA9PT0+XG5cdFx0dG9wID0gb2Zmc2V0LnRvcCArIGkgKiBoZWlnaHQ7XG5cdFx0bXkgPSBpIC0gKCByb3dzIC0gMSApIC8gMjtcblxuXHRcdGZvciAoIGogPSAwOyBqIDwgY2VsbHM7IGorKyApIHsgLy8gfHx8XG5cdFx0XHRsZWZ0ID0gb2Zmc2V0LmxlZnQgKyBqICogd2lkdGg7XG5cdFx0XHRteCA9IGogLSAoIGNlbGxzIC0gMSApIC8gMjtcblxuXHRcdFx0Ly8gQ3JlYXRlIGEgY2xvbmUgb2YgdGhlIG5vdyBoaWRkZW4gbWFpbiBlbGVtZW50IHRoYXQgd2lsbCBiZSBhYnNvbHV0ZSBwb3NpdGlvbmVkXG5cdFx0XHQvLyB3aXRoaW4gYSB3cmFwcGVyIGRpdiBvZmYgdGhlIC1sZWZ0IGFuZCAtdG9wIGVxdWFsIHRvIHNpemUgb2Ygb3VyIHBpZWNlc1xuXHRcdFx0ZWxlbWVudFxuXHRcdFx0XHQuY2xvbmUoKVxuXHRcdFx0XHQuYXBwZW5kVG8oIFwiYm9keVwiIClcblx0XHRcdFx0LndyYXAoIFwiPGRpdj48L2Rpdj5cIiApXG5cdFx0XHRcdC5jc3MoIHtcblx0XHRcdFx0XHRwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuXHRcdFx0XHRcdHZpc2liaWxpdHk6IFwidmlzaWJsZVwiLFxuXHRcdFx0XHRcdGxlZnQ6IC1qICogd2lkdGgsXG5cdFx0XHRcdFx0dG9wOiAtaSAqIGhlaWdodFxuXHRcdFx0XHR9IClcblxuXHRcdFx0XHQvLyBTZWxlY3QgdGhlIHdyYXBwZXIgLSBtYWtlIGl0IG92ZXJmbG93OiBoaWRkZW4gYW5kIGFic29sdXRlIHBvc2l0aW9uZWQgYmFzZWQgb25cblx0XHRcdFx0Ly8gd2hlcmUgdGhlIG9yaWdpbmFsIHdhcyBsb2NhdGVkICtsZWZ0IGFuZCArdG9wIGVxdWFsIHRvIHRoZSBzaXplIG9mIHBpZWNlc1xuXHRcdFx0XHQucGFyZW50KClcblx0XHRcdFx0XHQuYWRkQ2xhc3MoIFwidWktZWZmZWN0cy1leHBsb2RlXCIgKVxuXHRcdFx0XHRcdC5jc3MoIHtcblx0XHRcdFx0XHRcdHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG5cdFx0XHRcdFx0XHRvdmVyZmxvdzogXCJoaWRkZW5cIixcblx0XHRcdFx0XHRcdHdpZHRoOiB3aWR0aCxcblx0XHRcdFx0XHRcdGhlaWdodDogaGVpZ2h0LFxuXHRcdFx0XHRcdFx0bGVmdDogbGVmdCArICggc2hvdyA/IG14ICogd2lkdGggOiAwICksXG5cdFx0XHRcdFx0XHR0b3A6IHRvcCArICggc2hvdyA/IG15ICogaGVpZ2h0IDogMCApLFxuXHRcdFx0XHRcdFx0b3BhY2l0eTogc2hvdyA/IDAgOiAxXG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdFx0LmFuaW1hdGUoIHtcblx0XHRcdFx0XHRcdGxlZnQ6IGxlZnQgKyAoIHNob3cgPyAwIDogbXggKiB3aWR0aCApLFxuXHRcdFx0XHRcdFx0dG9wOiB0b3AgKyAoIHNob3cgPyAwIDogbXkgKiBoZWlnaHQgKSxcblx0XHRcdFx0XHRcdG9wYWNpdHk6IHNob3cgPyAxIDogMFxuXHRcdFx0XHRcdH0sIG9wdGlvbnMuZHVyYXRpb24gfHwgNTAwLCBvcHRpb25zLmVhc2luZywgY2hpbGRDb21wbGV0ZSApO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIGFuaW1Db21wbGV0ZSgpIHtcblx0XHRlbGVtZW50LmNzcygge1xuXHRcdFx0dmlzaWJpbGl0eTogXCJ2aXNpYmxlXCJcblx0XHR9ICk7XG5cdFx0JCggcGllY2VzICkucmVtb3ZlKCk7XG5cdFx0ZG9uZSgpO1xuXHR9XG59ICk7XG5cblxuLyohXG4gKiBqUXVlcnkgVUkgRWZmZWN0cyBGYWRlIDEuMTIuMVxuICogaHR0cDovL2pxdWVyeXVpLmNvbVxuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKi9cblxuLy8+PmxhYmVsOiBGYWRlIEVmZmVjdFxuLy8+Pmdyb3VwOiBFZmZlY3RzXG4vLz4+ZGVzY3JpcHRpb246IEZhZGVzIHRoZSBlbGVtZW50LlxuLy8+PmRvY3M6IGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL2ZhZGUtZWZmZWN0L1xuLy8+PmRlbW9zOiBodHRwOi8vanF1ZXJ5dWkuY29tL2VmZmVjdC9cblxuXG5cbnZhciBlZmZlY3RzRWZmZWN0RmFkZSA9ICQuZWZmZWN0cy5kZWZpbmUoIFwiZmFkZVwiLCBcInRvZ2dsZVwiLCBmdW5jdGlvbiggb3B0aW9ucywgZG9uZSApIHtcblx0dmFyIHNob3cgPSBvcHRpb25zLm1vZGUgPT09IFwic2hvd1wiO1xuXG5cdCQoIHRoaXMgKVxuXHRcdC5jc3MoIFwib3BhY2l0eVwiLCBzaG93ID8gMCA6IDEgKVxuXHRcdC5hbmltYXRlKCB7XG5cdFx0XHRvcGFjaXR5OiBzaG93ID8gMSA6IDBcblx0XHR9LCB7XG5cdFx0XHRxdWV1ZTogZmFsc2UsXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdGVhc2luZzogb3B0aW9ucy5lYXNpbmcsXG5cdFx0XHRjb21wbGV0ZTogZG9uZVxuXHRcdH0gKTtcbn0gKTtcblxuXG4vKiFcbiAqIGpRdWVyeSBVSSBFZmZlY3RzIEZvbGQgMS4xMi4xXG4gKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqL1xuXG4vLz4+bGFiZWw6IEZvbGQgRWZmZWN0XG4vLz4+Z3JvdXA6IEVmZmVjdHNcbi8vPj5kZXNjcmlwdGlvbjogRm9sZHMgYW4gZWxlbWVudCBmaXJzdCBob3Jpem9udGFsbHkgYW5kIHRoZW4gdmVydGljYWxseS5cbi8vPj5kb2NzOiBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9mb2xkLWVmZmVjdC9cbi8vPj5kZW1vczogaHR0cDovL2pxdWVyeXVpLmNvbS9lZmZlY3QvXG5cblxuXG52YXIgZWZmZWN0c0VmZmVjdEZvbGQgPSAkLmVmZmVjdHMuZGVmaW5lKCBcImZvbGRcIiwgXCJoaWRlXCIsIGZ1bmN0aW9uKCBvcHRpb25zLCBkb25lICkge1xuXG5cdC8vIENyZWF0ZSBlbGVtZW50XG5cdHZhciBlbGVtZW50ID0gJCggdGhpcyApLFxuXHRcdG1vZGUgPSBvcHRpb25zLm1vZGUsXG5cdFx0c2hvdyA9IG1vZGUgPT09IFwic2hvd1wiLFxuXHRcdGhpZGUgPSBtb2RlID09PSBcImhpZGVcIixcblx0XHRzaXplID0gb3B0aW9ucy5zaXplIHx8IDE1LFxuXHRcdHBlcmNlbnQgPSAvKFswLTldKyklLy5leGVjKCBzaXplICksXG5cdFx0aG9yaXpGaXJzdCA9ICEhb3B0aW9ucy5ob3JpekZpcnN0LFxuXHRcdHJlZiA9IGhvcml6Rmlyc3QgPyBbIFwicmlnaHRcIiwgXCJib3R0b21cIiBdIDogWyBcImJvdHRvbVwiLCBcInJpZ2h0XCIgXSxcblx0XHRkdXJhdGlvbiA9IG9wdGlvbnMuZHVyYXRpb24gLyAyLFxuXG5cdFx0cGxhY2Vob2xkZXIgPSAkLmVmZmVjdHMuY3JlYXRlUGxhY2Vob2xkZXIoIGVsZW1lbnQgKSxcblxuXHRcdHN0YXJ0ID0gZWxlbWVudC5jc3NDbGlwKCksXG5cdFx0YW5pbWF0aW9uMSA9IHsgY2xpcDogJC5leHRlbmQoIHt9LCBzdGFydCApIH0sXG5cdFx0YW5pbWF0aW9uMiA9IHsgY2xpcDogJC5leHRlbmQoIHt9LCBzdGFydCApIH0sXG5cblx0XHRkaXN0YW5jZSA9IFsgc3RhcnRbIHJlZlsgMCBdIF0sIHN0YXJ0WyByZWZbIDEgXSBdIF0sXG5cblx0XHRxdWV1ZWxlbiA9IGVsZW1lbnQucXVldWUoKS5sZW5ndGg7XG5cblx0aWYgKCBwZXJjZW50ICkge1xuXHRcdHNpemUgPSBwYXJzZUludCggcGVyY2VudFsgMSBdLCAxMCApIC8gMTAwICogZGlzdGFuY2VbIGhpZGUgPyAwIDogMSBdO1xuXHR9XG5cdGFuaW1hdGlvbjEuY2xpcFsgcmVmWyAwIF0gXSA9IHNpemU7XG5cdGFuaW1hdGlvbjIuY2xpcFsgcmVmWyAwIF0gXSA9IHNpemU7XG5cdGFuaW1hdGlvbjIuY2xpcFsgcmVmWyAxIF0gXSA9IDA7XG5cblx0aWYgKCBzaG93ICkge1xuXHRcdGVsZW1lbnQuY3NzQ2xpcCggYW5pbWF0aW9uMi5jbGlwICk7XG5cdFx0aWYgKCBwbGFjZWhvbGRlciApIHtcblx0XHRcdHBsYWNlaG9sZGVyLmNzcyggJC5lZmZlY3RzLmNsaXBUb0JveCggYW5pbWF0aW9uMiApICk7XG5cdFx0fVxuXG5cdFx0YW5pbWF0aW9uMi5jbGlwID0gc3RhcnQ7XG5cdH1cblxuXHQvLyBBbmltYXRlXG5cdGVsZW1lbnRcblx0XHQucXVldWUoIGZ1bmN0aW9uKCBuZXh0ICkge1xuXHRcdFx0aWYgKCBwbGFjZWhvbGRlciApIHtcblx0XHRcdFx0cGxhY2Vob2xkZXJcblx0XHRcdFx0XHQuYW5pbWF0ZSggJC5lZmZlY3RzLmNsaXBUb0JveCggYW5pbWF0aW9uMSApLCBkdXJhdGlvbiwgb3B0aW9ucy5lYXNpbmcgKVxuXHRcdFx0XHRcdC5hbmltYXRlKCAkLmVmZmVjdHMuY2xpcFRvQm94KCBhbmltYXRpb24yICksIGR1cmF0aW9uLCBvcHRpb25zLmVhc2luZyApO1xuXHRcdFx0fVxuXG5cdFx0XHRuZXh0KCk7XG5cdFx0fSApXG5cdFx0LmFuaW1hdGUoIGFuaW1hdGlvbjEsIGR1cmF0aW9uLCBvcHRpb25zLmVhc2luZyApXG5cdFx0LmFuaW1hdGUoIGFuaW1hdGlvbjIsIGR1cmF0aW9uLCBvcHRpb25zLmVhc2luZyApXG5cdFx0LnF1ZXVlKCBkb25lICk7XG5cblx0JC5lZmZlY3RzLnVuc2hpZnQoIGVsZW1lbnQsIHF1ZXVlbGVuLCA0ICk7XG59ICk7XG5cblxuLyohXG4gKiBqUXVlcnkgVUkgRWZmZWN0cyBIaWdobGlnaHQgMS4xMi4xXG4gKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqL1xuXG4vLz4+bGFiZWw6IEhpZ2hsaWdodCBFZmZlY3Rcbi8vPj5ncm91cDogRWZmZWN0c1xuLy8+PmRlc2NyaXB0aW9uOiBIaWdobGlnaHRzIHRoZSBiYWNrZ3JvdW5kIG9mIGFuIGVsZW1lbnQgaW4gYSBkZWZpbmVkIGNvbG9yIGZvciBhIGN1c3RvbSBkdXJhdGlvbi5cbi8vPj5kb2NzOiBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9oaWdobGlnaHQtZWZmZWN0L1xuLy8+PmRlbW9zOiBodHRwOi8vanF1ZXJ5dWkuY29tL2VmZmVjdC9cblxuXG5cbnZhciBlZmZlY3RzRWZmZWN0SGlnaGxpZ2h0ID0gJC5lZmZlY3RzLmRlZmluZSggXCJoaWdobGlnaHRcIiwgXCJzaG93XCIsIGZ1bmN0aW9uKCBvcHRpb25zLCBkb25lICkge1xuXHR2YXIgZWxlbWVudCA9ICQoIHRoaXMgKSxcblx0XHRhbmltYXRpb24gPSB7XG5cdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IGVsZW1lbnQuY3NzKCBcImJhY2tncm91bmRDb2xvclwiIClcblx0XHR9O1xuXG5cdGlmICggb3B0aW9ucy5tb2RlID09PSBcImhpZGVcIiApIHtcblx0XHRhbmltYXRpb24ub3BhY2l0eSA9IDA7XG5cdH1cblxuXHQkLmVmZmVjdHMuc2F2ZVN0eWxlKCBlbGVtZW50ICk7XG5cblx0ZWxlbWVudFxuXHRcdC5jc3MoIHtcblx0XHRcdGJhY2tncm91bmRJbWFnZTogXCJub25lXCIsXG5cdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IG9wdGlvbnMuY29sb3IgfHwgXCIjZmZmZjk5XCJcblx0XHR9IClcblx0XHQuYW5pbWF0ZSggYW5pbWF0aW9uLCB7XG5cdFx0XHRxdWV1ZTogZmFsc2UsXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdGVhc2luZzogb3B0aW9ucy5lYXNpbmcsXG5cdFx0XHRjb21wbGV0ZTogZG9uZVxuXHRcdH0gKTtcbn0gKTtcblxuXG4vKiFcbiAqIGpRdWVyeSBVSSBFZmZlY3RzIFNpemUgMS4xMi4xXG4gKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqL1xuXG4vLz4+bGFiZWw6IFNpemUgRWZmZWN0XG4vLz4+Z3JvdXA6IEVmZmVjdHNcbi8vPj5kZXNjcmlwdGlvbjogUmVzaXplIGFuIGVsZW1lbnQgdG8gYSBzcGVjaWZpZWQgd2lkdGggYW5kIGhlaWdodC5cbi8vPj5kb2NzOiBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9zaXplLWVmZmVjdC9cbi8vPj5kZW1vczogaHR0cDovL2pxdWVyeXVpLmNvbS9lZmZlY3QvXG5cblxuXG52YXIgZWZmZWN0c0VmZmVjdFNpemUgPSAkLmVmZmVjdHMuZGVmaW5lKCBcInNpemVcIiwgZnVuY3Rpb24oIG9wdGlvbnMsIGRvbmUgKSB7XG5cblx0Ly8gQ3JlYXRlIGVsZW1lbnRcblx0dmFyIGJhc2VsaW5lLCBmYWN0b3IsIHRlbXAsXG5cdFx0ZWxlbWVudCA9ICQoIHRoaXMgKSxcblxuXHRcdC8vIENvcHkgZm9yIGNoaWxkcmVuXG5cdFx0Y1Byb3BzID0gWyBcImZvbnRTaXplXCIgXSxcblx0XHR2UHJvcHMgPSBbIFwiYm9yZGVyVG9wV2lkdGhcIiwgXCJib3JkZXJCb3R0b21XaWR0aFwiLCBcInBhZGRpbmdUb3BcIiwgXCJwYWRkaW5nQm90dG9tXCIgXSxcblx0XHRoUHJvcHMgPSBbIFwiYm9yZGVyTGVmdFdpZHRoXCIsIFwiYm9yZGVyUmlnaHRXaWR0aFwiLCBcInBhZGRpbmdMZWZ0XCIsIFwicGFkZGluZ1JpZ2h0XCIgXSxcblxuXHRcdC8vIFNldCBvcHRpb25zXG5cdFx0bW9kZSA9IG9wdGlvbnMubW9kZSxcblx0XHRyZXN0b3JlID0gbW9kZSAhPT0gXCJlZmZlY3RcIixcblx0XHRzY2FsZSA9IG9wdGlvbnMuc2NhbGUgfHwgXCJib3RoXCIsXG5cdFx0b3JpZ2luID0gb3B0aW9ucy5vcmlnaW4gfHwgWyBcIm1pZGRsZVwiLCBcImNlbnRlclwiIF0sXG5cdFx0cG9zaXRpb24gPSBlbGVtZW50LmNzcyggXCJwb3NpdGlvblwiICksXG5cdFx0cG9zID0gZWxlbWVudC5wb3NpdGlvbigpLFxuXHRcdG9yaWdpbmFsID0gJC5lZmZlY3RzLnNjYWxlZERpbWVuc2lvbnMoIGVsZW1lbnQgKSxcblx0XHRmcm9tID0gb3B0aW9ucy5mcm9tIHx8IG9yaWdpbmFsLFxuXHRcdHRvID0gb3B0aW9ucy50byB8fCAkLmVmZmVjdHMuc2NhbGVkRGltZW5zaW9ucyggZWxlbWVudCwgMCApO1xuXG5cdCQuZWZmZWN0cy5jcmVhdGVQbGFjZWhvbGRlciggZWxlbWVudCApO1xuXG5cdGlmICggbW9kZSA9PT0gXCJzaG93XCIgKSB7XG5cdFx0dGVtcCA9IGZyb207XG5cdFx0ZnJvbSA9IHRvO1xuXHRcdHRvID0gdGVtcDtcblx0fVxuXG5cdC8vIFNldCBzY2FsaW5nIGZhY3RvclxuXHRmYWN0b3IgPSB7XG5cdFx0ZnJvbToge1xuXHRcdFx0eTogZnJvbS5oZWlnaHQgLyBvcmlnaW5hbC5oZWlnaHQsXG5cdFx0XHR4OiBmcm9tLndpZHRoIC8gb3JpZ2luYWwud2lkdGhcblx0XHR9LFxuXHRcdHRvOiB7XG5cdFx0XHR5OiB0by5oZWlnaHQgLyBvcmlnaW5hbC5oZWlnaHQsXG5cdFx0XHR4OiB0by53aWR0aCAvIG9yaWdpbmFsLndpZHRoXG5cdFx0fVxuXHR9O1xuXG5cdC8vIFNjYWxlIHRoZSBjc3MgYm94XG5cdGlmICggc2NhbGUgPT09IFwiYm94XCIgfHwgc2NhbGUgPT09IFwiYm90aFwiICkge1xuXG5cdFx0Ly8gVmVydGljYWwgcHJvcHMgc2NhbGluZ1xuXHRcdGlmICggZmFjdG9yLmZyb20ueSAhPT0gZmFjdG9yLnRvLnkgKSB7XG5cdFx0XHRmcm9tID0gJC5lZmZlY3RzLnNldFRyYW5zaXRpb24oIGVsZW1lbnQsIHZQcm9wcywgZmFjdG9yLmZyb20ueSwgZnJvbSApO1xuXHRcdFx0dG8gPSAkLmVmZmVjdHMuc2V0VHJhbnNpdGlvbiggZWxlbWVudCwgdlByb3BzLCBmYWN0b3IudG8ueSwgdG8gKTtcblx0XHR9XG5cblx0XHQvLyBIb3Jpem9udGFsIHByb3BzIHNjYWxpbmdcblx0XHRpZiAoIGZhY3Rvci5mcm9tLnggIT09IGZhY3Rvci50by54ICkge1xuXHRcdFx0ZnJvbSA9ICQuZWZmZWN0cy5zZXRUcmFuc2l0aW9uKCBlbGVtZW50LCBoUHJvcHMsIGZhY3Rvci5mcm9tLngsIGZyb20gKTtcblx0XHRcdHRvID0gJC5lZmZlY3RzLnNldFRyYW5zaXRpb24oIGVsZW1lbnQsIGhQcm9wcywgZmFjdG9yLnRvLngsIHRvICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2NhbGUgdGhlIGNvbnRlbnRcblx0aWYgKCBzY2FsZSA9PT0gXCJjb250ZW50XCIgfHwgc2NhbGUgPT09IFwiYm90aFwiICkge1xuXG5cdFx0Ly8gVmVydGljYWwgcHJvcHMgc2NhbGluZ1xuXHRcdGlmICggZmFjdG9yLmZyb20ueSAhPT0gZmFjdG9yLnRvLnkgKSB7XG5cdFx0XHRmcm9tID0gJC5lZmZlY3RzLnNldFRyYW5zaXRpb24oIGVsZW1lbnQsIGNQcm9wcywgZmFjdG9yLmZyb20ueSwgZnJvbSApO1xuXHRcdFx0dG8gPSAkLmVmZmVjdHMuc2V0VHJhbnNpdGlvbiggZWxlbWVudCwgY1Byb3BzLCBmYWN0b3IudG8ueSwgdG8gKTtcblx0XHR9XG5cdH1cblxuXHQvLyBBZGp1c3QgdGhlIHBvc2l0aW9uIHByb3BlcnRpZXMgYmFzZWQgb24gdGhlIHByb3ZpZGVkIG9yaWdpbiBwb2ludHNcblx0aWYgKCBvcmlnaW4gKSB7XG5cdFx0YmFzZWxpbmUgPSAkLmVmZmVjdHMuZ2V0QmFzZWxpbmUoIG9yaWdpbiwgb3JpZ2luYWwgKTtcblx0XHRmcm9tLnRvcCA9ICggb3JpZ2luYWwub3V0ZXJIZWlnaHQgLSBmcm9tLm91dGVySGVpZ2h0ICkgKiBiYXNlbGluZS55ICsgcG9zLnRvcDtcblx0XHRmcm9tLmxlZnQgPSAoIG9yaWdpbmFsLm91dGVyV2lkdGggLSBmcm9tLm91dGVyV2lkdGggKSAqIGJhc2VsaW5lLnggKyBwb3MubGVmdDtcblx0XHR0by50b3AgPSAoIG9yaWdpbmFsLm91dGVySGVpZ2h0IC0gdG8ub3V0ZXJIZWlnaHQgKSAqIGJhc2VsaW5lLnkgKyBwb3MudG9wO1xuXHRcdHRvLmxlZnQgPSAoIG9yaWdpbmFsLm91dGVyV2lkdGggLSB0by5vdXRlcldpZHRoICkgKiBiYXNlbGluZS54ICsgcG9zLmxlZnQ7XG5cdH1cblx0ZWxlbWVudC5jc3MoIGZyb20gKTtcblxuXHQvLyBBbmltYXRlIHRoZSBjaGlsZHJlbiBpZiBkZXNpcmVkXG5cdGlmICggc2NhbGUgPT09IFwiY29udGVudFwiIHx8IHNjYWxlID09PSBcImJvdGhcIiApIHtcblxuXHRcdHZQcm9wcyA9IHZQcm9wcy5jb25jYXQoIFsgXCJtYXJnaW5Ub3BcIiwgXCJtYXJnaW5Cb3R0b21cIiBdICkuY29uY2F0KCBjUHJvcHMgKTtcblx0XHRoUHJvcHMgPSBoUHJvcHMuY29uY2F0KCBbIFwibWFyZ2luTGVmdFwiLCBcIm1hcmdpblJpZ2h0XCIgXSApO1xuXG5cdFx0Ly8gT25seSBhbmltYXRlIGNoaWxkcmVuIHdpdGggd2lkdGggYXR0cmlidXRlcyBzcGVjaWZpZWRcblx0XHQvLyBUT0RPOiBpcyB0aGlzIHJpZ2h0PyBzaG91bGQgd2UgaW5jbHVkZSBhbnl0aGluZyB3aXRoIGNzcyB3aWR0aCBzcGVjaWZpZWQgYXMgd2VsbFxuXHRcdGVsZW1lbnQuZmluZCggXCIqW3dpZHRoXVwiICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2hpbGQgPSAkKCB0aGlzICksXG5cdFx0XHRcdGNoaWxkT3JpZ2luYWwgPSAkLmVmZmVjdHMuc2NhbGVkRGltZW5zaW9ucyggY2hpbGQgKSxcblx0XHRcdFx0Y2hpbGRGcm9tID0ge1xuXHRcdFx0XHRcdGhlaWdodDogY2hpbGRPcmlnaW5hbC5oZWlnaHQgKiBmYWN0b3IuZnJvbS55LFxuXHRcdFx0XHRcdHdpZHRoOiBjaGlsZE9yaWdpbmFsLndpZHRoICogZmFjdG9yLmZyb20ueCxcblx0XHRcdFx0XHRvdXRlckhlaWdodDogY2hpbGRPcmlnaW5hbC5vdXRlckhlaWdodCAqIGZhY3Rvci5mcm9tLnksXG5cdFx0XHRcdFx0b3V0ZXJXaWR0aDogY2hpbGRPcmlnaW5hbC5vdXRlcldpZHRoICogZmFjdG9yLmZyb20ueFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRjaGlsZFRvID0ge1xuXHRcdFx0XHRcdGhlaWdodDogY2hpbGRPcmlnaW5hbC5oZWlnaHQgKiBmYWN0b3IudG8ueSxcblx0XHRcdFx0XHR3aWR0aDogY2hpbGRPcmlnaW5hbC53aWR0aCAqIGZhY3Rvci50by54LFxuXHRcdFx0XHRcdG91dGVySGVpZ2h0OiBjaGlsZE9yaWdpbmFsLmhlaWdodCAqIGZhY3Rvci50by55LFxuXHRcdFx0XHRcdG91dGVyV2lkdGg6IGNoaWxkT3JpZ2luYWwud2lkdGggKiBmYWN0b3IudG8ueFxuXHRcdFx0XHR9O1xuXG5cdFx0XHQvLyBWZXJ0aWNhbCBwcm9wcyBzY2FsaW5nXG5cdFx0XHRpZiAoIGZhY3Rvci5mcm9tLnkgIT09IGZhY3Rvci50by55ICkge1xuXHRcdFx0XHRjaGlsZEZyb20gPSAkLmVmZmVjdHMuc2V0VHJhbnNpdGlvbiggY2hpbGQsIHZQcm9wcywgZmFjdG9yLmZyb20ueSwgY2hpbGRGcm9tICk7XG5cdFx0XHRcdGNoaWxkVG8gPSAkLmVmZmVjdHMuc2V0VHJhbnNpdGlvbiggY2hpbGQsIHZQcm9wcywgZmFjdG9yLnRvLnksIGNoaWxkVG8gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9yaXpvbnRhbCBwcm9wcyBzY2FsaW5nXG5cdFx0XHRpZiAoIGZhY3Rvci5mcm9tLnggIT09IGZhY3Rvci50by54ICkge1xuXHRcdFx0XHRjaGlsZEZyb20gPSAkLmVmZmVjdHMuc2V0VHJhbnNpdGlvbiggY2hpbGQsIGhQcm9wcywgZmFjdG9yLmZyb20ueCwgY2hpbGRGcm9tICk7XG5cdFx0XHRcdGNoaWxkVG8gPSAkLmVmZmVjdHMuc2V0VHJhbnNpdGlvbiggY2hpbGQsIGhQcm9wcywgZmFjdG9yLnRvLngsIGNoaWxkVG8gKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCByZXN0b3JlICkge1xuXHRcdFx0XHQkLmVmZmVjdHMuc2F2ZVN0eWxlKCBjaGlsZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBbmltYXRlIGNoaWxkcmVuXG5cdFx0XHRjaGlsZC5jc3MoIGNoaWxkRnJvbSApO1xuXHRcdFx0Y2hpbGQuYW5pbWF0ZSggY2hpbGRUbywgb3B0aW9ucy5kdXJhdGlvbiwgb3B0aW9ucy5lYXNpbmcsIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgY2hpbGRyZW5cblx0XHRcdFx0aWYgKCByZXN0b3JlICkge1xuXHRcdFx0XHRcdCQuZWZmZWN0cy5yZXN0b3JlU3R5bGUoIGNoaWxkICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBbmltYXRlXG5cdGVsZW1lbnQuYW5pbWF0ZSggdG8sIHtcblx0XHRxdWV1ZTogZmFsc2UsXG5cdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0ZWFzaW5nOiBvcHRpb25zLmVhc2luZyxcblx0XHRjb21wbGV0ZTogZnVuY3Rpb24oKSB7XG5cblx0XHRcdHZhciBvZmZzZXQgPSBlbGVtZW50Lm9mZnNldCgpO1xuXG5cdFx0XHRpZiAoIHRvLm9wYWNpdHkgPT09IDAgKSB7XG5cdFx0XHRcdGVsZW1lbnQuY3NzKCBcIm9wYWNpdHlcIiwgZnJvbS5vcGFjaXR5ICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggIXJlc3RvcmUgKSB7XG5cdFx0XHRcdGVsZW1lbnRcblx0XHRcdFx0XHQuY3NzKCBcInBvc2l0aW9uXCIsIHBvc2l0aW9uID09PSBcInN0YXRpY1wiID8gXCJyZWxhdGl2ZVwiIDogcG9zaXRpb24gKVxuXHRcdFx0XHRcdC5vZmZzZXQoIG9mZnNldCApO1xuXG5cdFx0XHRcdC8vIE5lZWQgdG8gc2F2ZSBzdHlsZSBoZXJlIHNvIHRoYXQgYXV0b21hdGljIHN0eWxlIHJlc3RvcmF0aW9uXG5cdFx0XHRcdC8vIGRvZXNuJ3QgcmVzdG9yZSB0byB0aGUgb3JpZ2luYWwgc3R5bGVzIGZyb20gYmVmb3JlIHRoZSBhbmltYXRpb24uXG5cdFx0XHRcdCQuZWZmZWN0cy5zYXZlU3R5bGUoIGVsZW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZG9uZSgpO1xuXHRcdH1cblx0fSApO1xuXG59ICk7XG5cblxuLyohXG4gKiBqUXVlcnkgVUkgRWZmZWN0cyBTY2FsZSAxLjEyLjFcbiAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICovXG5cbi8vPj5sYWJlbDogU2NhbGUgRWZmZWN0XG4vLz4+Z3JvdXA6IEVmZmVjdHNcbi8vPj5kZXNjcmlwdGlvbjogR3Jvd3Mgb3Igc2hyaW5rcyBhbiBlbGVtZW50IGFuZCBpdHMgY29udGVudC5cbi8vPj5kb2NzOiBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9zY2FsZS1lZmZlY3QvXG4vLz4+ZGVtb3M6IGh0dHA6Ly9qcXVlcnl1aS5jb20vZWZmZWN0L1xuXG5cblxudmFyIGVmZmVjdHNFZmZlY3RTY2FsZSA9ICQuZWZmZWN0cy5kZWZpbmUoIFwic2NhbGVcIiwgZnVuY3Rpb24oIG9wdGlvbnMsIGRvbmUgKSB7XG5cblx0Ly8gQ3JlYXRlIGVsZW1lbnRcblx0dmFyIGVsID0gJCggdGhpcyApLFxuXHRcdG1vZGUgPSBvcHRpb25zLm1vZGUsXG5cdFx0cGVyY2VudCA9IHBhcnNlSW50KCBvcHRpb25zLnBlcmNlbnQsIDEwICkgfHxcblx0XHRcdCggcGFyc2VJbnQoIG9wdGlvbnMucGVyY2VudCwgMTAgKSA9PT0gMCA/IDAgOiAoIG1vZGUgIT09IFwiZWZmZWN0XCIgPyAwIDogMTAwICkgKSxcblxuXHRcdG5ld09wdGlvbnMgPSAkLmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0ZnJvbTogJC5lZmZlY3RzLnNjYWxlZERpbWVuc2lvbnMoIGVsICksXG5cdFx0XHR0bzogJC5lZmZlY3RzLnNjYWxlZERpbWVuc2lvbnMoIGVsLCBwZXJjZW50LCBvcHRpb25zLmRpcmVjdGlvbiB8fCBcImJvdGhcIiApLFxuXHRcdFx0b3JpZ2luOiBvcHRpb25zLm9yaWdpbiB8fCBbIFwibWlkZGxlXCIsIFwiY2VudGVyXCIgXVxuXHRcdH0sIG9wdGlvbnMgKTtcblxuXHQvLyBGYWRlIG9wdGlvbiB0byBzdXBwb3J0IHB1ZmZcblx0aWYgKCBvcHRpb25zLmZhZGUgKSB7XG5cdFx0bmV3T3B0aW9ucy5mcm9tLm9wYWNpdHkgPSAxO1xuXHRcdG5ld09wdGlvbnMudG8ub3BhY2l0eSA9IDA7XG5cdH1cblxuXHQkLmVmZmVjdHMuZWZmZWN0LnNpemUuY2FsbCggdGhpcywgbmV3T3B0aW9ucywgZG9uZSApO1xufSApO1xuXG5cbi8qIVxuICogalF1ZXJ5IFVJIEVmZmVjdHMgUHVmZiAxLjEyLjFcbiAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICovXG5cbi8vPj5sYWJlbDogUHVmZiBFZmZlY3Rcbi8vPj5ncm91cDogRWZmZWN0c1xuLy8+PmRlc2NyaXB0aW9uOiBDcmVhdGVzIGEgcHVmZiBlZmZlY3QgYnkgc2NhbGluZyB0aGUgZWxlbWVudCB1cCBhbmQgaGlkaW5nIGl0IGF0IHRoZSBzYW1lIHRpbWUuXG4vLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vcHVmZi1lZmZlY3QvXG4vLz4+ZGVtb3M6IGh0dHA6Ly9qcXVlcnl1aS5jb20vZWZmZWN0L1xuXG5cblxudmFyIGVmZmVjdHNFZmZlY3RQdWZmID0gJC5lZmZlY3RzLmRlZmluZSggXCJwdWZmXCIsIFwiaGlkZVwiLCBmdW5jdGlvbiggb3B0aW9ucywgZG9uZSApIHtcblx0dmFyIG5ld09wdGlvbnMgPSAkLmV4dGVuZCggdHJ1ZSwge30sIG9wdGlvbnMsIHtcblx0XHRmYWRlOiB0cnVlLFxuXHRcdHBlcmNlbnQ6IHBhcnNlSW50KCBvcHRpb25zLnBlcmNlbnQsIDEwICkgfHwgMTUwXG5cdH0gKTtcblxuXHQkLmVmZmVjdHMuZWZmZWN0LnNjYWxlLmNhbGwoIHRoaXMsIG5ld09wdGlvbnMsIGRvbmUgKTtcbn0gKTtcblxuXG4vKiFcbiAqIGpRdWVyeSBVSSBFZmZlY3RzIFB1bHNhdGUgMS4xMi4xXG4gKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqL1xuXG4vLz4+bGFiZWw6IFB1bHNhdGUgRWZmZWN0XG4vLz4+Z3JvdXA6IEVmZmVjdHNcbi8vPj5kZXNjcmlwdGlvbjogUHVsc2F0ZXMgYW4gZWxlbWVudCBuIHRpbWVzIGJ5IGNoYW5naW5nIHRoZSBvcGFjaXR5IHRvIHplcm8gYW5kIGJhY2suXG4vLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vcHVsc2F0ZS1lZmZlY3QvXG4vLz4+ZGVtb3M6IGh0dHA6Ly9qcXVlcnl1aS5jb20vZWZmZWN0L1xuXG5cblxudmFyIGVmZmVjdHNFZmZlY3RQdWxzYXRlID0gJC5lZmZlY3RzLmRlZmluZSggXCJwdWxzYXRlXCIsIFwic2hvd1wiLCBmdW5jdGlvbiggb3B0aW9ucywgZG9uZSApIHtcblx0dmFyIGVsZW1lbnQgPSAkKCB0aGlzICksXG5cdFx0bW9kZSA9IG9wdGlvbnMubW9kZSxcblx0XHRzaG93ID0gbW9kZSA9PT0gXCJzaG93XCIsXG5cdFx0aGlkZSA9IG1vZGUgPT09IFwiaGlkZVwiLFxuXHRcdHNob3doaWRlID0gc2hvdyB8fCBoaWRlLFxuXG5cdFx0Ly8gU2hvd2luZyBvciBoaWRpbmcgbGVhdmVzIG9mZiB0aGUgXCJsYXN0XCIgYW5pbWF0aW9uXG5cdFx0YW5pbXMgPSAoICggb3B0aW9ucy50aW1lcyB8fCA1ICkgKiAyICkgKyAoIHNob3doaWRlID8gMSA6IDAgKSxcblx0XHRkdXJhdGlvbiA9IG9wdGlvbnMuZHVyYXRpb24gLyBhbmltcyxcblx0XHRhbmltYXRlVG8gPSAwLFxuXHRcdGkgPSAxLFxuXHRcdHF1ZXVlbGVuID0gZWxlbWVudC5xdWV1ZSgpLmxlbmd0aDtcblxuXHRpZiAoIHNob3cgfHwgIWVsZW1lbnQuaXMoIFwiOnZpc2libGVcIiApICkge1xuXHRcdGVsZW1lbnQuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKTtcblx0XHRhbmltYXRlVG8gPSAxO1xuXHR9XG5cblx0Ly8gQW5pbXMgLSAxIG9wYWNpdHkgXCJ0b2dnbGVzXCJcblx0Zm9yICggOyBpIDwgYW5pbXM7IGkrKyApIHtcblx0XHRlbGVtZW50LmFuaW1hdGUoIHsgb3BhY2l0eTogYW5pbWF0ZVRvIH0sIGR1cmF0aW9uLCBvcHRpb25zLmVhc2luZyApO1xuXHRcdGFuaW1hdGVUbyA9IDEgLSBhbmltYXRlVG87XG5cdH1cblxuXHRlbGVtZW50LmFuaW1hdGUoIHsgb3BhY2l0eTogYW5pbWF0ZVRvIH0sIGR1cmF0aW9uLCBvcHRpb25zLmVhc2luZyApO1xuXG5cdGVsZW1lbnQucXVldWUoIGRvbmUgKTtcblxuXHQkLmVmZmVjdHMudW5zaGlmdCggZWxlbWVudCwgcXVldWVsZW4sIGFuaW1zICsgMSApO1xufSApO1xuXG5cbi8qIVxuICogalF1ZXJ5IFVJIEVmZmVjdHMgU2hha2UgMS4xMi4xXG4gKiBodHRwOi8vanF1ZXJ5dWkuY29tXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqL1xuXG4vLz4+bGFiZWw6IFNoYWtlIEVmZmVjdFxuLy8+Pmdyb3VwOiBFZmZlY3RzXG4vLz4+ZGVzY3JpcHRpb246IFNoYWtlcyBhbiBlbGVtZW50IGhvcml6b250YWxseSBvciB2ZXJ0aWNhbGx5IG4gdGltZXMuXG4vLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vc2hha2UtZWZmZWN0L1xuLy8+PmRlbW9zOiBodHRwOi8vanF1ZXJ5dWkuY29tL2VmZmVjdC9cblxuXG5cbnZhciBlZmZlY3RzRWZmZWN0U2hha2UgPSAkLmVmZmVjdHMuZGVmaW5lKCBcInNoYWtlXCIsIGZ1bmN0aW9uKCBvcHRpb25zLCBkb25lICkge1xuXG5cdHZhciBpID0gMSxcblx0XHRlbGVtZW50ID0gJCggdGhpcyApLFxuXHRcdGRpcmVjdGlvbiA9IG9wdGlvbnMuZGlyZWN0aW9uIHx8IFwibGVmdFwiLFxuXHRcdGRpc3RhbmNlID0gb3B0aW9ucy5kaXN0YW5jZSB8fCAyMCxcblx0XHR0aW1lcyA9IG9wdGlvbnMudGltZXMgfHwgMyxcblx0XHRhbmltcyA9IHRpbWVzICogMiArIDEsXG5cdFx0c3BlZWQgPSBNYXRoLnJvdW5kKCBvcHRpb25zLmR1cmF0aW9uIC8gYW5pbXMgKSxcblx0XHRyZWYgPSAoIGRpcmVjdGlvbiA9PT0gXCJ1cFwiIHx8IGRpcmVjdGlvbiA9PT0gXCJkb3duXCIgKSA/IFwidG9wXCIgOiBcImxlZnRcIixcblx0XHRwb3NpdGl2ZU1vdGlvbiA9ICggZGlyZWN0aW9uID09PSBcInVwXCIgfHwgZGlyZWN0aW9uID09PSBcImxlZnRcIiApLFxuXHRcdGFuaW1hdGlvbiA9IHt9LFxuXHRcdGFuaW1hdGlvbjEgPSB7fSxcblx0XHRhbmltYXRpb24yID0ge30sXG5cblx0XHRxdWV1ZWxlbiA9IGVsZW1lbnQucXVldWUoKS5sZW5ndGg7XG5cblx0JC5lZmZlY3RzLmNyZWF0ZVBsYWNlaG9sZGVyKCBlbGVtZW50ICk7XG5cblx0Ly8gQW5pbWF0aW9uXG5cdGFuaW1hdGlvblsgcmVmIF0gPSAoIHBvc2l0aXZlTW90aW9uID8gXCItPVwiIDogXCIrPVwiICkgKyBkaXN0YW5jZTtcblx0YW5pbWF0aW9uMVsgcmVmIF0gPSAoIHBvc2l0aXZlTW90aW9uID8gXCIrPVwiIDogXCItPVwiICkgKyBkaXN0YW5jZSAqIDI7XG5cdGFuaW1hdGlvbjJbIHJlZiBdID0gKCBwb3NpdGl2ZU1vdGlvbiA/IFwiLT1cIiA6IFwiKz1cIiApICsgZGlzdGFuY2UgKiAyO1xuXG5cdC8vIEFuaW1hdGVcblx0ZWxlbWVudC5hbmltYXRlKCBhbmltYXRpb24sIHNwZWVkLCBvcHRpb25zLmVhc2luZyApO1xuXG5cdC8vIFNoYWtlc1xuXHRmb3IgKCA7IGkgPCB0aW1lczsgaSsrICkge1xuXHRcdGVsZW1lbnRcblx0XHRcdC5hbmltYXRlKCBhbmltYXRpb24xLCBzcGVlZCwgb3B0aW9ucy5lYXNpbmcgKVxuXHRcdFx0LmFuaW1hdGUoIGFuaW1hdGlvbjIsIHNwZWVkLCBvcHRpb25zLmVhc2luZyApO1xuXHR9XG5cblx0ZWxlbWVudFxuXHRcdC5hbmltYXRlKCBhbmltYXRpb24xLCBzcGVlZCwgb3B0aW9ucy5lYXNpbmcgKVxuXHRcdC5hbmltYXRlKCBhbmltYXRpb24sIHNwZWVkIC8gMiwgb3B0aW9ucy5lYXNpbmcgKVxuXHRcdC5xdWV1ZSggZG9uZSApO1xuXG5cdCQuZWZmZWN0cy51bnNoaWZ0KCBlbGVtZW50LCBxdWV1ZWxlbiwgYW5pbXMgKyAxICk7XG59ICk7XG5cblxuLyohXG4gKiBqUXVlcnkgVUkgRWZmZWN0cyBTbGlkZSAxLjEyLjFcbiAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICovXG5cbi8vPj5sYWJlbDogU2xpZGUgRWZmZWN0XG4vLz4+Z3JvdXA6IEVmZmVjdHNcbi8vPj5kZXNjcmlwdGlvbjogU2xpZGVzIGFuIGVsZW1lbnQgaW4gYW5kIG91dCBvZiB0aGUgdmlld3BvcnQuXG4vLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vc2xpZGUtZWZmZWN0L1xuLy8+PmRlbW9zOiBodHRwOi8vanF1ZXJ5dWkuY29tL2VmZmVjdC9cblxuXG5cbnZhciBlZmZlY3RzRWZmZWN0U2xpZGUgPSAkLmVmZmVjdHMuZGVmaW5lKCBcInNsaWRlXCIsIFwic2hvd1wiLCBmdW5jdGlvbiggb3B0aW9ucywgZG9uZSApIHtcblx0dmFyIHN0YXJ0Q2xpcCwgc3RhcnRSZWYsXG5cdFx0ZWxlbWVudCA9ICQoIHRoaXMgKSxcblx0XHRtYXAgPSB7XG5cdFx0XHR1cDogWyBcImJvdHRvbVwiLCBcInRvcFwiIF0sXG5cdFx0XHRkb3duOiBbIFwidG9wXCIsIFwiYm90dG9tXCIgXSxcblx0XHRcdGxlZnQ6IFsgXCJyaWdodFwiLCBcImxlZnRcIiBdLFxuXHRcdFx0cmlnaHQ6IFsgXCJsZWZ0XCIsIFwicmlnaHRcIiBdXG5cdFx0fSxcblx0XHRtb2RlID0gb3B0aW9ucy5tb2RlLFxuXHRcdGRpcmVjdGlvbiA9IG9wdGlvbnMuZGlyZWN0aW9uIHx8IFwibGVmdFwiLFxuXHRcdHJlZiA9ICggZGlyZWN0aW9uID09PSBcInVwXCIgfHwgZGlyZWN0aW9uID09PSBcImRvd25cIiApID8gXCJ0b3BcIiA6IFwibGVmdFwiLFxuXHRcdHBvc2l0aXZlTW90aW9uID0gKCBkaXJlY3Rpb24gPT09IFwidXBcIiB8fCBkaXJlY3Rpb24gPT09IFwibGVmdFwiICksXG5cdFx0ZGlzdGFuY2UgPSBvcHRpb25zLmRpc3RhbmNlIHx8XG5cdFx0XHRlbGVtZW50WyByZWYgPT09IFwidG9wXCIgPyBcIm91dGVySGVpZ2h0XCIgOiBcIm91dGVyV2lkdGhcIiBdKCB0cnVlICksXG5cdFx0YW5pbWF0aW9uID0ge307XG5cblx0JC5lZmZlY3RzLmNyZWF0ZVBsYWNlaG9sZGVyKCBlbGVtZW50ICk7XG5cblx0c3RhcnRDbGlwID0gZWxlbWVudC5jc3NDbGlwKCk7XG5cdHN0YXJ0UmVmID0gZWxlbWVudC5wb3NpdGlvbigpWyByZWYgXTtcblxuXHQvLyBEZWZpbmUgaGlkZSBhbmltYXRpb25cblx0YW5pbWF0aW9uWyByZWYgXSA9ICggcG9zaXRpdmVNb3Rpb24gPyAtMSA6IDEgKSAqIGRpc3RhbmNlICsgc3RhcnRSZWY7XG5cdGFuaW1hdGlvbi5jbGlwID0gZWxlbWVudC5jc3NDbGlwKCk7XG5cdGFuaW1hdGlvbi5jbGlwWyBtYXBbIGRpcmVjdGlvbiBdWyAxIF0gXSA9IGFuaW1hdGlvbi5jbGlwWyBtYXBbIGRpcmVjdGlvbiBdWyAwIF0gXTtcblxuXHQvLyBSZXZlcnNlIHRoZSBhbmltYXRpb24gaWYgd2UncmUgc2hvd2luZ1xuXHRpZiAoIG1vZGUgPT09IFwic2hvd1wiICkge1xuXHRcdGVsZW1lbnQuY3NzQ2xpcCggYW5pbWF0aW9uLmNsaXAgKTtcblx0XHRlbGVtZW50LmNzcyggcmVmLCBhbmltYXRpb25bIHJlZiBdICk7XG5cdFx0YW5pbWF0aW9uLmNsaXAgPSBzdGFydENsaXA7XG5cdFx0YW5pbWF0aW9uWyByZWYgXSA9IHN0YXJ0UmVmO1xuXHR9XG5cblx0Ly8gQWN0dWFsbHkgYW5pbWF0ZVxuXHRlbGVtZW50LmFuaW1hdGUoIGFuaW1hdGlvbiwge1xuXHRcdHF1ZXVlOiBmYWxzZSxcblx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRlYXNpbmc6IG9wdGlvbnMuZWFzaW5nLFxuXHRcdGNvbXBsZXRlOiBkb25lXG5cdH0gKTtcbn0gKTtcblxuXG4vKiFcbiAqIGpRdWVyeSBVSSBFZmZlY3RzIFRyYW5zZmVyIDEuMTIuMVxuICogaHR0cDovL2pxdWVyeXVpLmNvbVxuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKi9cblxuLy8+PmxhYmVsOiBUcmFuc2ZlciBFZmZlY3Rcbi8vPj5ncm91cDogRWZmZWN0c1xuLy8+PmRlc2NyaXB0aW9uOiBEaXNwbGF5cyBhIHRyYW5zZmVyIGVmZmVjdCBmcm9tIG9uZSBlbGVtZW50IHRvIGFub3RoZXIuXG4vLz4+ZG9jczogaHR0cDovL2FwaS5qcXVlcnl1aS5jb20vdHJhbnNmZXItZWZmZWN0L1xuLy8+PmRlbW9zOiBodHRwOi8vanF1ZXJ5dWkuY29tL2VmZmVjdC9cblxuXG5cbnZhciBlZmZlY3Q7XG5pZiAoICQudWlCYWNrQ29tcGF0ICE9PSBmYWxzZSApIHtcblx0ZWZmZWN0ID0gJC5lZmZlY3RzLmRlZmluZSggXCJ0cmFuc2ZlclwiLCBmdW5jdGlvbiggb3B0aW9ucywgZG9uZSApIHtcblx0XHQkKCB0aGlzICkudHJhbnNmZXIoIG9wdGlvbnMsIGRvbmUgKTtcblx0fSApO1xufVxudmFyIGVmZmVjdHNFZmZlY3RUcmFuc2ZlciA9IGVmZmVjdDtcblxuXG5cblxufSkpOyIsIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2My43LjFcbiAqIGh0dHBzOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgT3BlbkpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMjMtMDgtMjhUMTM6MzdaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0IHRyYWMtMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuLy8gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIgKHRyYWMtMTMzMzUpLiBCdXQgYXMgb2YgalF1ZXJ5IDMuMCAoMjAxNiksIHN0cmljdCBtb2RlIHNob3VsZCBiZSBjb21tb25cbi8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhcnIgPSBbXTtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBmbGF0ID0gYXJyLmZsYXQgPyBmdW5jdGlvbiggYXJyYXkgKSB7XG5cdHJldHVybiBhcnIuZmxhdC5jYWxsKCBhcnJheSApO1xufSA6IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0cmV0dXJuIGFyci5jb25jYXQuYXBwbHkoIFtdLCBhcnJheSApO1xufTtcblxuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gaXNGdW5jdGlvbiggb2JqICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9NTcsIEZpcmVmb3ggPD01MlxuXHRcdC8vIEluIHNvbWUgYnJvd3NlcnMsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCA8b2JqZWN0PiBlbGVtZW50c1xuXHRcdC8vIChpLmUuLCBgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib2JqZWN0XCIgKSA9PT0gXCJmdW5jdGlvblwiYCkuXG5cdFx0Ly8gV2UgZG9uJ3Qgd2FudCB0byBjbGFzc2lmeSAqYW55KiBET00gbm9kZSBhcyBhIGZ1bmN0aW9uLlxuXHRcdC8vIFN1cHBvcnQ6IFF0V2ViIDw9My44LjUsIFdlYktpdCA8PTUzNC4zNCwgd2todG1sdG9wZGYgdG9vbCA8PTAuMTIuNVxuXHRcdC8vIFBsdXMgZm9yIG9sZCBXZWJLaXQsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCBjb2xsZWN0aW9uc1xuXHRcdC8vIChlLmcuLCBgdHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiZGl2XCIpID09PSBcImZ1bmN0aW9uXCJgKS4gKGdoLTQ3NTYpXG5cdFx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygb2JqLm5vZGVUeXBlICE9PSBcIm51bWJlclwiICYmXG5cdFx0XHR0eXBlb2Ygb2JqLml0ZW0gIT09IFwiZnVuY3Rpb25cIjtcblx0fTtcblxuXG52YXIgaXNXaW5kb3cgPSBmdW5jdGlvbiBpc1dpbmRvdyggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH07XG5cblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG5cblxuXHR2YXIgcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyA9IHtcblx0XHR0eXBlOiB0cnVlLFxuXHRcdHNyYzogdHJ1ZSxcblx0XHRub25jZTogdHJ1ZSxcblx0XHRub01vZHVsZTogdHJ1ZVxuXHR9O1xuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIG5vZGUsIGRvYyApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgaSwgdmFsLFxuXHRcdFx0c2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRpZiAoIG5vZGUgKSB7XG5cdFx0XHRmb3IgKCBpIGluIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA2NCssIEVkZ2UgMTgrXG5cdFx0XHRcdC8vIFNvbWUgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgXCJub25jZVwiIHByb3BlcnR5IG9uIHNjcmlwdHMuXG5cdFx0XHRcdC8vIE9uIHRoZSBvdGhlciBoYW5kLCBqdXN0IHVzaW5nIGBnZXRBdHRyaWJ1dGVgIGlzIG5vdCBlbm91Z2ggYXNcblx0XHRcdFx0Ly8gdGhlIGBub25jZWAgYXR0cmlidXRlIGlzIHJlc2V0IHRvIGFuIGVtcHR5IHN0cmluZyB3aGVuZXZlciBpdFxuXHRcdFx0XHQvLyBiZWNvbWVzIGJyb3dzaW5nLWNvbnRleHQgY29ubmVjdGVkLlxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3doYXR3Zy9odG1sL2lzc3Vlcy8yMzY5XG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNub25jZS1hdHRyaWJ1dGVzXG5cdFx0XHRcdC8vIFRoZSBgbm9kZS5nZXRBdHRyaWJ1dGVgIGNoZWNrIHdhcyBhZGRlZCBmb3IgdGhlIHNha2Ugb2Zcblx0XHRcdFx0Ly8gYGpRdWVyeS5nbG9iYWxFdmFsYCBzbyB0aGF0IGl0IGNhbiBmYWtlIGEgbm9uY2UtY29udGFpbmluZyBub2RlXG5cdFx0XHRcdC8vIHZpYSBhbiBvYmplY3QuXG5cdFx0XHRcdHZhbCA9IG5vZGVbIGkgXSB8fCBub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZSggaSApO1xuXHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKCBpLCB2YWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cblxuXG5mdW5jdGlvbiB0b1R5cGUoIG9iaiApIHtcblx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0dHlwZW9mIG9iajtcbn1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyIHZlcnNpb24gPSBcIjMuNy4xXCIsXG5cblx0cmh0bWxTdWZmaXggPSAvSFRNTCQvaSxcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH07XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuXHRqcXVlcnk6IHZlcnNpb24sXG5cblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cblx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0aWYgKCBudW0gPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdHJldHVybiBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xuXHR9LFxuXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xuXHR9LFxuXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xuXHR9LFxuXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xuXHR9LFxuXG5cdGV2ZW46IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LmdyZXAoIHRoaXMsIGZ1bmN0aW9uKCBfZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAoIGkgKyAxICkgJSAyO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdG9kZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkuZ3JlcCggdGhpcywgZnVuY3Rpb24oIF9lbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGkgJSAyO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcigpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcblx0XHRpID0gMSxcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblxuXHRcdC8vIFNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcblx0XHRpKys7XG5cdH1cblxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFpc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xuXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBPYmplY3QucHJvdG90eXBlIHBvbGx1dGlvblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggbmFtZSA9PT0gXCJfX3Byb3RvX19cIiB8fCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cdFx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XG5cblx0XHRcdFx0XHQvLyBFbnN1cmUgcHJvcGVyIHR5cGUgZm9yIHRoZSBzb3VyY2UgdmFsdWVcblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICYmICFBcnJheS5pc0FycmF5KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0gW107XG5cdFx0XHRcdFx0fSBlbHNlIGlmICggIWNvcHlJc0FycmF5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHt9O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIHByb3RvLCBDdG9yO1xuXG5cdFx0Ly8gRGV0ZWN0IG9idmlvdXMgbmVnYXRpdmVzXG5cdFx0Ly8gVXNlIHRvU3RyaW5nIGluc3RlYWQgb2YgalF1ZXJ5LnR5cGUgdG8gY2F0Y2ggaG9zdCBvYmplY3RzXG5cdFx0aWYgKCAhb2JqIHx8IHRvU3RyaW5nLmNhbGwoIG9iaiApICE9PSBcIltvYmplY3QgT2JqZWN0XVwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHByb3RvID0gZ2V0UHJvdG8oIG9iaiApO1xuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIG5vIHByb3RvdHlwZSAoZS5nLiwgYE9iamVjdC5jcmVhdGUoIG51bGwgKWApIGFyZSBwbGFpblxuXHRcdGlmICggIXByb3RvICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIHByb3RvdHlwZSBhcmUgcGxhaW4gaWZmIHRoZXkgd2VyZSBjb25zdHJ1Y3RlZCBieSBhIGdsb2JhbCBPYmplY3QgZnVuY3Rpb25cblx0XHRDdG9yID0gaGFzT3duLmNhbGwoIHByb3RvLCBcImNvbnN0cnVjdG9yXCIgKSAmJiBwcm90by5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gdHlwZW9mIEN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBmblRvU3RyaW5nLmNhbGwoIEN0b3IgKSA9PT0gT2JqZWN0RnVuY3Rpb25TdHJpbmc7XG5cdH0sXG5cblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgbmFtZTtcblxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBwcm92aWRlZCBjb250ZXh0OyBmYWxscyBiYWNrIHRvIHRoZSBnbG9iYWwgb25lXG5cdC8vIGlmIG5vdCBzcGVjaWZpZWQuXG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlLCBvcHRpb25zLCBkb2MgKSB7XG5cdFx0RE9NRXZhbCggY29kZSwgeyBub25jZTogb3B0aW9ucyAmJiBvcHRpb25zLm5vbmNlIH0sIGRvYyApO1xuXHR9LFxuXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xuXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH0sXG5cblxuXHQvLyBSZXRyaWV2ZSB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcblx0dGV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5vZGUsXG5cdFx0XHRyZXQgPSBcIlwiLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHRpZiAoICFub2RlVHlwZSApIHtcblxuXHRcdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHRcdHdoaWxlICggKCBub2RlID0gZWxlbVsgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0XHRyZXQgKz0galF1ZXJ5LnRleHQoIG5vZGUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9XG5cdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRvY3VtZW50RWxlbWVudC50ZXh0Q29udGVudDtcblx0XHR9XG5cdFx0aWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0XHR9XG5cblx0XHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XG5cdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApO1xuXHR9LFxuXG5cdGlzWE1MRG9jOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZXNwYWNlID0gZWxlbSAmJiBlbGVtLm5hbWVzcGFjZVVSSSxcblx0XHRcdGRvY0VsZW0gPSBlbGVtICYmICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHQvLyBBc3N1bWUgSFRNTCB3aGVuIGRvY3VtZW50RWxlbWVudCBkb2Vzbid0IHlldCBleGlzdCwgc3VjaCBhcyBpbnNpZGVcblx0XHQvLyBkb2N1bWVudCBmcmFnbWVudHMuXG5cdFx0cmV0dXJuICFyaHRtbFN1ZmZpeC50ZXN0KCBuYW1lc3BhY2UgfHwgZG9jRWxlbSAmJiBkb2NFbGVtLm5vZGVOYW1lIHx8IFwiSFRNTFwiICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gZmxhdCggcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0XHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0fSApO1xuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xuXG5cdC8vIFN1cHBvcnQ6IHJlYWwgaU9TIDguMiBvbmx5IChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0gdG9UeXBlKCBvYmogKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIG9iaiApIHx8IGlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG5cblxuZnVuY3Rpb24gbm9kZU5hbWUoIGVsZW0sIG5hbWUgKSB7XG5cblx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbn1cbnZhciBwb3AgPSBhcnIucG9wO1xuXG5cbnZhciBzb3J0ID0gYXJyLnNvcnQ7XG5cblxudmFyIHNwbGljZSA9IGFyci5zcGxpY2U7XG5cblxudmFyIHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCI7XG5cblxudmFyIHJ0cmltQ1NTID0gbmV3IFJlZ0V4cChcblx0XCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIixcblx0XCJnXCJcbik7XG5cblxuXG5cbi8vIE5vdGU6IGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcbmpRdWVyeS5jb250YWlucyA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHR2YXIgYnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cblx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErXG5cdFx0Ly8gSUUgZG9lc24ndCBoYXZlIGBjb250YWluc2Agb24gU1ZHLlxuXHRcdGEuY29udGFpbnMgP1xuXHRcdFx0YS5jb250YWlucyggYnVwICkgOlxuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdCkgKTtcbn07XG5cblxuXG5cbi8vIENTUyBzdHJpbmcvaWRlbnRpZmllciBzZXJpYWxpemF0aW9uXG4vLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcbnZhciByY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFx4ODAtXFx1RkZGRlxcdy1dL2c7XG5cbmZ1bmN0aW9uIGZjc3Nlc2NhcGUoIGNoLCBhc0NvZGVQb2ludCApIHtcblx0aWYgKCBhc0NvZGVQb2ludCApIHtcblxuXHRcdC8vIFUrMDAwMCBOVUxMIGJlY29tZXMgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuXHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XG5cdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArIGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xuXHR9XG5cblx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcbn1cblxualF1ZXJ5LmVzY2FwZVNlbGVjdG9yID0gZnVuY3Rpb24oIHNlbCApIHtcblx0cmV0dXJuICggc2VsICsgXCJcIiApLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcbn07XG5cblxuXG5cbnZhciBwcmVmZXJyZWREb2MgPSBkb2N1bWVudCxcblx0cHVzaE5hdGl2ZSA9IHB1c2g7XG5cbiggZnVuY3Rpb24oKSB7XG5cbnZhciBpLFxuXHRFeHByLFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblx0cHVzaCA9IHB1c2hOYXRpdmUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRkb2N1bWVudCxcblx0ZG9jdW1lbnRFbGVtZW50LFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRtYXRjaGVzLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvLFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfFwiICtcblx0XHRcImxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy1zeW50YXgtMy8jaWRlbnQtdG9rZW4tZGlhZ3JhbVxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXFtcXFxcZGEtZkEtRl17MSw2fVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCI/fFxcXFxcXFxcW15cXFxcclxcXFxuXFxcXGZdfFtcXFxcdy1dfFteXFwwLVxcXFx4N2ZdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwczovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV0gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgK1xuXHRcdHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xuXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblxuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblxuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRybGVhZGluZ0NvbWJpbmF0b3IgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgK1xuXHRcdHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyZGVzY2VuZCA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcInw+XCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdElEOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0Q0xBU1M6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0VEFHOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0QVRUUjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0UFNFVURPOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRDSElMRDogbmV3IFJlZ0V4cChcblx0XHRcdFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArXG5cdFx0XHRcdHdoaXRlc3BhY2UgKyBcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArXG5cdFx0XHRcdHdoaXRlc3BhY2UgKyBcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRib29sOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdG5lZWRzQ29udGV4dDogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXG5cdC8vIENTUyBlc2NhcGVzXG5cdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFxbXFxcXGRhLWZBLUZdezEsNn1cIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiP3xcXFxcXFxcXChbXlxcXFxyXFxcXG5cXFxcZl0pXCIsIFwiZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBlc2NhcGUsIG5vbkhleCApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZS5zbGljZSggMSApIC0gMHgxMDAwMDtcblxuXHRcdGlmICggbm9uSGV4ICkge1xuXG5cdFx0XHQvLyBTdHJpcCB0aGUgYmFja3NsYXNoIHByZWZpeCBmcm9tIGEgbm9uLWhleCBlc2NhcGUgc2VxdWVuY2Vcblx0XHRcdHJldHVybiBub25IZXg7XG5cdFx0fVxuXG5cdFx0Ly8gUmVwbGFjZSBhIGhleGFkZWNpbWFsIGVzY2FwZSBzZXF1ZW5jZSB3aXRoIHRoZSBlbmNvZGVkIFVuaWNvZGUgY29kZSBwb2ludFxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTErXG5cdFx0Ly8gRm9yIHZhbHVlcyBvdXRzaWRlIHRoZSBCYXNpYyBNdWx0aWxpbmd1YWwgUGxhbmUgKEJNUCksIG1hbnVhbGx5IGNvbnN0cnVjdCBhXG5cdFx0Ly8gc3Vycm9nYXRlIHBhaXJcblx0XHRyZXR1cm4gaGlnaCA8IDAgP1xuXHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzOyBzZWUgYHNldERvY3VtZW50YC5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4K1xuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUUvRWRnZS5cblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH0sXG5cblx0aW5EaXNhYmxlZEZpZWxkc2V0ID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIG5vZGVOYW1lKCBlbGVtLCBcImZpZWxkc2V0XCIgKTtcblx0XHR9LFxuXHRcdHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9XG5cdCk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBBY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBjYW4gdGhyb3cgdW5leHBlY3RlZGx5XG4vLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzOTNcbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdCggYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSApLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0ge1xuXHRcdGFwcGx5OiBmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoTmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoIGVscyApICk7XG5cdFx0fSxcblx0XHRjYWxsOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdFx0cHVzaE5hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDEgKSApO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gZmluZCggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcblx0aWYgKCAhc2VlZCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmICggbWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkgKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoICggbSA9IG1hdGNoWyAxIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHVzaC5jYWxsKCByZXN1bHRzLCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKCBlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApICkgJiZcblx0XHRcdFx0XHRcdFx0ZmluZC5jb250YWlucyggY29udGV4dCwgZWxlbSApICYmXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XG5cblx0XHRcdFx0XHRcdFx0cHVzaC5jYWxsKCByZXN1bHRzLCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWyAyIF0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoICggbSA9IG1hdGNoWyAzIF0gKSAmJiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoICFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCAhcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXG5cdFx0XHRcdC8vIHFTQSBjb25zaWRlcnMgZWxlbWVudHMgb3V0c2lkZSBhIHNjb3Bpbmcgcm9vdCB3aGVuIGV2YWx1YXRpbmcgY2hpbGQgb3Jcblx0XHRcdFx0Ly8gZGVzY2VuZGFudCBjb21iaW5hdG9ycywgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudC5cblx0XHRcdFx0Ly8gSW4gc3VjaCBjYXNlcywgd2Ugd29yayBhcm91bmQgdGhlIGJlaGF2aW9yIGJ5IHByZWZpeGluZyBldmVyeSBzZWxlY3RvciBpbiB0aGVcblx0XHRcdFx0Ly8gbGlzdCB3aXRoIGFuIElEIHNlbGVjdG9yIHJlZmVyZW5jaW5nIHRoZSBzY29wZSBjb250ZXh0LlxuXHRcdFx0XHQvLyBUaGUgdGVjaG5pcXVlIGhhcyB0byBiZSB1c2VkIGFzIHdlbGwgd2hlbiBhIGxlYWRpbmcgY29tYmluYXRvciBpcyB1c2VkXG5cdFx0XHRcdC8vIGFzIHN1Y2ggc2VsZWN0b3JzIGFyZSBub3QgcmVjb2duaXplZCBieSBxdWVyeVNlbGVjdG9yQWxsLlxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB0ZWNobmlxdWUuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHQoIHJkZXNjZW5kLnRlc3QoIHNlbGVjdG9yICkgfHwgcmxlYWRpbmdDb21iaW5hdG9yLnRlc3QoIHNlbGVjdG9yICkgKSApIHtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblxuXHRcdFx0XHRcdC8vIFdlIGNhbiB1c2UgOnNjb3BlIGluc3RlYWQgb2YgdGhlIElEIGhhY2sgaWYgdGhlIGJyb3dzZXJcblx0XHRcdFx0XHQvLyBzdXBwb3J0cyBpdCAmIGlmIHdlJ3JlIG5vdCBjaGFuZ2luZyB0aGUgY29udGV4dC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuXG5cdFx0XHRcdFx0Ly8gc3RyaWN0LWNvbXBhcmluZyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAhPSBjb250ZXh0IHx8ICFzdXBwb3J0LnNjb3BlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFx0aWYgKCAoIG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSApICkge1xuXHRcdFx0XHRcdFx0XHRuaWQgPSBqUXVlcnkuZXNjYXBlU2VsZWN0b3IoIG5pZCApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKCBuaWQgPSBleHBhbmRvICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1sgaSBdID0gKCBuaWQgPyBcIiNcIiArIG5pZCA6IFwiOnNjb3BlXCIgKSArIFwiIFwiICtcblx0XHRcdFx0XHRcdFx0dG9TZWxlY3RvciggZ3JvdXBzWyBpIF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW1DU1MsIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzXG5cdFx0Ly8gKHNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9pc3N1ZXMvMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblxuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKCBjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlICk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgalF1ZXJ5IHNlbGVjdG9yIG1vZHVsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImZpZWxkc2V0XCIgKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGVsLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbCApO1xuXHRcdH1cblxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZWwgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gbm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiAoIG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSB8fCBub2RlTmFtZSggZWxlbSwgXCJidXR0b25cIiApICkgJiZcblx0XHRcdGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuICogQHBhcmFtIHtCb29sZWFufSBkaXNhYmxlZCB0cnVlIGZvciA6ZGlzYWJsZWQ7IGZhbHNlIGZvciA6ZW5hYmxlZFxuICovXG5mdW5jdGlvbiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZGlzYWJsZWQgKSB7XG5cblx0Ly8gS25vd24gOmRpc2FibGVkIGZhbHNlIHBvc2l0aXZlczogZmllbGRzZXRbZGlzYWJsZWRdID4gbGVnZW5kOm50aC1vZi10eXBlKG4rMikgOmNhbi1kaXNhYmxlXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE9ubHkgY2VydGFpbiBlbGVtZW50cyBjYW4gbWF0Y2ggOmVuYWJsZWQgb3IgOmRpc2FibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWRpc2FibGVkXG5cdFx0aWYgKCBcImZvcm1cIiBpbiBlbGVtICkge1xuXG5cdFx0XHQvLyBDaGVjayBmb3IgaW5oZXJpdGVkIGRpc2FibGVkbmVzcyBvbiByZWxldmFudCBub24tZGlzYWJsZWQgZWxlbWVudHM6XG5cdFx0XHQvLyAqIGxpc3RlZCBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBmaWVsZHNldFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtZmUtZGlzYWJsZWRcblx0XHRcdC8vICogb3B0aW9uIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0Ly8gQWxsIHN1Y2ggZWxlbWVudHMgaGF2ZSBhIFwiZm9ybVwiIHByb3BlcnR5LlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gT3B0aW9uIGVsZW1lbnRzIGRlZmVyIHRvIGEgcGFyZW50IG9wdGdyb3VwIGlmIHByZXNlbnRcblx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDYgLSAxMStcblx0XHRcdFx0Ly8gVXNlIHRoZSBpc0Rpc2FibGVkIHNob3J0Y3V0IHByb3BlcnR5IHRvIGNoZWNrIGZvciBkaXNhYmxlZCBmaWVsZHNldCBhbmNlc3RvcnNcblx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdC8vIFdoZXJlIHRoZXJlIGlzIG5vIGlzRGlzYWJsZWQsIGNoZWNrIG1hbnVhbGx5XG5cdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdGluRGlzYWJsZWRGaWVsZHNldCggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHR2YXIgaixcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggc2VlZFsgKCBqID0gbWF0Y2hJbmRleGVzWyBpIF0gKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbIGogXSA9ICEoIG1hdGNoZXNbIGogXSA9IHNlZWRbIGogXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9ICk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBqUXVlcnkgc2VsZWN0b3IgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtub2RlXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5mdW5jdGlvbiBzZXREb2N1bWVudCggbm9kZSApIHtcblx0dmFyIHN1YldpbmRvdyxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCBkb2MgPT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWpRdWVyeS5pc1hNTERvYyggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBpT1MgNyBvbmx5LCBJRSA5IC0gMTErXG5cdC8vIE9sZGVyIGJyb3dzZXJzIGRpZG4ndCBzdXBwb3J0IHVucHJlZml4ZWQgYG1hdGNoZXNgLlxuXHRtYXRjaGVzID0gZG9jdW1lbnRFbGVtZW50Lm1hdGNoZXMgfHxcblx0XHRkb2N1bWVudEVsZW1lbnQud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jdW1lbnRFbGVtZW50Lm1zTWF0Y2hlc1NlbGVjdG9yO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCtcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzXG5cdC8vIChzZWUgdHJhYy0xMzkzNikuXG5cdC8vIExpbWl0IHRoZSBmaXggdG8gSUUgJiBFZGdlIExlZ2FjeTsgZGVzcGl0ZSBFZGdlIDE1KyBpbXBsZW1lbnRpbmcgYG1hdGNoZXNgLFxuXHQvLyBhbGwgSUUgOSsgYW5kIEVkZ2UgTGVnYWN5IHZlcnNpb25zIGltcGxlbWVudCBgbXNNYXRjaGVzU2VsZWN0b3JgIGFzIHdlbGwuXG5cdGlmICggZG9jdW1lbnRFbGVtZW50Lm1zTWF0Y2hlc1NlbGVjdG9yICYmXG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdHByZWZlcnJlZERvYyAhPSBkb2N1bWVudCAmJlxuXHRcdCggc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcgKSAmJiBzdWJXaW5kb3cudG9wICE9PSBzdWJXaW5kb3cgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrXG5cdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGVsICkuaWQgPSBqUXVlcnkuZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8XG5cdFx0XHQhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGpRdWVyeS5leHBhbmRvICkubGVuZ3RoO1xuXHR9ICk7XG5cblx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlLlxuXHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0cmV0dXJuIG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cdH0gKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrXG5cdC8vIElFL0VkZ2UgZG9uJ3Qgc3VwcG9ydCB0aGUgOnNjb3BlIHBzZXVkby1jbGFzcy5cblx0c3VwcG9ydC5zY29wZSA9IGFzc2VydCggZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOnNjb3BlXCIgKTtcblx0fSApO1xuXG5cdC8vIFN1cHBvcnQ6IENocm9tZSAxMDUgLSAxMTEgb25seSwgU2FmYXJpIDE1LjQgLSAxNi4zIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRoZSBgOmhhcygpYCBhcmd1bWVudCBpcyBwYXJzZWQgdW5mb3JnaXZpbmdseS5cblx0Ly8gV2UgaW5jbHVkZSBgKmAgaW4gdGhlIHRlc3QgdG8gZGV0ZWN0IGJ1Z2d5IGltcGxlbWVudGF0aW9ucyB0aGF0IGFyZVxuXHQvLyBfc2VsZWN0aXZlbHlfIGZvcmdpdmluZyAoc3BlY2lmaWNhbGx5IHdoZW4gdGhlIGxpc3QgaW5jbHVkZXMgYXQgbGVhc3Rcblx0Ly8gb25lIHZhbGlkIHNlbGVjdG9yKS5cblx0Ly8gTm90ZSB0aGF0IHdlIHRyZWF0IGNvbXBsZXRlIGxhY2sgb2Ygc3VwcG9ydCBmb3IgYDpoYXMoKWAgYXMgaWYgaXQgd2VyZVxuXHQvLyBzcGVjLWNvbXBsaWFudCBzdXBwb3J0LCB3aGljaCBpcyBmaW5lIGJlY2F1c2UgdXNlIG9mIGA6aGFzKClgIGluIHN1Y2hcblx0Ly8gZW52aXJvbm1lbnRzIHdpbGwgZmFpbCBpbiB0aGUgcVNBIHBhdGggYW5kIGZhbGwgYmFjayB0byBqUXVlcnkgdHJhdmVyc2FsXG5cdC8vIGFueXdheS5cblx0c3VwcG9ydC5jc3NIYXMgPSBhc3NlcnQoIGZ1bmN0aW9uKCkge1xuXHRcdHRyeSB7XG5cdFx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBcIjpoYXMoKiw6anFmYWtlKVwiICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdH0gKTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXIuSUQgPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcImlkXCIgKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdEV4cHIuZmluZC5JRCA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblx0XHRcdFx0cmV0dXJuIGVsZW0gPyBbIGVsZW0gXSA6IFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0RXhwci5maWx0ZXIuSUQgPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kLklEID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdGVsZW1zID0gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSggaWQgKTtcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1zWyBpKysgXSApICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmQuVEFHID0gZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdH1cblx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmQuQ0xBU1MgPSBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0cmJ1Z2d5UVNBID0gW107XG5cblx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0XHR2YXIgaW5wdXQ7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID1cblx0XHRcdFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJyBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgZGlzYWJsZWQ9J2Rpc2FibGVkJz5cIiArXG5cdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHQvLyBTdXBwb3J0OiBpT1MgPD03IC0gOCBvbmx5XG5cdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseSBpbiBzb21lIFhNTCBkb2N1bWVudHNcblx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltzZWxlY3RlZF1cIiApLmxlbmd0aCApIHtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogaU9TIDw9NyAtIDggb25seVxuXHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJ+PVwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogaU9TIDggb25seVxuXHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIi4jLitbK35dXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0xMDUrLCBGaXJlZm94IDw9MTA0KywgU2FmYXJpIDw9MTUuNCtcblx0XHQvLyBJbiBzb21lIG9mIHRoZSBkb2N1bWVudCBraW5kcywgdGhlc2Ugc2VsZWN0b3JzIHdvdWxkbid0IHdvcmsgbmF0aXZlbHkuXG5cdFx0Ly8gVGhpcyBpcyBwcm9iYWJseSBPSyBidXQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdlIHdhbnQgdG8gbWFpbnRhaW5cblx0XHQvLyBoYW5kbGluZyB0aGVtIHRocm91Z2ggalF1ZXJ5IHRyYXZlcnNhbCBpbiBqUXVlcnkgMy54LlxuXHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmNoZWNrZWRcIiApLmxlbmd0aCApIHtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjpjaGVja2VkXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExK1xuXHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTEwNSssIEZpcmVmb3ggPD0xMDQrLCBTYWZhcmkgPD0xNS40K1xuXHRcdC8vIEluIHNvbWUgb2YgdGhlIGRvY3VtZW50IGtpbmRzLCB0aGVzZSBzZWxlY3RvcnMgd291bGRuJ3Qgd29yayBuYXRpdmVseS5cblx0XHQvLyBUaGlzIGlzIHByb2JhYmx5IE9LIGJ1dCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2Ugd2FudCB0byBtYWludGFpblxuXHRcdC8vIGhhbmRsaW5nIHRoZW0gdGhyb3VnaCBqUXVlcnkgdHJhdmVyc2FsIGluIGpRdWVyeSAzLnguXG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBlbCApLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmRpc2FibGVkXCIgKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUgMTEvRWRnZSBkb24ndCBmaW5kIGVsZW1lbnRzIG9uIGEgYFtuYW1lPScnXWAgcXVlcnkgaW4gc29tZSBjYXNlcy5cblx0XHQvLyBBZGRpbmcgYSB0ZW1wb3JhcnkgYXR0cmlidXRlIHRvIHRoZSBkb2N1bWVudCBiZWZvcmUgdGhlIHNlbGVjdGlvbiB3b3Jrc1xuXHRcdC8vIGFyb3VuZCB0aGUgaXNzdWUuXG5cdFx0Ly8gSW50ZXJlc3RpbmdseSwgSUUgMTAgJiBvbGRlciBkb24ndCBzZWVtIHRvIGhhdmUgdGhlIGlzc3VlLlxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJcIiApO1xuXHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW25hbWU9JyddXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIio9XCIgK1xuXHRcdFx0XHR3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHR9XG5cdH0gKTtcblxuXHRpZiAoICFzdXBwb3J0LmNzc0hhcyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSAxMDUgLSAxMTArLCBTYWZhcmkgMTUuNCAtIDE2LjMrXG5cdFx0Ly8gT3VyIHJlZ3VsYXIgYHRyeS1jYXRjaGAgbWVjaGFuaXNtIGZhaWxzIHRvIGRldGVjdCBuYXRpdmVseS11bnN1cHBvcnRlZFxuXHRcdC8vIHBzZXVkby1jbGFzc2VzIGluc2lkZSBgOmhhcygpYCAoc3VjaCBhcyBgOmhhcyg6Y29udGFpbnMoXCJGb29cIikpYClcblx0XHQvLyBpbiBicm93c2VycyB0aGF0IHBhcnNlIHRoZSBgOmhhcygpYCBhcmd1bWVudCBhcyBhIGZvcmdpdmluZyBzZWxlY3RvciBsaXN0LlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9zZWxlY3RvcnMvI3JlbGF0aW9uYWwgbm93IHJlcXVpcmVzIHRoZSBhcmd1bWVudFxuXHRcdC8vIHRvIGJlIHBhcnNlZCB1bmZvcmdpdmluZ2x5LCBidXQgYnJvd3NlcnMgaGF2ZSBub3QgeWV0IGZ1bGx5IGFkanVzdGVkLlxuXHRcdHJidWdneVFTQS5wdXNoKCBcIjpoYXNcIiApO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbiggXCJ8XCIgKSApO1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xuXHRcdGlmICggY29tcGFyZSApIHtcblx0XHRcdHJldHVybiBjb21wYXJlO1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCggIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSApICkge1xuXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRpZiAoIGEgPT09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PSBwcmVmZXJyZWREb2MgJiZcblx0XHRcdFx0ZmluZC5jb250YWlucyggcHJlZmVycmVkRG9jLCBhICkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdGlmICggYiA9PT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09IHByZWZlcnJlZERvYyAmJlxuXHRcdFx0XHRmaW5kLmNvbnRhaW5zKCBwcmVmZXJyZWREb2MsIGIgKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mLmNhbGwoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZi5jYWxsKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufVxuXG5maW5kLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBmaW5kKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuZmluZC5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblxuXHRpZiAoIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cblx0XHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggZXhwciwgdHJ1ZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmaW5kKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuZmluZC5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblxuZmluZC5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSB0cmFjLTEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0aWYgKCB2YWwgIT09IHVuZGVmaW5lZCApIHtcblx0XHRyZXR1cm4gdmFsO1xuXHR9XG5cblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG59O1xuXG5maW5kLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cbmpRdWVyeS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdC8vXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjArXG5cdC8vIFRlc3RpbmcgZm9yIGRldGVjdGluZyBkdXBsaWNhdGVzIGlzIHVucHJlZGljdGFibGUgc28gaW5zdGVhZCBhc3N1bWUgd2UgY2FuJ3Rcblx0Ly8gZGVwZW5kIG9uIGR1cGxpY2F0ZSBkZXRlY3Rpb24gaW4gYWxsIGJyb3dzZXJzIHdpdGhvdXQgYSBzdGFibGUgc29ydC5cblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuc29ydFN0YWJsZTtcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiBzbGljZS5jYWxsKCByZXN1bHRzLCAwICk7XG5cdHNvcnQuY2FsbCggcmVzdWx0cywgc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSByZXN1bHRzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRzcGxpY2UuY2FsbCggcmVzdWx0cywgZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG5qUXVlcnkuZm4udW5pcXVlU29ydCA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS51bmlxdWVTb3J0KCBzbGljZS5hcHBseSggdGhpcyApICkgKTtcbn07XG5cbkV4cHIgPSBqUXVlcnkuZXhwciA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRBVFRSOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsgMSBdID0gbWF0Y2hbIDEgXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbIDMgXSA9ICggbWF0Y2hbIDMgXSB8fCBtYXRjaFsgNCBdIHx8IG1hdGNoWyA1IF0gfHwgXCJcIiApXG5cdFx0XHRcdC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWyAyIF0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbIDMgXSA9IFwiIFwiICsgbWF0Y2hbIDMgXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0Q0hJTEQ6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblxuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWyAxIF0gPSBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDEgXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdFx0ZmluZC5lcnJvciggbWF0Y2hbIDAgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbIDQgXSA9ICsoIG1hdGNoWyA0IF0gP1xuXHRcdFx0XHRcdG1hdGNoWyA1IF0gKyAoIG1hdGNoWyA2IF0gfHwgMSApIDpcblx0XHRcdFx0XHQyICogKCBtYXRjaFsgMyBdID09PSBcImV2ZW5cIiB8fCBtYXRjaFsgMyBdID09PSBcIm9kZFwiIClcblx0XHRcdFx0KTtcblx0XHRcdFx0bWF0Y2hbIDUgXSA9ICsoICggbWF0Y2hbIDcgXSArIG1hdGNoWyA4IF0gKSB8fCBtYXRjaFsgMyBdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0ZmluZC5lcnJvciggbWF0Y2hbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFBTRVVETzogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbIDYgXSAmJiBtYXRjaFsgMiBdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwci5DSElMRC50ZXN0KCBtYXRjaFsgMCBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFsgMyBdICkge1xuXHRcdFx0XHRtYXRjaFsgMiBdID0gbWF0Y2hbIDQgXSB8fCBtYXRjaFsgNSBdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoIGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApICkgJiZcblxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KCBleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGggKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFsgMCBdID0gbWF0Y2hbIDAgXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWyAyIF0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0VEFHOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBleHBlY3RlZE5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBub2RlTmFtZSggZWxlbSwgZXhwZWN0ZWROb2RlTmFtZSApO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRDTEFTUzogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KCBwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArXG5cdFx0XHRcdFx0XCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApICkgJiZcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KFxuXHRcdFx0XHRcdFx0dHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8XG5cdFx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fFxuXHRcdFx0XHRcdFx0XHRcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fSApO1xuXHRcdH0sXG5cblx0XHRBVFRSOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdGlmICggb3BlcmF0b3IgPT09IFwiPVwiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHQgPT09IGNoZWNrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggb3BlcmF0b3IgPT09IFwiIT1cIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0ICE9PSBjaGVjaztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIG9wZXJhdG9yID09PSBcIl49XCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggb3BlcmF0b3IgPT09IFwiKj1cIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIG9wZXJhdG9yID09PSBcIiQ9XCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjaztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIG9wZXJhdG9yID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApXG5cdFx0XHRcdFx0XHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggb3BlcmF0b3IgPT09IFwifD1cIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdENISUxEOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgX2FyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gbm9kZVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZU5hbWUoIG5vZGUsIG5hbWUgKSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IHBhcmVudFsgZXhwYW5kbyBdIHx8ICggcGFyZW50WyBleHBhbmRvIF0gPSB7fSApO1xuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IG91dGVyQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoIGRpZmYgPSBub2RlSW5kZXggPSAwICkgfHwgc3RhcnQucG9wKCkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKCBlbGVtWyBleHBhbmRvIF0gPSB7fSApO1xuXHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gb3V0ZXJDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBkaWZmID0gbm9kZUluZGV4ID0gMCApIHx8IHN0YXJ0LnBvcCgpICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlTmFtZSggbm9kZSwgbmFtZSApIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCsrZGlmZiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFBTRVVETzogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdGZpbmQuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBqUXVlcnkgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YuY2FsbCggc2VlZCwgbWF0Y2hlZFsgaSBdICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkWyBpIF0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRub3Q6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltQ1NTLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gdW5tYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaSBdID0gISggbWF0Y2hlc1sgaSBdID0gZWxlbSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdC8vIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvaXNzdWVzLzI5OSlcblx0XHRcdFx0XHRpbnB1dFsgMCBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0aGFzOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGZpbmQoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0Y29udGFpbnM6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGpRdWVyeS50ZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0bGFuZzogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblxuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdCggbGFuZyB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdGZpbmQuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKCBlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggXCJ4bWw6bGFuZ1wiICkgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoIFwibGFuZ1wiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoICggZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSApICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0dGFyZ2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRyb290OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSxcblxuXHRcdGZvY3VzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmXG5cdFx0XHRcdGRvY3VtZW50Lmhhc0ZvY3VzKCkgJiZcblx0XHRcdFx0ISEoIGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXggKTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0ZW5hYmxlZDogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGZhbHNlICksXG5cdFx0ZGlzYWJsZWQ6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRjaGVja2VkOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHJldHVybiAoIG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSAmJiAhIWVsZW0uY2hlY2tlZCApIHx8XG5cdFx0XHRcdCggbm9kZU5hbWUoIGVsZW0sIFwib3B0aW9uXCIgKSAmJiAhIWVsZW0uc2VsZWN0ZWQgKTtcblx0XHR9LFxuXG5cdFx0c2VsZWN0ZWQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExK1xuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG5cdFx0XHQvLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gdHJlYXQgdGhlIGRlZmF1bHQgb3B0aW9uIGFzXG5cdFx0XHQvLyBzZWxlY3RlZCB3aGVuIGluIGFuIG9wdGdyb3VwLlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdGVtcHR5OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zLmVtcHR5KCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRoZWFkZXI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRpbnB1dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdGJ1dHRvbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fFxuXHRcdFx0XHRub2RlTmFtZSggZWxlbSwgXCJidXR0b25cIiApO1xuXHRcdH0sXG5cblx0XHR0ZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSAmJiBlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDEwIG9ubHlcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhclxuXHRcdFx0XHQvLyB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoIGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSApID09IG51bGwgfHxcblx0XHRcdFx0XHRhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRmaXJzdDogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSApLFxuXG5cdFx0bGFzdDogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIF9tYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9ICksXG5cblx0XHRlcTogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIF9tYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG5cdFx0fSApLFxuXG5cdFx0ZXZlbjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdG9kZDogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdGx0OiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGk7XG5cblx0XHRcdGlmICggYXJndW1lbnQgPCAwICkge1xuXHRcdFx0XHRpID0gYXJndW1lbnQgKyBsZW5ndGg7XG5cdFx0XHR9IGVsc2UgaWYgKCBhcmd1bWVudCA+IGxlbmd0aCApIHtcblx0XHRcdFx0aSA9IGxlbmd0aDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGkgPSBhcmd1bWVudDtcblx0XHRcdH1cblxuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdGd0OiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9IClcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zLm50aCA9IEV4cHIucHNldWRvcy5lcTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG5mdW5jdGlvbiB0b2tlbml6ZSggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8ICggbWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSApICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFsgMCBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICggdG9rZW5zID0gW10gKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAoIG1hdGNoID0gcmxlYWRpbmdDb21iaW5hdG9yLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goIHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWyAwIF0ucmVwbGFjZSggcnRyaW1DU1MsIFwiIFwiIClcblx0XHRcdH0gKTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoICggbWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApICkgJiYgKCAhcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdCggbWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkgKSApICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goIHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0aWYgKCBwYXJzZU9ubHkgKSB7XG5cdFx0cmV0dXJuIHNvRmFyLmxlbmd0aDtcblx0fVxuXG5cdHJldHVybiBzb0ZhciA/XG5cdFx0ZmluZC5lcnJvciggc2VsZWN0b3IgKSA6XG5cblx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbIGkgXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRza2lwID0gY29tYmluYXRvci5uZXh0LFxuXHRcdGtleSA9IHNraXAgfHwgZGlyLFxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGtleSA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCBvdXRlckNhY2hlLFxuXHRcdFx0XHRuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcblxuXHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gY29tYmluYXRvciBjYWNoaW5nXG5cdFx0XHRpZiAoIHhtbCApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8ICggZWxlbVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIG5vZGVOYW1lKCBlbGVtLCBza2lwICkgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtWyBkaXIgXSB8fCBlbGVtO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggKCBvbGRDYWNoZSA9IG91dGVyQ2FjaGVbIGtleSBdICkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKCBuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGVbIGtleSBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKCBuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1sgaSBdKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWyAwIF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0ZmluZCggc2VsZWN0b3IsIGNvbnRleHRzWyBpIF0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSwgbWF0Y2hlck91dCxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fFxuXHRcdFx0XHRtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIixcblx0XHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zO1xuXG5cdFx0aWYgKCBtYXRjaGVyICkge1xuXG5cdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlclxuXHRcdFx0Ly8gb3IgcHJlZXhpc3RpbmcgcmVzdWx0cyxcblx0XHRcdG1hdGNoZXJPdXQgPSBwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XG5cdFx0XHRcdFtdIDpcblxuXHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0cmVzdWx0cztcblxuXHRcdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVySW47XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoIGVsZW0gPSB0ZW1wWyBpIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwWyBpIF0gXSA9ICEoIG1hdGNoZXJJblsgcG9zdE1hcFsgaSBdIF0gPSBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBtYXRjaGVyT3V0WyBpIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goICggbWF0Y2hlckluWyBpIF0gPSBlbGVtICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKCBtYXRjaGVyT3V0ID0gW10gKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgJiZcblx0XHRcdFx0XHRcdCggdGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mLmNhbGwoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFsgaSBdICkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFsgdGVtcCBdID0gISggcmVzdWx0c1sgdGVtcCBdID0gZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Ub2tlbnMoIHRva2VucyApIHtcblx0dmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaixcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdGxlYWRpbmdSZWxhdGl2ZSA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgMCBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbIFwiIFwiIF0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoIGNoZWNrQ29udGV4dCA9IGNvbnRleHQgKS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudFxuXHRcdFx0Ly8gKHNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9pc3N1ZXMvMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKCBtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyBpIF0udHlwZSBdICkgKSB7XG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvciggZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIgKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1sgaSBdLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zWyBpIF0ubWF0Y2hlcyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlclxuXHRcdFx0aWYgKCBtYXRjaGVyWyBleHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyBqIF0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cblx0XHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0XHR0b2tlbnMuc2xpY2UoIDAsIGkgLSAxIClcblx0XHRcdFx0XHRcdFx0LmNvbmNhdCggeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0gKVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW1DU1MsIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKCB0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZC5UQUcoIFwiKlwiLCBvdXRlcm1vc3QgKSxcblxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKCBkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSApLFxuXHRcdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogaU9TIDw9NyAtIDkgb25seVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nXG5cdFx0XHQvLyBlbGVtZW50cyBieSBpZC4gKHNlZSB0cmFjLTE0MTQyKVxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHB1c2guY2FsbCggcmVzdWx0cywgZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtICkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoZXIgPSBzZXRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEoIHVubWF0Y2hlZFsgaSBdIHx8IHNldE1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbIGkgXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuZnVuY3Rpb24gY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbIGkgXSApO1xuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZSggc2VsZWN0b3IsXG5cdFx0XHRtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn1cblxuLyoqXG4gKiBBIGxvdy1sZXZlbCBzZWxlY3Rpb24gZnVuY3Rpb24gdGhhdCB3b3JrcyB3aXRoIGpRdWVyeSdzIGNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb25zXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uIGJ1aWx0IHdpdGggalF1ZXJ5IHNlbGVjdG9yIGNvbXBpbGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dFxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXG4gKiBAcGFyYW0ge0FycmF5fSBbc2VlZF0gQSBzZXQgb2YgZWxlbWVudHMgdG8gbWF0Y2ggYWdhaW5zdFxuICovXG5mdW5jdGlvbiBzZWxlY3QoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgaSwgdG9rZW5zLCB0b2tlbiwgdHlwZSwgZmluZCxcblx0XHRjb21waWxlZCA9IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICYmIHNlbGVjdG9yLFxuXHRcdG1hdGNoID0gIXNlZWQgJiYgdG9rZW5pemUoICggc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvciApICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbIDAgXSA9IG1hdGNoWyAwIF0uc2xpY2UoIDAgKTtcblx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICggdG9rZW4gPSB0b2tlbnNbIDAgXSApLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgMSBdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kLklEKFxuXHRcdFx0XHR0b2tlbi5tYXRjaGVzWyAwIF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0Y29udGV4dFxuXHRcdFx0KSB8fCBbXSApWyAwIF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0b2tlbiA9IHRva2Vuc1sgaSBdO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICggdHlwZSA9IHRva2VuLnR5cGUgKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKCBmaW5kID0gRXhwci5maW5kWyB0eXBlIF0gKSApIHtcblxuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoIHNlZWQgPSBmaW5kKFxuXHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbIDAgXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1sgMCBdLnR5cGUgKSAmJlxuXHRcdFx0XHRcdFx0dGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0KSApICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XG5cdFx0XHRcdFx0dG9rZW5zLnNwbGljZSggaSwgMSApO1xuXHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG5cdCggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcblx0XHRzZWVkLFxuXHRcdGNvbnRleHQsXG5cdFx0IWRvY3VtZW50SXNIVE1MLFxuXHRcdHJlc3VsdHMsXG5cdFx0IWNvbnRleHQgfHwgcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHQpO1xuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCAtIDQuMStcbi8vIFNvcnQgc3RhYmlsaXR5XG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KCBcIlwiICkuc29ydCggc29ydE9yZGVyICkuam9pbiggXCJcIiApID09PSBleHBhbmRvO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgLSA0LjErXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBlbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJmaWVsZHNldFwiICkgKSAmIDE7XG59ICk7XG5cbmpRdWVyeS5maW5kID0gZmluZDtcblxuLy8gRGVwcmVjYXRlZFxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZSA9IGpRdWVyeS51bmlxdWVTb3J0O1xuXG4vLyBUaGVzZSBoYXZlIGFsd2F5cyBiZWVuIHByaXZhdGUsIGJ1dCB0aGV5IHVzZWQgdG8gYmUgZG9jdW1lbnRlZCBhcyBwYXJ0IG9mXG4vLyBTaXp6bGUgc28gbGV0J3MgbWFpbnRhaW4gdGhlbSBmb3Igbm93IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSBwdXJwb3Nlcy5cbmZpbmQuY29tcGlsZSA9IGNvbXBpbGU7XG5maW5kLnNlbGVjdCA9IHNlbGVjdDtcbmZpbmQuc2V0RG9jdW1lbnQgPSBzZXREb2N1bWVudDtcbmZpbmQudG9rZW5pemUgPSB0b2tlbml6ZTtcblxuZmluZC5lc2NhcGUgPSBqUXVlcnkuZXNjYXBlU2VsZWN0b3I7XG5maW5kLmdldFRleHQgPSBqUXVlcnkudGV4dDtcbmZpbmQuaXNYTUwgPSBqUXVlcnkuaXNYTUxEb2M7XG5maW5kLnNlbGVjdG9ycyA9IGpRdWVyeS5leHByO1xuZmluZC5zdXBwb3J0ID0galF1ZXJ5LnN1cHBvcnQ7XG5maW5kLnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlU29ydDtcblxuXHQvKiBlc2xpbnQtZW5hYmxlICovXG5cbn0gKSgpO1xuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBGaWx0ZXJlZCBkaXJlY3RseSBmb3IgYm90aCBzaW1wbGUgYW5kIGNvbXBsZXggc2VsZWN0b3JzXG5cdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICh0cmFjLTk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICh0cmFjLTExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0Ly8gU2hvcnRjdXQgc2ltcGxlICNpZCBjYXNlIGZvciBzcGVlZFxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdCApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHRhcmdldHMgPSB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiICYmIGpRdWVyeSggc2VsZWN0b3JzICk7XG5cblx0XHQvLyBQb3NpdGlvbmFsIHNlbGVjdG9ycyBuZXZlciBtYXRjaCwgc2luY2UgdGhlcmUncyBubyBfc2VsZWN0aW9uXyBjb250ZXh0XG5cdFx0aWYgKCAhcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zm9yICggY3VyID0gdGhpc1sgaSBdOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKCB0YXJnZXRzID9cblx0XHRcdFx0XHRcdHRhcmdldHMuaW5kZXgoIGN1ciApID4gLTEgOlxuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBqUXVlcnkjZmluZFxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRpZiAoIGVsZW0uY29udGVudERvY3VtZW50ICE9IG51bGwgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErXG5cdFx0XHQvLyA8b2JqZWN0PiBlbGVtZW50cyB3aXRoIG5vIGBkYXRhYCBhdHRyaWJ1dGUgaGFzIGFuIG9iamVjdFxuXHRcdFx0Ly8gYGNvbnRlbnREb2N1bWVudGAgd2l0aCBhIGBudWxsYCBwcm90b3R5cGUuXG5cdFx0XHRnZXRQcm90byggZWxlbS5jb250ZW50RG9jdW1lbnQgKSApIHtcblxuXHRcdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5LCBpT1MgNyBvbmx5LCBBbmRyb2lkIEJyb3dzZXIgPD00LjMgb25seVxuXHRcdC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuXHRcdC8vIGRvbid0IHN1cHBvcnQgaXQuXG5cdFx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0ZW1wbGF0ZVwiICkgKSB7XG5cdFx0XHRlbGVtID0gZWxlbS5jb250ZW50IHx8IGVsZW07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IGxvY2tlZCB8fCBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgdG9UeXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxuZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdHRocm93IGV4O1xufVxuXG5mdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0LCBub1ZhbHVlICkge1xuXHR2YXIgbWV0aG9kO1xuXG5cdHRyeSB7XG5cblx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0aWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29udHJvbCBgcmVzb2x2ZWAgYXJndW1lbnRzIGJ5IGxldHRpbmcgQXJyYXkjc2xpY2UgY2FzdCBib29sZWFuIGBub1ZhbHVlYCB0byBpbnRlZ2VyOlxuXHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0Ly8gKiB0cnVlOiBbIHZhbHVlIF0uc2xpY2UoIDEgKSA9PiByZXNvbHZlKClcblx0XHRcdHJlc29sdmUuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdLnNsaWNlKCBub1ZhbHVlICkgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBfaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBpc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLmVycm9yICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjQuMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTYxXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIHBvc3QtcmVzb2x1dGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCArIDEgPj0gbWF4RGVwdGggKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBUaHJvd2VyICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyBlIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjFcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTdcblx0XHRcdFx0XHRcdFx0Ly8gUmUtcmVzb2x2ZSBwcm9taXNlcyBpbW1lZGlhdGVseSB0byBkb2RnZSBmYWxzZSByZWplY3Rpb24gZnJvbVxuXHRcdFx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGVycm9yc1xuXHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENhbGwgYW4gb3B0aW9uYWwgaG9vayB0byByZWNvcmQgdGhlIGVycm9yLCBpbiBjYXNlIG9mIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNpbmNlIGl0J3Mgb3RoZXJ3aXNlIGxvc3Qgd2hlbiBleGVjdXRpb24gZ29lcyBhc3luY1xuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmdldEVycm9ySG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MuZXJyb3IgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0RXJyb3JIb29rKCk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBUaGUgZGVwcmVjYXRlZCBhbGlhcyBvZiB0aGUgYWJvdmUuIFdoaWxlIHRoZSBuYW1lIHN1Z2dlc3RzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gcmV0dXJuaW5nIHRoZSBzdGFjaywgbm90IGFuIGVycm9yIGluc3RhbmNlLCBqUXVlcnkganVzdCBwYXNzZXNcblx0XHRcdFx0XHRcdFx0XHQvLyBpdCBkaXJlY3RseSB0byBgY29uc29sZS53YXJuYCBzbyBib3RoIHdpbGwgd29yazsgYW4gaW5zdGFuY2Vcblx0XHRcdFx0XHRcdFx0XHQvLyBqdXN0IGJldHRlciBjb29wZXJhdGVzIHdpdGggc291cmNlIG1hcHMuXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggalF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MuZXJyb3IgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDMgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2ssXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgcHJpbWFyeSBEZWZlcnJlZFxuXHRcdFx0cHJpbWFyeSA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBjYWxsYmFjayBmYWN0b3J5XG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZUNvbnRleHRzWyBpIF0gPSB0aGlzO1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRwcmltYXJ5LnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBwcmltYXJ5LmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIHByaW1hcnkucmVqZWN0LFxuXHRcdFx0XHQhcmVtYWluaW5nICk7XG5cblx0XHRcdC8vIFVzZSAudGhlbigpIHRvIHVud3JhcCBzZWNvbmRhcnkgdGhlbmFibGVzIChjZi4gZ2gtMzAwMClcblx0XHRcdGlmICggcHJpbWFyeS5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRpc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gcHJpbWFyeS50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBwcmltYXJ5LnJlamVjdCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBwcmltYXJ5LnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxuLy8gSWYgYGpRdWVyeS5EZWZlcnJlZC5nZXRFcnJvckhvb2tgIGlzIGRlZmluZWQsIGBhc3luY0Vycm9yYCBpcyBhbiBlcnJvclxuLy8gY2FwdHVyZWQgYmVmb3JlIHRoZSBhc3luYyBiYXJyaWVyIHRvIGdldCB0aGUgb3JpZ2luYWwgZXJyb3IgY2F1c2Vcbi8vIHdoaWNoIG1heSBvdGhlcndpc2UgYmUgaGlkZGVuLlxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIGFzeW5jRXJyb3IgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDkgb25seVxuXHQvLyBDb25zb2xlIGV4aXN0cyB3aGVuIGRldiB0b29scyBhcmUgb3Blbiwgd2hpY2ggY2FuIGhhcHBlbiBhdCBhbnkgdGltZVxuXHRpZiAoIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLndhcm4gJiYgZXJyb3IgJiYgcmVycm9yTmFtZXMudGVzdCggZXJyb3IubmFtZSApICkge1xuXHRcdHdpbmRvdy5jb25zb2xlLndhcm4oIFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLFxuXHRcdFx0ZXJyb3Iuc3RhY2ssIGFzeW5jRXJyb3IgKTtcblx0fVxufTtcblxuXG5cblxualF1ZXJ5LnJlYWR5RXhjZXB0aW9uID0gZnVuY3Rpb24oIGVycm9yICkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gKTtcbn07XG5cblxuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0cmVhZHlMaXN0XG5cdFx0LnRoZW4oIGZuIClcblxuXHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXG5cdFx0Ly8gaGFwcGVucyBhdCB0aGUgdGltZSBvZiBlcnJvciBoYW5kbGluZyBpbnN0ZWFkIG9mIGNhbGxiYWNrXG5cdFx0Ly8gcmVnaXN0cmF0aW9uLlxuXHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5RXhjZXB0aW9uKCBlcnJvciApO1xuXHRcdH0gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlIHRyYWMtNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cbi8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbi8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIHRvVHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwgX2tleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggY2hhaW5hYmxlICkge1xuXHRcdHJldHVybiBlbGVtcztcblx0fVxuXG5cdC8vIEdldHNcblx0aWYgKCBidWxrICkge1xuXHRcdHJldHVybiBmbi5jYWxsKCBlbGVtcyApO1xuXHR9XG5cblx0cmV0dXJuIGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcblxuXG4vLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcbnZhciBybXNQcmVmaXggPSAvXi1tcy0vLFxuXHRyZGFzaEFscGhhID0gLy0oW2Etel0pL2c7XG5cbi8vIFVzZWQgYnkgY2FtZWxDYXNlIGFzIGNhbGxiYWNrIHRvIHJlcGxhY2UoKVxuZnVuY3Rpb24gZmNhbWVsQ2FzZSggX2FsbCwgbGV0dGVyICkge1xuXHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG59XG5cbi8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcbi8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICh0cmFjLTk1NzIpXG5mdW5jdGlvbiBjYW1lbENhc2UoIHN0cmluZyApIHtcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG59XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSB0cmFjLTgzMzUuXG5cdFx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cblx0XHRcdGlmICggYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXG5cdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XG5cdFx0XHRcdC8vIGNvbmZpZ3VyYWJsZSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXG5cdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdHZhciBwcm9wLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlKCBvd25lciApO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggZGF0YSApIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggcHJvcCApIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XG5cblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGNhbWVsQ2FzZSgga2V5ICkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0Ly9cblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdC8vXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHQoICgga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXHRcdH1cblxuXHRcdC8vIFdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcblx0XHQvL1xuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xuXG5cdFx0Ly8gU2luY2UgdGhlIFwic2V0XCIgcGF0aCBjYW4gaGF2ZSB0d28gcG9zc2libGUgZW50cnkgcG9pbnRzXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0fSxcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHR2YXIgaSxcblx0XHRcdGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGtleSApICkge1xuXG5cdFx0XHRcdC8vIElmIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzZXQgY2FtZWxDYXNlIGtleXMsIHNvIHJlbW92ZSB0aGF0LlxuXHRcdFx0XHRrZXkgPSBrZXkubWFwKCBjYW1lbENhc2UgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGtleSA9IGNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRrZXkgPSBrZXkgaW4gY2FjaGUgP1xuXHRcdFx0XHRcdFsga2V5IF0gOlxuXHRcdFx0XHRcdCgga2V5Lm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10gKTtcblx0XHRcdH1cblxuXHRcdFx0aSA9IGtleS5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIGtleVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NVxuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcblx0XHRcdC8vIGZyb20gRE9NIG5vZGVzLCBzbyBzZXQgdG8gdW5kZWZpbmVkIGluc3RlYWRcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwNyAoYnVnIHJlc3RyaWN0ZWQpXG5cdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICk7XG5cdH1cbn07XG52YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XG5cbmZ1bmN0aW9uIGdldERhdGEoIGRhdGEgKSB7XG5cdGlmICggZGF0YSA9PT0gXCJ0cnVlXCIgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwiZmFsc2VcIiApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwibnVsbFwiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0aWYgKCBkYXRhID09PSArZGF0YSArIFwiXCIgKSB7XG5cdFx0cmV0dXJuICtkYXRhO1xuXHR9XG5cblx0aWYgKCByYnJhY2UudGVzdCggZGF0YSApICkge1xuXHRcdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICk7XG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBnZXREYXRhKCBkYXRhICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICh0cmFjLTE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGE7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgQXJyYXkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxuXHR2YXIgaXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cdFx0fSxcblx0XHRjb21wb3NlZCA9IHsgY29tcG9zZWQ6IHRydWUgfTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrLCBpT1MgMTAuMCAtIDEwLjIgb25seVxuXHQvLyBDaGVjayBhdHRhY2htZW50IGFjcm9zcyBzaGFkb3cgRE9NIGJvdW5kYXJpZXMgd2hlbiBwb3NzaWJsZSAoZ2gtMzUwNClcblx0Ly8gU3VwcG9ydDogaU9TIDEwLjAtMTAuMiBvbmx5XG5cdC8vIEVhcmx5IGlPUyAxMCB2ZXJzaW9ucyBzdXBwb3J0IGBhdHRhY2hTaGFkb3dgIGJ1dCBub3QgYGdldFJvb3ROb2RlYCxcblx0Ly8gbGVhZGluZyB0byBlcnJvcnMuIFdlIG5lZWQgdG8gY2hlY2sgZm9yIGBnZXRSb290Tm9kZWAuXG5cdGlmICggZG9jdW1lbnRFbGVtZW50LmdldFJvb3ROb2RlICkge1xuXHRcdGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Um9vdE5vZGUoIGNvbXBvc2VkICkgPT09IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHR9O1xuXHR9XG52YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cblx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0aXNBdHRhY2hlZCggZWxlbSApICYmXG5cblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiO1xuXHR9O1xuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLCBzY2FsZSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSBlbGVtLm5vZGVUeXBlICYmXG5cdFx0XHQoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdFx0Ly8gSGFsdmUgdGhlIGl0ZXJhdGlvbiB0YXJnZXQgdmFsdWUgdG8gcHJldmVudCBpbnRlcmZlcmVuY2UgZnJvbSBDU1MgdXBwZXIgYm91bmRzIChnaC0yMTQ0KVxuXHRcdGluaXRpYWwgPSBpbml0aWFsIC8gMjtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0d2hpbGUgKCBtYXhJdGVyYXRpb25zLS0gKSB7XG5cblx0XHRcdC8vIEV2YWx1YXRlIGFuZCB1cGRhdGUgb3VyIGJlc3QgZ3Vlc3MgKGRvdWJsaW5nIGd1ZXNzZXMgdGhhdCB6ZXJvIG91dCkuXG5cdFx0XHQvLyBGaW5pc2ggaWYgdGhlIHNjYWxlIGVxdWFscyBvciBjcm9zc2VzIDEgKG1ha2luZyB0aGUgb2xkKm5ldyBwcm9kdWN0IG5vbi1wb3NpdGl2ZSkuXG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cdFx0XHRpZiAoICggMSAtIHNjYWxlICkgKiAoIDEgLSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsIHx8IDAuNSApICkgPD0gMCApIHtcblx0XHRcdFx0bWF4SXRlcmF0aW9ucyA9IDA7XG5cdFx0XHR9XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXG5cdFx0fVxuXG5cdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgKiAyO1xuXHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG5cblxudmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHR2YXIgdGVtcCxcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblxuXHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0cmV0dXJuIGRpc3BsYXk7XG5cdH1cblxuXHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xuXG5cdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXG5cdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0fVxuXHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2Vcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcblx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKikvaSApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxebW9kdWxlJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICh0cmFjLTExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAodHJhYy0xNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdC8vIElFIDw9OSByZXBsYWNlcyA8b3B0aW9uPiB0YWdzIHdpdGggdGhlaXIgY29udGVudHMgd2hlbiBpbnNlcnRlZCBvdXRzaWRlIG9mXG5cdC8vIHRoZSBzZWxlY3QgZWxlbWVudC5cblx0ZGl2LmlubmVySFRNTCA9IFwiPG9wdGlvbj48L29wdGlvbj5cIjtcblx0c3VwcG9ydC5vcHRpb24gPSAhIWRpdi5sYXN0Q2hpbGQ7XG59ICkoKTtcblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAodHJhYy0xMzIwMClcbnZhciB3cmFwTWFwID0ge1xuXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxufTtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuaWYgKCAhc3VwcG9ydC5vcHRpb24gKSB7XG5cdHdyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbiA9IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXTtcbn1cblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKHRyYWMtMTUxNTEpXG5cdHZhciByZXQ7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2UgaWYgKCB0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIHtcblx0XHRyZXQgPSBbXTtcblx0fVxuXG5cdGlmICggdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIG5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICk7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgYXR0YWNoZWQsIGosXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRub2RlcyA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0aWYgKCB0b1R5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICh0cmFjLTEyMzkyKVxuXHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcblx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdGkgPSAwO1xuXHR3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkge1xuXG5cdFx0Ly8gU2tpcCBlbGVtZW50cyBhbHJlYWR5IGluIHRoZSBjb250ZXh0IGNvbGxlY3Rpb24gKHRyYWMtNDA4Nylcblx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgPiAtMSApIHtcblx0XHRcdGlmICggaWdub3JlZCApIHtcblx0XHRcdFx0aWdub3JlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRhdHRhY2hlZCA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggYXR0YWNoZWQgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbnZhciBydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIE9ubHkgYXR0YWNoIGV2ZW50cyB0byBvYmplY3RzIHRoYXQgYWNjZXB0IGRhdGFcblx0XHRpZiAoICFhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0gT2JqZWN0LmNyZWF0ZSggbnVsbCApO1xuXHRcdH1cblx0XHRpZiAoICEoIGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlICkgKSB7XG5cdFx0XHRldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcblx0XHR9XG5cblx0fSxcblxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcblxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdHRtcCA9IHRtcFsgMiBdICYmXG5cdFx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApO1xuXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHxcblx0XHRcdFx0XHRcdHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcblx0XHRcdFx0XHRzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIGRhdGEgYW5kIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0ZGlzcGF0Y2g6IGZ1bmN0aW9uKCBuYXRpdmVFdmVudCApIHtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXG5cdFx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHRcdGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKSxcblxuXHRcdFx0aGFuZGxlcnMgPSAoXG5cdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IE9iamVjdC5jcmVhdGUoIG51bGwgKVxuXHRcdFx0KVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGV2ZW50IGlzIG5hbWVzcGFjZWQsIHRoZW4gZWFjaCBoYW5kbGVyIGlzIG9ubHkgaW52b2tlZCBpZiBpdCBpc1xuXHRcdFx0XHQvLyBzcGVjaWFsbHkgdW5pdmVyc2FsIG9yIGl0cyBuYW1lc3BhY2VzIGFyZSBhIHN1cGVyc2V0IG9mIHRoZSBldmVudCdzLlxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGhhbmRsZU9iai5uYW1lc3BhY2UgPT09IGZhbHNlIHx8XG5cdFx0XHRcdFx0ZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAodHJhYy0xMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKHRyYWMtNjkxMSwgdHJhYy04MTY1LCB0cmFjLTExMzgyLCB0cmFjLTExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKHRyYWMtMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50WyBuYW1lIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCBuYW1lLCB7XG5cdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggb3JpZ2luYWxFdmVudCApIHtcblx0XHRyZXR1cm4gb3JpZ2luYWxFdmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRvcmlnaW5hbEV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblxuXHRcdFx0Ly8gVXRpbGl6ZSBuYXRpdmUgZXZlbnQgdG8gZW5zdXJlIGNvcnJlY3Qgc3RhdGUgZm9yIGNoZWNrYWJsZSBpbnB1dHNcblx0XHRcdHNldHVwOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdC8vIGRhdGFQcml2LnNldCggZWwsIFwiY2xpY2tcIiwgLi4uIClcblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSxcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gRm9yY2Ugc2V0dXAgYmVmb3JlIHRyaWdnZXJpbmcgYSBjbGlja1xuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBzdXBwcmVzcyBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdC8vIEFsc28gcHJldmVudCBpdCBpZiB3ZSdyZSBjdXJyZW50bHkgaW5zaWRlIGEgbGV2ZXJhZ2VkIG5hdGl2ZS1ldmVudCBzdGFja1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcblx0XHRcdFx0cmV0dXJuIHJjaGVja2FibGVUeXBlLnRlc3QoIHRhcmdldC50eXBlICkgJiZcblx0XHRcdFx0XHR0YXJnZXQuY2xpY2sgJiYgbm9kZU5hbWUoIHRhcmdldCwgXCJpbnB1dFwiICkgJiZcblx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRhcmdldCwgXCJjbGlja1wiICkgfHxcblx0XHRcdFx0XHRub2RlTmFtZSggdGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIEVuc3VyZSB0aGUgcHJlc2VuY2Ugb2YgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBoYW5kbGVzIG1hbnVhbGx5LXRyaWdnZXJlZFxuLy8gc3ludGhldGljIGV2ZW50cyBieSBpbnRlcnJ1cHRpbmcgcHJvZ3Jlc3MgdW50aWwgcmVpbnZva2VkIGluIHJlc3BvbnNlIHRvXG4vLyAqbmF0aXZlKiBldmVudHMgdGhhdCBpdCBmaXJlcyBkaXJlY3RseSwgZW5zdXJpbmcgdGhhdCBzdGF0ZSBjaGFuZ2VzIGhhdmVcbi8vIGFscmVhZHkgb2NjdXJyZWQgYmVmb3JlIG90aGVyIGxpc3RlbmVycyBhcmUgaW52b2tlZC5cbmZ1bmN0aW9uIGxldmVyYWdlTmF0aXZlKCBlbCwgdHlwZSwgaXNTZXR1cCApIHtcblxuXHQvLyBNaXNzaW5nIGBpc1NldHVwYCBpbmRpY2F0ZXMgYSB0cmlnZ2VyIGNhbGwsIHdoaWNoIG11c3QgZm9yY2Ugc2V0dXAgdGhyb3VnaCBqUXVlcnkuZXZlbnQuYWRkXG5cdGlmICggIWlzU2V0dXAgKSB7XG5cdFx0aWYgKCBkYXRhUHJpdi5nZXQoIGVsLCB0eXBlICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCByZXR1cm5UcnVlICk7XG5cdFx0fVxuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlZ2lzdGVyIHRoZSBjb250cm9sbGVyIGFzIGEgc3BlY2lhbCB1bml2ZXJzYWwgaGFuZGxlciBmb3IgYWxsIGV2ZW50IG5hbWVzcGFjZXNcblx0ZGF0YVByaXYuc2V0KCBlbCwgdHlwZSwgZmFsc2UgKTtcblx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHtcblx0XHRuYW1lc3BhY2U6IGZhbHNlLFxuXHRcdGhhbmRsZXI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXN1bHQsXG5cdFx0XHRcdHNhdmVkID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdGlmICggKCBldmVudC5pc1RyaWdnZXIgJiAxICkgJiYgdGhpc1sgdHlwZSBdICkge1xuXG5cdFx0XHRcdC8vIEludGVycnVwdCBwcm9jZXNzaW5nIG9mIHRoZSBvdXRlciBzeW50aGV0aWMgLnRyaWdnZXIoKWVkIGV2ZW50XG5cdFx0XHRcdGlmICggIXNhdmVkICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgYXJndW1lbnRzIGZvciB1c2Ugd2hlbiBoYW5kbGluZyB0aGUgaW5uZXIgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdFx0Ly8gVGhlcmUgd2lsbCBhbHdheXMgYmUgYXQgbGVhc3Qgb25lIGFyZ3VtZW50IChhbiBldmVudCBvYmplY3QpLCBzbyB0aGlzIGFycmF5XG5cdFx0XHRcdFx0Ly8gd2lsbCBub3QgYmUgY29uZnVzZWQgd2l0aCBhIGxlZnRvdmVyIGNhcHR1cmUgb2JqZWN0LlxuXHRcdFx0XHRcdHNhdmVkID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBzYXZlZCApO1xuXG5cdFx0XHRcdFx0Ly8gVHJpZ2dlciB0aGUgbmF0aXZlIGV2ZW50IGFuZCBjYXB0dXJlIGl0cyByZXN1bHRcblx0XHRcdFx0XHR0aGlzWyB0eXBlIF0oKTtcblx0XHRcdFx0XHRyZXN1bHQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIGZhbHNlICk7XG5cblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhbmNlbCB0aGUgb3V0ZXIgc3ludGhldGljIGV2ZW50XG5cdFx0XHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoaXMgaXMgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IGZvciBhbiBldmVudCB3aXRoIGEgYnViYmxpbmcgc3Vycm9nYXRlXG5cdFx0XHRcdC8vIChmb2N1cyBvciBibHVyKSwgYXNzdW1lIHRoYXQgdGhlIHN1cnJvZ2F0ZSBhbHJlYWR5IHByb3BhZ2F0ZWQgZnJvbSB0cmlnZ2VyaW5nXG5cdFx0XHRcdC8vIHRoZSBuYXRpdmUgZXZlbnQgYW5kIHByZXZlbnQgdGhhdCBmcm9tIGhhcHBlbmluZyBhZ2FpbiBoZXJlLlxuXHRcdFx0XHQvLyBUaGlzIHRlY2huaWNhbGx5IGdldHMgdGhlIG9yZGVyaW5nIHdyb25nIHcuci50LiB0byBgLnRyaWdnZXIoKWAgKGluIHdoaWNoIHRoZVxuXHRcdFx0XHQvLyBidWJibGluZyBzdXJyb2dhdGUgcHJvcGFnYXRlcyAqYWZ0ZXIqIHRoZSBub24tYnViYmxpbmcgYmFzZSksIGJ1dCB0aGF0IHNlZW1zXG5cdFx0XHRcdC8vIGxlc3MgYmFkIHRoYW4gZHVwbGljYXRpb24uXG5cdFx0XHRcdH0gZWxzZSBpZiAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fSApLmRlbGVnYXRlVHlwZSApIHtcblx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgbmF0aXZlIGV2ZW50IHRyaWdnZXJlZCBhYm92ZSwgZXZlcnl0aGluZyBpcyBub3cgaW4gb3JkZXJcblx0XHRcdC8vIEZpcmUgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IHdpdGggdGhlIG9yaWdpbmFsIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggc2F2ZWQgKSB7XG5cblx0XHRcdFx0Ly8gLi4uYW5kIGNhcHR1cmUgdGhlIHJlc3VsdFxuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIGpRdWVyeS5ldmVudC50cmlnZ2VyKFxuXHRcdFx0XHRcdHNhdmVkWyAwIF0sXG5cdFx0XHRcdFx0c2F2ZWQuc2xpY2UoIDEgKSxcblx0XHRcdFx0XHR0aGlzXG5cdFx0XHRcdCkgKTtcblxuXHRcdFx0XHQvLyBBYm9ydCBoYW5kbGluZyBvZiB0aGUgbmF0aXZlIGV2ZW50IGJ5IGFsbCBqUXVlcnkgaGFuZGxlcnMgd2hpbGUgYWxsb3dpbmdcblx0XHRcdFx0Ly8gbmF0aXZlIGhhbmRsZXJzIG9uIHRoZSBzYW1lIGVsZW1lbnQgdG8gcnVuLiBPbiB0YXJnZXQsIHRoaXMgaXMgYWNoaWV2ZWRcblx0XHRcdFx0Ly8gYnkgc3RvcHBpbmcgaW1tZWRpYXRlIHByb3BhZ2F0aW9uIGp1c3Qgb24gdGhlIGpRdWVyeSBldmVudC4gSG93ZXZlcixcblx0XHRcdFx0Ly8gdGhlIG5hdGl2ZSBldmVudCBpcyByZS13cmFwcGVkIGJ5IGEgalF1ZXJ5IG9uZSBvbiBlYWNoIGxldmVsIG9mIHRoZVxuXHRcdFx0XHQvLyBwcm9wYWdhdGlvbiBzbyB0aGUgb25seSB3YXkgdG8gc3RvcCBpdCBmb3IgalF1ZXJ5IGlzIHRvIHN0b3AgaXQgZm9yXG5cdFx0XHRcdC8vIGV2ZXJ5b25lIHZpYSBuYXRpdmUgYHN0b3BQcm9wYWdhdGlvbigpYC4gVGhpcyBpcyBub3QgYSBwcm9ibGVtIGZvclxuXHRcdFx0XHQvLyBmb2N1cy9ibHVyIHdoaWNoIGRvbid0IGJ1YmJsZSwgYnV0IGl0IGRvZXMgYWxzbyBzdG9wIGNsaWNrIG9uIGNoZWNrYm94ZXNcblx0XHRcdFx0Ly8gYW5kIHJhZGlvcy4gV2UgYWNjZXB0IHRoaXMgbGltaXRhdGlvbi5cblx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdGV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICh0cmFjLTUwNCwgdHJhYy0xMzE0Mylcblx0XHR0aGlzLnRhcmdldCA9ICggc3JjLnRhcmdldCAmJiBzcmMudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkgP1xuXHRcdFx0c3JjLnRhcmdldC5wYXJlbnROb2RlIDpcblx0XHRcdHNyYy50YXJnZXQ7XG5cblx0XHR0aGlzLmN1cnJlbnRUYXJnZXQgPSBzcmMuY3VycmVudFRhcmdldDtcblx0XHR0aGlzLnJlbGF0ZWRUYXJnZXQgPSBzcmMucmVsYXRlZFRhcmdldDtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gSW5jbHVkZXMgYWxsIGNvbW1vbiBldmVudCBwcm9wcyBpbmNsdWRpbmcgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnQgc3BlY2lmaWMgcHJvcHNcbmpRdWVyeS5lYWNoKCB7XG5cdGFsdEtleTogdHJ1ZSxcblx0YnViYmxlczogdHJ1ZSxcblx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0Y2hhbmdlZFRvdWNoZXM6IHRydWUsXG5cdGN0cmxLZXk6IHRydWUsXG5cdGRldGFpbDogdHJ1ZSxcblx0ZXZlbnRQaGFzZTogdHJ1ZSxcblx0bWV0YUtleTogdHJ1ZSxcblx0cGFnZVg6IHRydWUsXG5cdHBhZ2VZOiB0cnVlLFxuXHRzaGlmdEtleTogdHJ1ZSxcblx0dmlldzogdHJ1ZSxcblx0XCJjaGFyXCI6IHRydWUsXG5cdGNvZGU6IHRydWUsXG5cdGNoYXJDb2RlOiB0cnVlLFxuXHRrZXk6IHRydWUsXG5cdGtleUNvZGU6IHRydWUsXG5cdGJ1dHRvbjogdHJ1ZSxcblx0YnV0dG9uczogdHJ1ZSxcblx0Y2xpZW50WDogdHJ1ZSxcblx0Y2xpZW50WTogdHJ1ZSxcblx0b2Zmc2V0WDogdHJ1ZSxcblx0b2Zmc2V0WTogdHJ1ZSxcblx0cG9pbnRlcklkOiB0cnVlLFxuXHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0c2NyZWVuWDogdHJ1ZSxcblx0c2NyZWVuWTogdHJ1ZSxcblx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0dG9FbGVtZW50OiB0cnVlLFxuXHR0b3VjaGVzOiB0cnVlLFxuXHR3aGljaDogdHJ1ZVxufSwgalF1ZXJ5LmV2ZW50LmFkZFByb3AgKTtcblxualF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIHR5cGUsIGRlbGVnYXRlVHlwZSApIHtcblxuXHRmdW5jdGlvbiBmb2N1c01hcHBlZEhhbmRsZXIoIG5hdGl2ZUV2ZW50ICkge1xuXHRcdGlmICggZG9jdW1lbnQuZG9jdW1lbnRNb2RlICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMStcblx0XHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBmb2N1c2luL2ZvY3Vzb3V0IGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHNcblx0XHRcdC8vIGZvY3VzL2JsdXIuIFRoaXMgaXMgYmVjYXVzZSB0aGUgZm9ybWVyIGFyZSBzeW5jaHJvbm91cyBpbiBJRSB3aGlsZSB0aGUgbGF0dGVyXG5cdFx0XHQvLyBhcmUgYXN5bmMuIEluIG90aGVyIGJyb3dzZXJzLCBhbGwgdGhvc2UgaGFuZGxlcnMgYXJlIGludm9rZWQgc3luY2hyb25vdXNseS5cblxuXHRcdFx0Ly8gYGhhbmRsZWAgZnJvbSBwcml2YXRlIGRhdGEgd291bGQgYWxyZWFkeSB3cmFwIHRoZSBldmVudCwgYnV0IHdlIG5lZWRcblx0XHRcdC8vIHRvIGNoYW5nZSB0aGUgYHR5cGVgIGhlcmUuXG5cdFx0XHR2YXIgaGFuZGxlID0gZGF0YVByaXYuZ2V0KCB0aGlzLCBcImhhbmRsZVwiICksXG5cdFx0XHRcdGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKTtcblx0XHRcdGV2ZW50LnR5cGUgPSBuYXRpdmVFdmVudC50eXBlID09PSBcImZvY3VzaW5cIiA/IFwiZm9jdXNcIiA6IFwiYmx1clwiO1xuXHRcdFx0ZXZlbnQuaXNTaW11bGF0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBGaXJzdCwgaGFuZGxlIGZvY3VzaW4vZm9jdXNvdXRcblx0XHRcdGhhbmRsZSggbmF0aXZlRXZlbnQgKTtcblxuXHRcdFx0Ly8gLi4udGhlbiwgaGFuZGxlIGZvY3VzL2JsdXJcblx0XHRcdC8vXG5cdFx0XHQvLyBmb2N1cy9ibHVyIGRvbid0IGJ1YmJsZSB3aGlsZSBmb2N1c2luL2ZvY3Vzb3V0IGRvOyBzaW11bGF0ZSB0aGUgZm9ybWVyIGJ5IG9ubHlcblx0XHRcdC8vIGludm9raW5nIHRoZSBoYW5kbGVyIGF0IHRoZSBsb3dlciBsZXZlbC5cblx0XHRcdGlmICggZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0ICkge1xuXG5cdFx0XHRcdC8vIFRoZSBzZXR1cCBwYXJ0IGNhbGxzIGBsZXZlcmFnZU5hdGl2ZWAsIHdoaWNoLCBpbiB0dXJuLCBjYWxsc1xuXHRcdFx0XHQvLyBgalF1ZXJ5LmV2ZW50LmFkZGAsIHNvIGV2ZW50IGhhbmRsZSB3aWxsIGFscmVhZHkgaGF2ZSBiZWVuIHNldFxuXHRcdFx0XHQvLyBieSB0aGlzIHBvaW50LlxuXHRcdFx0XHRoYW5kbGUoIGV2ZW50ICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gRm9yIG5vbi1JRSBicm93c2VycywgYXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudFxuXHRcdFx0Ly8gd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0LlxuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBkZWxlZ2F0ZVR5cGUsIG5hdGl2ZUV2ZW50LnRhcmdldCxcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKSApO1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gPSB7XG5cblx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdHZhciBhdHRhY2hlcztcblxuXHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJmb2N1c1wiLCAuLi4gKVxuXHRcdFx0Ly8gZGF0YVByaXYuc2V0KCB0aGlzLCBcImJsdXJcIiwgLi4uIClcblx0XHRcdGxldmVyYWdlTmF0aXZlKCB0aGlzLCB0eXBlLCB0cnVlICk7XG5cblx0XHRcdGlmICggZG9jdW1lbnQuZG9jdW1lbnRNb2RlICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMStcblx0XHRcdFx0Ly8gV2UgdXNlIHRoZSBzYW1lIG5hdGl2ZSBoYW5kbGVyIGZvciBmb2N1c2luICYgZm9jdXMgKGFuZCBmb2N1c291dCAmIGJsdXIpXG5cdFx0XHRcdC8vIHNvIHdlIG5lZWQgdG8gY29vcmRpbmF0ZSBzZXR1cCAmIHRlYXJkb3duIHBhcnRzIGJldHdlZW4gdGhvc2UgZXZlbnRzLlxuXHRcdFx0XHQvLyBVc2UgYGRlbGVnYXRlVHlwZWAgYXMgdGhlIGtleSBhcyBgdHlwZWAgaXMgYWxyZWFkeSB1c2VkIGJ5IGBsZXZlcmFnZU5hdGl2ZWAuXG5cdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuZ2V0KCB0aGlzLCBkZWxlZ2F0ZVR5cGUgKTtcblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0dGhpcy5hZGRFdmVudExpc3RlbmVyKCBkZWxlZ2F0ZVR5cGUsIGZvY3VzTWFwcGVkSGFuZGxlciApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgZGVsZWdhdGVUeXBlLCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSApO1xuXG5cdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGF0dGFjaGVzO1xuXG5cdFx0XHRpZiAoIGRvY3VtZW50LmRvY3VtZW50TW9kZSApIHtcblx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIGRlbGVnYXRlVHlwZSApIC0gMTtcblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0dGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCBkZWxlZ2F0ZVR5cGUsIGZvY3VzTWFwcGVkSGFuZGxlciApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggdGhpcywgZGVsZWdhdGVUeXBlICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBkZWxlZ2F0ZVR5cGUsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGluZGljYXRlIHN0YW5kYXJkIHRlYXJkb3duIHNob3VsZCBiZSBhcHBsaWVkXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gU3VwcHJlc3MgbmF0aXZlIGZvY3VzIG9yIGJsdXIgaWYgd2UncmUgY3VycmVudGx5IGluc2lkZVxuXHRcdC8vIGEgbGV2ZXJhZ2VkIG5hdGl2ZS1ldmVudCBzdGFja1xuXHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBldmVudC50YXJnZXQsIHR5cGUgKTtcblx0XHR9LFxuXG5cdFx0ZGVsZWdhdGVUeXBlOiBkZWxlZ2F0ZVR5cGVcblx0fTtcblxuXHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcblx0Ly8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuXHQvLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuXHQvL1xuXHQvLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcblx0Ly8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXG5cdC8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuXHQvLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuXHQvL1xuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErXG5cdC8vIFRvIHByZXNlcnZlIHJlbGF0aXZlIGZvY3VzaW4vZm9jdXMgJiBmb2N1c291dC9ibHVyIGV2ZW50IG9yZGVyIGd1YXJhbnRlZWQgb24gdGhlIDMueCBicmFuY2gsXG5cdC8vIGF0dGFjaCBhIHNpbmdsZSBoYW5kbGVyIGZvciBib3RoIGV2ZW50cyBpbiBJRS5cblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGRlbGVnYXRlVHlwZSBdID0ge1xuXHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSGFuZGxlOiByZWd1bGFyIG5vZGVzICh2aWEgYHRoaXMub3duZXJEb2N1bWVudGApLCB3aW5kb3dcblx0XHRcdC8vICh2aWEgYHRoaXMuZG9jdW1lbnRgKSAmIGRvY3VtZW50ICh2aWEgYHRoaXNgKS5cblx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcy5kb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRkYXRhSG9sZGVyID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlID8gdGhpcyA6IGRvYyxcblx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5nZXQoIGRhdGFIb2xkZXIsIGRlbGVnYXRlVHlwZSApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErXG5cdFx0XHQvLyBXZSB1c2UgdGhlIHNhbWUgbmF0aXZlIGhhbmRsZXIgZm9yIGZvY3VzaW4gJiBmb2N1cyAoYW5kIGZvY3Vzb3V0ICYgYmx1cilcblx0XHRcdC8vIHNvIHdlIG5lZWQgdG8gY29vcmRpbmF0ZSBzZXR1cCAmIHRlYXJkb3duIHBhcnRzIGJldHdlZW4gdGhvc2UgZXZlbnRzLlxuXHRcdFx0Ly8gVXNlIGBkZWxlZ2F0ZVR5cGVgIGFzIHRoZSBrZXkgYXMgYHR5cGVgIGlzIGFscmVhZHkgdXNlZCBieSBgbGV2ZXJhZ2VOYXRpdmVgLlxuXHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdGlmICggZG9jdW1lbnQuZG9jdW1lbnRNb2RlICkge1xuXHRcdFx0XHRcdHRoaXMuYWRkRXZlbnRMaXN0ZW5lciggZGVsZWdhdGVUeXBlLCBmb2N1c01hcHBlZEhhbmRsZXIgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZm9jdXNNYXBwZWRIYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGRhdGFQcml2LnNldCggZGF0YUhvbGRlciwgZGVsZWdhdGVUeXBlLCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHR9LFxuXHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcy5kb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRkYXRhSG9sZGVyID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlID8gdGhpcyA6IGRvYyxcblx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5nZXQoIGRhdGFIb2xkZXIsIGRlbGVnYXRlVHlwZSApIC0gMTtcblxuXHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdGlmICggZG9jdW1lbnQuZG9jdW1lbnRNb2RlICkge1xuXHRcdFx0XHRcdHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lciggZGVsZWdhdGVUeXBlLCBmb2N1c01hcHBlZEhhbmRsZXIgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgZm9jdXNNYXBwZWRIYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkYXRhSG9sZGVyLCBkZWxlZ2F0ZVR5cGUgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFQcml2LnNldCggZGF0YUhvbGRlciwgZGVsZWdhdGVUeXBlLCBhdHRhY2hlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn0gKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxMyBvbmx5XG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCFcXFtDREFUQVxcW3xcXF1cXF0+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBlbGVtICkuY2hpbGRyZW4oIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHRpZiAoICggZWxlbS50eXBlIHx8IFwiXCIgKS5zbGljZSggMCwgNSApID09PSBcInRydWUvXCIgKSB7XG5cdFx0ZWxlbS50eXBlID0gZWxlbS50eXBlLnNsaWNlKCA1ICk7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmdldCggc3JjICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRlc3QsIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcblxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdGFyZ3MgPSBmbGF0KCBhcmdzICk7XG5cblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggdmFsdWVJc0Z1bmN0aW9uIHx8XG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKHRyYWMtODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmUtZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgJiYgKCBub2RlLnR5cGUgfHwgXCJcIiApLnRvTG93ZXJDYXNlKCkgICE9PSBcIm1vZHVsZVwiICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICYmICFub2RlLm5vTW9kdWxlICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMsIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5vbmNlOiBub2RlLm5vbmNlIHx8IG5vZGUuZ2V0QXR0cmlidXRlKCBcIm5vbmNlXCIgKVxuXHRcdFx0XHRcdFx0XHRcdH0sIGRvYyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFVud3JhcCBhIENEQVRBIHNlY3Rpb24gY29udGFpbmluZyBzY3JpcHQgY29udGVudHMuIFRoaXMgc2hvdWxkbid0IGJlXG5cdFx0XHRcdFx0XHRcdC8vIG5lZWRlZCBhcyBpbiBYTUwgZG9jdW1lbnRzIHRoZXkncmUgYWxyZWFkeSBub3QgdmlzaWJsZSB3aGVuXG5cdFx0XHRcdFx0XHRcdC8vIGluc3BlY3RpbmcgZWxlbWVudCBjb250ZW50cyBhbmQgaW4gSFRNTCBkb2N1bWVudHMgdGhleSBoYXZlIG5vXG5cdFx0XHRcdFx0XHRcdC8vIG1lYW5pbmcgYnV0IHdlJ3JlIHByZXNlcnZpbmcgdGhhdCBsb2dpYyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgd2lsbCBiZSByZW1vdmVkIGNvbXBsZXRlbHkgaW4gNC4wLiBTZWUgZ2gtNDkwNC5cblx0XHRcdFx0XHRcdFx0RE9NRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSwgbm9kZSwgZG9jICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBpc0F0dGFjaGVkKCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbDtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJlxuXHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIFdlIGVzY2hldyBqUXVlcnkjZmluZCBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOlxuXHRcdFx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRyZXR1cm4gY2xvbmU7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdGlmICggYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0XHRpZiAoICggZGF0YSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSApICkge1xuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yICk7XG5cdH0sXG5cblx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSB0aGlzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xuXHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcblxuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuaHRtbFByZWZpbHRlciggdmFsdWUgKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2Rcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XG5cdFx0XHR9XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGlnbm9yZWQgPSBbXTtcblxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIG5vbi1pZ25vcmVkIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG5cblx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIHRoaXMsIGlnbm9yZWQgKSA8IDAgKSB7XG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XG5cdFx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gRm9yY2UgY2FsbGJhY2sgaW52b2NhdGlvblxuXHRcdH0sIGlnbm9yZWQgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCgge1xuXHRhcHBlbmRUbzogXCJhcHBlbmRcIixcblx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxuXHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuXHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGVsZW1zLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xuXHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSApO1xudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgcmN1c3RvbVByb3AgPSAvXi0tLztcblxuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHksIEZpcmVmb3ggPD0zMCAodHJhYy0xNTA5OCwgdHJhYy0xNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cbnZhciBzd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrICkge1xuXHR2YXIgcmV0LCBuYW1lLFxuXHRcdG9sZCA9IHt9O1xuXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHR9XG5cblx0cmV0ID0gY2FsbGJhY2suY2FsbCggZWxlbSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG52YXIgcmJveFN0eWxlID0gbmV3IFJlZ0V4cCggY3NzRXhwYW5kLmpvaW4oIFwifFwiICksIFwiaVwiICk7XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXG5cdC8vIEV4ZWN1dGluZyBib3RoIHBpeGVsUG9zaXRpb24gJiBib3hTaXppbmdSZWxpYWJsZSB0ZXN0cyByZXF1aXJlIG9ubHkgb25lIGxheW91dFxuXHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxuXHRmdW5jdGlvbiBjb21wdXRlU3R5bGVUZXN0cygpIHtcblxuXHRcdC8vIFRoaXMgaXMgYSBzaW5nbGV0b24sIHdlIG5lZWQgdG8gZXhlY3V0ZSBpdCBvbmx5IG9uY2Vcblx0XHRpZiAoICFkaXYgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHg7d2lkdGg6NjBweDtcIiArXG5cdFx0XHRcIm1hcmdpbi10b3A6MXB4O3BhZGRpbmc6MDtib3JkZXI6MFwiO1xuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdFwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztib3gtc2l6aW5nOmJvcmRlci1ib3g7b3ZlcmZsb3c6c2Nyb2xsO1wiICtcblx0XHRcdFwibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDtcIiArXG5cdFx0XHRcIndpZHRoOjYwJTt0b3A6MSVcIjtcblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYgKTtcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBGaXJlZm94IDw9MyAtIDQ0XG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5tYXJnaW5MZWZ0ICkgPT09IDEyO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgU2FmYXJpIDw9OS4xIC0gMTAuMSwgaU9TIDw9Ny4wIC0gOS4zXG5cdFx0Ly8gU29tZSBzdHlsZXMgY29tZSBiYWNrIHdpdGggcGVyY2VudGFnZSB2YWx1ZXMsIGV2ZW4gdGhvdWdoIHRoZXkgc2hvdWxkbid0XG5cdFx0ZGl2LnN0eWxlLnJpZ2h0ID0gXCI2MCVcIjtcblx0XHRwaXhlbEJveFN0eWxlc1ZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUucmlnaHQgKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHRcdC8vIERldGVjdCBtaXNyZXBvcnRpbmcgb2YgY29udGVudCBkaW1lbnNpb25zIGZvciBib3gtc2l6aW5nOmJvcmRlci1ib3ggZWxlbWVudHNcblx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUud2lkdGggKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHQvLyBEZXRlY3Qgb3ZlcmZsb3c6c2Nyb2xsIHNjcmV3aW5lc3MgKGdoLTM2OTkpXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9NjRcblx0XHQvLyBEb24ndCBnZXQgdHJpY2tlZCB3aGVuIHpvb20gYWZmZWN0cyBvZmZzZXRXaWR0aCAoZ2gtNDAyOSlcblx0XHRkaXYuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cdFx0c2Nyb2xsYm94U2l6ZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2Lm9mZnNldFdpZHRoIC8gMyApID09PSAxMjtcblxuXHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHQvLyBOdWxsaWZ5IHRoZSBkaXYgc28gaXQgd291bGRuJ3QgYmUgc3RvcmVkIGluIHRoZSBtZW1vcnkgYW5kXG5cdFx0Ly8gaXQgd2lsbCBhbHNvIGJlIGEgc2lnbiB0aGF0IGNoZWNrcyBhbHJlYWR5IHBlcmZvcm1lZFxuXHRcdGRpdiA9IG51bGw7XG5cdH1cblxuXHRmdW5jdGlvbiByb3VuZFBpeGVsTWVhc3VyZXMoIG1lYXN1cmUgKSB7XG5cdFx0cmV0dXJuIE1hdGgucm91bmQoIHBhcnNlRmxvYXQoIG1lYXN1cmUgKSApO1xuXHR9XG5cblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLCBzY3JvbGxib3hTaXplVmFsLCBwaXhlbEJveFN0eWxlc1ZhbCxcblx0XHRyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCwgcmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKHRyYWMtODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxCb3hTdHlsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbEJveFN0eWxlc1ZhbDtcblx0XHR9LFxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH0sXG5cdFx0c2Nyb2xsYm94U2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHNjcm9sbGJveFNpemVWYWw7XG5cdFx0fSxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHQvLyBJRS9FZGdlIG1pc3JlcG9ydCBgZ2V0Q29tcHV0ZWRTdHlsZWAgb2YgdGFibGUgcm93cyB3aXRoIHdpZHRoL2hlaWdodFxuXHRcdC8vIHNldCBpbiBDU1Mgd2hpbGUgYG9mZnNldCpgIHByb3BlcnRpZXMgcmVwb3J0IGNvcnJlY3QgdmFsdWVzLlxuXHRcdC8vIEJlaGF2aW9yIGluIElFIDkgaXMgbW9yZSBzdWJ0bGUgdGhhbiBpbiBuZXdlciB2ZXJzaW9ucyAmIGl0IHBhc3Nlc1xuXHRcdC8vIHNvbWUgdmVyc2lvbnMgb2YgdGhpcyB0ZXN0OyBtYWtlIHN1cmUgbm90IHRvIG1ha2UgaXQgcGFzcyB0aGVyZSFcblx0XHQvL1xuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNzArXG5cdFx0Ly8gT25seSBGaXJlZm94IGluY2x1ZGVzIGJvcmRlciB3aWR0aHNcblx0XHQvLyBpbiBjb21wdXRlZCBkaW1lbnNpb25zLiAoZ2gtNDUyOSlcblx0XHRyZWxpYWJsZVRyRGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdGFibGUsIHRyLCB0ckNoaWxkLCB0clN0eWxlO1xuXHRcdFx0aWYgKCByZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR0YWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidGFibGVcIiApO1xuXHRcdFx0XHR0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidHJcIiApO1xuXHRcdFx0XHR0ckNoaWxkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdFx0XHRcdHRhYmxlLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHg7Ym9yZGVyLWNvbGxhcHNlOnNlcGFyYXRlXCI7XG5cdFx0XHRcdHRyLnN0eWxlLmNzc1RleHQgPSBcImJveC1zaXppbmc6Y29udGVudC1ib3g7Ym9yZGVyOjFweCBzb2xpZFwiO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA4Nitcblx0XHRcdFx0Ly8gSGVpZ2h0IHNldCB0aHJvdWdoIGNzc1RleHQgZG9lcyBub3QgZ2V0IGFwcGxpZWQuXG5cdFx0XHRcdC8vIENvbXB1dGVkIGhlaWdodCB0aGVuIGNvbWVzIGJhY2sgYXMgMC5cblx0XHRcdFx0dHIuc3R5bGUuaGVpZ2h0ID0gXCIxcHhcIjtcblx0XHRcdFx0dHJDaGlsZC5zdHlsZS5oZWlnaHQgPSBcIjlweFwiO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgOCBDaHJvbWUgODYrXG5cdFx0XHRcdC8vIEluIG91ciBib2R5QmFja2dyb3VuZC5odG1sIGlmcmFtZSxcblx0XHRcdFx0Ly8gZGlzcGxheSBmb3IgYWxsIGRpdiBlbGVtZW50cyBpcyBzZXQgdG8gXCJpbmxpbmVcIixcblx0XHRcdFx0Ly8gd2hpY2ggY2F1c2VzIGEgcHJvYmxlbSBvbmx5IGluIEFuZHJvaWQgOCBDaHJvbWUgODYuXG5cdFx0XHRcdC8vIEVuc3VyaW5nIHRoZSBkaXYgaXMgYGRpc3BsYXk6IGJsb2NrYFxuXHRcdFx0XHQvLyBnZXRzIGFyb3VuZCB0aGlzIGlzc3VlLlxuXHRcdFx0XHR0ckNoaWxkLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG5cblx0XHRcdFx0ZG9jdW1lbnRFbGVtZW50XG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0YWJsZSApXG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0ciApXG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0ckNoaWxkICk7XG5cblx0XHRcdFx0dHJTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCB0ciApO1xuXHRcdFx0XHRyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCA9ICggcGFyc2VJbnQoIHRyU3R5bGUuaGVpZ2h0LCAxMCApICtcblx0XHRcdFx0XHRwYXJzZUludCggdHJTdHlsZS5ib3JkZXJUb3BXaWR0aCwgMTAgKSArXG5cdFx0XHRcdFx0cGFyc2VJbnQoIHRyU3R5bGUuYm9yZGVyQm90dG9tV2lkdGgsIDEwICkgKSA9PT0gdHIub2Zmc2V0SGVpZ2h0O1xuXG5cdFx0XHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggdGFibGUgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZWxpYWJsZVRyRGltZW5zaW9uc1ZhbDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApLFxuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA1MStcblx0XHQvLyBSZXRyaWV2aW5nIHN0eWxlIGJlZm9yZSBjb21wdXRlZCBzb21laG93XG5cdFx0Ly8gZml4ZXMgYW4gaXNzdWUgd2l0aCBnZXR0aW5nIHdyb25nIHZhbHVlc1xuXHRcdC8vIG9uIGRldGFjaGVkIGVsZW1lbnRzXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBuZWVkZWQgZm9yOlxuXHQvLyAgIC5jc3MoJ2ZpbHRlcicpIChJRSA5IG9ubHksIHRyYWMtMTI1MzcpXG5cdC8vICAgLmNzcygnLS1jdXN0b21Qcm9wZXJ0eSkgKGdoLTMxNDQpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcblx0XHQvLyBJRSBvbmx5IHN1cHBvcnRzIGBcImZsb2F0XCJgIGluIGBnZXRQcm9wZXJ0eVZhbHVlYDsgaW4gY29tcHV0ZWQgc3R5bGVzXG5cdFx0Ly8gaXQncyBvbmx5IGF2YWlsYWJsZSBhcyBgXCJjc3NGbG9hdFwiYC4gV2Ugbm8gbG9uZ2VyIG1vZGlmeSBwcm9wZXJ0aWVzXG5cdFx0Ly8gc2VudCB0byBgLmNzcygpYCBhcGFydCBmcm9tIGNhbWVsQ2FzaW5nLCBzbyB3ZSBuZWVkIHRvIGNoZWNrIGJvdGguXG5cdFx0Ly8gTm9ybWFsbHksIHRoaXMgd291bGQgY3JlYXRlIGRpZmZlcmVuY2UgaW4gYmVoYXZpb3I6IGlmXG5cdFx0Ly8gYGdldFByb3BlcnR5VmFsdWVgIHJldHVybnMgYW4gZW1wdHkgc3RyaW5nLCB0aGUgdmFsdWUgcmV0dXJuZWRcblx0XHQvLyBieSBgLmNzcygpYCB3b3VsZCBiZSBgdW5kZWZpbmVkYC4gVGhpcyBpcyB1c3VhbGx5IHRoZSBjYXNlIGZvclxuXHRcdC8vIGRpc2Nvbm5lY3RlZCBlbGVtZW50cy4gSG93ZXZlciwgaW4gSUUgZXZlbiBkaXNjb25uZWN0ZWQgZWxlbWVudHNcblx0XHQvLyB3aXRoIG5vIHN0eWxlcyByZXR1cm4gYFwibm9uZVwiYCBmb3IgYGdldFByb3BlcnR5VmFsdWUoIFwiZmxvYXRcIiApYFxuXHRcdHJldCA9IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdO1xuXG5cdFx0aWYgKCBpc0N1c3RvbVByb3AgJiYgcmV0ICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDEwNSssIENocm9tZSA8PTEwNStcblx0XHRcdC8vIFNwZWMgcmVxdWlyZXMgdHJpbW1pbmcgd2hpdGVzcGFjZSBmb3IgY3VzdG9tIHByb3BlcnRpZXMgKGdoLTQ5MjYpLlxuXHRcdFx0Ly8gRmlyZWZveCBvbmx5IHRyaW1zIGxlYWRpbmcgd2hpdGVzcGFjZS4gQ2hyb21lIGp1c3QgY29sbGFwc2VzXG5cdFx0XHQvLyBib3RoIGxlYWRpbmcgJiB0cmFpbGluZyB3aGl0ZXNwYWNlIHRvIGEgc2luZ2xlIHNwYWNlLlxuXHRcdFx0Ly9cblx0XHRcdC8vIEZhbGwgYmFjayB0byBgdW5kZWZpbmVkYCBpZiBlbXB0eSBzdHJpbmcgcmV0dXJuZWQuXG5cdFx0XHQvLyBUaGlzIGNvbGxhcHNlcyBhIG1pc3NpbmcgZGVmaW5pdGlvbiB3aXRoIHByb3BlcnR5IGRlZmluZWRcblx0XHRcdC8vIGFuZCBzZXQgdG8gYW4gZW1wdHkgc3RyaW5nIGJ1dCB0aGVyZSdzIG5vIHN0YW5kYXJkIEFQSVxuXHRcdFx0Ly8gYWxsb3dpbmcgdXMgdG8gZGlmZmVyZW50aWF0ZSB0aGVtIHdpdGhvdXQgYSBwZXJmb3JtYW5jZSBwZW5hbHR5XG5cdFx0XHQvLyBhbmQgcmV0dXJuaW5nIGB1bmRlZmluZWRgIGFsaWducyB3aXRoIG9sZGVyIGpRdWVyeS5cblx0XHRcdC8vXG5cdFx0XHQvLyBydHJpbUNTUyB0cmVhdHMgVSswMDBEIENBUlJJQUdFIFJFVFVSTiBhbmQgVSswMDBDIEZPUk0gRkVFRFxuXHRcdFx0Ly8gYXMgd2hpdGVzcGFjZSB3aGlsZSBDU1MgZG9lcyBub3QsIGJ1dCB0aGlzIGlzIG5vdCBhIHByb2JsZW1cblx0XHRcdC8vIGJlY2F1c2UgQ1NTIHByZXByb2Nlc3NpbmcgcmVwbGFjZXMgdGhlbSB3aXRoIFUrMDAwQSBMSU5FIEZFRURcblx0XHRcdC8vICh3aGljaCAqaXMqIENTUyB3aGl0ZXNwYWNlKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy1zeW50YXgtMy8jaW5wdXQtcHJlcHJvY2Vzc2luZ1xuXHRcdFx0cmV0ID0gcmV0LnJlcGxhY2UoIHJ0cmltQ1NTLCBcIiQxXCIgKSB8fCB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0aWYgKCByZXQgPT09IFwiXCIgJiYgIWlzQXR0YWNoZWQoIGVsZW0gKSApIHtcblx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcblx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzLlxuXHRcdC8vIFRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzpcblx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdGlmICggIXN1cHBvcnQucGl4ZWxCb3hTdHlsZXMoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcmJveFN0eWxlLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG5cdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXQgKyBcIlwiIDpcblx0XHRyZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcblxuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcblx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXG5cdFx0XHRyZXR1cm4gKCB0aGlzLmdldCA9IGhvb2tGbiApLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH07XG59XG5cblxudmFyIGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCIgXSxcblx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZSxcblx0dmVuZG9yUHJvcHMgPSB7fTtcblxuLy8gUmV0dXJuIGEgdmVuZG9yLXByZWZpeGVkIHByb3BlcnR5IG9yIHVuZGVmaW5lZFxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB7XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG59XG5cbi8vIFJldHVybiBhIHBvdGVudGlhbGx5LW1hcHBlZCBqUXVlcnkuY3NzUHJvcHMgb3IgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiBmaW5hbFByb3BOYW1lKCBuYW1lICkge1xuXHR2YXIgZmluYWwgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXSB8fCB2ZW5kb3JQcm9wc1sgbmFtZSBdO1xuXG5cdGlmICggZmluYWwgKSB7XG5cdFx0cmV0dXJuIGZpbmFsO1xuXHR9XG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cdHJldHVybiB2ZW5kb3JQcm9wc1sgbmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB8fCBuYW1lO1xufVxuXG5cbnZhclxuXG5cdC8vIFN3YXBwYWJsZSBpZiBkaXNwbGF5IGlzIG5vbmUgb3Igc3RhcnRzIHdpdGggdGFibGVcblx0Ly8gZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXG5cdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxuXHRyZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHR9O1xuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggX2VsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblxuXHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYm94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIGJveCwgaXNCb3JkZXJCb3gsIHN0eWxlcywgY29tcHV0ZWRWYWwgKSB7XG5cdHZhciBpID0gZGltZW5zaW9uID09PSBcIndpZHRoXCIgPyAxIDogMCxcblx0XHRleHRyYSA9IDAsXG5cdFx0ZGVsdGEgPSAwLFxuXHRcdG1hcmdpbkRlbHRhID0gMDtcblxuXHQvLyBBZGp1c3RtZW50IG1heSBub3QgYmUgbmVjZXNzYXJ5XG5cdGlmICggYm94ID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW5cblx0XHQvLyBDb3VudCBtYXJnaW4gZGVsdGEgc2VwYXJhdGVseSB0byBvbmx5IGFkZCBpdCBhZnRlciBzY3JvbGwgZ3V0dGVyIGFkanVzdG1lbnQuXG5cdFx0Ly8gVGhpcyBpcyBuZWVkZWQgdG8gbWFrZSBuZWdhdGl2ZSBtYXJnaW5zIHdvcmsgd2l0aCBgb3V0ZXJIZWlnaHQoIHRydWUgKWAgKGdoLTM5ODIpLlxuXHRcdGlmICggYm94ID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0bWFyZ2luRGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgYm94ICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBjb250ZW50LWJveCwgd2UncmUgc2Vla2luZyBcInBhZGRpbmdcIiBvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCJcblx0XHRpZiAoICFpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gQWRkIHBhZGRpbmdcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBGb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiLCBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEJ1dCBzdGlsbCBrZWVwIHRyYWNrIG9mIGl0IG90aGVyd2lzZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZXh0cmEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBib3JkZXItYm94IChjb250ZW50ICsgcGFkZGluZyArIGJvcmRlciksIHdlJ3JlIHNlZWtpbmcgXCJjb250ZW50XCIgb3Jcblx0XHQvLyBcInBhZGRpbmdcIiBvciBcIm1hcmdpblwiXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiLCBzdWJ0cmFjdCBwYWRkaW5nXG5cdFx0XHRpZiAoIGJveCA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIgb3IgXCJwYWRkaW5nXCIsIHN1YnRyYWN0IGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWNjb3VudCBmb3IgcG9zaXRpdmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlciB3aGVuIHJlcXVlc3RlZCBieSBwcm92aWRpbmcgY29tcHV0ZWRWYWxcblx0aWYgKCAhaXNCb3JkZXJCb3ggJiYgY29tcHV0ZWRWYWwgPj0gMCApIHtcblxuXHRcdC8vIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyBhIHJvdW5kZWQgc3VtIG9mIGNvbnRlbnQsIHBhZGRpbmcsIHNjcm9sbCBndXR0ZXIsIGFuZCBib3JkZXJcblx0XHQvLyBBc3N1bWluZyBpbnRlZ2VyIHNjcm9sbCBndXR0ZXIsIHN1YnRyYWN0IHRoZSByZXN0IGFuZCByb3VuZCBkb3duXG5cdFx0ZGVsdGEgKz0gTWF0aC5tYXgoIDAsIE1hdGguY2VpbChcblx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRjb21wdXRlZFZhbCAtXG5cdFx0XHRkZWx0YSAtXG5cdFx0XHRleHRyYSAtXG5cdFx0XHQwLjVcblxuXHRcdC8vIElmIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyB1bmtub3duLCB0aGVuIHdlIGNhbid0IGRldGVybWluZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyXG5cdFx0Ly8gVXNlIGFuIGV4cGxpY2l0IHplcm8gdG8gYXZvaWQgTmFOIChnaC0zOTY0KVxuXHRcdCkgKSB8fCAwO1xuXHR9XG5cblx0cmV0dXJuIGRlbHRhICsgbWFyZ2luRGVsdGE7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBjb21wdXRlZCBzdHlsZVxuXHR2YXIgc3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cblx0XHQvLyBUbyBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LCBvbmx5IGZldGNoIGJveFNpemluZyBpZiB3ZSBuZWVkIGl0IChnaC00MzIyKS5cblx0XHQvLyBGYWtlIGNvbnRlbnQtYm94IHVudGlsIHdlIGtub3cgaXQncyBuZWVkZWQgdG8ga25vdyB0aGUgdHJ1ZSB2YWx1ZS5cblx0XHRib3hTaXppbmdOZWVkZWQgPSAhc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IGV4dHJhLFxuXHRcdGlzQm9yZGVyQm94ID0gYm94U2l6aW5nTmVlZGVkICYmXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCxcblxuXHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgZGltZW5zaW9uLCBzdHlsZXMgKSxcblx0XHRvZmZzZXRQcm9wID0gXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKTtcblxuXHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0Ly8gUmV0dXJuIGEgY29uZm91bmRpbmcgbm9uLXBpeGVsIHZhbHVlIG9yIGZlaWduIGlnbm9yYW5jZSwgYXMgYXBwcm9wcmlhdGUuXG5cdGlmICggcm51bW5vbnB4LnRlc3QoIHZhbCApICkge1xuXHRcdGlmICggIWV4dHJhICkge1xuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9XG5cdFx0dmFsID0gXCJhdXRvXCI7XG5cdH1cblxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIFVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIHdoZW4gYm94IHNpemluZyBpcyB1bnJlbGlhYmxlLlxuXHQvLyBJbiB0aG9zZSBjYXNlcywgdGhlIGNvbXB1dGVkIHZhbHVlIGNhbiBiZSB0cnVzdGVkIHRvIGJlIGJvcmRlci1ib3guXG5cdGlmICggKCAhc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpICYmIGlzQm9yZGVyQm94IHx8XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMCAtIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdC8vIElFL0VkZ2UgbWlzcmVwb3J0IGBnZXRDb21wdXRlZFN0eWxlYCBvZiB0YWJsZSByb3dzIHdpdGggd2lkdGgvaGVpZ2h0XG5cdFx0Ly8gc2V0IGluIENTUyB3aGlsZSBgb2Zmc2V0KmAgcHJvcGVydGllcyByZXBvcnQgY29ycmVjdCB2YWx1ZXMuXG5cdFx0Ly8gSW50ZXJlc3RpbmdseSwgaW4gc29tZSBjYXNlcyBJRSA5IGRvZXNuJ3Qgc3VmZmVyIGZyb20gdGhpcyBpc3N1ZS5cblx0XHQhc3VwcG9ydC5yZWxpYWJsZVRyRGltZW5zaW9ucygpICYmIG5vZGVOYW1lKCBlbGVtLCBcInRyXCIgKSB8fFxuXG5cdFx0Ly8gRmFsbCBiYWNrIHRvIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCB3aGVuIHZhbHVlIGlzIFwiYXV0b1wiXG5cdFx0Ly8gVGhpcyBoYXBwZW5zIGZvciBpbmxpbmUgZWxlbWVudHMgd2l0aCBubyBleHBsaWNpdCBzZXR0aW5nIChnaC0zNTcxKVxuXHRcdHZhbCA9PT0gXCJhdXRvXCIgfHxcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgLSA0LjMgb25seVxuXHRcdC8vIEFsc28gdXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3IgbWlzcmVwb3J0ZWQgaW5saW5lIGRpbWVuc2lvbnMgKGdoLTM2MDIpXG5cdFx0IXBhcnNlRmxvYXQoIHZhbCApICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiaW5saW5lXCIgKSAmJlxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoZSBlbGVtZW50IGlzIHZpc2libGUgJiBjb25uZWN0ZWRcblx0XHRlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXG5cdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiO1xuXG5cdFx0Ly8gV2hlcmUgYXZhaWxhYmxlLCBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgYXBwcm94aW1hdGUgYm9yZGVyIGJveCBkaW1lbnNpb25zLlxuXHRcdC8vIFdoZXJlIG5vdCBhdmFpbGFibGUgKGUuZy4sIFNWRyksIGFzc3VtZSB1bnJlbGlhYmxlIGJveC1zaXppbmcgYW5kIGludGVycHJldCB0aGVcblx0XHQvLyByZXRyaWV2ZWQgdmFsdWUgYXMgYSBjb250ZW50IGJveCBkaW1lbnNpb24uXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IG9mZnNldFByb3AgaW4gZWxlbTtcblx0XHRpZiAoIHZhbHVlSXNCb3JkZXJCb3ggKSB7XG5cdFx0XHR2YWwgPSBlbGVtWyBvZmZzZXRQcm9wIF07XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIFwiXCIgYW5kIGF1dG9cblx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcblxuXHQvLyBBZGp1c3QgZm9yIHRoZSBlbGVtZW50J3MgYm94IG1vZGVsXG5cdHJldHVybiAoIHZhbCArXG5cdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0ZWxlbSxcblx0XHRcdGRpbWVuc2lvbixcblx0XHRcdGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0XHRzdHlsZXMsXG5cblx0XHRcdC8vIFByb3ZpZGUgdGhlIGN1cnJlbnQgY29tcHV0ZWQgc2l6ZSB0byByZXF1ZXN0IHNjcm9sbCBndXR0ZXIgY2FsY3VsYXRpb24gKGdoLTM1ODkpXG5cdFx0XHR2YWxcblx0XHQpXG5cdCkgKyBcInB4XCI7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdGNzc0hvb2tzOiB7XG5cdFx0b3BhY2l0eToge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdGNzc051bWJlcjoge1xuXHRcdGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiB0cnVlLFxuXHRcdGFzcGVjdFJhdGlvOiB0cnVlLFxuXHRcdGJvcmRlckltYWdlU2xpY2U6IHRydWUsXG5cdFx0Y29sdW1uQ291bnQ6IHRydWUsXG5cdFx0ZmxleEdyb3c6IHRydWUsXG5cdFx0ZmxleFNocmluazogdHJ1ZSxcblx0XHRmb250V2VpZ2h0OiB0cnVlLFxuXHRcdGdyaWRBcmVhOiB0cnVlLFxuXHRcdGdyaWRDb2x1bW46IHRydWUsXG5cdFx0Z3JpZENvbHVtbkVuZDogdHJ1ZSxcblx0XHRncmlkQ29sdW1uU3RhcnQ6IHRydWUsXG5cdFx0Z3JpZFJvdzogdHJ1ZSxcblx0XHRncmlkUm93RW5kOiB0cnVlLFxuXHRcdGdyaWRSb3dTdGFydDogdHJ1ZSxcblx0XHRsaW5lSGVpZ2h0OiB0cnVlLFxuXHRcdG9wYWNpdHk6IHRydWUsXG5cdFx0b3JkZXI6IHRydWUsXG5cdFx0b3JwaGFuczogdHJ1ZSxcblx0XHRzY2FsZTogdHJ1ZSxcblx0XHR3aWRvd3M6IHRydWUsXG5cdFx0ekluZGV4OiB0cnVlLFxuXHRcdHpvb206IHRydWUsXG5cblx0XHQvLyBTVkctcmVsYXRlZFxuXHRcdGZpbGxPcGFjaXR5OiB0cnVlLFxuXHRcdGZsb29kT3BhY2l0eTogdHJ1ZSxcblx0XHRzdG9wT3BhY2l0eTogdHJ1ZSxcblx0XHRzdHJva2VNaXRlcmxpbWl0OiB0cnVlLFxuXHRcdHN0cm9rZU9wYWNpdHk6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHt9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gcXVlcnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKHRyYWMtNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnIHRyYWMtOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICh0cmFjLTcxMTYpXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCB0aGUgdW5pdCAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0Ly8gVGhlIGlzQ3VzdG9tUHJvcCBjaGVjayBjYW4gYmUgcmVtb3ZlZCBpbiBqUXVlcnkgNC4wIHdoZW4gd2Ugb25seSBhdXRvLWFwcGVuZFxuXHRcdFx0Ly8gXCJweFwiIHRvIGEgZmV3IGhhcmRjb2RlZCB2YWx1ZXMuXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgJiYgIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0dmFsdWUgKz0gcmV0ICYmIHJldFsgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIGlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0XHRzdHlsZS5zZXRQcm9wZXJ0eSggbmFtZSwgdmFsdWUgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggX2ksIGRpbWVuc2lvbiApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBkaW1lbnNpb24gXSA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrXG5cdFx0XHRcdFx0Ly8gVGFibGUgY29sdW1ucyBpbiBTYWZhcmkgaGF2ZSBub24temVybyBvZmZzZXRXaWR0aCAmIHplcm9cblx0XHRcdFx0XHQvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCB1bmxlc3MgZGlzcGxheSBpcyBjaGFuZ2VkLlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdFx0XHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGEgZGlzY29ubmVjdGVkIG5vZGVcblx0XHRcdFx0XHQvLyBpbiBJRSB0aHJvd3MgYW4gZXJyb3IuXG5cdFx0XHRcdFx0KCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCB8fCAhZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCApID9cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdFx0XHQvLyBPbmx5IHJlYWQgc3R5bGVzLnBvc2l0aW9uIGlmIHRoZSB0ZXN0IGhhcyBhIGNoYW5jZSB0byBmYWlsXG5cdFx0XHRcdC8vIHRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3cuXG5cdFx0XHRcdHNjcm9sbGJveFNpemVCdWdneSA9ICFzdXBwb3J0LnNjcm9sbGJveFNpemUoKSAmJlxuXHRcdFx0XHRcdHN0eWxlcy5wb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiLFxuXG5cdFx0XHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTM5OTEpXG5cdFx0XHRcdGJveFNpemluZ05lZWRlZCA9IHNjcm9sbGJveFNpemVCdWdneSB8fCBleHRyYSxcblx0XHRcdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhID9cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0XHRpc0JvcmRlckJveCxcblx0XHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHRcdCkgOlxuXHRcdFx0XHRcdDA7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHVucmVsaWFibGUgYm9yZGVyLWJveCBkaW1lbnNpb25zIGJ5IGNvbXBhcmluZyBvZmZzZXQqIHRvIGNvbXB1dGVkIGFuZFxuXHRcdFx0Ly8gZmFraW5nIGEgY29udGVudC1ib3ggdG8gZ2V0IGJvcmRlciBhbmQgcGFkZGluZyAoZ2gtMzY5OSlcblx0XHRcdGlmICggaXNCb3JkZXJCb3ggJiYgc2Nyb2xsYm94U2l6ZUJ1Z2d5ICkge1xuXHRcdFx0XHRzdWJ0cmFjdCAtPSBNYXRoLmNlaWwoXG5cdFx0XHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdFx0XHRwYXJzZUZsb2F0KCBzdHlsZXNbIGRpbWVuc2lvbiBdICkgLVxuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBcImJvcmRlclwiLCBmYWxzZSwgc3R5bGVzICkgLVxuXHRcdFx0XHRcdDAuNVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIGRpbWVuc2lvbiBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgZGltZW5zaW9uICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0KSArIFwicHhcIjtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKCB7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggcHJlZml4ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fVxufSApO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0O1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgIT09IDEgfHxcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gfHxcblx0XHRcdFx0XHR0d2Vlbi5lbGVtLnN0eWxlWyBmaW5hbFByb3BOYW1lKCB0d2Vlbi5wcm9wICkgXSAhPSBudWxsICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH0sXG5cdF9kZWZhdWx0OiBcInN3aW5nXCJcbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIGNvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCBpblByb2dyZXNzLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cbmZ1bmN0aW9uIHNjaGVkdWxlKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0aWYgKCBkb2N1bWVudC5oaWRkZW4gPT09IGZhbHNlICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKSB7XG5cdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBzY2hlZHVsZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dCggc2NoZWR1bGUsIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHRcdH1cblxuXHRcdGpRdWVyeS5meC50aWNrKCk7XG5cdH1cbn1cblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSApO1xuXHRyZXR1cm4gKCBmeE5vdyA9IERhdGUubm93KCkgKTtcbn1cblxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdHZhciB3aGljaCxcblx0XHRpID0gMCxcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XG5cblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkge1xuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XG5cdFx0YXR0cnNbIFwibWFyZ2luXCIgKyB3aGljaCBdID0gYXR0cnNbIFwicGFkZGluZ1wiICsgd2hpY2ggXSA9IHR5cGU7XG5cdH1cblxuXHRpZiAoIGluY2x1ZGVXaWR0aCApIHtcblx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xuXHR9XG5cblx0cmV0dXJuIGF0dHJzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcblx0dmFyIHR3ZWVuLFxuXHRcdGNvbGxlY3Rpb24gPSAoIEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCBBbmltYXRpb24udHdlZW5lcnNbIFwiKlwiIF0gKSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCAoIHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkgKSApIHtcblxuXHRcdFx0Ly8gV2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCBob29rcywgb2xkZmlyZSwgcHJvcFR3ZWVuLCByZXN0b3JlRGlzcGxheSwgZGlzcGxheSxcblx0XHRpc0JveCA9IFwid2lkdGhcIiBpbiBwcm9wcyB8fCBcImhlaWdodFwiIGluIHByb3BzLFxuXHRcdGFuaW0gPSB0aGlzLFxuXHRcdG9yaWcgPSB7fSxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSxcblx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG5cdC8vIFF1ZXVlLXNraXBwaW5nIGFuaW1hdGlvbnMgaGlqYWNrIHRoZSBmeCBob29rc1xuXHRpZiAoICFvcHRzLnF1ZXVlICkge1xuXHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XG5cdFx0XHRob29rcy51bnF1ZXVlZCA9IDA7XG5cdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XG5cdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRob29rcy51bnF1ZXVlZCsrO1xuXG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xuXHRcdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xuXHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBEZXRlY3Qgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG5cdFx0aWYgKCByZnh0eXBlcy50ZXN0KCB2YWx1ZSApICkge1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblxuXHRcdFx0XHQvLyBQcmV0ZW5kIHRvIGJlIGhpZGRlbiBpZiB0aGlzIGlzIGEgXCJzaG93XCIgYW5kXG5cdFx0XHRcdC8vIHRoZXJlIGlzIHN0aWxsIGRhdGEgZnJvbSBhIHN0b3BwZWQgc2hvdy9oaWRlXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xuXG5cdFx0XHRcdC8vIElnbm9yZSBhbGwgb3RoZXIgbm8tb3Agc2hvdy9oaWRlIGRhdGFcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBCYWlsIG91dCBpZiB0aGlzIGlzIGEgbm8tb3AgbGlrZSAuaGlkZSgpLmhpZGUoKVxuXHRwcm9wVHdlZW4gPSAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3BzICk7XG5cdGlmICggIXByb3BUd2VlbiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlc3RyaWN0IFwib3ZlcmZsb3dcIiBhbmQgXCJkaXNwbGF5XCIgc3R5bGVzIGR1cmluZyBib3ggYW5pbWF0aW9uc1xuXHRpZiAoIGlzQm94ICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRSBkb2VzIG5vdCBpbmZlciB0aGUgc2hvcnRoYW5kXG5cdFx0Ly8gZnJvbSBpZGVudGljYWxseS12YWx1ZWQgb3ZlcmZsb3dYIGFuZCBvdmVyZmxvd1kgYW5kIEVkZ2UganVzdCBtaXJyb3JzXG5cdFx0Ly8gdGhlIG92ZXJmbG93WCB2YWx1ZSB0aGVyZS5cblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcblxuXHRcdC8vIElkZW50aWZ5IGEgZGlzcGxheSB0eXBlLCBwcmVmZXJyaW5nIG9sZCBzaG93L2hpZGUgZGF0YSBvdmVyIHRoZSBDU1MgY2FzY2FkZVxuXHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVNob3cgJiYgZGF0YVNob3cuZGlzcGxheTtcblx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHR9XG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgKSB7XG5cdFx0XHRcdGRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gR2V0IG5vbmVtcHR5IHZhbHVlKHMpIGJ5IHRlbXBvcmFyaWx5IGZvcmNpbmcgdmlzaWJpbGl0eVxuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXkgfHwgcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBbmltYXRlIGlubGluZSBlbGVtZW50cyBhcyBpbmxpbmUtYmxvY2tcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwiaW5saW5lXCIgfHwgZGlzcGxheSA9PT0gXCJpbmxpbmUtYmxvY2tcIiAmJiByZXN0b3JlRGlzcGxheSAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XG5cblx0XHRcdFx0Ly8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZSBhdCB0aGUgZW5kIG9mIHB1cmUgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0XHRcdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdGRpc3BsYXkgPSBzdHlsZS5kaXNwbGF5O1xuXHRcdFx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/IFwiXCIgOiBkaXNwbGF5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEltcGxlbWVudCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRwcm9wVHdlZW4gPSBmYWxzZTtcblx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXG5cdFx0Ly8gR2VuZXJhbCBzaG93L2hpZGUgc2V0dXAgZm9yIHRoaXMgZWxlbWVudCBhbmltYXRpb25cblx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwgeyBkaXNwbGF5OiByZXN0b3JlRGlzcGxheSB9ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0b3JlIGhpZGRlbi92aXNpYmxlIGZvciB0b2dnbGUgc28gYC5zdG9wKCkudG9nZ2xlKClgIFwicmV2ZXJzZXNcIlxuXHRcdFx0aWYgKCB0b2dnbGUgKSB7XG5cdFx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNob3cgZWxlbWVudHMgYmVmb3JlIGFuaW1hdGluZyB0aGVtXG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdFx0Ly8gVGhlIGZpbmFsIHN0ZXAgb2YgYSBcImhpZGVcIiBhbmltYXRpb24gaXMgYWN0dWFsbHkgaGlkaW5nIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggIWhpZGRlbiApIHtcblx0XHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHQvLyBQZXItcHJvcGVydHkgc2V0dXBcblx0XHRwcm9wVHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0cHJvcFR3ZWVuLmVuZCA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0cHJvcFR3ZWVuLnN0YXJ0ID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBjYW1lbENhc2UoIGluZGV4ICk7XG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSApLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zIG9ubHlcblx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAodHJhYy0xMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xuXG5cdFx0XHQvLyBJZiB0aGVyZSdzIG1vcmUgdG8gZG8sIHlpZWxkXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyB3YXMgYW4gZW1wdHkgYW5pbWF0aW9uLCBzeW50aGVzaXplIGEgZmluYWwgcHJvZ3Jlc3Mgbm90aWZpY2F0aW9uXG5cdFx0XHRpZiAoICFsZW5ndGggKSB7XG5cdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVzb2x2ZSB0aGUgYW5pbWF0aW9uIGFuZCByZXBvcnQgaXRzIGNvbmNsdXNpb25cblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0cmVzdWx0LnN0b3AuYmluZCggcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKCB7XG5cdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0gRGF0ZS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIFJ1biB0aGUgdGltZXIgYW5kIHNhZmVseSByZW1vdmUgaXQgd2hlbiBkb25lIChhbGxvd2luZyBmb3IgZXh0ZXJuYWwgcmVtb3ZhbClcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRqUXVlcnkuZnguc3RhcnQoKTtcbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpblByb2dyZXNzID0gdHJ1ZTtcblx0c2NoZWR1bGUoKTtcbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGluUHJvZ3Jlc3MgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZSxcblx0XHRcdGxvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRsb3dlcmNhc2VOYW1lIDpcblx0XHRcdFx0bnVsbDtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IGhhbmRsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcbn0gKTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtWyBuYW1lIF07XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCAodHJhYy0xMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0aWYgKCB0YWJpbmRleCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQoIHRhYmluZGV4LCAxMCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiZcblx0XHRcdFx0XHRlbGVtLmhyZWZcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fVxufSApO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcbi8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuLy8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHJlc3BlY3Qgc2V0dGluZyBzZWxlY3RlZFxuLy8gb24gdGhlIG9wdGlvblxuLy8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcbi8vIHdoZW4gaW4gYW4gb3B0Z3JvdXBcbi8vIGVzbGludCBydWxlIFwibm8tdW51c2VkLWV4cHJlc3Npb25zXCIgaXMgZGlzYWJsZWQgZm9yIHRoaXMgY29kZVxuLy8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuXG5cblxuXHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZSBhY2NvcmRpbmcgdG8gSFRNTCBzcGVjXG5cdC8vIGh0dHBzOi8vaW5mcmEuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2UtYXNjaWktd2hpdGVzcGFjZVxuXHRmdW5jdGlvbiBzdHJpcEFuZENvbGxhcHNlKCB2YWx1ZSApIHtcblx0XHR2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XHRyZXR1cm4gdG9rZW5zLmpvaW4oIFwiIFwiICk7XG5cdH1cblxuXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VzVG9BcnJheSggdmFsdWUgKSB7XG5cdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdH1cblx0cmV0dXJuIFtdO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZXMsIGN1ciwgY3VyVmFsdWUsIGNsYXNzTmFtZSwgaSwgZmluYWxWYWx1ZTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NOYW1lcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc05hbWVzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGN1ciA9IHRoaXMubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgY2xhc3NOYW1lcy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkgXTtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhc3NOYW1lICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGFzc05hbWUgKyBcIiBcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZXMsIGN1ciwgY3VyVmFsdWUsIGNsYXNzTmFtZSwgaSwgZmluYWxWYWx1ZTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3NOYW1lcy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IHRoaXMubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgY2xhc3NOYW1lcy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGFzc05hbWUgKyBcIiBcIiApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXNzTmFtZSArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZXMsIGNsYXNzTmFtZSwgaSwgc2VsZixcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWUsXG5cdFx0XHRpc1ZhbGlkVmFsdWUgPSB0eXBlID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcblx0XHRcdFx0XHRzdGF0ZVZhbFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiBpc1ZhbGlkVmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRjbGFzc05hbWVzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNWYWxpZFZhbHVlICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGNsYXNzTmFtZXMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cblx0XHRcdFx0XHRcdFx0XCJcIiA6XG5cdFx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCB2YWx1ZUlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRpZiAoIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSBvbmx5XG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKHRyYWMtMTQ2ODYsIHRyYWMtMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdHN0cmlwQW5kQ29sbGFwc2UoIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0XHRpID0gbWF4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICh0cmFjLTI1NTEpXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XG5cdFx0XHRcdFx0XHRcdFx0IW5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cblxuXHRcdFx0XHRcdGlmICggb3B0aW9uLnNlbGVjdGVkID1cblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTFcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0geyBndWlkOiBEYXRlLm5vdygpIH07XG5cbnZhciBycXVlcnkgPSAoIC9cXD8vICk7XG5cblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbCwgcGFyc2VyRXJyb3JFbGVtO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdHBhcnNlckVycm9yRWxlbSA9IHhtbCAmJiB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApWyAwIF07XG5cdGlmICggIXhtbCB8fCBwYXJzZXJFcnJvckVsZW0gKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIChcblx0XHRcdHBhcnNlckVycm9yRWxlbSA/XG5cdFx0XHRcdGpRdWVyeS5tYXAoIHBhcnNlckVycm9yRWxlbS5jaGlsZE5vZGVzLCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsLnRleHRDb250ZW50O1xuXHRcdFx0XHR9ICkuam9pbiggXCJcXG5cIiApIDpcblx0XHRcdFx0ZGF0YVxuXHRcdCkgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXG5cdHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrID0gZnVuY3Rpb24oIGUgKSB7XG5cdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0fTtcblxualF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLCBsYXN0RWxlbWVudCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggXCIuXCIgKSA6IFtdO1xuXG5cdFx0Y3VyID0gbGFzdEVsZW1lbnQgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XG5cblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcblx0XHRldmVudC5ybmFtZXNwYWNlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAodHJhYy05OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAodHJhYy05NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGxhc3RFbGVtZW50ID0gY3VyO1xuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCBPYmplY3QuY3JlYXRlKCBudWxsICkgKVsgZXZlbnQudHlwZSBdICYmXG5cdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcblx0XHRcdFx0c3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlICkgJiZcblx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICh0cmFjLTYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdH1cblxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0gKTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbnZhclxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuXG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0YnVpbGRQYXJhbXMoXG5cdFx0XHRcdFx0cHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYgIT0gbnVsbCA/IGkgOiBcIlwiICkgKyBcIl1cIixcblx0XHRcdFx0XHR2LFxuXHRcdFx0XHRcdHRyYWRpdGlvbmFsLFxuXHRcdFx0XHRcdGFkZFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgdG9UeXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZU9yRnVuY3Rpb24gKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgdXNlIGl0cyByZXR1cm4gdmFsdWVcblx0XHRcdHZhciB2YWx1ZSA9IGlzRnVuY3Rpb24oIHZhbHVlT3JGdW5jdGlvbiApID9cblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uKCkgOlxuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb247XG5cblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgK1xuXHRcdFx0XHRlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHR9O1xuXG5cdGlmICggYSA9PSBudWxsICkge1xuXHRcdHJldHVybiBcIlwiO1xuXHR9XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9ICkubWFwKCBmdW5jdGlvbiggX2ksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9ICkuZ2V0KCk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cjIwID0gLyUyMC9nLFxuXHRyaGFzaCA9IC8jLiokLyxcblx0cmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vIHRyYWMtNzY1MywgdHJhYy04MTI1LCB0cmFjLTgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKHRyYWMtMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5vcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0fVxuXG5cdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgdHJhYy05ODg3XG5mdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcblx0dmFyIGtleSwgZGVlcCxcblx0XHRmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG5cblx0Zm9yICgga2V5IGluIHNyYyApIHtcblx0XHRpZiAoIHNyY1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8ICggZGVlcCA9IHt9ICkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0fVxuXHR9XG5cdGlmICggZGVlcCApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcblxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgcy50aHJvd3MgKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXRlOiBcInBhcnNlcmVycm9yXCIsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG5cdGFjdGl2ZTogMCxcblxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG5cdGxhc3RNb2RpZmllZDoge30sXG5cdGV0YWc6IHt9LFxuXG5cdGFqYXhTZXR0aW5nczoge1xuXHRcdHVybDogbG9jYXRpb24uaHJlZixcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGxvY2F0aW9uLnByb3RvY29sICksXG5cdFx0Z2xvYmFsOiB0cnVlLFxuXHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxuXHRcdGFzeW5jOiB0cnVlLFxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxuXHRcdFx0aHRtbDogL1xcYmh0bWwvLFxuXHRcdFx0anNvbjogL1xcYmpzb25cXGIvXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IEpTT04ucGFyc2UsXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHRyYW5zcG9ydCxcblxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcblxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblxuXHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXG5cdFx0XHR1cmxBbmNob3IsXG5cblx0XHRcdC8vIFJlcXVlc3Qgc3RhdGUgKGJlY29tZXMgZmFsc2UgdXBvbiBzZW5kIGFuZCB0cnVlIHVwb24gY29tcGxldGlvbilcblx0XHRcdGNvbXBsZXRlZCxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG5cdFx0XHRmaXJlR2xvYmFscyxcblxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblxuXHRcdFx0Ly8gdW5jYWNoZWQgcGFydCBvZiB0aGUgdXJsXG5cdFx0XHR1bmNhY2hlZCxcblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcblxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmXG5cdFx0XHRcdCggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XG5cdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSA9XG5cdFx0XHRcdFx0XHRcdFx0XHQoIHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSB8fCBbXSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5jb25jYXQoIG1hdGNoWyAyIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2guam9pbiggXCIsIFwiICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdID1cblx0XHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrcyBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKTtcblxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAodHJhYy0xMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBsb2NhdGlvbi5ocmVmICkgKyBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCB0cmFjLTEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9ICggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdFx0Ly8gSUUgdGhyb3dzIGV4Y2VwdGlvbiBvbiBhY2Nlc3NpbmcgdGhlIGhyZWYgcHJvcGVydHkgaWYgdXJsIGlzIG1hbGZvcm1lZCxcblx0XHRcdC8vIGUuZy4gaHR0cDovL2V4YW1wbGUuY29tOjgweC9cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gcy51cmw7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEgb25seVxuXHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XG5cdFx0XHRcdFx0dXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBVUkwsIGFzc3VtZSBpdCBpcyBjcm9zc0RvbWFpbixcblx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAodHJhYy0xNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgaGFzaCBzbyB3ZSBjYW4gcHV0IGl0IGJhY2tcblx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoIGNhY2hlVVJMLmxlbmd0aCApO1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSBhbmQgc2hvdWxkIGJlIHByb2Nlc3NlZCwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSAmJiAoIHMucHJvY2Vzc0RhdGEgfHwgdHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiApICkge1xuXHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xuXG5cdFx0XHRcdC8vIHRyYWMtOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvciB1cGRhdGUgYW50aS1jYWNoZSBwYXJhbSBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gY2FjaGVVUkwucmVwbGFjZSggcmFudGlDYWNoZSwgXCIkMVwiICk7XG5cdFx0XHRcdHVuY2FjaGVkID0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArICggbm9uY2UuZ3VpZCsrICkgK1xuXHRcdFx0XHRcdHVuY2FjaGVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG5cblx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHR9IGVsc2UgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxuXHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgKSB7XG5cdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZSggcjIwLCBcIitcIiApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBjb21wbGV0ZWQgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGNvbXBsZXRlRGVmZXJyZWQuYWRkKCBzLmNvbXBsZXRlICk7XG5cdFx0anFYSFIuZG9uZSggcy5zdWNjZXNzICk7XG5cdFx0anFYSFIuZmFpbCggcy5lcnJvciApO1xuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb21wbGV0ZWQgPSBmYWxzZTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBVc2UgYSBub29wIGNvbnZlcnRlciBmb3IgbWlzc2luZyBzY3JpcHQgYnV0IG5vdCBpZiBqc29ucFxuXHRcdFx0aWYgKCAhaXNTdWNjZXNzICYmXG5cdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBcInNjcmlwdFwiLCBzLmRhdGFUeXBlcyApID4gLTEgJiZcblx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIFwianNvblwiLCBzLmRhdGFUeXBlcyApIDwgMCApIHtcblx0XHRcdFx0cy5jb252ZXJ0ZXJzWyBcInRleHQgc2NyaXB0XCIgXSA9IGZ1bmN0aW9uKCkge307XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkxhc3QtTW9kaWZpZWRcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiZXRhZ1wiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIF9pLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0dmFyIGk7XG5cdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdGlmICggaS50b0xvd2VyQ2FzZSgpID09PSBcImNvbnRlbnQtdHlwZVwiICkge1xuXHRcdFx0cy5jb250ZW50VHlwZSA9IHMuaGVhZGVyc1sgaSBdIHx8IFwiXCI7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCwgb3B0aW9ucywgZG9jICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcblx0XHR1cmw6IHVybCxcblxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAodHJhYy0xMTI2NClcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGNhY2hlOiB0cnVlLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXG5cdFx0Ly8gT25seSBldmFsdWF0ZSB0aGUgcmVzcG9uc2UgaWYgaXQgaXMgc3VjY2Vzc2Z1bCAoZ2gtNDEyNilcblx0XHQvLyBkYXRhRmlsdGVyIGlzIG5vdCBpbnZva2VkIGZvciBmYWlsdXJlIHJlc3BvbnNlcywgc28gdXNpbmcgaXQgaW5zdGVhZFxuXHRcdC8vIG9mIHRoZSBkZWZhdWx0IGNvbnZlcnRlciBpcyBrbHVkZ3kgYnV0IGl0IHdvcmtzLlxuXHRcdGNvbnZlcnRlcnM6IHtcblx0XHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oKSB7fVxuXHRcdH0sXG5cdFx0ZGF0YUZpbHRlcjogZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHJlc3BvbnNlLCBvcHRpb25zLCBkb2MgKTtcblx0XHR9XG5cdH0gKTtcbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgd3JhcDtcblxuXHRcdGlmICggdGhpc1sgMCBdICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRcdGh0bWwgPSBodG1sLmNhbGwoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0d3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XG5cblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0d3JhcC5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIGh0bWxJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggaHRtbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBodG1sSXNGdW5jdGlvbiA/IGh0bWwuY2FsbCggdGhpcywgaSApIDogaHRtbCApO1xuXHRcdH0gKTtcblx0fSxcblxuXHR1bndyYXA6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR0aGlzLnBhcmVudCggc2VsZWN0b3IgKS5ub3QoIFwiYm9keVwiICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICFqUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUoIGVsZW0gKTtcbn07XG5qUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICEhKCBlbGVtLm9mZnNldFdpZHRoIHx8IGVsZW0ub2Zmc2V0SGVpZ2h0IHx8IGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKTtcbn07XG5cblxuXG5cbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxufTtcblxudmFyIHhoclN1Y2Nlc3NTdGF0dXMgPSB7XG5cblx0XHQvLyBGaWxlIHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIGNvZGUgMCwgYXNzdW1lIDIwMFxuXHRcdDA6IDIwMCxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0Ly8gdHJhYy0xNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdDEyMjM6IDIwNFxuXHR9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHR2YXIgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2s7XG5cblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKTtcblxuXHRcdFx0XHR4aHIub3Blbihcblx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXG5cdFx0XHRcdFx0b3B0aW9ucy51cmwsXG5cdFx0XHRcdFx0b3B0aW9ucy5hc3luYyxcblx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxuXHRcdFx0XHRcdG9wdGlvbnMucGFzc3dvcmRcblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XG5cdFx0XHRcdFx0aGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gZXJyb3JDYWxsYmFjayA9IHhoci5vbmxvYWQgPVxuXHRcdFx0XHRcdFx0XHRcdHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub250aW1lb3V0ID1cblx0XHRcdFx0XHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdC8vIGVycm9ycyBvbiBhbnkgcHJvcGVydHkgYWNjZXNzIHRoYXQgaXMgbm90IHJlYWR5U3RhdGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgdHJhYy04NjA1LCB0cmFjLTE0MjA3XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XHRcdFx0XHRcdFx0XHRcdHhoclN1Y2Nlc3NTdGF0dXNbIHhoci5zdGF0dXMgXSB8fCB4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJRTkgaGFzIG5vIFhIUjIgYnV0IHRocm93cyBvbiBiaW5hcnkgKHRyYWMtMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBGb3IgWEhSMiBub24tdGV4dCwgbGV0IHRoZSBjYWxsZXIgaGFuZGxlIGl0IChnaC0yNDk4KVxuXHRcdFx0XHRcdFx0XHRcdFx0KCB4aHIucmVzcG9uc2VUeXBlIHx8IFwidGV4dFwiICkgIT09IFwidGV4dFwiICB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHhoci5yZXNwb25zZVRleHQgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IGJpbmFyeTogeGhyLnJlc3BvbnNlIH0gOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IHRleHQ6IHhoci5yZXNwb25zZVRleHQgfSxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XG5cdFx0XHRcdGVycm9yQ2FsbGJhY2sgPSB4aHIub25lcnJvciA9IHhoci5vbnRpbWVvdXQgPSBjYWxsYmFjayggXCJlcnJvclwiICk7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0XHRcdC8vIFVzZSBvbnJlYWR5c3RhdGVjaGFuZ2UgdG8gcmVwbGFjZSBvbmFib3J0XG5cdFx0XHRcdC8vIHRvIGhhbmRsZSB1bmNhdWdodCBhYm9ydHNcblx0XHRcdFx0aWYgKCB4aHIub25hYm9ydCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHhoci5vbmFib3J0ID0gZXJyb3JDYWxsYmFjaztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIENoZWNrIHJlYWR5U3RhdGUgYmVmb3JlIHRpbWVvdXQgYXMgaXQgY2hhbmdlc1xuXHRcdFx0XHRcdFx0aWYgKCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBbGxvdyBvbmVycm9yIHRvIGJlIGNhbGxlZCBmaXJzdCxcblx0XHRcdFx0XHRcdFx0Ly8gYnV0IHRoYXQgd2lsbCBub3QgaGFuZGxlIGEgbmF0aXZlIGFib3J0XG5cdFx0XHRcdFx0XHRcdC8vIEFsc28sIHNhdmUgZXJyb3JDYWxsYmFjayB0byBhIHZhcmlhYmxlXG5cdFx0XHRcdFx0XHRcdC8vIGFzIHhoci5vbmVycm9yIGNhbm5vdCBiZSBhY2Nlc3NlZFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yQ2FsbGJhY2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrKCBcImFib3J0XCIgKTtcblxuXHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdCAodGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uKVxuXHRcdFx0XHRcdHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHQvLyB0cmFjLTE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBQcmV2ZW50IGF1dG8tZXhlY3V0aW9uIG9mIHNjcmlwdHMgd2hlbiBubyBleHBsaWNpdCBkYXRhVHlwZSB3YXMgcHJvdmlkZWQgKFNlZSBnaC0yNDMyKVxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy5jb250ZW50cy5zY3JpcHQgPSBmYWxzZTtcblx0fVxufSApO1xuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSApO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIG9yIGZvcmNlZC1ieS1hdHRycyByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gfHwgcy5zY3JpcHRBdHRycyApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApXG5cdFx0XHRcdFx0LmF0dHIoIHMuc2NyaXB0QXR0cnMgfHwge30gKVxuXHRcdFx0XHRcdC5wcm9wKCB7IGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCwgc3JjOiBzLnVybCB9IClcblx0XHRcdFx0XHQub24oIFwibG9hZCBlcnJvclwiLCBjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xuXHRcdFx0fSxcblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG5cbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UuZ3VpZCsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0gKTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCAmJlxuXHRcdFx0XHRyanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcblx0XHQpO1xuXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XG5cblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0gaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcblx0XHRcdGlmICggb3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0fSApO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gU3VwcG9ydDogU2FmYXJpIDggb25seVxuLy8gSW4gU2FmYXJpIDggZG9jdW1lbnRzIGNyZWF0ZWQgdmlhIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudFxuLy8gY29sbGFwc2Ugc2libGluZyBmb3JtczogdGhlIHNlY29uZCBvbmUgYmVjb21lcyBhIGNoaWxkIG9mIHRoZSBmaXJzdCBvbmUuXG4vLyBCZWNhdXNlIG9mIHRoYXQsIHRoaXMgc2VjdXJpdHkgbWVhc3VyZSBoYXMgdG8gYmUgZGlzYWJsZWQgaW4gU2FmYXJpIDguXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM3MzM3XG5zdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9ICggZnVuY3Rpb24oKSB7XG5cdHZhciBib2R5ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICkuYm9keTtcblx0Ym9keS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCI7XG5cdHJldHVybiBib2R5LmNoaWxkTm9kZXMubGVuZ3RoID09PSAyO1xufSApKCk7XG5cblxuLy8gQXJndW1lbnQgXCJkYXRhXCIgc2hvdWxkIGJlIHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xuXHRcdGNvbnRleHQgPSBmYWxzZTtcblx0fVxuXG5cdHZhciBiYXNlLCBwYXJzZWQsIHNjcmlwdHM7XG5cblx0aWYgKCAhY29udGV4dCApIHtcblxuXHRcdC8vIFN0b3Agc2NyaXB0cyBvciBpbmxpbmUgZXZlbnQgaGFuZGxlcnMgZnJvbSBiZWluZyBleGVjdXRlZCBpbW1lZGlhdGVseVxuXHRcdC8vIGJ5IHVzaW5nIGRvY3VtZW50LmltcGxlbWVudGF0aW9uXG5cdFx0aWYgKCBzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCApIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKTtcblxuXHRcdFx0Ly8gU2V0IHRoZSBiYXNlIGhyZWYgZm9yIHRoZSBjcmVhdGVkIGRvY3VtZW50XG5cdFx0XHQvLyBzbyBhbnkgcGFyc2VkIGVsZW1lbnRzIHdpdGggVVJMc1xuXHRcdFx0Ly8gYXJlIGJhc2VkIG9uIHRoZSBkb2N1bWVudCdzIFVSTCAoZ2gtMjk2NSlcblx0XHRcdGJhc2UgPSBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiYmFzZVwiICk7XG5cdFx0XHRiYXNlLmhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuXHRcdFx0Y29udGV4dC5oZWFkLmFwcGVuZENoaWxkKCBiYXNlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudDtcblx0XHR9XG5cdH1cblxuXHRwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKTtcblx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcblxuXHQvLyBTaW5nbGUgdGFnXG5cdGlmICggcGFyc2VkICkge1xuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0gYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZiggXCIgXCIgKTtcblxuXHRpZiAoIG9mZiA+IC0xICkge1xuXHRcdHNlbGVjdG9yID0gc3RyaXBBbmRDb2xsYXBzZSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBpc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3Rcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0alF1ZXJ5LmFqYXgoIHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBJZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkLlxuXHRcdFx0Ly8gTWFrZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGV4cGxpY2l0IHNpbmNlXG5cdFx0XHQvLyB1c2VyIGNhbiBvdmVycmlkZSBpdCB0aHJvdWdoIGFqYXhTZXR1cCBtZXRob2Rcblx0XHRcdHR5cGU6IHR5cGUgfHwgXCJHRVRcIixcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdGRhdGE6IHBhcmFtc1xuXHRcdH0gKS5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeSggXCI8ZGl2PlwiICkuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXG5cdFx0Ly8gSWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImRhdGFcIiwgXCJzdGF0dXNcIiwgXCJqcVhIUlwiXG5cdFx0Ly8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxuXHRcdC8vIElmIGl0IGZhaWxzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJqcVhIUlwiLCBcInN0YXR1c1wiLCBcImVycm9yXCJcblx0XHR9ICkuYWx3YXlzKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNhbGxiYWNrLmFwcGx5KCB0aGlzLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9ICkubGVuZ3RoO1xufTtcblxuXG5cblxualF1ZXJ5Lm9mZnNldCA9IHtcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdHByb3BzID0ge307XG5cblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG5cblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgalF1ZXJ5LmV4dGVuZCgge30sIGN1ck9mZnNldCApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0Ly8gb2Zmc2V0KCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgYm9yZGVyIGJveCB0byB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBQcmVzZXJ2ZSBjaGFpbmluZyBmb3Igc2V0dGVyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgcmVjdCwgd2luLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHplcm9zIGZvciBkaXNjb25uZWN0ZWQgYW5kIGhpZGRlbiAoZGlzcGxheTogbm9uZSkgZWxlbWVudHMgKGdoLTIzMTApXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxuXHRcdC8vIGRpc2Nvbm5lY3RlZCBub2RlIGluIElFIHRocm93cyBhbiBlcnJvclxuXHRcdGlmICggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0XHQvLyBHZXQgZG9jdW1lbnQtcmVsYXRpdmUgcG9zaXRpb24gYnkgYWRkaW5nIHZpZXdwb3J0IHNjcm9sbCB0byB2aWV3cG9ydC1yZWxhdGl2ZSBnQkNSXG5cdFx0cmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0d2luID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0LFxuXHRcdFx0bGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0XG5cdFx0fTtcblx0fSxcblxuXHQvLyBwb3NpdGlvbigpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIG1hcmdpbiBib3ggdG8gaXRzIG9mZnNldCBwYXJlbnQncyBwYWRkaW5nIGJveFxuXHQvLyBUaGlzIGNvcnJlc3BvbmRzIHRvIHRoZSBiZWhhdmlvciBvZiBDU1MgYWJzb2x1dGUgcG9zaXRpb25pbmdcblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsIGRvYyxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdFx0Ly8gcG9zaXRpb246Zml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHRoZSB2aWV3cG9ydCwgd2hpY2ggaXRzZWxmIGFsd2F5cyBoYXMgemVybyBvZmZzZXRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cblx0XHRcdC8vIEFzc3VtZSBwb3NpdGlvbjpmaXhlZCBpbXBsaWVzIGF2YWlsYWJpbGl0eSBvZiBnZXRCb3VuZGluZ0NsaWVudFJlY3Rcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdGhlICpyZWFsKiBvZmZzZXQgcGFyZW50LCB3aGljaCBjYW4gYmUgdGhlIGRvY3VtZW50IG9yIGl0cyByb290IGVsZW1lbnRcblx0XHRcdC8vIHdoZW4gYSBzdGF0aWNhbGx5IHBvc2l0aW9uZWQgZWxlbWVudCBpcyBpZGVudGlmaWVkXG5cdFx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSBlbGVtLm9mZnNldFBhcmVudCB8fCBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiZcblx0XHRcdFx0KCBvZmZzZXRQYXJlbnQgPT09IGRvYy5ib2R5IHx8IG9mZnNldFBhcmVudCA9PT0gZG9jLmRvY3VtZW50RWxlbWVudCApICYmXG5cdFx0XHRcdGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQgIT09IGVsZW0gJiYgb2Zmc2V0UGFyZW50Lm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIEluY29ycG9yYXRlIGJvcmRlcnMgaW50byBpdHMgb2Zmc2V0LCBzaW5jZSB0aGV5IGFyZSBvdXRzaWRlIGl0cyBjb250ZW50IG9yaWdpblxuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBqUXVlcnkoIG9mZnNldFBhcmVudCApLm9mZnNldCgpO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQudG9wICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC5sZWZ0ICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0Ly8gMSkgRm9yIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgaWZyYW1lIHdpdGhvdXQgb2Zmc2V0UGFyZW50LCB0aGlzIG1ldGhvZCB3aWxsIHJldHVyblxuXHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcblx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHQvLyAzKSBGb3IgYm9keSBvciBodG1sIGVsZW1lbnQsIGkuZS4gaW4gY2FzZSBvZiB0aGUgaHRtbCBub2RlIC0gaXQgd2lsbCByZXR1cm4gaXRzZWxmXG5cdC8vXG5cdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHQvLyBhbmQgbWlnaHQgYmUgY29uc2lkZXJlZCBhcyBtb3JlIHByZWZlcmFibGUgcmVzdWx0cy5cblx0Ly9cblx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXG5cdFx0XHQvLyBDb2FsZXNjZSBkb2N1bWVudHMgYW5kIHdpbmRvd3Ncblx0XHRcdHZhciB3aW47XG5cdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW07XG5cdFx0XHR9IGVsc2UgaWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtLmRlZmF1bHRWaWV3O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luLnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldFxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9O1xufSApO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmkgPD03IC0gOS4xLCBDaHJvbWUgPD0zNyAtIDQ5XG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBCbGluayBidWc6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTU4OTM0N1xuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggX2ksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblxuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0gKTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHtcblx0XHRwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLFxuXHRcdGNvbnRlbnQ6IHR5cGUsXG5cdFx0XCJcIjogXCJvdXRlclwiICsgbmFtZVxuXHR9LCBmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwiYWpheFN0YXJ0XCIsXG5cdFwiYWpheFN0b3BcIixcblx0XCJhamF4Q29tcGxldGVcIixcblx0XCJhamF4RXJyb3JcIixcblx0XCJhamF4U3VjY2Vzc1wiLFxuXHRcImFqYXhTZW5kXCJcbl0sIGZ1bmN0aW9uKCBfaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH0sXG5cblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzXG5cdFx0XHQub24oIFwibW91c2VlbnRlclwiLCBmbk92ZXIgKVxuXHRcdFx0Lm9uKCBcIm1vdXNlbGVhdmVcIiwgZm5PdXQgfHwgZm5PdmVyICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goXG5cdCggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cblx0XHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRcdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHRcdH07XG5cdH1cbik7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuLy8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG4vLyBSZXF1aXJlIHRoYXQgdGhlIFwid2hpdGVzcGFjZSBydW5cIiBzdGFydHMgZnJvbSBhIG5vbi13aGl0ZXNwYWNlXG4vLyB0byBhdm9pZCBPKE5eMikgYmVoYXZpb3Igd2hlbiB0aGUgZW5naW5lIHdvdWxkIHRyeSBtYXRjaGluZyBcIlxccyskXCIgYXQgZWFjaCBzcGFjZSBwb3NpdGlvbi5cbnZhciBydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfChbXlxcc1xcdUZFRkZcXHhBMF0pW1xcc1xcdUZFRkZcXHhBMF0rJC9nO1xuXG4vLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcbi8vIGFyZ3VtZW50cy5cbi8vIGpRdWVyeS5wcm94eSBpcyBkZXByZWNhdGVkIHRvIHByb21vdGUgc3RhbmRhcmRzIChzcGVjaWZpY2FsbHkgRnVuY3Rpb24jYmluZClcbi8vIEhvd2V2ZXIsIGl0IGlzIG5vdCBzbGF0ZWQgZm9yIHJlbW92YWwgYW55IHRpbWUgc29vblxualF1ZXJ5LnByb3h5ID0gZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0Y29udGV4dCA9IGZuO1xuXHRcdGZuID0gdG1wO1xuXHR9XG5cblx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cblx0aWYgKCAhaXNGdW5jdGlvbiggZm4gKSApIHtcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9XG5cblx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xuXHR9O1xuXG5cdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuXHRyZXR1cm4gcHJveHk7XG59O1xuXG5qUXVlcnkuaG9sZFJlYWR5ID0gZnVuY3Rpb24oIGhvbGQgKSB7XG5cdGlmICggaG9sZCApIHtcblx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XG5cdH1cbn07XG5qUXVlcnkuaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5qUXVlcnkucGFyc2VKU09OID0gSlNPTi5wYXJzZTtcbmpRdWVyeS5ub2RlTmFtZSA9IG5vZGVOYW1lO1xualF1ZXJ5LmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xualF1ZXJ5LmlzV2luZG93ID0gaXNXaW5kb3c7XG5qUXVlcnkuY2FtZWxDYXNlID0gY2FtZWxDYXNlO1xualF1ZXJ5LnR5cGUgPSB0b1R5cGU7XG5cbmpRdWVyeS5ub3cgPSBEYXRlLm5vdztcblxualF1ZXJ5LmlzTnVtZXJpYyA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0Ly8gQXMgb2YgalF1ZXJ5IDMuMCwgaXNOdW1lcmljIGlzIGxpbWl0ZWQgdG9cblx0Ly8gc3RyaW5ncyBhbmQgbnVtYmVycyAocHJpbWl0aXZlcyBvciBvYmplY3RzKVxuXHQvLyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGZpbml0ZSBudW1iZXJzIChnaC0yNjYyKVxuXHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblx0cmV0dXJuICggdHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiICkgJiZcblxuXHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChcIlwiKVxuXHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHQhaXNOYU4oIG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICk7XG59O1xuXG5qUXVlcnkudHJpbSA9IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcIlwiIDpcblx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApO1xufTtcblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG5cblxuXG52YXJcblxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAodHJhYy03MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAodHJhYy0xMzU2NilcbmlmICggdHlwZW9mIG5vR2xvYmFsID09PSBcInVuZGVmaW5lZFwiICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iLCIvKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbkNvcHlyaWdodCAoQykgTWljcm9zb2Z0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXG50aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVEhJUyBDT0RFIElTIFBST1ZJREVEIE9OIEFOICpBUyBJUyogQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxuV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIFRJVExFLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSxcbk1FUkNIQU5UQUJMSVRZIE9SIE5PTi1JTkZSSU5HRU1FTlQuXG5cblNlZSB0aGUgQXBhY2hlIFZlcnNpb24gMi4wIExpY2Vuc2UgZm9yIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xuYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cbnZhciBSZWZsZWN0O1xuKGZ1bmN0aW9uIChSZWZsZWN0KSB7XG4gICAgLy8gTWV0YWRhdGEgUHJvcG9zYWxcbiAgICAvLyBodHRwczovL3JidWNrdG9uLmdpdGh1Yi5pby9yZWZsZWN0LW1ldGFkYXRhL1xuICAgIChmdW5jdGlvbiAoZmFjdG9yeSkge1xuICAgICAgICB2YXIgcm9vdCA9IHR5cGVvZiBnbG9iYWwgPT09IFwib2JqZWN0XCIgPyBnbG9iYWwgOlxuICAgICAgICAgICAgdHlwZW9mIHNlbGYgPT09IFwib2JqZWN0XCIgPyBzZWxmIDpcbiAgICAgICAgICAgICAgICB0eXBlb2YgdGhpcyA9PT0gXCJvYmplY3RcIiA/IHRoaXMgOlxuICAgICAgICAgICAgICAgICAgICBGdW5jdGlvbihcInJldHVybiB0aGlzO1wiKSgpO1xuICAgICAgICB2YXIgZXhwb3J0ZXIgPSBtYWtlRXhwb3J0ZXIoUmVmbGVjdCk7XG4gICAgICAgIGlmICh0eXBlb2Ygcm9vdC5SZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICByb290LlJlZmxlY3QgPSBSZWZsZWN0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZXhwb3J0ZXIgPSBtYWtlRXhwb3J0ZXIocm9vdC5SZWZsZWN0LCBleHBvcnRlcik7XG4gICAgICAgIH1cbiAgICAgICAgZmFjdG9yeShleHBvcnRlcik7XG4gICAgICAgIGZ1bmN0aW9uIG1ha2VFeHBvcnRlcih0YXJnZXQsIHByZXZpb3VzKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldFtrZXldICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHByZXZpb3VzKVxuICAgICAgICAgICAgICAgICAgICBwcmV2aW91cyhrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9KShmdW5jdGlvbiAoZXhwb3J0ZXIpIHtcbiAgICAgICAgdmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG4gICAgICAgIC8vIGZlYXR1cmUgdGVzdCBmb3IgU3ltYm9sIHN1cHBvcnRcbiAgICAgICAgdmFyIHN1cHBvcnRzU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiO1xuICAgICAgICB2YXIgdG9QcmltaXRpdmVTeW1ib2wgPSBzdXBwb3J0c1N5bWJvbCAmJiB0eXBlb2YgU3ltYm9sLnRvUHJpbWl0aXZlICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sLnRvUHJpbWl0aXZlIDogXCJAQHRvUHJpbWl0aXZlXCI7XG4gICAgICAgIHZhciBpdGVyYXRvclN5bWJvbCA9IHN1cHBvcnRzU3ltYm9sICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wuaXRlcmF0b3IgOiBcIkBAaXRlcmF0b3JcIjtcbiAgICAgICAgdmFyIHN1cHBvcnRzQ3JlYXRlID0gdHlwZW9mIE9iamVjdC5jcmVhdGUgPT09IFwiZnVuY3Rpb25cIjsgLy8gZmVhdHVyZSB0ZXN0IGZvciBPYmplY3QuY3JlYXRlIHN1cHBvcnRcbiAgICAgICAgdmFyIHN1cHBvcnRzUHJvdG8gPSB7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5OyAvLyBmZWF0dXJlIHRlc3QgZm9yIF9fcHJvdG9fXyBzdXBwb3J0XG4gICAgICAgIHZhciBkb3duTGV2ZWwgPSAhc3VwcG9ydHNDcmVhdGUgJiYgIXN1cHBvcnRzUHJvdG87XG4gICAgICAgIHZhciBIYXNoTWFwID0ge1xuICAgICAgICAgICAgLy8gY3JlYXRlIGFuIG9iamVjdCBpbiBkaWN0aW9uYXJ5IG1vZGUgKGEuay5hLiBcInNsb3dcIiBtb2RlIGluIHY4KVxuICAgICAgICAgICAgY3JlYXRlOiBzdXBwb3J0c0NyZWF0ZVxuICAgICAgICAgICAgICAgID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gTWFrZURpY3Rpb25hcnkoT2JqZWN0LmNyZWF0ZShudWxsKSk7IH1cbiAgICAgICAgICAgICAgICA6IHN1cHBvcnRzUHJvdG9cbiAgICAgICAgICAgICAgICAgICAgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBNYWtlRGljdGlvbmFyeSh7IF9fcHJvdG9fXzogbnVsbCB9KTsgfVxuICAgICAgICAgICAgICAgICAgICA6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE1ha2VEaWN0aW9uYXJ5KHt9KTsgfSxcbiAgICAgICAgICAgIGhhczogZG93bkxldmVsXG4gICAgICAgICAgICAgICAgPyBmdW5jdGlvbiAobWFwLCBrZXkpIHsgcmV0dXJuIGhhc093bi5jYWxsKG1hcCwga2V5KTsgfVxuICAgICAgICAgICAgICAgIDogZnVuY3Rpb24gKG1hcCwga2V5KSB7IHJldHVybiBrZXkgaW4gbWFwOyB9LFxuICAgICAgICAgICAgZ2V0OiBkb3duTGV2ZWxcbiAgICAgICAgICAgICAgICA/IGZ1bmN0aW9uIChtYXAsIGtleSkgeyByZXR1cm4gaGFzT3duLmNhbGwobWFwLCBrZXkpID8gbWFwW2tleV0gOiB1bmRlZmluZWQ7IH1cbiAgICAgICAgICAgICAgICA6IGZ1bmN0aW9uIChtYXAsIGtleSkgeyByZXR1cm4gbWFwW2tleV07IH0sXG4gICAgICAgIH07XG4gICAgICAgIC8vIExvYWQgZ2xvYmFsIG9yIHNoaW0gdmVyc2lvbnMgb2YgTWFwLCBTZXQsIGFuZCBXZWFrTWFwXG4gICAgICAgIHZhciBmdW5jdGlvblByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihGdW5jdGlvbik7XG4gICAgICAgIHZhciB1c2VQb2x5ZmlsbCA9IHR5cGVvZiBwcm9jZXNzID09PSBcIm9iamVjdFwiICYmIHByb2Nlc3MuZW52ICYmIHByb2Nlc3MuZW52W1wiUkVGTEVDVF9NRVRBREFUQV9VU0VfTUFQX1BPTFlGSUxMXCJdID09PSBcInRydWVcIjtcbiAgICAgICAgdmFyIF9NYXAgPSAhdXNlUG9seWZpbGwgJiYgdHlwZW9mIE1hcCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBNYXAucHJvdG90eXBlLmVudHJpZXMgPT09IFwiZnVuY3Rpb25cIiA/IE1hcCA6IENyZWF0ZU1hcFBvbHlmaWxsKCk7XG4gICAgICAgIHZhciBfU2V0ID0gIXVzZVBvbHlmaWxsICYmIHR5cGVvZiBTZXQgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU2V0LnByb3RvdHlwZS5lbnRyaWVzID09PSBcImZ1bmN0aW9uXCIgPyBTZXQgOiBDcmVhdGVTZXRQb2x5ZmlsbCgpO1xuICAgICAgICB2YXIgX1dlYWtNYXAgPSAhdXNlUG9seWZpbGwgJiYgdHlwZW9mIFdlYWtNYXAgPT09IFwiZnVuY3Rpb25cIiA/IFdlYWtNYXAgOiBDcmVhdGVXZWFrTWFwUG9seWZpbGwoKTtcbiAgICAgICAgLy8gW1tNZXRhZGF0YV1dIGludGVybmFsIHNsb3RcbiAgICAgICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS8jb3JkaW5hcnktb2JqZWN0LWludGVybmFsLW1ldGhvZHMtYW5kLWludGVybmFsLXNsb3RzXG4gICAgICAgIHZhciBNZXRhZGF0YSA9IG5ldyBfV2Vha01hcCgpO1xuICAgICAgICAvKipcbiAgICAgICAgICogQXBwbGllcyBhIHNldCBvZiBkZWNvcmF0b3JzIHRvIGEgcHJvcGVydHkgb2YgYSB0YXJnZXQgb2JqZWN0LlxuICAgICAgICAgKiBAcGFyYW0gZGVjb3JhdG9ycyBBbiBhcnJheSBvZiBkZWNvcmF0b3JzLlxuICAgICAgICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgb2JqZWN0LlxuICAgICAgICAgKiBAcGFyYW0gcHJvcGVydHlLZXkgKE9wdGlvbmFsKSBUaGUgcHJvcGVydHkga2V5IHRvIGRlY29yYXRlLlxuICAgICAgICAgKiBAcGFyYW0gYXR0cmlidXRlcyAoT3B0aW9uYWwpIFRoZSBwcm9wZXJ0eSBkZXNjcmlwdG9yIGZvciB0aGUgdGFyZ2V0IGtleS5cbiAgICAgICAgICogQHJlbWFya3MgRGVjb3JhdG9ycyBhcmUgYXBwbGllZCBpbiByZXZlcnNlIG9yZGVyLlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHkgZGVjbGFyYXRpb25zIGFyZSBub3QgcGFydCBvZiBFUzYsIHRob3VnaCB0aGV5IGFyZSB2YWxpZCBpbiBUeXBlU2NyaXB0OlxuICAgICAgICAgKiAgICAgICAgIC8vIHN0YXRpYyBzdGF0aWNQcm9wZXJ0eTtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgICAgICBjb25zdHJ1Y3RvcihwKSB7IH1cbiAgICAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIG1ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIGNvbnN0cnVjdG9yXG4gICAgICAgICAqICAgICBFeGFtcGxlID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzQXJyYXksIEV4YW1wbGUpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzQXJyYXksIEV4YW1wbGUsIFwic3RhdGljUHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzQXJyYXksIEV4YW1wbGUucHJvdG90eXBlLCBcInByb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiLFxuICAgICAgICAgKiAgICAgICAgIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9yc0FycmF5LCBFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiLFxuICAgICAgICAgKiAgICAgICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIpKSk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFeGFtcGxlLnByb3RvdHlwZSwgXCJtZXRob2RcIixcbiAgICAgICAgICogICAgICAgICBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnNBcnJheSwgRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIsXG4gICAgICAgICAqICAgICAgICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIpKSk7XG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBkZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3BlcnR5S2V5KSkge1xuICAgICAgICAgICAgICAgIGlmICghSXNBcnJheShkZWNvcmF0b3JzKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgICAgIGlmICghSXNPYmplY3QodGFyZ2V0KSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgICAgIGlmICghSXNPYmplY3QoYXR0cmlidXRlcykgJiYgIUlzVW5kZWZpbmVkKGF0dHJpYnV0ZXMpICYmICFJc051bGwoYXR0cmlidXRlcykpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgICAgICBpZiAoSXNOdWxsKGF0dHJpYnV0ZXMpKVxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHByb3BlcnR5S2V5ID0gVG9Qcm9wZXJ0eUtleShwcm9wZXJ0eUtleSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIERlY29yYXRlUHJvcGVydHkoZGVjb3JhdG9ycywgdGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoIUlzQXJyYXkoZGVjb3JhdG9ycykpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgICAgICBpZiAoIUlzQ29uc3RydWN0b3IodGFyZ2V0KSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgICAgIHJldHVybiBEZWNvcmF0ZUNvbnN0cnVjdG9yKGRlY29yYXRvcnMsIHRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZXhwb3J0ZXIoXCJkZWNvcmF0ZVwiLCBkZWNvcmF0ZSk7XG4gICAgICAgIC8vIDQuMS4yIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpXG4gICAgICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvI3JlZmxlY3QubWV0YWRhdGFcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgZGVmYXVsdCBtZXRhZGF0YSBkZWNvcmF0b3IgZmFjdG9yeSB0aGF0IGNhbiBiZSB1c2VkIG9uIGEgY2xhc3MsIGNsYXNzIG1lbWJlciwgb3IgcGFyYW1ldGVyLlxuICAgICAgICAgKiBAcGFyYW0gbWV0YWRhdGFLZXkgVGhlIGtleSBmb3IgdGhlIG1ldGFkYXRhIGVudHJ5LlxuICAgICAgICAgKiBAcGFyYW0gbWV0YWRhdGFWYWx1ZSBUaGUgdmFsdWUgZm9yIHRoZSBtZXRhZGF0YSBlbnRyeS5cbiAgICAgICAgICogQHJldHVybnMgQSBkZWNvcmF0b3IgZnVuY3Rpb24uXG4gICAgICAgICAqIEByZW1hcmtzXG4gICAgICAgICAqIElmIGBtZXRhZGF0YUtleWAgaXMgYWxyZWFkeSBkZWZpbmVkIGZvciB0aGUgdGFyZ2V0IGFuZCB0YXJnZXQga2V5LCB0aGVcbiAgICAgICAgICogbWV0YWRhdGFWYWx1ZSBmb3IgdGhhdCBrZXkgd2lsbCBiZSBvdmVyd3JpdHRlbi5cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIGNvbnN0cnVjdG9yXG4gICAgICAgICAqICAgICBAUmVmbGVjdC5tZXRhZGF0YShrZXksIHZhbHVlKVxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gY29uc3RydWN0b3IsIFR5cGVTY3JpcHQgb25seSlcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgICAgIEBSZWZsZWN0Lm1ldGFkYXRhKGtleSwgdmFsdWUpXG4gICAgICAgICAqICAgICAgICAgc3RhdGljIHN0YXRpY1Byb3BlcnR5O1xuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIHByb3RvdHlwZSwgVHlwZVNjcmlwdCBvbmx5KVxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICAgICAgQFJlZmxlY3QubWV0YWRhdGEoa2V5LCB2YWx1ZSlcbiAgICAgICAgICogICAgICAgICBwcm9wZXJ0eTtcbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcbiAgICAgICAgICogICAgICAgICBAUmVmbGVjdC5tZXRhZGF0YShrZXksIHZhbHVlKVxuICAgICAgICAgKiAgICAgICAgIHN0YXRpYyBzdGF0aWNNZXRob2QoKSB7IH1cbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICAgICAgQFJlZmxlY3QubWV0YWRhdGEoa2V5LCB2YWx1ZSlcbiAgICAgICAgICogICAgICAgICBtZXRob2QoKSB7IH1cbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIG1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBkZWNvcmF0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgICAgICAgICAgICAgIGlmICghSXNPYmplY3QodGFyZ2V0KSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQocHJvcGVydHlLZXkpICYmICFJc1Byb3BlcnR5S2V5KHByb3BlcnR5S2V5KSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgICAgIE9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsIHRhcmdldCwgcHJvcGVydHlLZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRlY29yYXRvcjtcbiAgICAgICAgfVxuICAgICAgICBleHBvcnRlcihcIm1ldGFkYXRhXCIsIG1ldGFkYXRhKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlZmluZSBhIHVuaXF1ZSBtZXRhZGF0YSBlbnRyeSBvbiB0aGUgdGFyZ2V0LlxuICAgICAgICAgKiBAcGFyYW0gbWV0YWRhdGFLZXkgQSBrZXkgdXNlZCB0byBzdG9yZSBhbmQgcmV0cmlldmUgbWV0YWRhdGEuXG4gICAgICAgICAqIEBwYXJhbSBtZXRhZGF0YVZhbHVlIEEgdmFsdWUgdGhhdCBjb250YWlucyBhdHRhY2hlZCBtZXRhZGF0YS5cbiAgICAgICAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IG9iamVjdCBvbiB3aGljaCB0byBkZWZpbmUgbWV0YWRhdGEuXG4gICAgICAgICAqIEBwYXJhbSBwcm9wZXJ0eUtleSAoT3B0aW9uYWwpIFRoZSBwcm9wZXJ0eSBrZXkgZm9yIHRoZSB0YXJnZXQuXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqXG4gICAgICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eSBkZWNsYXJhdGlvbnMgYXJlIG5vdCBwYXJ0IG9mIEVTNiwgdGhvdWdoIHRoZXkgYXJlIHZhbGlkIGluIFR5cGVTY3JpcHQ6XG4gICAgICAgICAqICAgICAgICAgLy8gc3RhdGljIHN0YXRpY1Byb3BlcnR5O1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5O1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgICAgIGNvbnN0cnVjdG9yKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIHN0YXRpYyBzdGF0aWNNZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgbWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gY29uc3RydWN0b3JcbiAgICAgICAgICogICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBvcHRpb25zLCBFeGFtcGxlKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBvcHRpb25zLCBFeGFtcGxlLCBcInN0YXRpY1Byb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBvcHRpb25zLCBFeGFtcGxlLnByb3RvdHlwZSwgXCJwcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgb3B0aW9ucywgRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBvcHRpb25zLCBFeGFtcGxlLnByb3RvdHlwZSwgXCJtZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBkZWNvcmF0b3IgZmFjdG9yeSBhcyBtZXRhZGF0YS1wcm9kdWNpbmcgYW5ub3RhdGlvbi5cbiAgICAgICAgICogICAgIGZ1bmN0aW9uIE15QW5ub3RhdGlvbihvcHRpb25zKTogRGVjb3JhdG9yIHtcbiAgICAgICAgICogICAgICAgICByZXR1cm4gKHRhcmdldCwga2V5PykgPT4gUmVmbGVjdC5kZWZpbmVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIG9wdGlvbnMsIHRhcmdldCwga2V5KTtcbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGRlZmluZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCB0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm9wZXJ0eUtleSkpXG4gICAgICAgICAgICAgICAgcHJvcGVydHlLZXkgPSBUb1Byb3BlcnR5S2V5KHByb3BlcnR5S2V5KTtcbiAgICAgICAgICAgIHJldHVybiBPcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCB0YXJnZXQsIHByb3BlcnR5S2V5KTtcbiAgICAgICAgfVxuICAgICAgICBleHBvcnRlcihcImRlZmluZU1ldGFkYXRhXCIsIGRlZmluZU1ldGFkYXRhKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIHRhcmdldCBvYmplY3Qgb3IgaXRzIHByb3RvdHlwZSBjaGFpbiBoYXMgdGhlIHByb3ZpZGVkIG1ldGFkYXRhIGtleSBkZWZpbmVkLlxuICAgICAgICAgKiBAcGFyYW0gbWV0YWRhdGFLZXkgQSBrZXkgdXNlZCB0byBzdG9yZSBhbmQgcmV0cmlldmUgbWV0YWRhdGEuXG4gICAgICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIHRhcmdldCBvYmplY3Qgb24gd2hpY2ggdGhlIG1ldGFkYXRhIGlzIGRlZmluZWQuXG4gICAgICAgICAqIEBwYXJhbSBwcm9wZXJ0eUtleSAoT3B0aW9uYWwpIFRoZSBwcm9wZXJ0eSBrZXkgZm9yIHRoZSB0YXJnZXQuXG4gICAgICAgICAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgbWV0YWRhdGEga2V5IHdhcyBkZWZpbmVkIG9uIHRoZSB0YXJnZXQgb2JqZWN0IG9yIGl0cyBwcm90b3R5cGUgY2hhaW47IG90aGVyd2lzZSwgYGZhbHNlYC5cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5IGRlY2xhcmF0aW9ucyBhcmUgbm90IHBhcnQgb2YgRVM2LCB0aG91Z2ggdGhleSBhcmUgdmFsaWQgaW4gVHlwZVNjcmlwdDpcbiAgICAgICAgICogICAgICAgICAvLyBzdGF0aWMgc3RhdGljUHJvcGVydHk7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAgICAgY29uc3RydWN0b3IocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgc3RhdGljIHN0YXRpY01ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgICAgICBtZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBjb25zdHJ1Y3RvclxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUsIFwic3RhdGljUHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcInByb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuaGFzTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm9wZXJ0eUtleSkpXG4gICAgICAgICAgICAgICAgcHJvcGVydHlLZXkgPSBUb1Byb3BlcnR5S2V5KHByb3BlcnR5S2V5KTtcbiAgICAgICAgICAgIHJldHVybiBPcmRpbmFyeUhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQsIHByb3BlcnR5S2V5KTtcbiAgICAgICAgfVxuICAgICAgICBleHBvcnRlcihcImhhc01ldGFkYXRhXCIsIGhhc01ldGFkYXRhKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIHRhcmdldCBvYmplY3QgaGFzIHRoZSBwcm92aWRlZCBtZXRhZGF0YSBrZXkgZGVmaW5lZC5cbiAgICAgICAgICogQHBhcmFtIG1ldGFkYXRhS2V5IEEga2V5IHVzZWQgdG8gc3RvcmUgYW5kIHJldHJpZXZlIG1ldGFkYXRhLlxuICAgICAgICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgb2JqZWN0IG9uIHdoaWNoIHRoZSBtZXRhZGF0YSBpcyBkZWZpbmVkLlxuICAgICAgICAgKiBAcGFyYW0gcHJvcGVydHlLZXkgKE9wdGlvbmFsKSBUaGUgcHJvcGVydHkga2V5IGZvciB0aGUgdGFyZ2V0LlxuICAgICAgICAgKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG1ldGFkYXRhIGtleSB3YXMgZGVmaW5lZCBvbiB0aGUgdGFyZ2V0IG9iamVjdDsgb3RoZXJ3aXNlLCBgZmFsc2VgLlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHkgZGVjbGFyYXRpb25zIGFyZSBub3QgcGFydCBvZiBFUzYsIHRob3VnaCB0aGV5IGFyZSB2YWxpZCBpbiBUeXBlU2NyaXB0OlxuICAgICAgICAgKiAgICAgICAgIC8vIHN0YXRpYyBzdGF0aWNQcm9wZXJ0eTtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgICAgICBjb25zdHJ1Y3RvcihwKSB7IH1cbiAgICAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIG1ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIGNvbnN0cnVjdG9yXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0Lmhhc093bk1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0Lmhhc093bk1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSwgXCJzdGF0aWNQcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0Lmhhc093bk1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZS5wcm90b3R5cGUsIFwicHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0Lmhhc093bk1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gaGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICAgICAgICAgIGlmICghSXNPYmplY3QodGFyZ2V0KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3BlcnR5S2V5KSlcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUtleSA9IFRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xuICAgICAgICAgICAgcmV0dXJuIE9yZGluYXJ5SGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCwgcHJvcGVydHlLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGV4cG9ydGVyKFwiaGFzT3duTWV0YWRhdGFcIiwgaGFzT3duTWV0YWRhdGEpO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyB0aGUgbWV0YWRhdGEgdmFsdWUgZm9yIHRoZSBwcm92aWRlZCBtZXRhZGF0YSBrZXkgb24gdGhlIHRhcmdldCBvYmplY3Qgb3IgaXRzIHByb3RvdHlwZSBjaGFpbi5cbiAgICAgICAgICogQHBhcmFtIG1ldGFkYXRhS2V5IEEga2V5IHVzZWQgdG8gc3RvcmUgYW5kIHJldHJpZXZlIG1ldGFkYXRhLlxuICAgICAgICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgb2JqZWN0IG9uIHdoaWNoIHRoZSBtZXRhZGF0YSBpcyBkZWZpbmVkLlxuICAgICAgICAgKiBAcGFyYW0gcHJvcGVydHlLZXkgKE9wdGlvbmFsKSBUaGUgcHJvcGVydHkga2V5IGZvciB0aGUgdGFyZ2V0LlxuICAgICAgICAgKiBAcmV0dXJucyBUaGUgbWV0YWRhdGEgdmFsdWUgZm9yIHRoZSBtZXRhZGF0YSBrZXkgaWYgZm91bmQ7IG90aGVyd2lzZSwgYHVuZGVmaW5lZGAuXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqXG4gICAgICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eSBkZWNsYXJhdGlvbnMgYXJlIG5vdCBwYXJ0IG9mIEVTNiwgdGhvdWdoIHRoZXkgYXJlIHZhbGlkIGluIFR5cGVTY3JpcHQ6XG4gICAgICAgICAqICAgICAgICAgLy8gc3RhdGljIHN0YXRpY1Byb3BlcnR5O1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5O1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgICAgIGNvbnN0cnVjdG9yKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIHN0YXRpYyBzdGF0aWNNZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgbWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gY29uc3RydWN0b3JcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0TWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0TWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLCBcInN0YXRpY1Byb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0TWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLnByb3RvdHlwZSwgXCJwcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0TWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLnByb3RvdHlwZSwgXCJtZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBnZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgICAgICAgICAgaWYgKCFJc09iamVjdCh0YXJnZXQpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQocHJvcGVydHlLZXkpKVxuICAgICAgICAgICAgICAgIHByb3BlcnR5S2V5ID0gVG9Qcm9wZXJ0eUtleShwcm9wZXJ0eUtleSk7XG4gICAgICAgICAgICByZXR1cm4gT3JkaW5hcnlHZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZXhwb3J0ZXIoXCJnZXRNZXRhZGF0YVwiLCBnZXRNZXRhZGF0YSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIHRoZSBtZXRhZGF0YSB2YWx1ZSBmb3IgdGhlIHByb3ZpZGVkIG1ldGFkYXRhIGtleSBvbiB0aGUgdGFyZ2V0IG9iamVjdC5cbiAgICAgICAgICogQHBhcmFtIG1ldGFkYXRhS2V5IEEga2V5IHVzZWQgdG8gc3RvcmUgYW5kIHJldHJpZXZlIG1ldGFkYXRhLlxuICAgICAgICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgb2JqZWN0IG9uIHdoaWNoIHRoZSBtZXRhZGF0YSBpcyBkZWZpbmVkLlxuICAgICAgICAgKiBAcGFyYW0gcHJvcGVydHlLZXkgKE9wdGlvbmFsKSBUaGUgcHJvcGVydHkga2V5IGZvciB0aGUgdGFyZ2V0LlxuICAgICAgICAgKiBAcmV0dXJucyBUaGUgbWV0YWRhdGEgdmFsdWUgZm9yIHRoZSBtZXRhZGF0YSBrZXkgaWYgZm91bmQ7IG90aGVyd2lzZSwgYHVuZGVmaW5lZGAuXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqXG4gICAgICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eSBkZWNsYXJhdGlvbnMgYXJlIG5vdCBwYXJ0IG9mIEVTNiwgdGhvdWdoIHRoZXkgYXJlIHZhbGlkIGluIFR5cGVTY3JpcHQ6XG4gICAgICAgICAqICAgICAgICAgLy8gc3RhdGljIHN0YXRpY1Byb3BlcnR5O1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5O1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgICAgIGNvbnN0cnVjdG9yKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIHN0YXRpYyBzdGF0aWNNZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgbWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gY29uc3RydWN0b3JcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLCBcInN0YXRpY1Byb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLnByb3RvdHlwZSwgXCJwcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLnByb3RvdHlwZSwgXCJtZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgICAgICAgICAgaWYgKCFJc09iamVjdCh0YXJnZXQpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQocHJvcGVydHlLZXkpKVxuICAgICAgICAgICAgICAgIHByb3BlcnR5S2V5ID0gVG9Qcm9wZXJ0eUtleShwcm9wZXJ0eUtleSk7XG4gICAgICAgICAgICByZXR1cm4gT3JkaW5hcnlHZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZXhwb3J0ZXIoXCJnZXRPd25NZXRhZGF0YVwiLCBnZXRPd25NZXRhZGF0YSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIHRoZSBtZXRhZGF0YSBrZXlzIGRlZmluZWQgb24gdGhlIHRhcmdldCBvYmplY3Qgb3IgaXRzIHByb3RvdHlwZSBjaGFpbi5cbiAgICAgICAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IG9iamVjdCBvbiB3aGljaCB0aGUgbWV0YWRhdGEgaXMgZGVmaW5lZC5cbiAgICAgICAgICogQHBhcmFtIHByb3BlcnR5S2V5IChPcHRpb25hbCkgVGhlIHByb3BlcnR5IGtleSBmb3IgdGhlIHRhcmdldC5cbiAgICAgICAgICogQHJldHVybnMgQW4gYXJyYXkgb2YgdW5pcXVlIG1ldGFkYXRhIGtleXMuXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqXG4gICAgICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eSBkZWNsYXJhdGlvbnMgYXJlIG5vdCBwYXJ0IG9mIEVTNiwgdGhvdWdoIHRoZXkgYXJlIHZhbGlkIGluIFR5cGVTY3JpcHQ6XG4gICAgICAgICAqICAgICAgICAgLy8gc3RhdGljIHN0YXRpY1Byb3BlcnR5O1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5O1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgICAgIGNvbnN0cnVjdG9yKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIHN0YXRpYyBzdGF0aWNNZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgbWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gY29uc3RydWN0b3JcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0TWV0YWRhdGFLZXlzKEV4YW1wbGUpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRNZXRhZGF0YUtleXMoRXhhbXBsZSwgXCJzdGF0aWNQcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE1ldGFkYXRhS2V5cyhFeGFtcGxlLnByb3RvdHlwZSwgXCJwcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE1ldGFkYXRhS2V5cyhFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRNZXRhZGF0YUtleXMoRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gZ2V0TWV0YWRhdGFLZXlzKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICAgICAgICAgIGlmICghSXNPYmplY3QodGFyZ2V0KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3BlcnR5S2V5KSlcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUtleSA9IFRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xuICAgICAgICAgICAgcmV0dXJuIE9yZGluYXJ5TWV0YWRhdGFLZXlzKHRhcmdldCwgcHJvcGVydHlLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGV4cG9ydGVyKFwiZ2V0TWV0YWRhdGFLZXlzXCIsIGdldE1ldGFkYXRhS2V5cyk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIHRoZSB1bmlxdWUgbWV0YWRhdGEga2V5cyBkZWZpbmVkIG9uIHRoZSB0YXJnZXQgb2JqZWN0LlxuICAgICAgICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgb2JqZWN0IG9uIHdoaWNoIHRoZSBtZXRhZGF0YSBpcyBkZWZpbmVkLlxuICAgICAgICAgKiBAcGFyYW0gcHJvcGVydHlLZXkgKE9wdGlvbmFsKSBUaGUgcHJvcGVydHkga2V5IGZvciB0aGUgdGFyZ2V0LlxuICAgICAgICAgKiBAcmV0dXJucyBBbiBhcnJheSBvZiB1bmlxdWUgbWV0YWRhdGEga2V5cy5cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5IGRlY2xhcmF0aW9ucyBhcmUgbm90IHBhcnQgb2YgRVM2LCB0aG91Z2ggdGhleSBhcmUgdmFsaWQgaW4gVHlwZVNjcmlwdDpcbiAgICAgICAgICogICAgICAgICAvLyBzdGF0aWMgc3RhdGljUHJvcGVydHk7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAgICAgY29uc3RydWN0b3IocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgc3RhdGljIHN0YXRpY01ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgICAgICBtZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBjb25zdHJ1Y3RvclxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YUtleXMoRXhhbXBsZSk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhS2V5cyhFeGFtcGxlLCBcInN0YXRpY1Byb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGFLZXlzKEV4YW1wbGUucHJvdG90eXBlLCBcInByb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGFLZXlzKEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhS2V5cyhFeGFtcGxlLnByb3RvdHlwZSwgXCJtZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YUtleXModGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgICAgICAgICAgaWYgKCFJc09iamVjdCh0YXJnZXQpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQocHJvcGVydHlLZXkpKVxuICAgICAgICAgICAgICAgIHByb3BlcnR5S2V5ID0gVG9Qcm9wZXJ0eUtleShwcm9wZXJ0eUtleSk7XG4gICAgICAgICAgICByZXR1cm4gT3JkaW5hcnlPd25NZXRhZGF0YUtleXModGFyZ2V0LCBwcm9wZXJ0eUtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZXhwb3J0ZXIoXCJnZXRPd25NZXRhZGF0YUtleXNcIiwgZ2V0T3duTWV0YWRhdGFLZXlzKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlbGV0ZXMgdGhlIG1ldGFkYXRhIGVudHJ5IGZyb20gdGhlIHRhcmdldCBvYmplY3Qgd2l0aCB0aGUgcHJvdmlkZWQga2V5LlxuICAgICAgICAgKiBAcGFyYW0gbWV0YWRhdGFLZXkgQSBrZXkgdXNlZCB0byBzdG9yZSBhbmQgcmV0cmlldmUgbWV0YWRhdGEuXG4gICAgICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIHRhcmdldCBvYmplY3Qgb24gd2hpY2ggdGhlIG1ldGFkYXRhIGlzIGRlZmluZWQuXG4gICAgICAgICAqIEBwYXJhbSBwcm9wZXJ0eUtleSAoT3B0aW9uYWwpIFRoZSBwcm9wZXJ0eSBrZXkgZm9yIHRoZSB0YXJnZXQuXG4gICAgICAgICAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgbWV0YWRhdGEgZW50cnkgd2FzIGZvdW5kIGFuZCBkZWxldGVkOyBvdGhlcndpc2UsIGZhbHNlLlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHkgZGVjbGFyYXRpb25zIGFyZSBub3QgcGFydCBvZiBFUzYsIHRob3VnaCB0aGV5IGFyZSB2YWxpZCBpbiBUeXBlU2NyaXB0OlxuICAgICAgICAgKiAgICAgICAgIC8vIHN0YXRpYyBzdGF0aWNQcm9wZXJ0eTtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgICAgICBjb25zdHJ1Y3RvcihwKSB7IH1cbiAgICAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIG1ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIGNvbnN0cnVjdG9yXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmRlbGV0ZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmRlbGV0ZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSwgXCJzdGF0aWNQcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmRlbGV0ZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZS5wcm90b3R5cGUsIFwicHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5kZWxldGVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmRlbGV0ZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gZGVsZXRlTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICAgICAgICAgIGlmICghSXNPYmplY3QodGFyZ2V0KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3BlcnR5S2V5KSlcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUtleSA9IFRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xuICAgICAgICAgICAgdmFyIG1ldGFkYXRhTWFwID0gR2V0T3JDcmVhdGVNZXRhZGF0YU1hcCh0YXJnZXQsIHByb3BlcnR5S2V5LCAvKkNyZWF0ZSovIGZhbHNlKTtcbiAgICAgICAgICAgIGlmIChJc1VuZGVmaW5lZChtZXRhZGF0YU1hcCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgaWYgKCFtZXRhZGF0YU1hcC5kZWxldGUobWV0YWRhdGFLZXkpKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGlmIChtZXRhZGF0YU1hcC5zaXplID4gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIHZhciB0YXJnZXRNZXRhZGF0YSA9IE1ldGFkYXRhLmdldCh0YXJnZXQpO1xuICAgICAgICAgICAgdGFyZ2V0TWV0YWRhdGEuZGVsZXRlKHByb3BlcnR5S2V5KTtcbiAgICAgICAgICAgIGlmICh0YXJnZXRNZXRhZGF0YS5zaXplID4gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIE1ldGFkYXRhLmRlbGV0ZSh0YXJnZXQpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZXhwb3J0ZXIoXCJkZWxldGVNZXRhZGF0YVwiLCBkZWxldGVNZXRhZGF0YSk7XG4gICAgICAgIGZ1bmN0aW9uIERlY29yYXRlQ29uc3RydWN0b3IoZGVjb3JhdG9ycywgdGFyZ2V0KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgICAgIHZhciBkZWNvcmF0b3IgPSBkZWNvcmF0b3JzW2ldO1xuICAgICAgICAgICAgICAgIHZhciBkZWNvcmF0ZWQgPSBkZWNvcmF0b3IodGFyZ2V0KTtcbiAgICAgICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKGRlY29yYXRlZCkgJiYgIUlzTnVsbChkZWNvcmF0ZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghSXNDb25zdHJ1Y3RvcihkZWNvcmF0ZWQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPSBkZWNvcmF0ZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBEZWNvcmF0ZVByb3BlcnR5KGRlY29yYXRvcnMsIHRhcmdldCwgcHJvcGVydHlLZXksIGRlc2NyaXB0b3IpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlY29yYXRvciA9IGRlY29yYXRvcnNbaV07XG4gICAgICAgICAgICAgICAgdmFyIGRlY29yYXRlZCA9IGRlY29yYXRvcih0YXJnZXQsIHByb3BlcnR5S2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKGRlY29yYXRlZCkgJiYgIUlzTnVsbChkZWNvcmF0ZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghSXNPYmplY3QoZGVjb3JhdGVkKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRvciA9IGRlY29yYXRlZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGVzY3JpcHRvcjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBHZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIENyZWF0ZSkge1xuICAgICAgICAgICAgdmFyIHRhcmdldE1ldGFkYXRhID0gTWV0YWRhdGEuZ2V0KE8pO1xuICAgICAgICAgICAgaWYgKElzVW5kZWZpbmVkKHRhcmdldE1ldGFkYXRhKSkge1xuICAgICAgICAgICAgICAgIGlmICghQ3JlYXRlKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHRhcmdldE1ldGFkYXRhID0gbmV3IF9NYXAoKTtcbiAgICAgICAgICAgICAgICBNZXRhZGF0YS5zZXQoTywgdGFyZ2V0TWV0YWRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG1ldGFkYXRhTWFwID0gdGFyZ2V0TWV0YWRhdGEuZ2V0KFApO1xuICAgICAgICAgICAgaWYgKElzVW5kZWZpbmVkKG1ldGFkYXRhTWFwKSkge1xuICAgICAgICAgICAgICAgIGlmICghQ3JlYXRlKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIG1ldGFkYXRhTWFwID0gbmV3IF9NYXAoKTtcbiAgICAgICAgICAgICAgICB0YXJnZXRNZXRhZGF0YS5zZXQoUCwgbWV0YWRhdGFNYXApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1ldGFkYXRhTWFwO1xuICAgICAgICB9XG4gICAgICAgIC8vIDMuMS4xLjEgT3JkaW5hcnlIYXNNZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUClcbiAgICAgICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS8jb3JkaW5hcnloYXNtZXRhZGF0YVxuICAgICAgICBmdW5jdGlvbiBPcmRpbmFyeUhhc01ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gICAgICAgICAgICB2YXIgaGFzT3duID0gT3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gICAgICAgICAgICBpZiAoaGFzT3duKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgdmFyIHBhcmVudCA9IE9yZGluYXJ5R2V0UHJvdG90eXBlT2YoTyk7XG4gICAgICAgICAgICBpZiAoIUlzTnVsbChwYXJlbnQpKVxuICAgICAgICAgICAgICAgIHJldHVybiBPcmRpbmFyeUhhc01ldGFkYXRhKE1ldGFkYXRhS2V5LCBwYXJlbnQsIFApO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIDMuMS4yLjEgT3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUClcbiAgICAgICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS8jb3JkaW5hcnloYXNvd25tZXRhZGF0YVxuICAgICAgICBmdW5jdGlvbiBPcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gICAgICAgICAgICB2YXIgbWV0YWRhdGFNYXAgPSBHZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIC8qQ3JlYXRlKi8gZmFsc2UpO1xuICAgICAgICAgICAgaWYgKElzVW5kZWZpbmVkKG1ldGFkYXRhTWFwKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gVG9Cb29sZWFuKG1ldGFkYXRhTWFwLmhhcyhNZXRhZGF0YUtleSkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIDMuMS4zLjEgT3JkaW5hcnlHZXRNZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUClcbiAgICAgICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS8jb3JkaW5hcnlnZXRtZXRhZGF0YVxuICAgICAgICBmdW5jdGlvbiBPcmRpbmFyeUdldE1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gICAgICAgICAgICB2YXIgaGFzT3duID0gT3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gICAgICAgICAgICBpZiAoaGFzT3duKVxuICAgICAgICAgICAgICAgIHJldHVybiBPcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgICAgICAgICAgIHZhciBwYXJlbnQgPSBPcmRpbmFyeUdldFByb3RvdHlwZU9mKE8pO1xuICAgICAgICAgICAgaWYgKCFJc051bGwocGFyZW50KSlcbiAgICAgICAgICAgICAgICByZXR1cm4gT3JkaW5hcnlHZXRNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKTtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gMy4xLjQuMSBPcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKVxuICAgICAgICAvLyBodHRwczovL3JidWNrdG9uLmdpdGh1Yi5pby9yZWZsZWN0LW1ldGFkYXRhLyNvcmRpbmFyeWdldG93bm1ldGFkYXRhXG4gICAgICAgIGZ1bmN0aW9uIE9yZGluYXJ5R2V0T3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgICAgICAgICAgIHZhciBtZXRhZGF0YU1hcCA9IEdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgLypDcmVhdGUqLyBmYWxzZSk7XG4gICAgICAgICAgICBpZiAoSXNVbmRlZmluZWQobWV0YWRhdGFNYXApKVxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICByZXR1cm4gbWV0YWRhdGFNYXAuZ2V0KE1ldGFkYXRhS2V5KTtcbiAgICAgICAgfVxuICAgICAgICAvLyAzLjEuNS4xIE9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUsIE8sIFApXG4gICAgICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvI29yZGluYXJ5ZGVmaW5lb3dubWV0YWRhdGFcbiAgICAgICAgZnVuY3Rpb24gT3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSwgTywgUCkge1xuICAgICAgICAgICAgdmFyIG1ldGFkYXRhTWFwID0gR2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCAvKkNyZWF0ZSovIHRydWUpO1xuICAgICAgICAgICAgbWV0YWRhdGFNYXAuc2V0KE1ldGFkYXRhS2V5LCBNZXRhZGF0YVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyAzLjEuNi4xIE9yZGluYXJ5TWV0YWRhdGFLZXlzKE8sIFApXG4gICAgICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvI29yZGluYXJ5bWV0YWRhdGFrZXlzXG4gICAgICAgIGZ1bmN0aW9uIE9yZGluYXJ5TWV0YWRhdGFLZXlzKE8sIFApIHtcbiAgICAgICAgICAgIHZhciBvd25LZXlzID0gT3JkaW5hcnlPd25NZXRhZGF0YUtleXMoTywgUCk7XG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gT3JkaW5hcnlHZXRQcm90b3R5cGVPZihPKTtcbiAgICAgICAgICAgIGlmIChwYXJlbnQgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG93bktleXM7XG4gICAgICAgICAgICB2YXIgcGFyZW50S2V5cyA9IE9yZGluYXJ5TWV0YWRhdGFLZXlzKHBhcmVudCwgUCk7XG4gICAgICAgICAgICBpZiAocGFyZW50S2V5cy5sZW5ndGggPD0gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gb3duS2V5cztcbiAgICAgICAgICAgIGlmIChvd25LZXlzLmxlbmd0aCA8PSAwKVxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnRLZXlzO1xuICAgICAgICAgICAgdmFyIHNldCA9IG5ldyBfU2V0KCk7XG4gICAgICAgICAgICB2YXIga2V5cyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBvd25LZXlzXzEgPSBvd25LZXlzOyBfaSA8IG93bktleXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gb3duS2V5c18xW19pXTtcbiAgICAgICAgICAgICAgICB2YXIgaGFzS2V5ID0gc2V0LmhhcyhrZXkpO1xuICAgICAgICAgICAgICAgIGlmICghaGFzS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHNldC5hZGQoa2V5KTtcbiAgICAgICAgICAgICAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBwYXJlbnRLZXlzXzEgPSBwYXJlbnRLZXlzOyBfYSA8IHBhcmVudEtleXNfMS5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gcGFyZW50S2V5c18xW19hXTtcbiAgICAgICAgICAgICAgICB2YXIgaGFzS2V5ID0gc2V0LmhhcyhrZXkpO1xuICAgICAgICAgICAgICAgIGlmICghaGFzS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHNldC5hZGQoa2V5KTtcbiAgICAgICAgICAgICAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGtleXM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gMy4xLjcuMSBPcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhPLCBQKVxuICAgICAgICAvLyBodHRwczovL3JidWNrdG9uLmdpdGh1Yi5pby9yZWZsZWN0LW1ldGFkYXRhLyNvcmRpbmFyeW93bm1ldGFkYXRha2V5c1xuICAgICAgICBmdW5jdGlvbiBPcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhPLCBQKSB7XG4gICAgICAgICAgICB2YXIga2V5cyA9IFtdO1xuICAgICAgICAgICAgdmFyIG1ldGFkYXRhTWFwID0gR2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCAvKkNyZWF0ZSovIGZhbHNlKTtcbiAgICAgICAgICAgIGlmIChJc1VuZGVmaW5lZChtZXRhZGF0YU1hcCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGtleXM7XG4gICAgICAgICAgICB2YXIga2V5c09iaiA9IG1ldGFkYXRhTWFwLmtleXMoKTtcbiAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IEdldEl0ZXJhdG9yKGtleXNPYmopO1xuICAgICAgICAgICAgdmFyIGsgPSAwO1xuICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV4dCA9IEl0ZXJhdG9yU3RlcChpdGVyYXRvcik7XG4gICAgICAgICAgICAgICAgaWYgKCFuZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIGtleXMubGVuZ3RoID0gaztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGtleXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBuZXh0VmFsdWUgPSBJdGVyYXRvclZhbHVlKG5leHQpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGtleXNba10gPSBuZXh0VmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaysrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIDYgRUNNQVNjcmlwdCBEYXRhIFR5cDBlcyBhbmQgVmFsdWVzXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWVjbWFzY3JpcHQtZGF0YS10eXBlcy1hbmQtdmFsdWVzXG4gICAgICAgIGZ1bmN0aW9uIFR5cGUoeCkge1xuICAgICAgICAgICAgaWYgKHggPT09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIDEgLyogTnVsbCAqLztcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZW9mIHgpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwidW5kZWZpbmVkXCI6IHJldHVybiAwIC8qIFVuZGVmaW5lZCAqLztcbiAgICAgICAgICAgICAgICBjYXNlIFwiYm9vbGVhblwiOiByZXR1cm4gMiAvKiBCb29sZWFuICovO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJzdHJpbmdcIjogcmV0dXJuIDMgLyogU3RyaW5nICovO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJzeW1ib2xcIjogcmV0dXJuIDQgLyogU3ltYm9sICovO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJudW1iZXJcIjogcmV0dXJuIDUgLyogTnVtYmVyICovO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJvYmplY3RcIjogcmV0dXJuIHggPT09IG51bGwgPyAxIC8qIE51bGwgKi8gOiA2IC8qIE9iamVjdCAqLztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gNiAvKiBPYmplY3QgKi87XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gNi4xLjEgVGhlIFVuZGVmaW5lZCBUeXBlXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMtdW5kZWZpbmVkLXR5cGVcbiAgICAgICAgZnVuY3Rpb24gSXNVbmRlZmluZWQoeCkge1xuICAgICAgICAgICAgcmV0dXJuIHggPT09IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvLyA2LjEuMiBUaGUgTnVsbCBUeXBlXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMtbnVsbC10eXBlXG4gICAgICAgIGZ1bmN0aW9uIElzTnVsbCh4KSB7XG4gICAgICAgICAgICByZXR1cm4geCA9PT0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAvLyA2LjEuNSBUaGUgU3ltYm9sIFR5cGVcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcy1zeW1ib2wtdHlwZVxuICAgICAgICBmdW5jdGlvbiBJc1N5bWJvbCh4KSB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIHggPT09IFwic3ltYm9sXCI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNi4xLjcgVGhlIE9iamVjdCBUeXBlXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC10eXBlXG4gICAgICAgIGZ1bmN0aW9uIElzT2JqZWN0KHgpIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgeCA9PT0gXCJvYmplY3RcIiA/IHggIT09IG51bGwgOiB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiO1xuICAgICAgICB9XG4gICAgICAgIC8vIDcuMSBUeXBlIENvbnZlcnNpb25cbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdHlwZS1jb252ZXJzaW9uXG4gICAgICAgIC8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b3ByaW1pdGl2ZVxuICAgICAgICBmdW5jdGlvbiBUb1ByaW1pdGl2ZShpbnB1dCwgUHJlZmVycmVkVHlwZSkge1xuICAgICAgICAgICAgc3dpdGNoIChUeXBlKGlucHV0KSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMCAvKiBVbmRlZmluZWQgKi86IHJldHVybiBpbnB1dDtcbiAgICAgICAgICAgICAgICBjYXNlIDEgLyogTnVsbCAqLzogcmV0dXJuIGlucHV0O1xuICAgICAgICAgICAgICAgIGNhc2UgMiAvKiBCb29sZWFuICovOiByZXR1cm4gaW5wdXQ7XG4gICAgICAgICAgICAgICAgY2FzZSAzIC8qIFN0cmluZyAqLzogcmV0dXJuIGlucHV0O1xuICAgICAgICAgICAgICAgIGNhc2UgNCAvKiBTeW1ib2wgKi86IHJldHVybiBpbnB1dDtcbiAgICAgICAgICAgICAgICBjYXNlIDUgLyogTnVtYmVyICovOiByZXR1cm4gaW5wdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaGludCA9IFByZWZlcnJlZFR5cGUgPT09IDMgLyogU3RyaW5nICovID8gXCJzdHJpbmdcIiA6IFByZWZlcnJlZFR5cGUgPT09IDUgLyogTnVtYmVyICovID8gXCJudW1iZXJcIiA6IFwiZGVmYXVsdFwiO1xuICAgICAgICAgICAgdmFyIGV4b3RpY1RvUHJpbSA9IEdldE1ldGhvZChpbnB1dCwgdG9QcmltaXRpdmVTeW1ib2wpO1xuICAgICAgICAgICAgaWYgKGV4b3RpY1RvUHJpbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGV4b3RpY1RvUHJpbS5jYWxsKGlucHV0LCBoaW50KTtcbiAgICAgICAgICAgICAgICBpZiAoSXNPYmplY3QocmVzdWx0KSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gT3JkaW5hcnlUb1ByaW1pdGl2ZShpbnB1dCwgaGludCA9PT0gXCJkZWZhdWx0XCIgPyBcIm51bWJlclwiIDogaGludCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNy4xLjEuMSBPcmRpbmFyeVRvUHJpbWl0aXZlKE8sIGhpbnQpXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9yZGluYXJ5dG9wcmltaXRpdmVcbiAgICAgICAgZnVuY3Rpb24gT3JkaW5hcnlUb1ByaW1pdGl2ZShPLCBoaW50KSB7XG4gICAgICAgICAgICBpZiAoaGludCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHZhciB0b1N0cmluZ18xID0gTy50b1N0cmluZztcbiAgICAgICAgICAgICAgICBpZiAoSXNDYWxsYWJsZSh0b1N0cmluZ18xKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdG9TdHJpbmdfMS5jYWxsKE8pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHJlc3VsdCkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgdmFsdWVPZiA9IE8udmFsdWVPZjtcbiAgICAgICAgICAgICAgICBpZiAoSXNDYWxsYWJsZSh2YWx1ZU9mKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdmFsdWVPZi5jYWxsKE8pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHJlc3VsdCkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZU9mID0gTy52YWx1ZU9mO1xuICAgICAgICAgICAgICAgIGlmIChJc0NhbGxhYmxlKHZhbHVlT2YpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB2YWx1ZU9mLmNhbGwoTyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghSXNPYmplY3QocmVzdWx0KSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciB0b1N0cmluZ18yID0gTy50b1N0cmluZztcbiAgICAgICAgICAgICAgICBpZiAoSXNDYWxsYWJsZSh0b1N0cmluZ18yKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdG9TdHJpbmdfMi5jYWxsKE8pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHJlc3VsdCkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyA3LjEuMiBUb0Jvb2xlYW4oYXJndW1lbnQpXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8yMDE2LyNzZWMtdG9ib29sZWFuXG4gICAgICAgIGZ1bmN0aW9uIFRvQm9vbGVhbihhcmd1bWVudCkge1xuICAgICAgICAgICAgcmV0dXJuICEhYXJndW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNy4xLjEyIFRvU3RyaW5nKGFyZ3VtZW50KVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b3N0cmluZ1xuICAgICAgICBmdW5jdGlvbiBUb1N0cmluZyhhcmd1bWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiXCIgKyBhcmd1bWVudDtcbiAgICAgICAgfVxuICAgICAgICAvLyA3LjEuMTQgVG9Qcm9wZXJ0eUtleShhcmd1bWVudClcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9wcm9wZXJ0eWtleVxuICAgICAgICBmdW5jdGlvbiBUb1Byb3BlcnR5S2V5KGFyZ3VtZW50KSB7XG4gICAgICAgICAgICB2YXIga2V5ID0gVG9QcmltaXRpdmUoYXJndW1lbnQsIDMgLyogU3RyaW5nICovKTtcbiAgICAgICAgICAgIGlmIChJc1N5bWJvbChrZXkpKVxuICAgICAgICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgICAgICByZXR1cm4gVG9TdHJpbmcoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICAvLyA3LjIgVGVzdGluZyBhbmQgQ29tcGFyaXNvbiBPcGVyYXRpb25zXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRlc3RpbmctYW5kLWNvbXBhcmlzb24tb3BlcmF0aW9uc1xuICAgICAgICAvLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1pc2FycmF5XG4gICAgICAgIGZ1bmN0aW9uIElzQXJyYXkoYXJndW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5XG4gICAgICAgICAgICAgICAgPyBBcnJheS5pc0FycmF5KGFyZ3VtZW50KVxuICAgICAgICAgICAgICAgIDogYXJndW1lbnQgaW5zdGFuY2VvZiBPYmplY3RcbiAgICAgICAgICAgICAgICAgICAgPyBhcmd1bWVudCBpbnN0YW5jZW9mIEFycmF5XG4gICAgICAgICAgICAgICAgICAgIDogT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50KSA9PT0gXCJbb2JqZWN0IEFycmF5XVwiO1xuICAgICAgICB9XG4gICAgICAgIC8vIDcuMi4zIElzQ2FsbGFibGUoYXJndW1lbnQpXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWlzY2FsbGFibGVcbiAgICAgICAgZnVuY3Rpb24gSXNDYWxsYWJsZShhcmd1bWVudCkge1xuICAgICAgICAgICAgLy8gTk9URTogVGhpcyBpcyBhbiBhcHByb3hpbWF0aW9uIGFzIHdlIGNhbm5vdCBjaGVjayBmb3IgW1tDYWxsXV0gaW50ZXJuYWwgbWV0aG9kLlxuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBhcmd1bWVudCA9PT0gXCJmdW5jdGlvblwiO1xuICAgICAgICB9XG4gICAgICAgIC8vIDcuMi40IElzQ29uc3RydWN0b3IoYXJndW1lbnQpXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWlzY29uc3RydWN0b3JcbiAgICAgICAgZnVuY3Rpb24gSXNDb25zdHJ1Y3Rvcihhcmd1bWVudCkge1xuICAgICAgICAgICAgLy8gTk9URTogVGhpcyBpcyBhbiBhcHByb3hpbWF0aW9uIGFzIHdlIGNhbm5vdCBjaGVjayBmb3IgW1tDb25zdHJ1Y3RdXSBpbnRlcm5hbCBtZXRob2QuXG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIGFyZ3VtZW50ID09PSBcImZ1bmN0aW9uXCI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNy4yLjcgSXNQcm9wZXJ0eUtleShhcmd1bWVudClcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtaXNwcm9wZXJ0eWtleVxuICAgICAgICBmdW5jdGlvbiBJc1Byb3BlcnR5S2V5KGFyZ3VtZW50KSB7XG4gICAgICAgICAgICBzd2l0Y2ggKFR5cGUoYXJndW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAzIC8qIFN0cmluZyAqLzogcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgY2FzZSA0IC8qIFN5bWJvbCAqLzogcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIDcuMyBPcGVyYXRpb25zIG9uIE9iamVjdHNcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb3BlcmF0aW9ucy1vbi1vYmplY3RzXG4gICAgICAgIC8vIDcuMy45IEdldE1ldGhvZChWLCBQKVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1nZXRtZXRob2RcbiAgICAgICAgZnVuY3Rpb24gR2V0TWV0aG9kKFYsIFApIHtcbiAgICAgICAgICAgIHZhciBmdW5jID0gVltQXTtcbiAgICAgICAgICAgIGlmIChmdW5jID09PSB1bmRlZmluZWQgfHwgZnVuYyA9PT0gbnVsbClcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKCFJc0NhbGxhYmxlKGZ1bmMpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jO1xuICAgICAgICB9XG4gICAgICAgIC8vIDcuNCBPcGVyYXRpb25zIG9uIEl0ZXJhdG9yIE9iamVjdHNcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb3BlcmF0aW9ucy1vbi1pdGVyYXRvci1vYmplY3RzXG4gICAgICAgIGZ1bmN0aW9uIEdldEl0ZXJhdG9yKG9iaikge1xuICAgICAgICAgICAgdmFyIG1ldGhvZCA9IEdldE1ldGhvZChvYmosIGl0ZXJhdG9yU3ltYm9sKTtcbiAgICAgICAgICAgIGlmICghSXNDYWxsYWJsZShtZXRob2QpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTsgLy8gZnJvbSBDYWxsXG4gICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBtZXRob2QuY2FsbChvYmopO1xuICAgICAgICAgICAgaWYgKCFJc09iamVjdChpdGVyYXRvcikpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yO1xuICAgICAgICB9XG4gICAgICAgIC8vIDcuNC40IEl0ZXJhdG9yVmFsdWUoaXRlclJlc3VsdClcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLzIwMTYvI3NlYy1pdGVyYXRvcnZhbHVlXG4gICAgICAgIGZ1bmN0aW9uIEl0ZXJhdG9yVmFsdWUoaXRlclJlc3VsdCkge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZXJSZXN1bHQudmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNy40LjUgSXRlcmF0b3JTdGVwKGl0ZXJhdG9yKVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1pdGVyYXRvcnN0ZXBcbiAgICAgICAgZnVuY3Rpb24gSXRlcmF0b3JTdGVwKGl0ZXJhdG9yKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gZmFsc2UgOiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtaXRlcmF0b3JjbG9zZVxuICAgICAgICBmdW5jdGlvbiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yKSB7XG4gICAgICAgICAgICB2YXIgZiA9IGl0ZXJhdG9yW1wicmV0dXJuXCJdO1xuICAgICAgICAgICAgaWYgKGYpXG4gICAgICAgICAgICAgICAgZi5jYWxsKGl0ZXJhdG9yKTtcbiAgICAgICAgfVxuICAgICAgICAvLyA5LjEgT3JkaW5hcnkgT2JqZWN0IEludGVybmFsIE1ldGhvZHMgYW5kIEludGVybmFsIFNsb3RzXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9yZGluYXJ5LW9iamVjdC1pbnRlcm5hbC1tZXRob2RzLWFuZC1pbnRlcm5hbC1zbG90c1xuICAgICAgICAvLyA5LjEuMS4xIE9yZGluYXJ5R2V0UHJvdG90eXBlT2YoTylcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb3JkaW5hcnlnZXRwcm90b3R5cGVvZlxuICAgICAgICBmdW5jdGlvbiBPcmRpbmFyeUdldFByb3RvdHlwZU9mKE8pIHtcbiAgICAgICAgICAgIHZhciBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgTyAhPT0gXCJmdW5jdGlvblwiIHx8IE8gPT09IGZ1bmN0aW9uUHJvdG90eXBlKVxuICAgICAgICAgICAgICAgIHJldHVybiBwcm90bztcbiAgICAgICAgICAgIC8vIFR5cGVTY3JpcHQgZG9lc24ndCBzZXQgX19wcm90b19fIGluIEVTNSwgYXMgaXQncyBub24tc3RhbmRhcmQuXG4gICAgICAgICAgICAvLyBUcnkgdG8gZGV0ZXJtaW5lIHRoZSBzdXBlcmNsYXNzIGNvbnN0cnVjdG9yLiBDb21wYXRpYmxlIGltcGxlbWVudGF0aW9uc1xuICAgICAgICAgICAgLy8gbXVzdCBlaXRoZXIgc2V0IF9fcHJvdG9fXyBvbiBhIHN1YmNsYXNzIGNvbnN0cnVjdG9yIHRvIHRoZSBzdXBlcmNsYXNzIGNvbnN0cnVjdG9yLFxuICAgICAgICAgICAgLy8gb3IgZW5zdXJlIGVhY2ggY2xhc3MgaGFzIGEgdmFsaWQgYGNvbnN0cnVjdG9yYCBwcm9wZXJ0eSBvbiBpdHMgcHJvdG90eXBlIHRoYXRcbiAgICAgICAgICAgIC8vIHBvaW50cyBiYWNrIHRvIHRoZSBjb25zdHJ1Y3Rvci5cbiAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgbm90IHRoZSBzYW1lIGFzIEZ1bmN0aW9uLltbUHJvdG90eXBlXV0sIHRoZW4gdGhpcyBpcyBkZWZpbmF0ZWx5IGluaGVyaXRlZC5cbiAgICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIGNhc2Ugd2hlbiBpbiBFUzYgb3Igd2hlbiB1c2luZyBfX3Byb3RvX18gaW4gYSBjb21wYXRpYmxlIGJyb3dzZXIuXG4gICAgICAgICAgICBpZiAocHJvdG8gIT09IGZ1bmN0aW9uUHJvdG90eXBlKVxuICAgICAgICAgICAgICAgIHJldHVybiBwcm90bztcbiAgICAgICAgICAgIC8vIElmIHRoZSBzdXBlciBwcm90b3R5cGUgaXMgT2JqZWN0LnByb3RvdHlwZSwgbnVsbCwgb3IgdW5kZWZpbmVkLCB0aGVuIHdlIGNhbm5vdCBkZXRlcm1pbmUgdGhlIGhlcml0YWdlLlxuICAgICAgICAgICAgdmFyIHByb3RvdHlwZSA9IE8ucHJvdG90eXBlO1xuICAgICAgICAgICAgdmFyIHByb3RvdHlwZVByb3RvID0gcHJvdG90eXBlICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90b3R5cGUpO1xuICAgICAgICAgICAgaWYgKHByb3RvdHlwZVByb3RvID09IG51bGwgfHwgcHJvdG90eXBlUHJvdG8gPT09IE9iamVjdC5wcm90b3R5cGUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3RvO1xuICAgICAgICAgICAgLy8gSWYgdGhlIGNvbnN0cnVjdG9yIHdhcyBub3QgYSBmdW5jdGlvbiwgdGhlbiB3ZSBjYW5ub3QgZGV0ZXJtaW5lIHRoZSBoZXJpdGFnZS5cbiAgICAgICAgICAgIHZhciBjb25zdHJ1Y3RvciA9IHByb3RvdHlwZVByb3RvLmNvbnN0cnVjdG9yO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zdHJ1Y3RvciAhPT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBwcm90bztcbiAgICAgICAgICAgIC8vIElmIHdlIGhhdmUgc29tZSBraW5kIG9mIHNlbGYtcmVmZXJlbmNlLCB0aGVuIHdlIGNhbm5vdCBkZXRlcm1pbmUgdGhlIGhlcml0YWdlLlxuICAgICAgICAgICAgaWYgKGNvbnN0cnVjdG9yID09PSBPKVxuICAgICAgICAgICAgICAgIHJldHVybiBwcm90bztcbiAgICAgICAgICAgIC8vIHdlIGhhdmUgYSBwcmV0dHkgZ29vZCBndWVzcyBhdCB0aGUgaGVyaXRhZ2UuXG4gICAgICAgICAgICByZXR1cm4gY29uc3RydWN0b3I7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbmFpdmUgTWFwIHNoaW1cbiAgICAgICAgZnVuY3Rpb24gQ3JlYXRlTWFwUG9seWZpbGwoKSB7XG4gICAgICAgICAgICB2YXIgY2FjaGVTZW50aW5lbCA9IHt9O1xuICAgICAgICAgICAgdmFyIGFycmF5U2VudGluZWwgPSBbXTtcbiAgICAgICAgICAgIHZhciBNYXBJdGVyYXRvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBNYXBJdGVyYXRvcihrZXlzLCB2YWx1ZXMsIHNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2luZGV4ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5cyA9IGtleXM7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlcyA9IHZhbHVlcztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgTWFwSXRlcmF0b3IucHJvdG90eXBlW1wiQEBpdGVyYXRvclwiXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG4gICAgICAgICAgICAgICAgTWFwSXRlcmF0b3IucHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG4gICAgICAgICAgICAgICAgTWFwSXRlcmF0b3IucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuX2luZGV4O1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8IHRoaXMuX2tleXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fc2VsZWN0b3IodGhpcy5fa2V5c1tpbmRleF0sIHRoaXMuX3ZhbHVlc1tpbmRleF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ICsgMSA+PSB0aGlzLl9rZXlzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2luZGV4ID0gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5cyA9IGFycmF5U2VudGluZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzID0gYXJyYXlTZW50aW5lbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2luZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogcmVzdWx0LCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIE1hcEl0ZXJhdG9yLnByb3RvdHlwZS50aHJvdyA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5kZXggPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleXMgPSBhcnJheVNlbnRpbmVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzID0gYXJyYXlTZW50aW5lbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIE1hcEl0ZXJhdG9yLnByb3RvdHlwZS5yZXR1cm4gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2luZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2luZGV4ID0gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXlzID0gYXJyYXlTZW50aW5lbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlcyA9IGFycmF5U2VudGluZWw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiB0cnVlIH07XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gTWFwSXRlcmF0b3I7XG4gICAgICAgICAgICB9KCkpO1xuICAgICAgICAgICAgcmV0dXJuIC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBNYXAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzID0gW107XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlS2V5ID0gY2FjaGVTZW50aW5lbDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVJbmRleCA9IC0yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWFwLnByb3RvdHlwZSwgXCJzaXplXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9rZXlzLmxlbmd0aDsgfSxcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgTWFwLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiAoa2V5KSB7IHJldHVybiB0aGlzLl9maW5kKGtleSwgLyppbnNlcnQqLyBmYWxzZSkgPj0gMDsgfTtcbiAgICAgICAgICAgICAgICBNYXAucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5fZmluZChrZXksIC8qaW5zZXJ0Ki8gZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXggPj0gMCA/IHRoaXMuX3ZhbHVlc1tpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBNYXAucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuX2ZpbmQoa2V5LCAvKmluc2VydCovIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXNbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgTWFwLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuX2ZpbmQoa2V5LCAvKmluc2VydCovIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaXplID0gdGhpcy5fa2V5cy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gaW5kZXggKyAxOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5c1tpIC0gMV0gPSB0aGlzLl9rZXlzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlc1tpIC0gMV0gPSB0aGlzLl92YWx1ZXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXlzLmxlbmd0aC0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzLmxlbmd0aC0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gdGhpcy5fY2FjaGVLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZUtleSA9IGNhY2hlU2VudGluZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVJbmRleCA9IC0yO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgTWFwLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5cy5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVLZXkgPSBjYWNoZVNlbnRpbmVsO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZUluZGV4ID0gLTI7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBNYXAucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgTWFwSXRlcmF0b3IodGhpcy5fa2V5cywgdGhpcy5fdmFsdWVzLCBnZXRLZXkpOyB9O1xuICAgICAgICAgICAgICAgIE1hcC5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IE1hcEl0ZXJhdG9yKHRoaXMuX2tleXMsIHRoaXMuX3ZhbHVlcywgZ2V0VmFsdWUpOyB9O1xuICAgICAgICAgICAgICAgIE1hcC5wcm90b3R5cGUuZW50cmllcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBNYXBJdGVyYXRvcih0aGlzLl9rZXlzLCB0aGlzLl92YWx1ZXMsIGdldEVudHJ5KTsgfTtcbiAgICAgICAgICAgICAgICBNYXAucHJvdG90eXBlW1wiQEBpdGVyYXRvclwiXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuZW50cmllcygpOyB9O1xuICAgICAgICAgICAgICAgIE1hcC5wcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5lbnRyaWVzKCk7IH07XG4gICAgICAgICAgICAgICAgTWFwLnByb3RvdHlwZS5fZmluZCA9IGZ1bmN0aW9uIChrZXksIGluc2VydCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY2FjaGVLZXkgIT09IGtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVJbmRleCA9IHRoaXMuX2tleXMuaW5kZXhPZih0aGlzLl9jYWNoZUtleSA9IGtleSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NhY2hlSW5kZXggPCAwICYmIGluc2VydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVJbmRleCA9IHRoaXMuX2tleXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZUluZGV4O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hcDtcbiAgICAgICAgICAgIH0oKSk7XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRLZXkoa2V5LCBfKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFZhbHVlKF8sIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0RW50cnkoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBba2V5LCB2YWx1ZV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gbmFpdmUgU2V0IHNoaW1cbiAgICAgICAgZnVuY3Rpb24gQ3JlYXRlU2V0UG9seWZpbGwoKSB7XG4gICAgICAgICAgICByZXR1cm4gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFNldCgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWFwID0gbmV3IF9NYXAoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNldC5wcm90b3R5cGUsIFwic2l6ZVwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fbWFwLnNpemU7IH0sXG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIFNldC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB0aGlzLl9tYXAuaGFzKHZhbHVlKTsgfTtcbiAgICAgICAgICAgICAgICBTZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdGhpcy5fbWFwLnNldCh2YWx1ZSwgdmFsdWUpLCB0aGlzOyB9O1xuICAgICAgICAgICAgICAgIFNldC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB0aGlzLl9tYXAuZGVsZXRlKHZhbHVlKTsgfTtcbiAgICAgICAgICAgICAgICBTZXQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkgeyB0aGlzLl9tYXAuY2xlYXIoKTsgfTtcbiAgICAgICAgICAgICAgICBTZXQucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9tYXAua2V5cygpOyB9O1xuICAgICAgICAgICAgICAgIFNldC5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fbWFwLnZhbHVlcygpOyB9O1xuICAgICAgICAgICAgICAgIFNldC5wcm90b3R5cGUuZW50cmllcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX21hcC5lbnRyaWVzKCk7IH07XG4gICAgICAgICAgICAgICAgU2V0LnByb3RvdHlwZVtcIkBAaXRlcmF0b3JcIl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmtleXMoKTsgfTtcbiAgICAgICAgICAgICAgICBTZXQucHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMua2V5cygpOyB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBTZXQ7XG4gICAgICAgICAgICB9KCkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIG5haXZlIFdlYWtNYXAgc2hpbVxuICAgICAgICBmdW5jdGlvbiBDcmVhdGVXZWFrTWFwUG9seWZpbGwoKSB7XG4gICAgICAgICAgICB2YXIgVVVJRF9TSVpFID0gMTY7XG4gICAgICAgICAgICB2YXIga2V5cyA9IEhhc2hNYXAuY3JlYXRlKCk7XG4gICAgICAgICAgICB2YXIgcm9vdEtleSA9IENyZWF0ZVVuaXF1ZUtleSgpO1xuICAgICAgICAgICAgcmV0dXJuIC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBXZWFrTWFwKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXkgPSBDcmVhdGVVbmlxdWVLZXkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgV2Vha01hcC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFibGUgPSBHZXRPckNyZWF0ZVdlYWtNYXBUYWJsZSh0YXJnZXQsIC8qY3JlYXRlKi8gZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFibGUgIT09IHVuZGVmaW5lZCA/IEhhc2hNYXAuaGFzKHRhYmxlLCB0aGlzLl9rZXkpIDogZmFsc2U7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBXZWFrTWFwLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YWJsZSA9IEdldE9yQ3JlYXRlV2Vha01hcFRhYmxlKHRhcmdldCwgLypjcmVhdGUqLyBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0YWJsZSAhPT0gdW5kZWZpbmVkID8gSGFzaE1hcC5nZXQodGFibGUsIHRoaXMuX2tleSkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBXZWFrTWFwLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAodGFyZ2V0LCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFibGUgPSBHZXRPckNyZWF0ZVdlYWtNYXBUYWJsZSh0YXJnZXQsIC8qY3JlYXRlKi8gdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRhYmxlW3RoaXMuX2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YWJsZSA9IEdldE9yQ3JlYXRlV2Vha01hcFRhYmxlKHRhcmdldCwgLypjcmVhdGUqLyBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0YWJsZSAhPT0gdW5kZWZpbmVkID8gZGVsZXRlIHRhYmxlW3RoaXMuX2tleV0gOiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFdlYWtNYXAucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBOT1RFOiBub3QgYSByZWFsIGNsZWFyLCBqdXN0IG1ha2VzIHRoZSBwcmV2aW91cyBkYXRhIHVucmVhY2hhYmxlXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleSA9IENyZWF0ZVVuaXF1ZUtleSgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIFdlYWtNYXA7XG4gICAgICAgICAgICB9KCkpO1xuICAgICAgICAgICAgZnVuY3Rpb24gQ3JlYXRlVW5pcXVlS2V5KCkge1xuICAgICAgICAgICAgICAgIHZhciBrZXk7XG4gICAgICAgICAgICAgICAgZG9cbiAgICAgICAgICAgICAgICAgICAga2V5ID0gXCJAQFdlYWtNYXBAQFwiICsgQ3JlYXRlVVVJRCgpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChIYXNoTWFwLmhhcyhrZXlzLCBrZXkpKTtcbiAgICAgICAgICAgICAgICBrZXlzW2tleV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBHZXRPckNyZWF0ZVdlYWtNYXBUYWJsZSh0YXJnZXQsIGNyZWF0ZSkge1xuICAgICAgICAgICAgICAgIGlmICghaGFzT3duLmNhbGwodGFyZ2V0LCByb290S2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNyZWF0ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHJvb3RLZXksIHsgdmFsdWU6IEhhc2hNYXAuY3JlYXRlKCkgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXRbcm9vdEtleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBGaWxsUmFuZG9tQnl0ZXMoYnVmZmVyLCBzaXplKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlcltpXSA9IE1hdGgucmFuZG9tKCkgKiAweGZmIHwgMDtcbiAgICAgICAgICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gR2VuUmFuZG9tQnl0ZXMoc2l6ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgVWludDhBcnJheSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY3J5cHRvICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoc2l6ZSkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1zQ3J5cHRvICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheShzaXplKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBGaWxsUmFuZG9tQnl0ZXMobmV3IFVpbnQ4QXJyYXkoc2l6ZSksIHNpemUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gRmlsbFJhbmRvbUJ5dGVzKG5ldyBBcnJheShzaXplKSwgc2l6ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBDcmVhdGVVVUlEKCkge1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gR2VuUmFuZG9tQnl0ZXMoVVVJRF9TSVpFKTtcbiAgICAgICAgICAgICAgICAvLyBtYXJrIGFzIHJhbmRvbSAtIFJGQyA0MTIyIMKnIDQuNFxuICAgICAgICAgICAgICAgIGRhdGFbNl0gPSBkYXRhWzZdICYgMHg0ZiB8IDB4NDA7XG4gICAgICAgICAgICAgICAgZGF0YVs4XSA9IGRhdGFbOF0gJiAweGJmIHwgMHg4MDtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gXCJcIjtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBvZmZzZXQgPSAwOyBvZmZzZXQgPCBVVUlEX1NJWkU7ICsrb2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBieXRlID0gZGF0YVtvZmZzZXRdO1xuICAgICAgICAgICAgICAgICAgICBpZiAob2Zmc2V0ID09PSA0IHx8IG9mZnNldCA9PT0gNiB8fCBvZmZzZXQgPT09IDgpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gXCItXCI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChieXRlIDwgMTYpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gXCIwXCI7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBieXRlLnRvU3RyaW5nKDE2KS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHVzZXMgYSBoZXVyaXN0aWMgdXNlZCBieSB2OCBhbmQgY2hha3JhIHRvIGZvcmNlIGFuIG9iamVjdCBpbnRvIGRpY3Rpb25hcnkgbW9kZS5cbiAgICAgICAgZnVuY3Rpb24gTWFrZURpY3Rpb25hcnkob2JqKSB7XG4gICAgICAgICAgICBvYmouX18gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBkZWxldGUgb2JqLl9fO1xuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuICAgIH0pO1xufSkoUmVmbGVjdCB8fCAoUmVmbGVjdCA9IHt9KSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8qKlxuICogMjMwMTEyMTMwNlxuICogaWQuZGF0ZVxuICog0YHQvtC30LTQsNGC0Ywg0YPQvdC40LrQsNC70YzQvdGL0Lkg0L3QvtC80LXRgCDQv9C+INC00LDRgtC1XG4gKiBAZXhwb3J0XG4gKiBAcmV0dXJuIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24g0KPQvdC40LrQndC+0LzQtdGA0J/QvtCU0LDRgtC1KCkge1xuICAgIGxldCBkID0gbmV3IERhdGUoKTtcbiAgICBsZXQgWSA9IFN0cmluZyhkLmdldEZ1bGxZZWFyKCkpO1xuICAgIGxldCBNID0gU3RyaW5nKGQuZ2V0TW9udGgoKSk7XG4gICAgbGV0IEQgPSBTdHJpbmcoZC5nZXREYXRlKCkpO1xuICAgIGxldCBoID0gU3RyaW5nKGQuZ2V0SG91cnMoKSk7XG4gICAgbGV0IG0gPSBTdHJpbmcoZC5nZXRNaW51dGVzKCkpO1xuICAgIGxldCBzID0gU3RyaW5nKGQuZ2V0U2Vjb25kcygpKTtcbiAgICByZXR1cm4gWSArIE0gKyBEICsgaCArIG0gKyBzO1xufVxuIiwiZXhwb3J0IHZhciBDTEFTUyA9IFtdO1xuLyoqXG4gKiAyMzA5MDExNzE3XG4gKiBqQ2xhc3NcbiAqIEBleHBvcnRcbiAqIEBwYXJhbSB7Kn0g0JrQu9Cw0YHRgVxuICogQHBhcmFtIHsqfSBwXG4gKiBAcGFyYW0geyp9IFtQPXVuZGVmaW5lZF1cbiAqIEByZXR1cm4geyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBqQ2xhc3Mo0JrQu9Cw0YHRgSwgcCwgUCA9IHVuZGVmaW5lZCkge1xuICAgIGlmIChQKSB7XG4gICAgICAgIHAucGFyYW0gPSBQO1xuICAgIH1cbiAgICByZXR1cm4gbmV3ICjQmtC70LDRgdGBKShwKTtcbn1cbiIsIi8qKlxuICogMjIwODI5MTE1OFxuICogb2JqLk1lcmdlUmVjdXJzaXZlXG4gKiDQodC+0LXQtNC40L3QuNGC0YzQodCy0L7QudGB0YLQstCw0J7QsdGK0LXQutGC0L7QslxuICog0YHQvtC10LTQuNC90LjRgtGMINGB0LLQvtC50YHRgtCy0LAg0L7QsdGK0LXQutGC0L7QslxuICogQGV4cG9ydFxuICogQHBhcmFtIHsqfSBvYmoxXG4gKiBAcGFyYW0geyp9IG9iajJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzX2Z1bnM9ZmFsc2VdXG4gKiBAcmV0dXJuIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24g0KHQvtC10LTQuNC90LjRgtGM0KHQstC+0LnRgdGC0LLQsNCe0LHRitC10LrRgtC+0LIob2JqMSwgb2JqMiwgaXNfZnVucyA9IGZhbHNlKSB7XG4gICAgZm9yICh2YXIgcCBpbiBvYmoyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvL2V2ZW50XG4gICAgICAgICAgICBpZiAoaXNfZnVucyA9PSBmYWxzZSlcbiAgICAgICAgICAgICAgICBpc19mdW5zID0gcCA9PSAnZXZlbnQnO1xuICAgICAgICAgICAgLy8gUHJvcGVydHkgaW4gZGVzdGluYXRpb24gb2JqZWN0IHNldDsgdXBkYXRlIGl0cyB2YWx1ZS5cbiAgICAgICAgICAgIGlmIChvYmoyW3BdLmNvbnN0cnVjdG9yID09IE9iamVjdCkge1xuICAgICAgICAgICAgICAgIG9iajFbcF0gPSDQodC+0LXQtNC40L3QuNGC0YzQodCy0L7QudGB0YLQstCw0J7QsdGK0LXQutGC0L7QsihvYmoxW3BdLCBvYmoyW3BdLCBpc19mdW5zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8v0YHQstC+0LnRgdGC0LLQviDRj9Cy0LvRj9C10YLRgdGPINC80LDRgdGB0LjQstC+0LxcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvYmoxW3BdKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNfZnVucyB8fCBwID09ICdjbGFzc2VzJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqMVtwXSA9IG9iajFbcF0uY29uY2F0KG9iajJbcF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMob2JqMVtwXSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqMVtwXVtrZXldID0g0KHQvtC10LTQuNC90LjRgtGM0KHQstC+0LnRgdGC0LLQsNCe0LHRitC10LrRgtC+0LIob2JqMVtwXVtrZXldLCBvYmoyW3BdW2tleV0sIGlzX2Z1bnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqMVtwXS5sZW5ndGggPCBvYmoyW3BdLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSBvYmoxW3BdLmxlbmd0aDsgaSA8IG9iajJbcF0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqMVtwXS5wdXNoKG9iajJbcF1baV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy/QuNC30LzQtdC90LjRgtGMINGB0LLQvtC50YHRgtCy0L5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAob2JqMVtwXSkgPT0gJ3N0cmluZycgJiYgcCA9PSAnY2xhc3NlcycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iajFbcF0gPSBbb2JqMVtwXSwgb2JqMltwXV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqMVtwXSA9IG9iajJbcF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyDRgdCy0L7QudGB0YLQstC+INC90LUg0LfQsNC00LDQvdC+LCDRg9GB0YLQsNC90L7QstC40YLQtSDQt9C90LDRh9C10L3QuNC1XG4gICAgICAgICAgICBvYmoxW3BdID0gb2JqMltwXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqMTtcbn1cbiIsIi8qKlxuICogMjMwMzIzMTI0MFxuICogR0xPQkFMXG4gKiBibzUyXG4gKiDQu9C40YfQvdCw0Y8g0LPQu9C+0LHQsNC70YzQvdCw0Y8g0L/QtdGA0LXQvNC10L3QvdCw0Y9cbiAqIEBjbGFzcyBjbGFzczIzMDMyMzEyNDBcbiAqL1xuY2xhc3MgY2xhc3MyMzAzMjMxMjQwIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5ob3N0bmFtZSA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG4gICAgICAgIHRoaXMuZiA9IFtdO1xuICAgICAgICB0aGlzLnogPSAxMDAyO1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IG5ldyBjbGFzczIzMDMyMzEyNDAoKTtcbiIsImltcG9ydCB7IGJvNTIgfSBmcm9tIFwiQHNyYy9pbmRleFwiO1xuLyoqXG4gKiAyMzA5MDEyMDEzXG4gKiBqZnVuLmV2XG4gKiBqZnVuX2V2XG4gKiBAZXhwb3J0XG4gKiBAcGFyYW0geyp9IHBcbiAqIEByZXR1cm4geyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBqZnVuX2V2KHApIHtcbiAgICBsZXQgZXYgPSBwWzBdO1xuICAgIGxldCBlbCA9IHBbMV07XG4gICAgbGV0IG51bWJlciA9IHBbMl07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobnVtYmVyKSkge1xuICAgICAgICBPYmplY3Qua2V5cyhudW1iZXIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgYm81Mi5mW251bWJlcltrZXldXS5kYXRhKGVsLCBldik7XG4gICAgICAgIH0sIG51bWJlcik7XG4gICAgICAgIHJldHVybiAnYXJyYXknO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChudW1iZXIpID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG51bWJlcihlbCwgZXYpO1xuICAgIH1cbiAgICByZXR1cm4gYm81Mi5mW251bWJlcl0uZGF0YShlbCwgZXYpO1xufVxuIiwiaW1wb3J0IHsgakNsYXNzLCDQodC+0LXQtNC40L3QuNGC0YzQodCy0L7QudGB0YLQstCw0J7QsdGK0LXQutGC0L7QsiwgdGVnLCBUZWcgfSBmcm9tIFwiQHNyYy9pbmRleFwiO1xuLyoqMjMwOTAyMTUxM1xuICogdGVnLmNvbXBsZXhcbiAqINCh0L7Qt9C00LDRgtGM0KLQtdCzXG4gKiDRgdC+0LfQtNCw0YLRjCDRgtC10LNcbiAqIEBleHBvcnRcbiAqIEBwYXJhbSB7Kn0gaWRcbiAqIEBwYXJhbSB7Kn0gcFxuICogQHJldHVybiB7Kn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24g0KHQvtC30LTQsNGC0YzQotC10LMoaWQsIHAgPSB1bmRlZmluZWQpIHtcbiAgICAvL9C/0YDQvtCy0LXRgNC60LAg0L3QsCDQsNGC0YLRgNC40LHRg9GC0YtcbiAgICBpZiAocCA9PSB1bmRlZmluZWQpXG4gICAgICAgIHAgPSB7fTtcbiAgICBsZXQgdCA9IGlkO1xuICAgIGlmICh0eXBlb2YgKGlkKSAhPSAnb2JqZWN0Jykge1xuICAgICAgICAvL9C/0YDQvtCy0LXRgNC60LAg0L3QsCDQutC+0LzQv9C70LXQutGB0L3QvtGB0YLRjCDQuCDQstGL0LfQvtCyINC80LDRgdGB0LjQstCwINGC0LXQs1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShpZCkpIHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGlkKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICAvL29iai5NZXJnZVJlY3Vyc2l2ZVxuICAgICAgICAgICAgICAgIHQgPSDQodC+0LXQtNC40L3QuNGC0YzQodCy0L7QudGB0YLQstCw0J7QsdGK0LXQutGC0L7Qsih0LCB0ZWcoaWRba2V5XSwgcCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gakNsYXNzKFRlZywgdCwgcCk7XG59XG4iLCJpbXBvcnQgeyBibzUyLCBNZW51XzIyMDYxNjEwNTIsINCj0L3QuNC60J3QvtC80LXRgNCf0L7QlNCw0YLQtSB9IGZyb20gXCJAc3JjL2luZGV4XCI7XG4vKioyMjA4MjkwOTM4XG4gKiB0ZWcuYXR0ci5ldmVudC5hZGRcbiAqINCU0L7QsdCw0LLQuNGC0YzQodC+0LHRi9GC0LjRj9Ci0LXQs9GDXG4gKiDQtNC+0LHQsNCy0YLRjCDRgdC+0LHRi9GC0LjRjyDQtNC70Y8g0YLQtdCz0LBcbiAqIEBleHBvcnRcbiAqIEBwYXJhbSB7Kn0gcFxuICogQHBhcmFtIHsqfSBbdD11bmRlZmluZWRdXG4gKiBAcmV0dXJuIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24g0JTQvtCx0LDQstC40YLRjNCh0L7QsdGL0YLQuNGP0KLQtdCz0YMocCwgdCA9IHVuZGVmaW5lZCkge1xuICAgIGlmIChwLmV2ZW50ID09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIE9iamVjdC5rZXlzKHAuZXZlbnQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBsZXQgYm9keSA9IHAuZXZlbnRba2V5XTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYm9keSkpIHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGJvZHkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgINCU0L7QsdCw0LLQuNGC0YzQodC+0LHRi9GC0LjQtdCe0LHRitC10LrRgtGDKHAuZXhbMF0sIGtleSwgYm9keSk7XG4gICAgICAgICAgICB9LCBib2R5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICDQlNC+0LHQsNCy0LjRgtGM0KHQvtCx0YvRgtC40LXQntCx0YrQtdC60YLRgyhwLmV4WzBdLCBrZXksIGJvZHkpO1xuICAgIH0sIHAuZXZlbnQpO1xufVxuLy9hZGRFdmVudFxuZnVuY3Rpb24g0JTQvtCx0LDQstC40YLRjNCc0LXQvdGOKGUsINCY0LzRj9Ch0L7QsdGL0YLQuNGPLCBib2R5KSB7XG4gICAgaWYgKNCY0LzRj9Ch0L7QsdGL0YLQuNGPICE9ICdjb250ZXh0bWVudScpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAkKGUpLmNvbnRleHRtZW51KChlKSA9PiBNZW51XzIyMDYxNjEwNTIuSW5zdGFuY2UubWFpbih7IGZ1bjogYm9keSwgZXY6IGUgfSkpO1xuICAgIHJldHVybiB0cnVlO1xufVxuLy/QpNGD0L3QutGG0LjRjyDQtNC70Y8g0LTQvtCx0LDQstC70LXQvdC40Y8g0L7QsdGA0LDQsdC+0YLRh9C40LrQvtCyINGB0L7QsdGL0YLQuNC5XG5leHBvcnQgZnVuY3Rpb24g0JTQvtCx0LDQstC40YLRjNCh0L7QsdGL0YLQuNC10J7QsdGK0LXQutGC0YMob2JqZWN0LCBldmVudCwgaGFuZGxlciwgdXNlQ2FwdHVyZSA9IHVuZGVmaW5lZCkge1xuICAgIGlmICjQlNC+0LHQsNCy0LjRgtGM0JzQtdC90Y4ob2JqZWN0LCBldmVudCwgaGFuZGxlcikpXG4gICAgICAgIHJldHVybjtcbiAgICAvLyDQl9Cw0LrRgNGL0LLQsNC10Lwg0LrQvtC90YLQtdC60YHRgtC90L7QtSDQv9GA0Lgg0LrQu9C40LrQtSDQu9C10LLQvtC5INC40LvQuCDQv9GA0LDQstC+0Lkg0LrQvdC+0L/QutC+0Lkg0L/QviDQtNC+0LrRg9C80LXQvdGC0YNcbiAgICBpZiAob2JqZWN0LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgb2JqZWN0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIHVzZUNhcHR1cmUgPyB1c2VDYXB0dXJlIDogZmFsc2UpO1xuICAgIH1cbiAgICBlbHNlIGlmIChvYmplY3QuYXR0YWNoRXZlbnQpIHtcbiAgICAgICAgb2JqZWN0LmF0dGFjaEV2ZW50KCdvbicgKyBldmVudCwgaGFuZGxlcik7XG4gICAgfVxuICAgIGVsc2VcbiAgICAgICAgYWxlcnQoXCJBZGQgaGFuZGxlciBpcyBub3Qgc3VwcG9ydGVkXCIpO1xufVxuZnVuY3Rpb24gamZ1bl9ldihwKSB7XG4gICAgbGV0IGV2ID0gcFswXTtcbiAgICBsZXQgZWwgPSBwWzFdO1xuICAgIGxldCBudW1iZXIgPSBwWzJdO1xuICAgIGlmIChBcnJheS5pc0FycmF5KG51bWJlcikpIHtcbiAgICAgICAgT2JqZWN0LmtleXMobnVtYmVyKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIGJvNTIuZltudW1iZXJba2V5XV0uZGF0YShlbCwgZXYpO1xuICAgICAgICB9LCBudW1iZXIpO1xuICAgICAgICByZXR1cm4gJ2FycmF5JztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAobnVtYmVyKSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBudW1iZXIoZWwsIGV2KTtcbiAgICB9XG4gICAgcmV0dXJuIGJvNTIuZltudW1iZXJdLmRhdGEoZWwsIGV2KTtcbn1cbmZ1bmN0aW9uIGZ1bjIzMDEyMjIwMDQoYm9keSkge1xuICAgIGxldCBpZCA9INCj0L3QuNC60J3QvtC80LXRgNCf0L7QlNCw0YLQtSgpO1xuICAgIGJvNTIuZltpZF0gPSB7IGFyZzogW10sIGRhdGE6IGJvZHkgfTtcbiAgICByZXR1cm4gJyZxdW90OycgKyBpZCArICcmcXVvdDsnO1xufVxuIiwiLyoqMjIwNjIyMTIxOVxuICogdGVnLmFkZC5ib2R5XG4gKiDQlNC+0LHQsNCy0LjRgtGM0KLQtdCz0JLQotC10LvQvlxuICog0LTQvtCx0LDQstC40YLRjCDRgtC10LMg0LIg0YLQtdC70L5cbiAqIEBleHBvcnRcbiAqIEBwYXJhbSB7Kn0gdGVnXG4gKiBAcGFyYW0geyp9IGJvZHlcbiAqIEBwYXJhbSB7Kn0gW2tleT11bmRlZmluZWRdXG4gKiBAcmV0dXJuIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24g0JTQvtCx0LDQstC40YLRjNCi0LXQs9CS0KLQtdC70L4odGVnLCBib2R5LCBrZXkgPSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIChrZXkpID09ICdudW1iZXInKVxuICAgICAgICByZXR1cm4gJCh0ZWcpLmluc2VydEJlZm9yZSgkKGJvZHkuY2hpbGRyZW4oKS5lcShrZXkpKSk7XG4gICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgY2FzZSAnY2hpbGRyZW4nOiByZXR1cm4gJCh0ZWcpLmFwcGVuZFRvKGJvZHkpO1xuICAgICAgICBjYXNlICdjaGlsZHJlbjAnOiByZXR1cm4gJCh0ZWcpLnByZXBlbmRUbyhib2R5KTtcbiAgICAgICAgY2FzZSAnbmV4dCc6IHJldHVybiAkKHRlZykuaW5zZXJ0QWZ0ZXIoYm9keSk7XG4gICAgICAgIGNhc2UgJ2NoaWxkcmVuMC5uZXh0JzogcmV0dXJuICQodGVnKS5pbnNlcnRBZnRlcigkKGJvZHkuY2hpbGRyZW4oKS5lcSgwKSkpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICQodGVnKS5hcHBlbmRUbyhib2R5KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyB0ZWcsIFRlZyB9IGZyb20gXCJAc3JjL2luZGV4XCI7XG4vKioyMjA2MjIxNDIxXG4gKiB0ZWcuaHRtbC5kZWZhdWx0XG4gKiBIVE1M0L/QvtCj0LzQvtC70YfQsNC90LjRjtCU0LvRj9Ci0LXQs9CwXG4gKiBodG1sINC/0L4g0YPQvNC+0LvRh9Cw0L3QuNGOINC00LvRjyDRgtC10LPQsFxuICogQGV4cG9ydFxuICogQHBhcmFtIHsqfSBvYmpcbiAqIEBwYXJhbSB7Kn0gaHRtbFxuICogQHBhcmFtIHsqfSBwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBIVE1M0L/QvtCj0LzQvtC70YfQsNC90LjRjtCU0LvRj9Ci0LXQs9CwKG9iaiwgaHRtbCwgcCkge1xuICAgIGlmIChwLkVYKVxuICAgICAgICBodG1sLkVYID0gcC5FWDtcbiAgICBpZiAoaHRtbC5mKVxuICAgICAgICBodG1sID0gdGVnKGh0bWwuZiwgaHRtbC5QKTtcbiAgICBpZiAoaHRtbC5ib2R5ID09IHVuZGVmaW5lZClcbiAgICAgICAgaHRtbC5ib2R5ID0gcC5leDtcbiAgICBsZXQg0YLQtdCzID0gbmV3IFRlZyhodG1sKTtcbn1cbiIsImltcG9ydCB7INCd0L7QvNC10YDQlNC70Y/QotC10LPQsCB9IGZyb20gXCIuL3RlZy5odG1sLm51bWJlci5hZGQuMjIwNjIyMTQyNlwiO1xuaW1wb3J0IHsgSFRNTNC/0L7Qo9C80L7Qu9GH0LDQvdC40Y7QlNC70Y/QotC10LPQsCB9IGZyb20gXCIuL3RlZy5odG1sLmRlZmF1bHQuYWRkLjIyMDYyMjE0MjFcIjtcbi8qKjIyMDYyMjEzMTlcbiAqIHRlZy5odG1sLmFyci5hZGRcbiAqINCU0L7QsdCw0LLQuNGC0YxIdG1s0JzQsNGB0YHQuNCy0KLQtdCz0YNcbiAqINC00L7QsdCw0LLQuNGC0YwgaHRtbCDQuiDRgtC10LPRgyDQuNC3INC80LDRgdGB0LjQstCwXG4gKiBAZXhwb3J0XG4gKiBAcGFyYW0geyp9IG9ialxuICogQHBhcmFtIHsqfSBodG1sXG4gKiBAcGFyYW0geyp9IHBcbiAqIEByZXR1cm4geyp9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uINCU0L7QsdCw0LLQuNGC0YxIdG1s0JzQsNGB0YHQuNCy0KLQtdCz0YMob2JqLCBodG1sLCBwKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaHRtbCkgPT0gZmFsc2UpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBPYmplY3Qua2V5cyhodG1sKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKNCU0L7QsdCw0LLQuNGC0YxIdG1s0JzQsNGB0YHQuNCy0KLQtdCz0YMob2JqLCBodG1sW2tleV0sIHApID09IHRydWUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHN3aXRjaCAodHlwZW9mIChodG1sW2tleV0pKSB7XG4gICAgICAgICAgICAvL9GB0YLRgNC+0LrQsFxuICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgICAgICAkKG9iai5wLmV4KS5odG1sKCQocC5leCkuaHRtbCgpICsgaHRtbFtrZXldKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIC8v0YfQuNGB0LvQvlxuICAgICAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgICAgICAgICAvL3RlZy5odG1sLm51bWJlci5hZGRcbiAgICAgICAgICAgICAgICDQndC+0LzQtdGA0JTQu9GP0KLQtdCz0LAob2JqLCBodG1sW2tleV0sIHApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAvL2JvZHkg0L3QtSDQvtCx0L3QsNGA0YPQttC10L0g0Lgg0YDQvtC00LjRgtC10LvRjCDRj9Cy0LvRj9C10YLRgdGPINGC0LXQs9C+0LxcbiAgICAgICAgICAgICAgICBpZiAoaHRtbFtrZXldID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBpZiAoaHRtbFtrZXldLmJvZHkgPT0gdW5kZWZpbmVkKSAvLyEhIVxuICAgICAgICAgICAgICAgICAgICBpZiAocC5leClcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWxba2V5XS5ib2R5ID0gcC5leDtcbiAgICAgICAgICAgICAgICAvL3RlZy5odG1sLmRlZmF1bHQuYWRkXG4gICAgICAgICAgICAgICAgSFRNTNC/0L7Qo9C80L7Qu9GH0LDQvdC40Y7QlNC70Y/QotC10LPQsChvYmosIGh0bWxba2V5XSwgcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9LCBodG1sKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cbiIsImltcG9ydCB7IHRlZyB9IGZyb20gXCJAc3JjL2luZGV4XCI7XG5pbXBvcnQgeyBIVE1M0L/QvtCj0LzQvtC70YfQsNC90LjRjtCU0LvRj9Ci0LXQs9CwIH0gZnJvbSBcIkB0ZWcvaHRtbC90ZWcuaHRtbC5kZWZhdWx0LmFkZC4yMjA2MjIxNDIxXCI7XG4vKioyMjA2MjIxNDI2XG4gKiB0ZWcuaHRtbC5udW1iZXJcbiAqINCd0L7QvNC10YDQlNC70Y/QotC10LPQsFxuICogaHRtbCDQvdC+0LzQtdGAINC00LvRjyDRgtC10LPQsFxuICogQGV4cG9ydFxuICogQHBhcmFtIHsqfSBvYmpcbiAqIEBwYXJhbSB7Kn0gaHRtbFxuICogQHBhcmFtIHsqfSBwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiDQndC+0LzQtdGA0JTQu9GP0KLQtdCz0LAob2JqLCBodG1sLCBwKSB7XG4gICAgaHRtbCA9IHRlZyhodG1sLCBwID8gcC5wIDogb2JqLnAucCk7XG4gICAgSFRNTNC/0L7Qo9C80L7Qu9GH0LDQvdC40Y7QlNC70Y/QotC10LPQsChvYmosIGh0bWwsIHApO1xufVxuIiwiaW1wb3J0IHsgamZ1bl9ldiB9IGZyb20gXCJAc3JjL2luZGV4XCI7XG4vKioyMjA4MjkwOTQ5XG4gKiB0ZWcuZnVucy50cmlnZ2VyXG4gKiDQktGL0L/QvtC70L3QuNGC0YzQpNGD0L3QutGG0LjRjtCf0L7RgdC70LXQodC+0LfQtNCw0L3QuNGP0KLQtdCz0LBcbiAqINCy0YvQv9C+0LvQvdC40YLRjCDRhNGD0L3QutGG0LjRjiDQv9C+0YHQu9C1INGB0L7Qt9C00LDQvdC40Y8g0YLQtdCz0LBcbiAqIEBleHBvcnRcbiAqIEBwYXJhbSB7Kn0gZnVuXG4gKiBAcGFyYW0geyp9IGV4XG4gKiBAcmV0dXJuIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24g0JLRi9C/0L7Qu9C90LjRgtGM0KTRg9C90LrRhtC40Y7Qn9C+0YHQu9C10KHQvtC30LTQsNC90LjRj9Ci0LXQs9CwKGZ1biwgZXgpIHtcbiAgICAvL9C/0YDQvtCy0LXRgNC60LAg0YTRg9C90LrRhtC40Lgg0L3QsCDRgdGD0YnQtdGB0YLQstC+0LLQsNC90LjQtVxuICAgIGlmIChmdW4gPT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm47XG4gICAgLy/Qv9GA0L7QstC10YDQutCwINC90LAg0YLQuNC/INGE0YPQvdC60YbQuNC4XG4gICAgc3dpdGNoICh0eXBlb2YgKGZ1bikpIHtcbiAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgICAgIGpmdW5fZXYoW3VuZGVmaW5lZCwgZXgsIGZ1bl0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAvL9Cy0YvQv9C+0LvQvdC10L3QuNC1INGE0YPQvdC60YbQuNC4XG4gICAgICAgICAgICBmdW4oZXgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsg0KHQvtC10LTQuNC90LjRgtGM0KHQstC+0LnRgdGC0LLQsNCe0LHRitC10LrRgtC+0LIsINCj0L3QuNC60J3QvtC80LXRgNCf0L7QlNCw0YLQtSB9IGZyb20gXCJAc3JjL2luZGV4XCI7XG5pbXBvcnQgeyDQntC/0YDQtdC00LXQu9C40YLRjNCi0LXQu9C+0JTQu9GP0KLQtdCz0LAgfSBmcm9tIFwiLi9ib2R5L3RlZy5ib2R5LmVkaXQuMjIwNjIyMTMwMVwiO1xuaW1wb3J0IHsg0JTQvtCx0LDQstC40YLRjNCS0KLQtdCz0JTQsNC90L3Ri9C1IH0gZnJvbSBcIi4vZGF0YS90ZWcuYXR0ci5kYXRhLmFkZC4yMjA4MjkwOTAxXCI7XG5pbXBvcnQgeyDQlNC+0LHQsNCy0LjRgtGM0KHQvtCx0YvRgtC40Y/QotC10LPRgyB9IGZyb20gXCIuL2V2ZW50L3RlZy5hdHRyLmV2ZW50LmFkZC4yMjA4MjkwOTM4XCI7XG5pbXBvcnQgeyDQlNC+0LHQsNCy0LjRgtGM0KLQtdCz0JLQotC10LvQviB9IGZyb20gXCIuL2JvZHkvdGVnLmF0dHIuYm9keS5hZGQuMjIwNjIyMTIxOVwiO1xuaW1wb3J0INCU0L7QsdCw0LLQuNGC0YzQkNGC0YDQuNCx0YPRgtGL0KLQtdCz0YMgZnJvbSBcIi4vYXR0ci90ZWcuYXR0ci5hZGQuMjIwODI5MDkzMlwiO1xuaW1wb3J0INCU0L7QsdCw0LLQuNGC0YzQodC40L3RgtCw0LrRgdC40YHQodGC0LjQu9C40KLQtdCz0YMgZnJvbSBcIi4vY3NzL3RlZy5hdHRyLmNzcy5hZGQuMjIwODI5MDkyNFwiO1xuaW1wb3J0INCU0L7QsdCw0LLQuNGC0YzQmNCU0KHRgtC40LvQuNCi0LXQs9GDIGZyb20gXCIuL2Nzcy90ZWcuYXR0ci5DU1MuYWRkLjIyMDgyOTA5MjhcIjtcbmltcG9ydCB7INCU0L7QsdCw0LLQuNGC0YzQmtC70LDRgdGB0YvQotC10LPRgyB9IGZyb20gXCIuL2NsYXNzL3RlZy5hdHRyLmNsYXNzLmFkZC4yMjA4MjkwOTEwXCI7XG5pbXBvcnQg0JTQvtCx0LDQstC40YLRjNCh0LLQvtC50YHRgtCy0LDQotC10LPRgyBmcm9tIFwiLi9hdHRyL3RlZy5hdHRyLnByb3AuYWRkLjIyMDgyOTA5MTZcIjtcbmltcG9ydCDQlNC+0LHQsNCy0LjRgtGMSFRNTNCi0LXQs9GDIGZyb20gXCIuL2F0dHIvdGVnLmF0dHIuaHRtbC5hZGQuMjIwNjIyMTMxNFwiO1xuaW1wb3J0INCS0YvQv9C+0LvQvdC40YLRjNCf0L7RgdC70LXQodC+0LfQtNCw0L3QuNGP0KLQtdCz0LAgZnJvbSBcIi4vZnVuL3RlZy5mdW5zLnRyaWdnZXIuMjIwODI5MDk0NVwiO1xuLyoqMjIwODI5MTEzOVxuICogdGVnLmFkZFxuICog0KHQvtC30LTQsNC90LjQtdCi0LXQs9CwXG4gKiDRgdC+0LfQtNCw0L3QuNC1INGC0LXQs9CwXG4gKiBAZXhwb3J0XG4gKiBAcGFyYW0geyp9IG9ialxuICogQHBhcmFtIHsqfSBwXG4gKiBAcmV0dXJuIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24g0KHQvtC30LTQsNC90LjQtdCi0LXQs9CwKG9iaiwgcCkge1xuICAgIGlmICh0eXBlb2YgKHApID09ICdzdHJpbmcnKVxuICAgICAgICBwID0geyB0ZWc6IHAgfTtcbiAgICBpZiAocC5tb2RpZikge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGxldCBtb2RpZiA9IE9iamVjdC5hc3NpZ24oe30sIHAubW9kaWYpO1xuICAgICAgICBkZWxldGUgcC5tb2RpZjtcbiAgICAgICAgcCA9INCh0L7QtdC00LjQvdC40YLRjNCh0LLQvtC50YHRgtCy0LDQntCx0YrQtdC60YLQvtCyKHAsIG1vZGlmKTtcbiAgICB9XG4gICAgcC5ib2R5ID0g0J7Qv9GA0LXQtNC10LvQuNGC0YzQotC10LvQvtCU0LvRj9Ci0LXQs9CwKHApOyAvL2JvZHkuZWRpdFxuICAgIGlmIChwLnRlZyA9PSB1bmRlZmluZWQpXG4gICAgICAgIHAudGVnID0gJ2Rpdic7XG4gICAgLy/RgdC+0LHRi9GC0LjRj1xuICAgIGxldCBhdHJfZGF0YSA9INCU0L7QsdCw0LLQuNGC0YzQktCi0LXQs9CU0LDQvdC90YvQtShwKTsgLy9kYXRhLmNyZWF0ZVxuICAgIGlmIChwLmF0dHIgPT0gdW5kZWZpbmVkKVxuICAgICAgICBwLmF0dHIgPSB7fTtcbiAgICBpZiAocC5hdHRyLmlkID09IHVuZGVmaW5lZClcbiAgICAgICAgcC5hdHRyLmlkID0g0KPQvdC40LrQndC+0LzQtdGA0J/QvtCU0LDRgtC1KCk7XG4gICAgcC5leCA9ICc8JyArIHAudGVnICsgKHAuY29kZSA/ICcgJyArIHAuY29kZSA6ICcnKSArIGF0cl9kYXRhICsgJz48LycgKyBwLnRlZyArICc+JztcbiAgICBwLmV4ID0g0JTQvtCx0LDQstC40YLRjNCi0LXQs9CS0KLQtdC70L4ocC5leCwgcC5ib2R5LCBwLmFkZCk7IC8vYm9keS5hZGRcbiAgICBpZiAocC5kYXRhKVxuICAgICAgICBPYmplY3Qua2V5cyhwLmRhdGEpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgcC5leC5kYXRhKGtleSwgcC5kYXRhW2tleV0pO1xuICAgICAgICB9LCBwLmRhdGEpO1xuICAgIGlmIChwLmh0bWwgPT0gdW5kZWZpbmVkKVxuICAgICAgICBwLmh0bWwgPSAnJztcbiAgICBwLmV4LmRhdGEoJ2V4JywgdGhpcyk7XG4gICAgcC5leC5kYXRhKCdFWCcsIHAuRVgpO1xuICAgINCU0L7QsdCw0LLQuNGC0YzQkNGC0YDQuNCx0YPRgtGL0KLQtdCz0YMocCk7XG4gICAg0JTQvtCx0LDQstC40YLRjNCh0L7QsdGL0YLQuNGP0KLQtdCz0YMocCk7XG4gICAg0JTQvtCx0LDQstC40YLRjNCh0LjQvdGC0LDQutGB0LjRgdCh0YLQuNC70LjQotC10LPRgyhwKTtcbiAgICDQlNC+0LHQsNCy0LjRgtGM0JjQlNCh0YLQuNC70LjQotC10LPRgyhwKTtcbiAgICDQlNC+0LHQsNCy0LjRgtGM0JrQu9Cw0YHRgdGL0KLQtdCz0YMocCk7XG4gICAg0JTQvtCx0LDQstC40YLRjNCh0LLQvtC50YHRgtCy0LDQotC10LPRgyhwKTtcbiAgICDQlNC+0LHQsNCy0LjRgtGMSFRNTNCi0LXQs9GDKG9iaiwgcCk7XG4gICAg0JLRi9C/0L7Qu9C90LjRgtGM0J/QvtGB0LvQtdCh0L7Qt9C00LDQvdC40Y/QotC10LPQsChwLCBwLmV4KTsgLy90ZWcuZnVucy50cmlnZ2VyXG4gICAgcmV0dXJuIHAuZXg7XG59XG4iLCIvKioyMjA2MjIxMzAxXG4gKiB0ZWcuYm9keS5lZGl0XG4gKiDQntC/0YDQtdC00LXQu9C40YLRjNCi0LXQu9C+0JTQu9GP0KLQtdCz0LBcbiAqINC+0L/RgNC10LTQtdC70LjRgtGMIGJvZHkg0LTQu9GPINGC0LXQs9CwXG4gKiBAZXhwb3J0XG4gKiBAcGFyYW0geyp9IHBcbiAqIEByZXR1cm4geyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiDQntC/0YDQtdC00LXQu9C40YLRjNCi0LXQu9C+0JTQu9GP0KLQtdCz0LAocCkge1xuICAgIGlmICgkKCdib2R5JykubGVuZ3RoID09IDApIHtcbiAgICAgICAgLy9kb2N1bWVudC5ib2R5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJvZHlcIik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsZXQgYm9keSA9IHAuYm9keTtcbiAgICAgICAgLy/RjdC70LXQvNC10L3RgiDQvdCw0LnQtNC10L1cbiAgICAgICAgaWYgKGJvZHkgIT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgc3dpdGNoICh0eXBlb2YgKHAuYm9keSkpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdudW1iZXInOiByZXR1cm4gJCgnLicgKyBwLmJvZHkpO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgICAgICAgICAgIGJvZHkgPSAkKHAuYm9keSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChib2R5Lmxlbmd0aCA9PSAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keSA9ICQoJyMnICsgcC5ib2R5KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJvZHkubGVuZ3RoID09IDApXG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5ID0gJCgnLicgKyBwLmJvZHkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYm9keS5sZW5ndGggPT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkgPSAkKCcuY2xhc3MnICsgcC5ib2R5KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJvZHkubGVuZ3RoICE9IDApXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYm9keTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcC5ib2R5O1xuICAgICAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gJCgnYm9keScpO1xufVxuIiwiLyoqMjIwODI5MDkwMVxuICogdGVnLmRhdGEuY3JlYXRlXG4gKiDQlNC+0LHQsNCy0LjRgtGM0JLQotC10LPQlNCw0L3QvdGL0LVcbiAqINC00L7QsdCw0LLQuNGC0Ywg0LIg0YLQtdCzINC00LDQvdC90YvQtVxuICogQGV4cG9ydFxuICogQHBhcmFtIHsqfSBwXG4gKiBAcmV0dXJuIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24g0JTQvtCx0LDQstC40YLRjNCS0KLQtdCz0JTQsNC90L3Ri9C1KHApIHtcbiAgICBpZiAocC5kYXRhID09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIGxldCBkYXRhID0gJyc7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGxldCBkYXRhX3ZhcnMgPSBPYmplY3QuYXNzaWduKHt9LCBwLmRhdGEpO1xuICAgIE9iamVjdC5rZXlzKGRhdGFfdmFycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIC8v0Y3RgtC+INC90LUg0L7QsdGK0LXQutGCXG4gICAgICAgIGlmICh0eXBlb2YgKGRhdGFfdmFyc1trZXldKSAhPSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgZGF0YSArPSAnIGRhdGEtJyArIGtleSArICc9XCInICsgZGF0YV92YXJzW2tleV0gKyAnXCInO1xuICAgICAgICAgICAgZGVsZXRlIHAuZGF0YVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIC8vcC5leC5kYXRhKGtleSxwLmRhdGFba2V5XSk7XG4gICAgfSwgZGF0YV92YXJzKTtcbiAgICByZXR1cm4gZGF0YTtcbn1cbiIsIi8qKjIyMDgyOTA5MzJcbiAqIHRlZy5hdHRyLmFkZFxuICogZnVuMjIwODI5MDkzMlxuICogYXR0ciDQtNC70Y8g0YLQtdCz0LBcbiAqIEBleHBvcnRcbiAqIEBwYXJhbSB7Kn0gcFxuICogQHJldHVybiB7Kn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZnVuMjIwODI5MDkzMihwKSB7XG4gICAgaWYgKHAudGVnID09ICdhJykge1xuICAgICAgICBpZiAocC5hdHRyID09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHAuYXR0ciA9IHt9O1xuICAgICAgICBpZiAocC5hdHRyLmhyZWYgPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcC5hdHRyLmhyZWYgPSAnIyc7XG4gICAgfVxuICAgIGlmIChwLmF0dHIgPT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm47XG4gICAgT2JqZWN0LmtleXMocC5hdHRyKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgbGV0IHZhbCA9IHRoaXNba2V5XTtcbiAgICAgICAgaWYgKGtleSA9PSAnc3JjJyAmJiBwLnRlZyA9PSAnaW1nJykge1xuICAgICAgICAgICAgLy9jb25zdCBpbWFnZVNyYyA9IHJlcXVpcmUoJy4vLi4vLi4vLi4vaW1nLycgKyB2YWwgKyAnLnBuZycpXG4gICAgICAgICAgICAvL2NvbnN0IGltZ1dyYXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjJyArIHAuaWQpXG4gICAgICAgICAgICAvL2NvbnN0IGltZyA9IG5ldyBJbWFnZSgpXG4gICAgICAgICAgICAvL2ltZy5zcmMgPSBpbWFnZVNyY1xuICAgICAgICAgICAgdmFsID0gcmVxdWlyZSgnQGltZy8nICsgdmFsICsgJy5wbmcnKTtcbiAgICAgICAgfVxuICAgICAgICBwLmV4LmF0dHIoa2V5LnJlcGxhY2UoJ18nLCAnLScpLCB2YWwpO1xuICAgIH0sIHAuYXR0cik7XG59XG4iLCIvKioyMjA4MjkwOTI0XG4gKiB0ZWcuY3NzLmFkZFxuICogZnVuMjIwODI5MDkyNFxuICogY3NzINC00L7QsdCw0LLQuNGC0Ywg0LTQu9GPINGC0LXQs9CwXG4gKiBAZXhwb3J0XG4gKiBAcGFyYW0geyp9IHBcbiAqIEByZXR1cm4geyp9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZ1bjIyMDgyOTA5MjQocCkge1xuICAgIGlmIChwLnRlZyA9PSAnaW1nJykge1xuICAgICAgICBpZiAocC5jc3MgPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcC5jc3MgPSB7fTtcbiAgICAgICAgLy9pZihwLmNzcy53aWR0aD09dW5kZWZpbmVkKSBwLmNzcy53aWR0aD0nMjhweCc7XG4gICAgICAgIC8vaWYocC5jc3MuaGVpZ2h0PT11bmRlZmluZWQpIHAuY3NzLmhlaWdodD0nMjhweCc7XG4gICAgfVxuICAgIGlmIChwLmNzcyA9PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwLmNzcykpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBBcnJheS5mcm9tKHAuY3NzLCAoa2V5KSA9PiB7XG4gICAgICAgICAgICBsZXQgY3MgPSAnY3NzJyArIFN0cmluZyhrZXkpO1xuICAgICAgICAgICAgc3dpdGNoICh0eXBlb2YgKGtleSkpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgICAgICAgICAgICBjcyA9IGtleTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwLmV4LmFkZENsYXNzKGtleSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlXG4gICAgICAgIHN3aXRjaCAodHlwZW9mIChwLmNzcykpIHtcbiAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgICAgICAgcC5leC5hZGRDbGFzcyhwLmNzcyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHAuY3NzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgcC5leC5jc3Moa2V5LnJlcGxhY2UoJ18nLCAnLScpLCBwLmNzc1trZXldKTtcbiAgICAgICAgICAgICAgICB9LCBwLmNzcyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbn1cbiIsIi8qKjIyMDgyOTA5MjhcbiAqIHRlZy5DU1MuYWRkXG4gKiBmdW4yMjA4MjkwOTI4XG4gKiBDU1Mg0LTQvtCx0LDQstC40YLRjCDQtNC70Y8g0YLQtdCz0LBcbiAqIEBleHBvcnRcbiAqIEBwYXJhbSB7Kn0gcFxuICogQHJldHVybiB7Kn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZnVuMjIwODI5MDkyOChwKSB7XG4gICAgaWYgKHAuQ1NTID09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHAuQ1NTKSkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIEFycmF5LmZyb20ocC5DU1MsIChrZXkpID0+IHtcbiAgICAgICAgICAgIGxldCBjc3MgPSBTdHJpbmcoa2V5KTtcbiAgICAgICAgICAgIHAuZXguYWRkQ2xhc3MoJ2NzcycgKyBjc3MpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGxldCBjc3MgPSBTdHJpbmcocC5DU1MpO1xuICAgICAgICBwLmV4LmFkZENsYXNzKCdjc3MnICsgY3NzKTtcbiAgICB9XG59XG4iLCIvKioyMjA4MjkwOTEwXG4gKiB0ZWcuYXRyLmNsYXNzLmFkZFxuICog0JTQvtCx0LDQstC40YLRjNCa0LvQsNGB0YHRi9Ci0LXQs9GDXG4gKiDQtNC+0LHQsNCy0LjRgtGMINCyINGC0LXQsyDQutC70LDRgdGB0YtcbiAqIEBleHBvcnRcbiAqIEBwYXJhbSB7Kn0gcFxuICogQHJldHVybiB7Kn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uINCU0L7QsdCw0LLQuNGC0YzQmtC70LDRgdGB0YvQotC10LPRgyhwKSB7XG4gICAgaWYgKHAuY2xhc3NlcyA9PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybjtcbiAgICBzd2l0Y2ggKHR5cGVvZiAocC5jbGFzc2VzKSkge1xuICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgICAgbGV0IHYgPSBwLmNsYXNzZXM7XG4gICAgICAgICAgICAvL2lmICh2LnN1YnN0cigwLCAzKT09J2NzcycpXG4gICAgICAgICAgICBpZiAodHlwZW9mICh2KSA9PSAnbnVtYmVyJylcbiAgICAgICAgICAgICAgICB2ID0gU3RyaW5nKHYpO1xuICAgICAgICAgICAgcC5leC5hZGRDbGFzcyh2KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICAgICAgLy9sZXQgY3NzPXBmdW4oMjIwNjE3MTE0MyxbJ3Byb2plY3RzL2Nzcy8nLHAuY2xhc3Nlc10pO1xuICAgICAgICAgICAgLy9pZiAoY3NzIT0nJykgJChjc3MpLmFwcGVuZFRvKCQoJ2JvZHknKSk7XG4gICAgICAgICAgICBwLmV4LmFkZENsYXNzKFN0cmluZyhwLmNsYXNzZXMpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwLmNsYXNzZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgdiA9IHAuY2xhc3Nlc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mICh2KSA9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICAvL2xldCBjc3M9cGZ1bigyMjA2MTcxMTQzLFsncHJvamVjdHMvY3NzLycsdl0pO1xuICAgICAgICAgICAgICAgICAgICAvL2lmIChjc3MhPScnKSAkKGNzcykuYXBwZW5kVG8oJCgnYm9keScpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IHN0ciA9IFN0cmluZyh2KTtcbiAgICAgICAgICAgICAgICBwLmV4LmFkZENsYXNzKHN0cik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG59XG4iLCIvKioyMjA4MjkwOTE2XG4gKiB0ZWcuYXRyLnByb3AuYWRkXG4gKiBmdW4yMjA4MjkwOTE2XG4gKiDQtNC+0LHQsNCy0LjRgtGMINCyINGC0LXQsyDRgdCy0L7QudGB0YLQstCwXG4gKiBAZXhwb3J0XG4gKiBAcGFyYW0geyp9IHBcbiAqIEByZXR1cm4geyp9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZ1bjIyMDgyOTA5MTYocCkge1xuICAgIGlmIChwLnByb3AgPT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm47XG4gICAgc3dpdGNoICh0eXBlb2YgKHAucHJvcCkpIHtcbiAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgIGlmIChwLnByb3AgPT0gJycpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgcC5leC5wcm9wKHAucHJvcCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHAucHJvcCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgcC5leC5wcm9wKGtleS5yZXBsYWNlKCdfJywgJy0nKSwgcC5wcm9wW2tleV0pO1xuICAgICAgICAgICAgfSwgcC5wcm9wKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBUZWcsIENMQVNTIH0gZnJvbSBcIkBzcmMvaW5kZXhcIjtcbmltcG9ydCB7INCU0L7QsdCw0LLQuNGC0YzQotC10LPQktCi0LXQu9C+IH0gZnJvbSBcIkB0ZWcvYm9keS90ZWcuYXR0ci5ib2R5LmFkZC4yMjA2MjIxMjE5XCI7XG5pbXBvcnQg0JTQvtCx0LDQstC40YLRjEh0bWzQnNCw0YHRgdC40LLQotC10LPRgyBmcm9tIFwiQHRlZy9odG1sL3RlZy5odG1sLmFyci5hZGQuMjIwNjIyMTMxOVwiO1xuLyoqMjIwNjIyMTMxNFxuICogdGVnLmF0ci5odG1sLmFkZFxuICogZnVuMjIwNjIyMTMxNFxuICog0LTQvtCx0LDQstC40YLRjCBodG1sINC6INGC0LXQs9GDXG4gKiBAZXhwb3J0XG4gKiBAcGFyYW0geyp9IG9ialxuICogQHBhcmFtIHsqfSBwXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZ1bjIyMDYyMjEzMTQob2JqLCBwKSB7XG4gICAgLy90ZWcuaHRtbC5hcnJcbiAgICBpZiAocC5odG1sID09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuO1xuICAgIGlmICjQlNC+0LHQsNCy0LjRgtGMSHRtbNCc0LDRgdGB0LjQstCi0LXQs9GDKG9iaiwgcC5odG1sLCBwKSA9PSB0cnVlKVxuICAgICAgICByZXR1cm47XG4gICAgbGV0IHRlZztcbiAgICBzd2l0Y2ggKHR5cGVvZiAocC5odG1sKSkge1xuICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgICAgcC5leC5odG1sKHAuaHRtbCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgICAgIGxldCB0cyA9IHRlZyhwLmh0bWwsIHApO1xuICAgICAgICAgICAgdGVnID0gbmV3IENMQVNTW1widGVnXCJdKHRzKTtcbiAgICAgICAgICAgINCU0L7QsdCw0LLQuNGC0YzQotC10LPQktCi0LXQu9C+KHRlZy5kYXRhLCBwLmV4KTsgLy9hdHIuYm9keS5hZGRcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICAgICAgICBsZXQgZiA9IHAuaHRtbDtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGYpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKHAuaHRtbFtrZXldKSA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBwLmh0bWxba2V5XS5leCA9IHAuaHRtbFtrZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHAuRVggIT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgcC5odG1sW2tleV0uRVggPSBwLkVYO1xuICAgICAgICAgICAgICAgICAgICBwLmh0bWxba2V5XSA9IG5ldyBUZWcocC5odG1sW2tleV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IHAuaHRtbFtrZXldO1xuICAgICAgICAgICAgICAgIGxldCBib2R5ID0gcC5leDtcbiAgICAgICAgICAgICAgICDQlNC+0LHQsNCy0LjRgtGM0KLQtdCz0JLQotC10LvQvihkYXRhLmV4LCBib2R5LCBkYXRhLmFkZCk7IC8vYXRyLmJvZHkuYWRkXG4gICAgICAgICAgICB9LCBmKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgaWYgKHAuRVggIT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHAuaHRtbC5FWCA9IHAuRVg7XG4gICAgICAgICAgICBpZiAocC5odG1sLmYpIHtcbiAgICAgICAgICAgICAgICBwLmh0bWwgPSB0ZWcocC5odG1sLmYsIHAuaHRtbC5QKTtcbiAgICAgICAgICAgICAgICBwLmh0bWwuYm9keSA9IHAuZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZWcgPSBuZXcgVGVnKHAuaHRtbCk7XG4gICAgICAgICAgICBsZXQgZGF0YSA9IHRlZy5wO1xuICAgICAgICAgICAgbGV0IGJvZHkgPSBwLmV4O1xuICAgICAgICAgICAg0JTQvtCx0LDQstC40YLRjNCi0LXQs9CS0KLQtdC70L4oZGF0YS5leCwgYm9keSwgZGF0YS5hZGQpOyAvL2F0ci5ib2R5LmFkZFxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsg0JLRi9C/0L7Qu9C90LjRgtGM0KTRg9C90LrRhtC40Y7Qn9C+0YHQu9C10KHQvtC30LTQsNC90LjRj9Ci0LXQs9CwIH0gZnJvbSBcIi4vdGVnLmZ1bi50cmlnZ2VyLjIyMDgyOTA5NDlcIjtcbi8qKjIyMDgyOTA5NDVcbiAqIHRlZy5mdW5zLnRyaWdnZXJcbiAqIGZ1bjIyMDgyOTA5NDVcbiAqINCy0YvQv9C+0LvQvdC40YLRjCDRhNGD0L3QutGG0LjQuCDQv9C+0YHQu9C1INGB0L7Qt9C00LDQvdC40Y8g0YLQtdCz0LBcbiAqIEBleHBvcnRcbiAqIEBwYXJhbSB7Kn0gcFxuICogQHBhcmFtIHsqfSBleFxuICogQHJldHVybiB7Kn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZnVuMjIwODI5MDk0NShwLCBleCkge1xuICAgIGlmIChwLmZ1biA9PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybjtcbiAgICAvL9C/0YDQvtCy0LXRgNC60LAg0L3QsCDQvNCw0YHRgdC40LIg0YTRg9C90LrRhtC40LlcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwLmZ1bikgPT0gdHJ1ZSkge1xuICAgICAgICAvL9C/0YDQvtCy0LXRgNC60LAg0L3QsCDQv9GD0YHRgtC+0YLRgyDQvNCw0YHRgdC40LLQsFxuICAgICAgICBpZiAocC5mdW4ubGVuZ3RoID09IDApXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIC8v0L7QsdGF0L7QtCDQvNCw0YHRgdC40LLQsCDRhNGD0L3QutGG0LjQuVxuICAgICAgICBPYmplY3Qua2V5cyhwLmZ1bikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICDQktGL0L/QvtC70L3QuNGC0YzQpNGD0L3QutGG0LjRjtCf0L7RgdC70LXQodC+0LfQtNCw0L3QuNGP0KLQtdCz0LAocC5mdW5ba2V5XSwgZXgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgINCS0YvQv9C+0LvQvdC40YLRjNCk0YPQvdC60YbQuNGO0J/QvtGB0LvQtdCh0L7Qt9C00LDQvdC40Y/QotC10LPQsChwLmZ1biwgZXgpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7INCh0L7Qt9C00LDQvdC40LXQotC10LPQsCB9IGZyb20gXCIuL3RlZy5tYWluLmFkZC4yMjA4MjkxMTM5XCI7XG4vKioyMzA5MDIxNTEyXG4gKiB0ZWcuY2xhc3NcbiAqIFRlZ1xuICog0YPQvdC40LLQtdGA0YHQsNC70YzQvdGL0Lkg0YLQtdCzXG4gKiBAZXhwb3J0XG4gKiBAY2xhc3MgVGVnXG4gKi9cbmV4cG9ydCBjbGFzcyBUZWcge1xuICAgIGdldCBEYXRhKCkgeyByZXR1cm4gdGhpcy5kYXRhOyB9XG4gICAgc2V0IERhdGEodmFsKSB7IHRoaXMuZGF0YSA9IHZhbDsgfVxuICAgIGNvbnN0cnVjdG9yKHApIHtcbiAgICAgICAgdGhpcy5wID0gcDtcbiAgICAgICAgdGhpcy5EYXRhID0gdGhpcy5jcmVhdGVfYXJyKHApO1xuICAgIH1cbiAgICBjcmVhdGVfYXJyKHApIHtcbiAgICAgICAgbGV0IGRhdGEgPSB7fTtcbiAgICAgICAgLy/QvNCw0YHRgdC40LIg0YLQtdCz0L7QslxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwKSA9PSB0cnVlICYmIHAubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMocCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleSA9PSAncGFyYW0nKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgLy90ZWcuYWRkXG4gICAgICAgICAgICAgICAgZGF0YVtrZXldID0g0KHQvtC30LTQsNC90LjQtdCi0LXQs9CwKHRoaXMsIHBba2V5XSk7XG4gICAgICAgICAgICB9LCBwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICAvL3RlZy5hZGRcbiAgICAgICAgICAgIGRhdGEgPSDQodC+0LfQtNCw0L3QuNC10KLQtdCz0LAodGhpcywgcCk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbn1cbiIsIi8qKlxuICogMjMwODMxMTUxNlxuICog0JrQvtC+0YDQtNC40L3QsNGC0YvQnNGL0YjQuFxuICogXCLQutC+0L7RgNC00LjQvdCw0YLRiyDQvNGL0YjQuCDRh9C10YDQtdC3INGB0L7QsdGL0YLQuNC1IG1vdXNlbW92ZVwiXG4gKiBAZXhwb3J0XG4gKiBAY2xhc3Mg0JrQvtC+0YDQtNC40L3QsNGC0YvQnNGL0YjQuFxuICovXG5leHBvcnQgY2xhc3Mg0JrQvtC+0YDQtNC40L3QsNGC0YvQnNGL0YjQuCB7XG4gICAgc3RhdGljINCe0LHQvdC+0LLQuNGC0YwoKSB7XG4gICAgICAgICQoZG9jdW1lbnQpLm1vdXNlbW92ZShmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAg0JrQvtC+0YDQtNC40L3QsNGC0YvQnNGL0YjQuC54ID0gZS5wYWdlWDsgLy8g0L/QvtC70L7QttC10L3QuNGPINC/0L4g0L7RgdC4IFhcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgINCa0L7QvtGA0LTQuNC90LDRgtGL0JzRi9GI0LgueSA9IGUucGFnZVk7IC8vINC/0L7Qu9C+0LbQtdC90LjRjyDQv9C+INC+0YHQuCBZXG4gICAgICAgICAgICAvLyDQstGL0LLQvtC0INGA0LXQt9GD0LvRjNGC0LDRgtCwINCyINC60L7QvdGB0L7Qu9GMXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlg6IFwiICsg0JrQvtC+0YDQtNC40L3QsNGC0YvQnNGL0YjQuC54ICsgXCIgWTogXCIgKyDQmtC+0L7RgNC00LjQvdCw0YLRi9Cc0YvRiNC4LnkpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4vL21vdXNlbW92ZVxu0JrQvtC+0YDQtNC40L3QsNGC0YvQnNGL0YjQuC54ID0gMDtcbtCa0L7QvtGA0LTQuNC90LDRgtGL0JzRi9GI0LgueSA9IDA7XG7QmtC+0L7RgNC00LjQvdCw0YLRi9Cc0YvRiNC4LtCe0LHQvdC+0LLQuNGC0YwoKTtcbiIsImltcG9ydCB7INCa0L7QvtGA0LTQuNC90LDRgtGL0JzRi9GI0LgsIGJvNTIgfSBmcm9tIFwiQHNyYy9pbmRleFwiO1xuLy90ZWcuc2hvd1xuZXhwb3J0IGZ1bmN0aW9uINCf0L7QutCw0LfQsNGC0YzQrdC70LXQvNC10L3RgtCc0YvRiNGM0Y4oZXgpIHtcbiAgICBleC5zaG93KCk7XG4gICAgLy/Qv9C+0LfQuNGG0LjRj1xuICAgIGV4LmNzcygndG9wJywgKNCa0L7QvtGA0LTQuNC90LDRgtGL0JzRi9GI0LgueSArIDUpICsgJ3B4Jyk7XG4gICAgZXguY3NzKCdsZWZ0Jywg0JrQvtC+0YDQtNC40L3QsNGC0YvQnNGL0YjQuC54ICsgJ3B4Jyk7XG4gICAgLy/Qv9C+0LLQtdGA0YVcbiAgICBibzUyLnogKz0gMTtcbiAgICBleC5jc3MoJ3pJbmRleCcsIGJvNTIueik7XG4gICAgLy/QtNCy0LjQttC10L3QuNC1XG4gICAgLy9mdW4yMzAxMjQxNDIxKGV4KTtcbn1cbiIsImV4cG9ydCB2YXIgVFlQRVMgPSB7XG4gICAgSVRFR19DdXN0b206IFN5bWJvbC5mb3IoXCJJVEVHX0N1c3RvbVwiKSxcbiAgICBJVGVnX21pbjogU3ltYm9sLmZvcihcIklUZWdfbWluXCIpLFxuICAgIElUZWdfb2JqOiBTeW1ib2wuZm9yKFwiSVRlZ19vYmpcIiksXG4gICAgSVRlZ19zaG93OiBTeW1ib2wuZm9yKFwiSVRlZ19zaG93XCIpLFxuICAgIElGbV9hYnM6IFN5bWJvbC5mb3IoXCJJRm1fYWJzXCIpLFxuICAgIElNZW51XzIyMDYxNjEwNTI6IFN5bWJvbC5mb3IoXCJJTWVudV8yMjA2MTYxMDUyXCIpLFxuICAgIEZtX2JvZHk6IFN5bWJvbC5mb3IoXCJGbV9ib2R5XCIpLFxufTtcbiIsImV4cG9ydCB2YXIgRFVQTElDQVRFRF9JTkpFQ1RBQkxFX0RFQ09SQVRPUiA9IFwiQ2Fubm90IGFwcGx5IEBpbmplY3RhYmxlIGRlY29yYXRvciBtdWx0aXBsZSB0aW1lcy5cIjtcbmV4cG9ydCB2YXIgRFVQTElDQVRFRF9NRVRBREFUQSA9IFwiTWV0YWRhdGEga2V5IHdhcyB1c2VkIG1vcmUgdGhhbiBvbmNlIGluIGEgcGFyYW1ldGVyOlwiO1xuZXhwb3J0IHZhciBOVUxMX0FSR1VNRU5UID0gXCJOVUxMIGFyZ3VtZW50XCI7XG5leHBvcnQgdmFyIEtFWV9OT1RfRk9VTkQgPSBcIktleSBOb3QgRm91bmRcIjtcbmV4cG9ydCB2YXIgQU1CSUdVT1VTX01BVENIID0gXCJBbWJpZ3VvdXMgbWF0Y2ggZm91bmQgZm9yIHNlcnZpY2VJZGVudGlmaWVyOlwiO1xuZXhwb3J0IHZhciBDQU5OT1RfVU5CSU5EID0gXCJDb3VsZCBub3QgdW5iaW5kIHNlcnZpY2VJZGVudGlmaWVyOlwiO1xuZXhwb3J0IHZhciBOT1RfUkVHSVNURVJFRCA9IFwiTm8gbWF0Y2hpbmcgYmluZGluZ3MgZm91bmQgZm9yIHNlcnZpY2VJZGVudGlmaWVyOlwiO1xuZXhwb3J0IHZhciBNSVNTSU5HX0lOSkVDVEFCTEVfQU5OT1RBVElPTiA9IFwiTWlzc2luZyByZXF1aXJlZCBAaW5qZWN0YWJsZSBhbm5vdGF0aW9uIGluOlwiO1xuZXhwb3J0IHZhciBNSVNTSU5HX0lOSkVDVF9BTk5PVEFUSU9OID0gXCJNaXNzaW5nIHJlcXVpcmVkIEBpbmplY3Qgb3IgQG11bHRpSW5qZWN0IGFubm90YXRpb24gaW46XCI7XG5leHBvcnQgdmFyIFVOREVGSU5FRF9JTkpFQ1RfQU5OT1RBVElPTiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIFwiQGluamVjdCBjYWxsZWQgd2l0aCB1bmRlZmluZWQgdGhpcyBjb3VsZCBtZWFuIHRoYXQgdGhlIGNsYXNzIFwiICsgbmFtZSArIFwiIGhhcyBcIiArXG4gICAgICAgIFwiYSBjaXJjdWxhciBkZXBlbmRlbmN5IHByb2JsZW0uIFlvdSBjYW4gdXNlIGEgTGF6eVNlcnZpY2VJZGVudGlmZXIgdG8gIFwiICtcbiAgICAgICAgXCJvdmVyY29tZSB0aGlzIGxpbWl0YXRpb24uXCI7XG59O1xuZXhwb3J0IHZhciBDSVJDVUxBUl9ERVBFTkRFTkNZID0gXCJDaXJjdWxhciBkZXBlbmRlbmN5IGZvdW5kOlwiO1xuZXhwb3J0IHZhciBOT1RfSU1QTEVNRU5URUQgPSBcIlNvcnJ5LCB0aGlzIGZlYXR1cmUgaXMgbm90IGZ1bGx5IGltcGxlbWVudGVkIHlldC5cIjtcbmV4cG9ydCB2YXIgSU5WQUxJRF9CSU5ESU5HX1RZUEUgPSBcIkludmFsaWQgYmluZGluZyB0eXBlOlwiO1xuZXhwb3J0IHZhciBOT19NT1JFX1NOQVBTSE9UU19BVkFJTEFCTEUgPSBcIk5vIHNuYXBzaG90IGF2YWlsYWJsZSB0byByZXN0b3JlLlwiO1xuZXhwb3J0IHZhciBJTlZBTElEX01JRERMRVdBUkVfUkVUVVJOID0gXCJJbnZhbGlkIHJldHVybiB0eXBlIGluIG1pZGRsZXdhcmUuIE1pZGRsZXdhcmUgbXVzdCByZXR1cm4hXCI7XG5leHBvcnQgdmFyIElOVkFMSURfRlVOQ1RJT05fQklORElORyA9IFwiVmFsdWUgcHJvdmlkZWQgdG8gZnVuY3Rpb24gYmluZGluZyBtdXN0IGJlIGEgZnVuY3Rpb24hXCI7XG5leHBvcnQgdmFyIExBWllfSU5fU1lOQyA9IGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIFwiWW91IGFyZSBhdHRlbXB0aW5nIHRvIGNvbnN0cnVjdCAnXCIgKyBrZXkgKyBcIicgaW4gYSBzeW5jaHJvbm91cyB3YXlcXG4gYnV0IGl0IGhhcyBhc3luY2hyb25vdXMgZGVwZW5kZW5jaWVzLlwiOyB9O1xuZXhwb3J0IHZhciBJTlZBTElEX1RPX1NFTEZfVkFMVUUgPSBcIlRoZSB0b1NlbGYgZnVuY3Rpb24gY2FuIG9ubHkgYmUgYXBwbGllZCB3aGVuIGEgY29uc3RydWN0b3IgaXMgXCIgK1xuICAgIFwidXNlZCBhcyBzZXJ2aWNlIGlkZW50aWZpZXJcIjtcbmV4cG9ydCB2YXIgSU5WQUxJRF9ERUNPUkFUT1JfT1BFUkFUSU9OID0gXCJUaGUgQGluamVjdCBAbXVsdGlJbmplY3QgQHRhZ2dlZCBhbmQgQG5hbWVkIGRlY29yYXRvcnMgXCIgK1xuICAgIFwibXVzdCBiZSBhcHBsaWVkIHRvIHRoZSBwYXJhbWV0ZXJzIG9mIGEgY2xhc3MgY29uc3RydWN0b3Igb3IgYSBjbGFzcyBwcm9wZXJ0eS5cIjtcbmV4cG9ydCB2YXIgQVJHVU1FTlRTX0xFTkdUSF9NSVNNQVRDSCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFsdWVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBcIlRoZSBudW1iZXIgb2YgY29uc3RydWN0b3IgYXJndW1lbnRzIGluIHRoZSBkZXJpdmVkIGNsYXNzIFwiICtcbiAgICAgICAgKHZhbHVlc1swXSArIFwiIG11c3QgYmUgPj0gdGhhbiB0aGUgbnVtYmVyIG9mIGNvbnN0cnVjdG9yIGFyZ3VtZW50cyBvZiBpdHMgYmFzZSBjbGFzcy5cIik7XG59O1xuZXhwb3J0IHZhciBDT05UQUlORVJfT1BUSU9OU19NVVNUX0JFX0FOX09CSkVDVCA9IFwiSW52YWxpZCBDb250YWluZXIgY29uc3RydWN0b3IgYXJndW1lbnQuIENvbnRhaW5lciBvcHRpb25zIFwiICtcbiAgICBcIm11c3QgYmUgYW4gb2JqZWN0LlwiO1xuZXhwb3J0IHZhciBDT05UQUlORVJfT1BUSU9OU19JTlZBTElEX0RFRkFVTFRfU0NPUEUgPSBcIkludmFsaWQgQ29udGFpbmVyIG9wdGlvbi4gRGVmYXVsdCBzY29wZSBtdXN0IFwiICtcbiAgICBcImJlIGEgc3RyaW5nICgnc2luZ2xldG9uJyBvciAndHJhbnNpZW50JykuXCI7XG5leHBvcnQgdmFyIENPTlRBSU5FUl9PUFRJT05TX0lOVkFMSURfQVVUT19CSU5EX0lOSkVDVEFCTEUgPSBcIkludmFsaWQgQ29udGFpbmVyIG9wdGlvbi4gQXV0byBiaW5kIGluamVjdGFibGUgbXVzdCBcIiArXG4gICAgXCJiZSBhIGJvb2xlYW5cIjtcbmV4cG9ydCB2YXIgQ09OVEFJTkVSX09QVElPTlNfSU5WQUxJRF9TS0lQX0JBU0VfQ0hFQ0sgPSBcIkludmFsaWQgQ29udGFpbmVyIG9wdGlvbi4gU2tpcCBiYXNlIGNoZWNrIG11c3QgXCIgK1xuICAgIFwiYmUgYSBib29sZWFuXCI7XG5leHBvcnQgdmFyIE1VTFRJUExFX1BSRV9ERVNUUk9ZX01FVEhPRFMgPSBcIkNhbm5vdCBhcHBseSBAcHJlRGVzdHJveSBkZWNvcmF0b3IgbXVsdGlwbGUgdGltZXMgaW4gdGhlIHNhbWUgY2xhc3NcIjtcbmV4cG9ydCB2YXIgTVVMVElQTEVfUE9TVF9DT05TVFJVQ1RfTUVUSE9EUyA9IFwiQ2Fubm90IGFwcGx5IEBwb3N0Q29uc3RydWN0IGRlY29yYXRvciBtdWx0aXBsZSB0aW1lcyBpbiB0aGUgc2FtZSBjbGFzc1wiO1xuZXhwb3J0IHZhciBBU1lOQ19VTkJJTkRfUkVRVUlSRUQgPSBcIkF0dGVtcHRpbmcgdG8gdW5iaW5kIGRlcGVuZGVuY3kgd2l0aCBhc3luY2hyb25vdXMgZGVzdHJ1Y3Rpb24gKEBwcmVEZXN0cm95IG9yIG9uRGVhY3RpdmF0aW9uKVwiO1xuZXhwb3J0IHZhciBQT1NUX0NPTlNUUlVDVF9FUlJPUiA9IGZ1bmN0aW9uIChjbGF6eiwgZXJyb3JNZXNzYWdlKSB7IHJldHVybiBcIkBwb3N0Q29uc3RydWN0IGVycm9yIGluIGNsYXNzIFwiICsgY2xhenogKyBcIjogXCIgKyBlcnJvck1lc3NhZ2U7IH07XG5leHBvcnQgdmFyIFBSRV9ERVNUUk9ZX0VSUk9SID0gZnVuY3Rpb24gKGNsYXp6LCBlcnJvck1lc3NhZ2UpIHsgcmV0dXJuIFwiQHByZURlc3Ryb3kgZXJyb3IgaW4gY2xhc3MgXCIgKyBjbGF6eiArIFwiOiBcIiArIGVycm9yTWVzc2FnZTsgfTtcbmV4cG9ydCB2YXIgT05fREVBQ1RJVkFUSU9OX0VSUk9SID0gZnVuY3Rpb24gKGNsYXp6LCBlcnJvck1lc3NhZ2UpIHsgcmV0dXJuIFwib25EZWFjdGl2YXRpb24oKSBlcnJvciBpbiBjbGFzcyBcIiArIGNsYXp6ICsgXCI6IFwiICsgZXJyb3JNZXNzYWdlOyB9O1xuZXhwb3J0IHZhciBDSVJDVUxBUl9ERVBFTkRFTkNZX0lOX0ZBQ1RPUlkgPSBmdW5jdGlvbiAoZmFjdG9yeVR5cGUsIHNlcnZpY2VJZGVudGlmaWVyKSB7XG4gICAgcmV0dXJuIFwiSXQgbG9va3MgbGlrZSB0aGVyZSBpcyBhIGNpcmN1bGFyIGRlcGVuZGVuY3kgaW4gb25lIG9mIHRoZSAnXCIgKyBmYWN0b3J5VHlwZSArIFwiJyBiaW5kaW5ncy4gUGxlYXNlIGludmVzdGlnYXRlIGJpbmRpbmdzIHdpdGhcIiArXG4gICAgICAgIChcInNlcnZpY2UgaWRlbnRpZmllciAnXCIgKyBzZXJ2aWNlSWRlbnRpZmllciArIFwiJy5cIik7XG59O1xuZXhwb3J0IHZhciBTVEFDS19PVkVSRkxPVyA9IFwiTWF4aW11bSBjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yX21zZ3MuanMubWFwIiwiZXhwb3J0IHZhciBOQU1FRF9UQUcgPSBcIm5hbWVkXCI7XG5leHBvcnQgdmFyIE5BTUVfVEFHID0gXCJuYW1lXCI7XG5leHBvcnQgdmFyIFVOTUFOQUdFRF9UQUcgPSBcInVubWFuYWdlZFwiO1xuZXhwb3J0IHZhciBPUFRJT05BTF9UQUcgPSBcIm9wdGlvbmFsXCI7XG5leHBvcnQgdmFyIElOSkVDVF9UQUcgPSBcImluamVjdFwiO1xuZXhwb3J0IHZhciBNVUxUSV9JTkpFQ1RfVEFHID0gXCJtdWx0aV9pbmplY3RcIjtcbmV4cG9ydCB2YXIgVEFHR0VEID0gXCJpbnZlcnNpZnk6dGFnZ2VkXCI7XG5leHBvcnQgdmFyIFRBR0dFRF9QUk9QID0gXCJpbnZlcnNpZnk6dGFnZ2VkX3Byb3BzXCI7XG5leHBvcnQgdmFyIFBBUkFNX1RZUEVTID0gXCJpbnZlcnNpZnk6cGFyYW10eXBlc1wiO1xuZXhwb3J0IHZhciBERVNJR05fUEFSQU1fVFlQRVMgPSBcImRlc2lnbjpwYXJhbXR5cGVzXCI7XG5leHBvcnQgdmFyIFBPU1RfQ09OU1RSVUNUID0gXCJwb3N0X2NvbnN0cnVjdFwiO1xuZXhwb3J0IHZhciBQUkVfREVTVFJPWSA9IFwicHJlX2Rlc3Ryb3lcIjtcbmZ1bmN0aW9uIGdldE5vbkN1c3RvbVRhZ0tleXMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgSU5KRUNUX1RBRyxcbiAgICAgICAgTVVMVElfSU5KRUNUX1RBRyxcbiAgICAgICAgTkFNRV9UQUcsXG4gICAgICAgIFVOTUFOQUdFRF9UQUcsXG4gICAgICAgIE5BTUVEX1RBRyxcbiAgICAgICAgT1BUSU9OQUxfVEFHLFxuICAgIF07XG59XG5leHBvcnQgdmFyIE5PTl9DVVNUT01fVEFHX0tFWVMgPSBnZXROb25DdXN0b21UYWdLZXlzKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXRhZGF0YV9rZXlzLmpzLm1hcCIsImltcG9ydCAqIGFzIEVSUk9SU19NU0dTIGZyb20gXCIuLi9jb25zdGFudHMvZXJyb3JfbXNnc1wiO1xuaW1wb3J0ICogYXMgTUVUQURBVEFfS0VZIGZyb20gXCIuLi9jb25zdGFudHMvbWV0YWRhdGFfa2V5c1wiO1xuZnVuY3Rpb24gaW5qZWN0YWJsZSgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICBpZiAoUmVmbGVjdC5oYXNPd25NZXRhZGF0YShNRVRBREFUQV9LRVkuUEFSQU1fVFlQRVMsIHRhcmdldCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUlNfTVNHUy5EVVBMSUNBVEVEX0lOSkVDVEFCTEVfREVDT1JBVE9SKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdHlwZXMgPSBSZWZsZWN0LmdldE1ldGFkYXRhKE1FVEFEQVRBX0tFWS5ERVNJR05fUEFSQU1fVFlQRVMsIHRhcmdldCkgfHwgW107XG4gICAgICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoTUVUQURBVEFfS0VZLlBBUkFNX1RZUEVTLCB0eXBlcywgdGFyZ2V0KTtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9O1xufVxuZXhwb3J0IHsgaW5qZWN0YWJsZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5qZWN0YWJsZS5qcy5tYXAiLCJ2YXIgQmluZGluZ1Njb3BlRW51bSA9IHtcbiAgICBSZXF1ZXN0OiBcIlJlcXVlc3RcIixcbiAgICBTaW5nbGV0b246IFwiU2luZ2xldG9uXCIsXG4gICAgVHJhbnNpZW50OiBcIlRyYW5zaWVudFwiXG59O1xudmFyIEJpbmRpbmdUeXBlRW51bSA9IHtcbiAgICBDb25zdGFudFZhbHVlOiBcIkNvbnN0YW50VmFsdWVcIixcbiAgICBDb25zdHJ1Y3RvcjogXCJDb25zdHJ1Y3RvclwiLFxuICAgIER5bmFtaWNWYWx1ZTogXCJEeW5hbWljVmFsdWVcIixcbiAgICBGYWN0b3J5OiBcIkZhY3RvcnlcIixcbiAgICBGdW5jdGlvbjogXCJGdW5jdGlvblwiLFxuICAgIEluc3RhbmNlOiBcIkluc3RhbmNlXCIsXG4gICAgSW52YWxpZDogXCJJbnZhbGlkXCIsXG4gICAgUHJvdmlkZXI6IFwiUHJvdmlkZXJcIlxufTtcbnZhciBUYXJnZXRUeXBlRW51bSA9IHtcbiAgICBDbGFzc1Byb3BlcnR5OiBcIkNsYXNzUHJvcGVydHlcIixcbiAgICBDb25zdHJ1Y3RvckFyZ3VtZW50OiBcIkNvbnN0cnVjdG9yQXJndW1lbnRcIixcbiAgICBWYXJpYWJsZTogXCJWYXJpYWJsZVwiXG59O1xuZXhwb3J0IHsgQmluZGluZ1Njb3BlRW51bSwgQmluZGluZ1R5cGVFbnVtLCBUYXJnZXRUeXBlRW51bSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGl0ZXJhbF90eXBlcy5qcy5tYXAiLCJ2YXIgaWRDb3VudGVyID0gMDtcbmZ1bmN0aW9uIGlkKCkge1xuICAgIHJldHVybiBpZENvdW50ZXIrKztcbn1cbmV4cG9ydCB7IGlkIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZC5qcy5tYXAiLCJpbXBvcnQgeyBCaW5kaW5nU2NvcGVFbnVtLCBCaW5kaW5nVHlwZUVudW0gfSBmcm9tIFwiLi4vY29uc3RhbnRzL2xpdGVyYWxfdHlwZXNcIjtcbmltcG9ydCB7IGlkIH0gZnJvbSBcIi4uL3V0aWxzL2lkXCI7XG52YXIgQmluZGluZyA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQmluZGluZyhzZXJ2aWNlSWRlbnRpZmllciwgc2NvcGUpIHtcbiAgICAgICAgdGhpcy5pZCA9IGlkKCk7XG4gICAgICAgIHRoaXMuYWN0aXZhdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2VydmljZUlkZW50aWZpZXIgPSBzZXJ2aWNlSWRlbnRpZmllcjtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLnR5cGUgPSBCaW5kaW5nVHlwZUVudW0uSW52YWxpZDtcbiAgICAgICAgdGhpcy5jb25zdHJhaW50ID0gZnVuY3Rpb24gKHJlcXVlc3QpIHsgcmV0dXJuIHRydWU7IH07XG4gICAgICAgIHRoaXMuaW1wbGVtZW50YXRpb25UeXBlID0gbnVsbDtcbiAgICAgICAgdGhpcy5jYWNoZSA9IG51bGw7XG4gICAgICAgIHRoaXMuZmFjdG9yeSA9IG51bGw7XG4gICAgICAgIHRoaXMucHJvdmlkZXIgPSBudWxsO1xuICAgICAgICB0aGlzLm9uQWN0aXZhdGlvbiA9IG51bGw7XG4gICAgICAgIHRoaXMub25EZWFjdGl2YXRpb24gPSBudWxsO1xuICAgICAgICB0aGlzLmR5bmFtaWNWYWx1ZSA9IG51bGw7XG4gICAgfVxuICAgIEJpbmRpbmcucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY2xvbmUgPSBuZXcgQmluZGluZyh0aGlzLnNlcnZpY2VJZGVudGlmaWVyLCB0aGlzLnNjb3BlKTtcbiAgICAgICAgY2xvbmUuYWN0aXZhdGVkID0gKGNsb25lLnNjb3BlID09PSBCaW5kaW5nU2NvcGVFbnVtLlNpbmdsZXRvbikgPyB0aGlzLmFjdGl2YXRlZCA6IGZhbHNlO1xuICAgICAgICBjbG9uZS5pbXBsZW1lbnRhdGlvblR5cGUgPSB0aGlzLmltcGxlbWVudGF0aW9uVHlwZTtcbiAgICAgICAgY2xvbmUuZHluYW1pY1ZhbHVlID0gdGhpcy5keW5hbWljVmFsdWU7XG4gICAgICAgIGNsb25lLnNjb3BlID0gdGhpcy5zY29wZTtcbiAgICAgICAgY2xvbmUudHlwZSA9IHRoaXMudHlwZTtcbiAgICAgICAgY2xvbmUuZmFjdG9yeSA9IHRoaXMuZmFjdG9yeTtcbiAgICAgICAgY2xvbmUucHJvdmlkZXIgPSB0aGlzLnByb3ZpZGVyO1xuICAgICAgICBjbG9uZS5jb25zdHJhaW50ID0gdGhpcy5jb25zdHJhaW50O1xuICAgICAgICBjbG9uZS5vbkFjdGl2YXRpb24gPSB0aGlzLm9uQWN0aXZhdGlvbjtcbiAgICAgICAgY2xvbmUub25EZWFjdGl2YXRpb24gPSB0aGlzLm9uRGVhY3RpdmF0aW9uO1xuICAgICAgICBjbG9uZS5jYWNoZSA9IHRoaXMuY2FjaGU7XG4gICAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9O1xuICAgIHJldHVybiBCaW5kaW5nO1xufSgpKTtcbmV4cG9ydCB7IEJpbmRpbmcgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJpbmRpbmcuanMubWFwIiwiaW1wb3J0ICogYXMgTUVUQURBVEFfS0VZIGZyb20gXCIuLi9jb25zdGFudHMvbWV0YWRhdGFfa2V5c1wiO1xudmFyIE1ldGFkYXRhUmVhZGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNZXRhZGF0YVJlYWRlcigpIHtcbiAgICB9XG4gICAgTWV0YWRhdGFSZWFkZXIucHJvdG90eXBlLmdldENvbnN0cnVjdG9yTWV0YWRhdGEgPSBmdW5jdGlvbiAoY29uc3RydWN0b3JGdW5jKSB7XG4gICAgICAgIHZhciBjb21waWxlckdlbmVyYXRlZE1ldGFkYXRhID0gUmVmbGVjdC5nZXRNZXRhZGF0YShNRVRBREFUQV9LRVkuUEFSQU1fVFlQRVMsIGNvbnN0cnVjdG9yRnVuYyk7XG4gICAgICAgIHZhciB1c2VyR2VuZXJhdGVkTWV0YWRhdGEgPSBSZWZsZWN0LmdldE1ldGFkYXRhKE1FVEFEQVRBX0tFWS5UQUdHRUQsIGNvbnN0cnVjdG9yRnVuYyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb21waWxlckdlbmVyYXRlZE1ldGFkYXRhOiBjb21waWxlckdlbmVyYXRlZE1ldGFkYXRhLFxuICAgICAgICAgICAgdXNlckdlbmVyYXRlZE1ldGFkYXRhOiB1c2VyR2VuZXJhdGVkTWV0YWRhdGEgfHwge31cbiAgICAgICAgfTtcbiAgICB9O1xuICAgIE1ldGFkYXRhUmVhZGVyLnByb3RvdHlwZS5nZXRQcm9wZXJ0aWVzTWV0YWRhdGEgPSBmdW5jdGlvbiAoY29uc3RydWN0b3JGdW5jKSB7XG4gICAgICAgIHZhciB1c2VyR2VuZXJhdGVkTWV0YWRhdGEgPSBSZWZsZWN0LmdldE1ldGFkYXRhKE1FVEFEQVRBX0tFWS5UQUdHRURfUFJPUCwgY29uc3RydWN0b3JGdW5jKSB8fCBbXTtcbiAgICAgICAgcmV0dXJuIHVzZXJHZW5lcmF0ZWRNZXRhZGF0YTtcbiAgICB9O1xuICAgIHJldHVybiBNZXRhZGF0YVJlYWRlcjtcbn0oKSk7XG5leHBvcnQgeyBNZXRhZGF0YVJlYWRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWV0YWRhdGFfcmVhZGVyLmpzLm1hcCIsInZhciBCaW5kaW5nQ291bnQgPSB7XG4gICAgTXVsdGlwbGVCaW5kaW5nc0F2YWlsYWJsZTogMixcbiAgICBOb0JpbmRpbmdzQXZhaWxhYmxlOiAwLFxuICAgIE9ubHlPbmVCaW5kaW5nQXZhaWxhYmxlOiAxXG59O1xuZXhwb3J0IHsgQmluZGluZ0NvdW50IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iaW5kaW5nX2NvdW50LmpzLm1hcCIsImltcG9ydCAqIGFzIEVSUk9SX01TR1MgZnJvbSBcIi4uL2NvbnN0YW50cy9lcnJvcl9tc2dzXCI7XG5leHBvcnQgZnVuY3Rpb24gaXNTdGFja092ZXJmbG93RXhlcHRpb24oZXJyb3IpIHtcbiAgICByZXR1cm4gKGVycm9yIGluc3RhbmNlb2YgUmFuZ2VFcnJvciB8fFxuICAgICAgICBlcnJvci5tZXNzYWdlID09PSBFUlJPUl9NU0dTLlNUQUNLX09WRVJGTE9XKTtcbn1cbmV4cG9ydCB2YXIgdHJ5QW5kVGhyb3dFcnJvcklmU3RhY2tPdmVyZmxvdyA9IGZ1bmN0aW9uIChmbiwgZXJyb3JDYWxsYmFjaykge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBmbigpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGlzU3RhY2tPdmVyZmxvd0V4ZXB0aW9uKGVycm9yKSkge1xuICAgICAgICAgICAgZXJyb3IgPSBlcnJvckNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4Y2VwdGlvbnMuanMubWFwIiwiaW1wb3J0ICogYXMgRVJST1JfTVNHUyBmcm9tIFwiLi4vY29uc3RhbnRzL2Vycm9yX21zZ3NcIjtcbmZ1bmN0aW9uIGdldFNlcnZpY2VJZGVudGlmaWVyQXNTdHJpbmcoc2VydmljZUlkZW50aWZpZXIpIHtcbiAgICBpZiAodHlwZW9mIHNlcnZpY2VJZGVudGlmaWVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdmFyIF9zZXJ2aWNlSWRlbnRpZmllciA9IHNlcnZpY2VJZGVudGlmaWVyO1xuICAgICAgICByZXR1cm4gX3NlcnZpY2VJZGVudGlmaWVyLm5hbWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBzZXJ2aWNlSWRlbnRpZmllciA9PT0gXCJzeW1ib2xcIikge1xuICAgICAgICByZXR1cm4gc2VydmljZUlkZW50aWZpZXIudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBfc2VydmljZUlkZW50aWZpZXIgPSBzZXJ2aWNlSWRlbnRpZmllcjtcbiAgICAgICAgcmV0dXJuIF9zZXJ2aWNlSWRlbnRpZmllcjtcbiAgICB9XG59XG5mdW5jdGlvbiBsaXN0UmVnaXN0ZXJlZEJpbmRpbmdzRm9yU2VydmljZUlkZW50aWZpZXIoY29udGFpbmVyLCBzZXJ2aWNlSWRlbnRpZmllciwgZ2V0QmluZGluZ3MpIHtcbiAgICB2YXIgcmVnaXN0ZXJlZEJpbmRpbmdzTGlzdCA9IFwiXCI7XG4gICAgdmFyIHJlZ2lzdGVyZWRCaW5kaW5ncyA9IGdldEJpbmRpbmdzKGNvbnRhaW5lciwgc2VydmljZUlkZW50aWZpZXIpO1xuICAgIGlmIChyZWdpc3RlcmVkQmluZGluZ3MubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIHJlZ2lzdGVyZWRCaW5kaW5nc0xpc3QgPSBcIlxcblJlZ2lzdGVyZWQgYmluZGluZ3M6XCI7XG4gICAgICAgIHJlZ2lzdGVyZWRCaW5kaW5ncy5mb3JFYWNoKGZ1bmN0aW9uIChiaW5kaW5nKSB7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IFwiT2JqZWN0XCI7XG4gICAgICAgICAgICBpZiAoYmluZGluZy5pbXBsZW1lbnRhdGlvblR5cGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBuYW1lID0gZ2V0RnVuY3Rpb25OYW1lKGJpbmRpbmcuaW1wbGVtZW50YXRpb25UeXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlZ2lzdGVyZWRCaW5kaW5nc0xpc3QgPSByZWdpc3RlcmVkQmluZGluZ3NMaXN0ICsgXCJcXG4gXCIgKyBuYW1lO1xuICAgICAgICAgICAgaWYgKGJpbmRpbmcuY29uc3RyYWludC5tZXRhRGF0YSkge1xuICAgICAgICAgICAgICAgIHJlZ2lzdGVyZWRCaW5kaW5nc0xpc3QgPSByZWdpc3RlcmVkQmluZGluZ3NMaXN0ICsgXCIgLSBcIiArIGJpbmRpbmcuY29uc3RyYWludC5tZXRhRGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZWdpc3RlcmVkQmluZGluZ3NMaXN0O1xufVxuZnVuY3Rpb24gYWxyZWFkeURlcGVuZGVuY3lDaGFpbihyZXF1ZXN0LCBzZXJ2aWNlSWRlbnRpZmllcikge1xuICAgIGlmIChyZXF1ZXN0LnBhcmVudFJlcXVlc3QgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIGlmIChyZXF1ZXN0LnBhcmVudFJlcXVlc3Quc2VydmljZUlkZW50aWZpZXIgPT09IHNlcnZpY2VJZGVudGlmaWVyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGFscmVhZHlEZXBlbmRlbmN5Q2hhaW4ocmVxdWVzdC5wYXJlbnRSZXF1ZXN0LCBzZXJ2aWNlSWRlbnRpZmllcik7XG4gICAgfVxufVxuZnVuY3Rpb24gZGVwZW5kZW5jeUNoYWluVG9TdHJpbmcocmVxdWVzdCkge1xuICAgIGZ1bmN0aW9uIF9jcmVhdGVTdHJpbmdBcnIocmVxLCByZXN1bHQpIHtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSB7IHJlc3VsdCA9IFtdOyB9XG4gICAgICAgIHZhciBzZXJ2aWNlSWRlbnRpZmllciA9IGdldFNlcnZpY2VJZGVudGlmaWVyQXNTdHJpbmcocmVxLnNlcnZpY2VJZGVudGlmaWVyKTtcbiAgICAgICAgcmVzdWx0LnB1c2goc2VydmljZUlkZW50aWZpZXIpO1xuICAgICAgICBpZiAocmVxLnBhcmVudFJlcXVlc3QgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBfY3JlYXRlU3RyaW5nQXJyKHJlcS5wYXJlbnRSZXF1ZXN0LCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHZhciBzdHJpbmdBcnIgPSBfY3JlYXRlU3RyaW5nQXJyKHJlcXVlc3QpO1xuICAgIHJldHVybiBzdHJpbmdBcnIucmV2ZXJzZSgpLmpvaW4oXCIgLS0+IFwiKTtcbn1cbmZ1bmN0aW9uIGNpcmN1bGFyRGVwZW5kZW5jeVRvRXhjZXB0aW9uKHJlcXVlc3QpIHtcbiAgICByZXF1ZXN0LmNoaWxkUmVxdWVzdHMuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGRSZXF1ZXN0KSB7XG4gICAgICAgIGlmIChhbHJlYWR5RGVwZW5kZW5jeUNoYWluKGNoaWxkUmVxdWVzdCwgY2hpbGRSZXF1ZXN0LnNlcnZpY2VJZGVudGlmaWVyKSkge1xuICAgICAgICAgICAgdmFyIHNlcnZpY2VzID0gZGVwZW5kZW5jeUNoYWluVG9TdHJpbmcoY2hpbGRSZXF1ZXN0KTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9NU0dTLkNJUkNVTEFSX0RFUEVOREVOQ1kgKyBcIiBcIiArIHNlcnZpY2VzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNpcmN1bGFyRGVwZW5kZW5jeVRvRXhjZXB0aW9uKGNoaWxkUmVxdWVzdCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGxpc3RNZXRhZGF0YUZvclRhcmdldChzZXJ2aWNlSWRlbnRpZmllclN0cmluZywgdGFyZ2V0KSB7XG4gICAgaWYgKHRhcmdldC5pc1RhZ2dlZCgpIHx8IHRhcmdldC5pc05hbWVkKCkpIHtcbiAgICAgICAgdmFyIG1fMSA9IFwiXCI7XG4gICAgICAgIHZhciBuYW1lZFRhZyA9IHRhcmdldC5nZXROYW1lZFRhZygpO1xuICAgICAgICB2YXIgb3RoZXJUYWdzID0gdGFyZ2V0LmdldEN1c3RvbVRhZ3MoKTtcbiAgICAgICAgaWYgKG5hbWVkVGFnICE9PSBudWxsKSB7XG4gICAgICAgICAgICBtXzEgKz0gbmFtZWRUYWcudG9TdHJpbmcoKSArIFwiXFxuXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG90aGVyVGFncyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgb3RoZXJUYWdzLmZvckVhY2goZnVuY3Rpb24gKHRhZykge1xuICAgICAgICAgICAgICAgIG1fMSArPSB0YWcudG9TdHJpbmcoKSArIFwiXFxuXCI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCIgXCIgKyBzZXJ2aWNlSWRlbnRpZmllclN0cmluZyArIFwiXFxuIFwiICsgc2VydmljZUlkZW50aWZpZXJTdHJpbmcgKyBcIiAtIFwiICsgbV8xO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwiIFwiICsgc2VydmljZUlkZW50aWZpZXJTdHJpbmc7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0RnVuY3Rpb25OYW1lKGZ1bmMpIHtcbiAgICBpZiAoZnVuYy5uYW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jLm5hbWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgbmFtZV8xID0gZnVuYy50b1N0cmluZygpO1xuICAgICAgICB2YXIgbWF0Y2ggPSBuYW1lXzEubWF0Y2goL15mdW5jdGlvblxccyooW15cXHMoXSspLyk7XG4gICAgICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogXCJBbm9ueW1vdXMgZnVuY3Rpb246IFwiICsgbmFtZV8xO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFN5bWJvbERlc2NyaXB0aW9uKHN5bWJvbCkge1xuICAgIHJldHVybiBzeW1ib2wudG9TdHJpbmcoKS5zbGljZSg3LCAtMSk7XG59XG5leHBvcnQgeyBnZXRGdW5jdGlvbk5hbWUsIGdldFNlcnZpY2VJZGVudGlmaWVyQXNTdHJpbmcsIGxpc3RSZWdpc3RlcmVkQmluZGluZ3NGb3JTZXJ2aWNlSWRlbnRpZmllciwgbGlzdE1ldGFkYXRhRm9yVGFyZ2V0LCBjaXJjdWxhckRlcGVuZGVuY3lUb0V4Y2VwdGlvbiwgZ2V0U3ltYm9sRGVzY3JpcHRpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlcmlhbGl6YXRpb24uanMubWFwIiwiaW1wb3J0IHsgaWQgfSBmcm9tIFwiLi4vdXRpbHMvaWRcIjtcbnZhciBDb250ZXh0ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb250ZXh0KGNvbnRhaW5lcikge1xuICAgICAgICB0aGlzLmlkID0gaWQoKTtcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgfVxuICAgIENvbnRleHQucHJvdG90eXBlLmFkZFBsYW4gPSBmdW5jdGlvbiAocGxhbikge1xuICAgICAgICB0aGlzLnBsYW4gPSBwbGFuO1xuICAgIH07XG4gICAgQ29udGV4dC5wcm90b3R5cGUuc2V0Q3VycmVudFJlcXVlc3QgPSBmdW5jdGlvbiAoY3VycmVudFJlcXVlc3QpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50UmVxdWVzdCA9IGN1cnJlbnRSZXF1ZXN0O1xuICAgIH07XG4gICAgcmV0dXJuIENvbnRleHQ7XG59KCkpO1xuZXhwb3J0IHsgQ29udGV4dCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udGV4dC5qcy5tYXAiLCJpbXBvcnQgKiBhcyBNRVRBREFUQV9LRVkgZnJvbSBcIi4uL2NvbnN0YW50cy9tZXRhZGF0YV9rZXlzXCI7XG52YXIgTWV0YWRhdGEgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1ldGFkYXRhKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgTWV0YWRhdGEucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5rZXkgPT09IE1FVEFEQVRBX0tFWS5OQU1FRF9UQUcpIHtcbiAgICAgICAgICAgIHJldHVybiBcIm5hbWVkOiBcIiArIFN0cmluZyh0aGlzLnZhbHVlKS50b1N0cmluZygpICsgXCIgXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gXCJ0YWdnZWQ6IHsga2V5OlwiICsgdGhpcy5rZXkudG9TdHJpbmcoKSArIFwiLCB2YWx1ZTogXCIgKyBTdHJpbmcodGhpcy52YWx1ZSkgKyBcIiB9XCI7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBNZXRhZGF0YTtcbn0oKSk7XG5leHBvcnQgeyBNZXRhZGF0YSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWV0YWRhdGEuanMubWFwIiwidmFyIFBsYW4gPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBsYW4ocGFyZW50Q29udGV4dCwgcm9vdFJlcXVlc3QpIHtcbiAgICAgICAgdGhpcy5wYXJlbnRDb250ZXh0ID0gcGFyZW50Q29udGV4dDtcbiAgICAgICAgdGhpcy5yb290UmVxdWVzdCA9IHJvb3RSZXF1ZXN0O1xuICAgIH1cbiAgICByZXR1cm4gUGxhbjtcbn0oKSk7XG5leHBvcnQgeyBQbGFuIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wbGFuLmpzLm1hcCIsInZhciBMYXp5U2VydmljZUlkZW50aWZlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTGF6eVNlcnZpY2VJZGVudGlmZXIoY2IpIHtcbiAgICAgICAgdGhpcy5fY2IgPSBjYjtcbiAgICB9XG4gICAgTGF6eVNlcnZpY2VJZGVudGlmZXIucHJvdG90eXBlLnVud3JhcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NiKCk7XG4gICAgfTtcbiAgICByZXR1cm4gTGF6eVNlcnZpY2VJZGVudGlmZXI7XG59KCkpO1xuZXhwb3J0IHsgTGF6eVNlcnZpY2VJZGVudGlmZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxhenlfc2VydmljZV9pZGVudGlmaWVyLmpzLm1hcCIsInZhciBRdWVyeWFibGVTdHJpbmcgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFF1ZXJ5YWJsZVN0cmluZyhzdHIpIHtcbiAgICAgICAgdGhpcy5zdHIgPSBzdHI7XG4gICAgfVxuICAgIFF1ZXJ5YWJsZVN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aCA9IGZ1bmN0aW9uIChzZWFyY2hTdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyLmluZGV4T2Yoc2VhcmNoU3RyaW5nKSA9PT0gMDtcbiAgICB9O1xuICAgIFF1ZXJ5YWJsZVN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGggPSBmdW5jdGlvbiAoc2VhcmNoU3RyaW5nKSB7XG4gICAgICAgIHZhciByZXZlcnNlU3RyaW5nID0gXCJcIjtcbiAgICAgICAgdmFyIHJldmVyc2VTZWFyY2hTdHJpbmcgPSBzZWFyY2hTdHJpbmcuc3BsaXQoXCJcIikucmV2ZXJzZSgpLmpvaW4oXCJcIik7XG4gICAgICAgIHJldmVyc2VTdHJpbmcgPSB0aGlzLnN0ci5zcGxpdChcIlwiKS5yZXZlcnNlKCkuam9pbihcIlwiKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhcnRzV2l0aC5jYWxsKHsgc3RyOiByZXZlcnNlU3RyaW5nIH0sIHJldmVyc2VTZWFyY2hTdHJpbmcpO1xuICAgIH07XG4gICAgUXVlcnlhYmxlU3RyaW5nLnByb3RvdHlwZS5jb250YWlucyA9IGZ1bmN0aW9uIChzZWFyY2hTdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnN0ci5pbmRleE9mKHNlYXJjaFN0cmluZykgIT09IC0xKTtcbiAgICB9O1xuICAgIFF1ZXJ5YWJsZVN0cmluZy5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gKGNvbXBhcmVTdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyID09PSBjb21wYXJlU3RyaW5nO1xuICAgIH07XG4gICAgUXVlcnlhYmxlU3RyaW5nLnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyO1xuICAgIH07XG4gICAgcmV0dXJuIFF1ZXJ5YWJsZVN0cmluZztcbn0oKSk7XG5leHBvcnQgeyBRdWVyeWFibGVTdHJpbmcgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXF1ZXJ5YWJsZV9zdHJpbmcuanMubWFwIiwiaW1wb3J0ICogYXMgTUVUQURBVEFfS0VZIGZyb20gJy4uL2NvbnN0YW50cy9tZXRhZGF0YV9rZXlzJztcbmltcG9ydCB7IGlkIH0gZnJvbSAnLi4vdXRpbHMvaWQnO1xuaW1wb3J0IHsgZ2V0U3ltYm9sRGVzY3JpcHRpb24gfSBmcm9tICcuLi91dGlscy9zZXJpYWxpemF0aW9uJztcbmltcG9ydCB7IE1ldGFkYXRhIH0gZnJvbSAnLi9tZXRhZGF0YSc7XG5pbXBvcnQgeyBRdWVyeWFibGVTdHJpbmcgfSBmcm9tICcuL3F1ZXJ5YWJsZV9zdHJpbmcnO1xudmFyIFRhcmdldCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGFyZ2V0KHR5cGUsIGlkZW50aWZpZXIsIHNlcnZpY2VJZGVudGlmaWVyLCBuYW1lZE9yVGFnZ2VkKSB7XG4gICAgICAgIHRoaXMuaWQgPSBpZCgpO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLnNlcnZpY2VJZGVudGlmaWVyID0gc2VydmljZUlkZW50aWZpZXI7XG4gICAgICAgIHZhciBxdWVyeWFibGVOYW1lID0gdHlwZW9mIGlkZW50aWZpZXIgPT09ICdzeW1ib2wnID8gZ2V0U3ltYm9sRGVzY3JpcHRpb24oaWRlbnRpZmllcikgOiBpZGVudGlmaWVyO1xuICAgICAgICB0aGlzLm5hbWUgPSBuZXcgUXVlcnlhYmxlU3RyaW5nKHF1ZXJ5YWJsZU5hbWUgfHwgXCJcIik7XG4gICAgICAgIHRoaXMuaWRlbnRpZmllciA9IGlkZW50aWZpZXI7XG4gICAgICAgIHRoaXMubWV0YWRhdGEgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgdmFyIG1ldGFkYXRhSXRlbSA9IG51bGw7XG4gICAgICAgIGlmICh0eXBlb2YgbmFtZWRPclRhZ2dlZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIG1ldGFkYXRhSXRlbSA9IG5ldyBNZXRhZGF0YShNRVRBREFUQV9LRVkuTkFNRURfVEFHLCBuYW1lZE9yVGFnZ2VkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChuYW1lZE9yVGFnZ2VkIGluc3RhbmNlb2YgTWV0YWRhdGEpIHtcbiAgICAgICAgICAgIG1ldGFkYXRhSXRlbSA9IG5hbWVkT3JUYWdnZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1ldGFkYXRhSXRlbSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5wdXNoKG1ldGFkYXRhSXRlbSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgVGFyZ2V0LnByb3RvdHlwZS5oYXNUYWcgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLm1ldGFkYXRhOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIG0gPSBfYVtfaV07XG4gICAgICAgICAgICBpZiAobS5rZXkgPT09IGtleSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIFRhcmdldC5wcm90b3R5cGUuaXNBcnJheSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzVGFnKE1FVEFEQVRBX0tFWS5NVUxUSV9JTkpFQ1RfVEFHKTtcbiAgICB9O1xuICAgIFRhcmdldC5wcm90b3R5cGUubWF0Y2hlc0FycmF5ID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF0Y2hlc1RhZyhNRVRBREFUQV9LRVkuTVVMVElfSU5KRUNUX1RBRykobmFtZSk7XG4gICAgfTtcbiAgICBUYXJnZXQucHJvdG90eXBlLmlzTmFtZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc1RhZyhNRVRBREFUQV9LRVkuTkFNRURfVEFHKTtcbiAgICB9O1xuICAgIFRhcmdldC5wcm90b3R5cGUuaXNUYWdnZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1ldGFkYXRhLnNvbWUoZnVuY3Rpb24gKG1ldGFkYXRhKSB7IHJldHVybiBNRVRBREFUQV9LRVkuTk9OX0NVU1RPTV9UQUdfS0VZUy5ldmVyeShmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBtZXRhZGF0YS5rZXkgIT09IGtleTsgfSk7IH0pO1xuICAgIH07XG4gICAgVGFyZ2V0LnByb3RvdHlwZS5pc09wdGlvbmFsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXRjaGVzVGFnKE1FVEFEQVRBX0tFWS5PUFRJT05BTF9UQUcpKHRydWUpO1xuICAgIH07XG4gICAgVGFyZ2V0LnByb3RvdHlwZS5nZXROYW1lZFRhZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNOYW1lZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tZXRhZGF0YS5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ua2V5ID09PSBNRVRBREFUQV9LRVkuTkFNRURfVEFHOyB9KVswXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIFRhcmdldC5wcm90b3R5cGUuZ2V0Q3VzdG9tVGFncyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNUYWdnZWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWV0YWRhdGEuZmlsdGVyKGZ1bmN0aW9uIChtZXRhZGF0YSkgeyByZXR1cm4gTUVUQURBVEFfS0VZLk5PTl9DVVNUT01fVEFHX0tFWVMuZXZlcnkoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gbWV0YWRhdGEua2V5ICE9PSBrZXk7IH0pOyB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUYXJnZXQucHJvdG90eXBlLm1hdGNoZXNOYW1lZFRhZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hdGNoZXNUYWcoTUVUQURBVEFfS0VZLk5BTUVEX1RBRykobmFtZSk7XG4gICAgfTtcbiAgICBUYXJnZXQucHJvdG90eXBlLm1hdGNoZXNUYWcgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBfdGhpcy5tZXRhZGF0YTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgbSA9IF9hW19pXTtcbiAgICAgICAgICAgICAgICBpZiAobS5rZXkgPT09IGtleSAmJiBtLnZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gVGFyZ2V0O1xufSgpKTtcbmV4cG9ydCB7IFRhcmdldCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGFyZ2V0LmpzLm1hcCIsInZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20sIHBhY2spIHtcbiAgICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XG4gICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xuICAgICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xufTtcbmltcG9ydCB7IExhenlTZXJ2aWNlSWRlbnRpZmVyIH0gZnJvbSBcIi4uL2Fubm90YXRpb24vbGF6eV9zZXJ2aWNlX2lkZW50aWZpZXJcIjtcbmltcG9ydCAqIGFzIEVSUk9SX01TR1MgZnJvbSBcIi4uL2NvbnN0YW50cy9lcnJvcl9tc2dzXCI7XG5pbXBvcnQgeyBUYXJnZXRUeXBlRW51bSB9IGZyb20gXCIuLi9jb25zdGFudHMvbGl0ZXJhbF90eXBlc1wiO1xuaW1wb3J0ICogYXMgTUVUQURBVEFfS0VZIGZyb20gXCIuLi9jb25zdGFudHMvbWV0YWRhdGFfa2V5c1wiO1xuaW1wb3J0IHsgZ2V0RnVuY3Rpb25OYW1lIH0gZnJvbSBcIi4uL3V0aWxzL3NlcmlhbGl6YXRpb25cIjtcbmltcG9ydCB7IFRhcmdldCB9IGZyb20gXCIuL3RhcmdldFwiO1xuZnVuY3Rpb24gZ2V0RGVwZW5kZW5jaWVzKG1ldGFkYXRhUmVhZGVyLCBmdW5jKSB7XG4gICAgdmFyIGNvbnN0cnVjdG9yTmFtZSA9IGdldEZ1bmN0aW9uTmFtZShmdW5jKTtcbiAgICByZXR1cm4gZ2V0VGFyZ2V0cyhtZXRhZGF0YVJlYWRlciwgY29uc3RydWN0b3JOYW1lLCBmdW5jLCBmYWxzZSk7XG59XG5mdW5jdGlvbiBnZXRUYXJnZXRzKG1ldGFkYXRhUmVhZGVyLCBjb25zdHJ1Y3Rvck5hbWUsIGZ1bmMsIGlzQmFzZUNsYXNzKSB7XG4gICAgdmFyIG1ldGFkYXRhID0gbWV0YWRhdGFSZWFkZXIuZ2V0Q29uc3RydWN0b3JNZXRhZGF0YShmdW5jKTtcbiAgICB2YXIgc2VydmljZUlkZW50aWZpZXJzID0gbWV0YWRhdGEuY29tcGlsZXJHZW5lcmF0ZWRNZXRhZGF0YTtcbiAgICBpZiAoc2VydmljZUlkZW50aWZpZXJzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFyIG1zZyA9IEVSUk9SX01TR1MuTUlTU0lOR19JTkpFQ1RBQkxFX0FOTk9UQVRJT04gKyBcIiBcIiArIGNvbnN0cnVjdG9yTmFtZSArIFwiLlwiO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG4gICAgdmFyIGNvbnN0cnVjdG9yQXJnc01ldGFkYXRhID0gbWV0YWRhdGEudXNlckdlbmVyYXRlZE1ldGFkYXRhO1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoY29uc3RydWN0b3JBcmdzTWV0YWRhdGEpO1xuICAgIHZhciBoYXNVc2VyRGVjbGFyZWRVbmtub3duSW5qZWN0aW9ucyA9IChmdW5jLmxlbmd0aCA9PT0gMCAmJiBrZXlzLmxlbmd0aCA+IDApO1xuICAgIHZhciBoYXNPcHRpb25hbFBhcmFtZXRlcnMgPSBrZXlzLmxlbmd0aCA+IGZ1bmMubGVuZ3RoO1xuICAgIHZhciBpdGVyYXRpb25zID0gKGhhc1VzZXJEZWNsYXJlZFVua25vd25JbmplY3Rpb25zIHx8IGhhc09wdGlvbmFsUGFyYW1ldGVycykgPyBrZXlzLmxlbmd0aCA6IGZ1bmMubGVuZ3RoO1xuICAgIHZhciBjb25zdHJ1Y3RvclRhcmdldHMgPSBnZXRDb25zdHJ1Y3RvckFyZ3NBc1RhcmdldHMoaXNCYXNlQ2xhc3MsIGNvbnN0cnVjdG9yTmFtZSwgc2VydmljZUlkZW50aWZpZXJzLCBjb25zdHJ1Y3RvckFyZ3NNZXRhZGF0YSwgaXRlcmF0aW9ucyk7XG4gICAgdmFyIHByb3BlcnR5VGFyZ2V0cyA9IGdldENsYXNzUHJvcHNBc1RhcmdldHMobWV0YWRhdGFSZWFkZXIsIGZ1bmMsIGNvbnN0cnVjdG9yTmFtZSk7XG4gICAgdmFyIHRhcmdldHMgPSBfX3NwcmVhZEFycmF5KF9fc3ByZWFkQXJyYXkoW10sIGNvbnN0cnVjdG9yVGFyZ2V0cywgdHJ1ZSksIHByb3BlcnR5VGFyZ2V0cywgdHJ1ZSk7XG4gICAgcmV0dXJuIHRhcmdldHM7XG59XG5mdW5jdGlvbiBnZXRDb25zdHJ1Y3RvckFyZ3NBc1RhcmdldChpbmRleCwgaXNCYXNlQ2xhc3MsIGNvbnN0cnVjdG9yTmFtZSwgc2VydmljZUlkZW50aWZpZXJzLCBjb25zdHJ1Y3RvckFyZ3NNZXRhZGF0YSkge1xuICAgIHZhciB0YXJnZXRNZXRhZGF0YSA9IGNvbnN0cnVjdG9yQXJnc01ldGFkYXRhW2luZGV4LnRvU3RyaW5nKCldIHx8IFtdO1xuICAgIHZhciBtZXRhZGF0YSA9IGZvcm1hdFRhcmdldE1ldGFkYXRhKHRhcmdldE1ldGFkYXRhKTtcbiAgICB2YXIgaXNNYW5hZ2VkID0gbWV0YWRhdGEudW5tYW5hZ2VkICE9PSB0cnVlO1xuICAgIHZhciBzZXJ2aWNlSWRlbnRpZmllciA9IHNlcnZpY2VJZGVudGlmaWVyc1tpbmRleF07XG4gICAgdmFyIGluamVjdElkZW50aWZpZXIgPSAobWV0YWRhdGEuaW5qZWN0IHx8IG1ldGFkYXRhLm11bHRpSW5qZWN0KTtcbiAgICBzZXJ2aWNlSWRlbnRpZmllciA9IChpbmplY3RJZGVudGlmaWVyKSA/IChpbmplY3RJZGVudGlmaWVyKSA6IHNlcnZpY2VJZGVudGlmaWVyO1xuICAgIGlmIChzZXJ2aWNlSWRlbnRpZmllciBpbnN0YW5jZW9mIExhenlTZXJ2aWNlSWRlbnRpZmVyKSB7XG4gICAgICAgIHNlcnZpY2VJZGVudGlmaWVyID0gc2VydmljZUlkZW50aWZpZXIudW53cmFwKCk7XG4gICAgfVxuICAgIGlmIChpc01hbmFnZWQpIHtcbiAgICAgICAgdmFyIGlzT2JqZWN0ID0gc2VydmljZUlkZW50aWZpZXIgPT09IE9iamVjdDtcbiAgICAgICAgdmFyIGlzRnVuY3Rpb24gPSBzZXJ2aWNlSWRlbnRpZmllciA9PT0gRnVuY3Rpb247XG4gICAgICAgIHZhciBpc1VuZGVmaW5lZCA9IHNlcnZpY2VJZGVudGlmaWVyID09PSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBpc1Vua25vd25UeXBlID0gKGlzT2JqZWN0IHx8IGlzRnVuY3Rpb24gfHwgaXNVbmRlZmluZWQpO1xuICAgICAgICBpZiAoIWlzQmFzZUNsYXNzICYmIGlzVW5rbm93blR5cGUpIHtcbiAgICAgICAgICAgIHZhciBtc2cgPSBFUlJPUl9NU0dTLk1JU1NJTkdfSU5KRUNUX0FOTk9UQVRJT04gKyBcIiBhcmd1bWVudCBcIiArIGluZGV4ICsgXCIgaW4gY2xhc3MgXCIgKyBjb25zdHJ1Y3Rvck5hbWUgKyBcIi5cIjtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0YXJnZXQgPSBuZXcgVGFyZ2V0KFRhcmdldFR5cGVFbnVtLkNvbnN0cnVjdG9yQXJndW1lbnQsIG1ldGFkYXRhLnRhcmdldE5hbWUsIHNlcnZpY2VJZGVudGlmaWVyKTtcbiAgICAgICAgdGFyZ2V0Lm1ldGFkYXRhID0gdGFyZ2V0TWV0YWRhdGE7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gZ2V0Q29uc3RydWN0b3JBcmdzQXNUYXJnZXRzKGlzQmFzZUNsYXNzLCBjb25zdHJ1Y3Rvck5hbWUsIHNlcnZpY2VJZGVudGlmaWVycywgY29uc3RydWN0b3JBcmdzTWV0YWRhdGEsIGl0ZXJhdGlvbnMpIHtcbiAgICB2YXIgdGFyZ2V0cyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlcmF0aW9uczsgaSsrKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGk7XG4gICAgICAgIHZhciB0YXJnZXQgPSBnZXRDb25zdHJ1Y3RvckFyZ3NBc1RhcmdldChpbmRleCwgaXNCYXNlQ2xhc3MsIGNvbnN0cnVjdG9yTmFtZSwgc2VydmljZUlkZW50aWZpZXJzLCBjb25zdHJ1Y3RvckFyZ3NNZXRhZGF0YSk7XG4gICAgICAgIGlmICh0YXJnZXQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRhcmdldHMucHVzaCh0YXJnZXQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXRzO1xufVxuZnVuY3Rpb24gX2dldFNlcnZpY2VJZGVudGlmaWVyRm9yUHJvcGVydHkoaW5qZWN0LCBtdWx0aUluamVjdCwgcHJvcGVydHlOYW1lLCBjbGFzc05hbWUpIHtcbiAgICB2YXIgc2VydmljZUlkZW50aWZpZXIgPSAoaW5qZWN0IHx8IG11bHRpSW5qZWN0KTtcbiAgICBpZiAoc2VydmljZUlkZW50aWZpZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgbXNnID0gRVJST1JfTVNHUy5NSVNTSU5HX0lOSkVDVEFCTEVfQU5OT1RBVElPTiArIFwiIGZvciBwcm9wZXJ0eSBcIiArIFN0cmluZyhwcm9wZXJ0eU5hbWUpICsgXCIgaW4gY2xhc3MgXCIgKyBjbGFzc05hbWUgKyBcIi5cIjtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxuICAgIHJldHVybiBzZXJ2aWNlSWRlbnRpZmllcjtcbn1cbmZ1bmN0aW9uIGdldENsYXNzUHJvcHNBc1RhcmdldHMobWV0YWRhdGFSZWFkZXIsIGNvbnN0cnVjdG9yRnVuYywgY29uc3RydWN0b3JOYW1lKSB7XG4gICAgdmFyIGNsYXNzUHJvcHNNZXRhZGF0YSA9IG1ldGFkYXRhUmVhZGVyLmdldFByb3BlcnRpZXNNZXRhZGF0YShjb25zdHJ1Y3RvckZ1bmMpO1xuICAgIHZhciB0YXJnZXRzID0gW107XG4gICAgdmFyIHN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGNsYXNzUHJvcHNNZXRhZGF0YSk7XG4gICAgdmFyIHN0cmluZ0tleXMgPSBPYmplY3Qua2V5cyhjbGFzc1Byb3BzTWV0YWRhdGEpO1xuICAgIHZhciBrZXlzID0gc3RyaW5nS2V5cy5jb25jYXQoc3ltYm9sS2V5cyk7XG4gICAgZm9yICh2YXIgX2kgPSAwLCBrZXlzXzEgPSBrZXlzOyBfaSA8IGtleXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXNfMVtfaV07XG4gICAgICAgIHZhciB0YXJnZXRNZXRhZGF0YSA9IGNsYXNzUHJvcHNNZXRhZGF0YVtrZXldO1xuICAgICAgICB2YXIgbWV0YWRhdGEgPSBmb3JtYXRUYXJnZXRNZXRhZGF0YSh0YXJnZXRNZXRhZGF0YSk7XG4gICAgICAgIHZhciBpZGVudGlmaWVyID0gbWV0YWRhdGEudGFyZ2V0TmFtZSB8fCBrZXk7XG4gICAgICAgIHZhciBzZXJ2aWNlSWRlbnRpZmllciA9IF9nZXRTZXJ2aWNlSWRlbnRpZmllckZvclByb3BlcnR5KG1ldGFkYXRhLmluamVjdCwgbWV0YWRhdGEubXVsdGlJbmplY3QsIGtleSwgY29uc3RydWN0b3JOYW1lKTtcbiAgICAgICAgdmFyIHRhcmdldCA9IG5ldyBUYXJnZXQoVGFyZ2V0VHlwZUVudW0uQ2xhc3NQcm9wZXJ0eSwgaWRlbnRpZmllciwgc2VydmljZUlkZW50aWZpZXIpO1xuICAgICAgICB0YXJnZXQubWV0YWRhdGEgPSB0YXJnZXRNZXRhZGF0YTtcbiAgICAgICAgdGFyZ2V0cy5wdXNoKHRhcmdldCk7XG4gICAgfVxuICAgIHZhciBiYXNlQ29uc3RydWN0b3IgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoY29uc3RydWN0b3JGdW5jLnByb3RvdHlwZSkuY29uc3RydWN0b3I7XG4gICAgaWYgKGJhc2VDb25zdHJ1Y3RvciAhPT0gT2JqZWN0KSB7XG4gICAgICAgIHZhciBiYXNlVGFyZ2V0cyA9IGdldENsYXNzUHJvcHNBc1RhcmdldHMobWV0YWRhdGFSZWFkZXIsIGJhc2VDb25zdHJ1Y3RvciwgY29uc3RydWN0b3JOYW1lKTtcbiAgICAgICAgdGFyZ2V0cyA9IF9fc3ByZWFkQXJyYXkoX19zcHJlYWRBcnJheShbXSwgdGFyZ2V0cywgdHJ1ZSksIGJhc2VUYXJnZXRzLCB0cnVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldHM7XG59XG5mdW5jdGlvbiBnZXRCYXNlQ2xhc3NEZXBlbmRlbmN5Q291bnQobWV0YWRhdGFSZWFkZXIsIGZ1bmMpIHtcbiAgICB2YXIgYmFzZUNvbnN0cnVjdG9yID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGZ1bmMucHJvdG90eXBlKS5jb25zdHJ1Y3RvcjtcbiAgICBpZiAoYmFzZUNvbnN0cnVjdG9yICE9PSBPYmplY3QpIHtcbiAgICAgICAgdmFyIGJhc2VDb25zdHJ1Y3Rvck5hbWUgPSBnZXRGdW5jdGlvbk5hbWUoYmFzZUNvbnN0cnVjdG9yKTtcbiAgICAgICAgdmFyIHRhcmdldHMgPSBnZXRUYXJnZXRzKG1ldGFkYXRhUmVhZGVyLCBiYXNlQ29uc3RydWN0b3JOYW1lLCBiYXNlQ29uc3RydWN0b3IsIHRydWUpO1xuICAgICAgICB2YXIgbWV0YWRhdGEgPSB0YXJnZXRzLm1hcChmdW5jdGlvbiAodCkgeyByZXR1cm4gdC5tZXRhZGF0YS5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ua2V5ID09PSBNRVRBREFUQV9LRVkuVU5NQU5BR0VEX1RBRzsgfSk7IH0pO1xuICAgICAgICB2YXIgdW5tYW5hZ2VkQ291bnQgPSBbXS5jb25jYXQuYXBwbHkoW10sIG1ldGFkYXRhKS5sZW5ndGg7XG4gICAgICAgIHZhciBkZXBlbmRlbmN5Q291bnQgPSB0YXJnZXRzLmxlbmd0aCAtIHVubWFuYWdlZENvdW50O1xuICAgICAgICBpZiAoZGVwZW5kZW5jeUNvdW50ID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGRlcGVuZGVuY3lDb3VudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRCYXNlQ2xhc3NEZXBlbmRlbmN5Q291bnQobWV0YWRhdGFSZWFkZXIsIGJhc2VDb25zdHJ1Y3Rvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGZvcm1hdFRhcmdldE1ldGFkYXRhKHRhcmdldE1ldGFkYXRhKSB7XG4gICAgdmFyIHRhcmdldE1ldGFkYXRhTWFwID0ge307XG4gICAgdGFyZ2V0TWV0YWRhdGEuZm9yRWFjaChmdW5jdGlvbiAobSkge1xuICAgICAgICB0YXJnZXRNZXRhZGF0YU1hcFttLmtleS50b1N0cmluZygpXSA9IG0udmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5qZWN0OiB0YXJnZXRNZXRhZGF0YU1hcFtNRVRBREFUQV9LRVkuSU5KRUNUX1RBR10sXG4gICAgICAgIG11bHRpSW5qZWN0OiB0YXJnZXRNZXRhZGF0YU1hcFtNRVRBREFUQV9LRVkuTVVMVElfSU5KRUNUX1RBR10sXG4gICAgICAgIHRhcmdldE5hbWU6IHRhcmdldE1ldGFkYXRhTWFwW01FVEFEQVRBX0tFWS5OQU1FX1RBR10sXG4gICAgICAgIHVubWFuYWdlZDogdGFyZ2V0TWV0YWRhdGFNYXBbTUVUQURBVEFfS0VZLlVOTUFOQUdFRF9UQUddXG4gICAgfTtcbn1cbmV4cG9ydCB7IGdldERlcGVuZGVuY2llcywgZ2V0QmFzZUNsYXNzRGVwZW5kZW5jeUNvdW50LCBnZXRGdW5jdGlvbk5hbWUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZmxlY3Rpb25fdXRpbHMuanMubWFwIiwiaW1wb3J0IHsgaWQgfSBmcm9tIFwiLi4vdXRpbHMvaWRcIjtcbnZhciBSZXF1ZXN0ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZXF1ZXN0KHNlcnZpY2VJZGVudGlmaWVyLCBwYXJlbnRDb250ZXh0LCBwYXJlbnRSZXF1ZXN0LCBiaW5kaW5ncywgdGFyZ2V0KSB7XG4gICAgICAgIHRoaXMuaWQgPSBpZCgpO1xuICAgICAgICB0aGlzLnNlcnZpY2VJZGVudGlmaWVyID0gc2VydmljZUlkZW50aWZpZXI7XG4gICAgICAgIHRoaXMucGFyZW50Q29udGV4dCA9IHBhcmVudENvbnRleHQ7XG4gICAgICAgIHRoaXMucGFyZW50UmVxdWVzdCA9IHBhcmVudFJlcXVlc3Q7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICB0aGlzLmNoaWxkUmVxdWVzdHMgPSBbXTtcbiAgICAgICAgdGhpcy5iaW5kaW5ncyA9IChBcnJheS5pc0FycmF5KGJpbmRpbmdzKSA/IGJpbmRpbmdzIDogW2JpbmRpbmdzXSk7XG4gICAgICAgIHRoaXMucmVxdWVzdFNjb3BlID0gcGFyZW50UmVxdWVzdCA9PT0gbnVsbFxuICAgICAgICAgICAgPyBuZXcgTWFwKClcbiAgICAgICAgICAgIDogbnVsbDtcbiAgICB9XG4gICAgUmVxdWVzdC5wcm90b3R5cGUuYWRkQ2hpbGRSZXF1ZXN0ID0gZnVuY3Rpb24gKHNlcnZpY2VJZGVudGlmaWVyLCBiaW5kaW5ncywgdGFyZ2V0KSB7XG4gICAgICAgIHZhciBjaGlsZCA9IG5ldyBSZXF1ZXN0KHNlcnZpY2VJZGVudGlmaWVyLCB0aGlzLnBhcmVudENvbnRleHQsIHRoaXMsIGJpbmRpbmdzLCB0YXJnZXQpO1xuICAgICAgICB0aGlzLmNoaWxkUmVxdWVzdHMucHVzaChjaGlsZCk7XG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9O1xuICAgIHJldHVybiBSZXF1ZXN0O1xufSgpKTtcbmV4cG9ydCB7IFJlcXVlc3QgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcXVlc3QuanMubWFwIiwiaW1wb3J0IHsgQmluZGluZ0NvdW50IH0gZnJvbSBcIi4uL2JpbmRpbmdzL2JpbmRpbmdfY291bnRcIjtcbmltcG9ydCAqIGFzIEVSUk9SX01TR1MgZnJvbSBcIi4uL2NvbnN0YW50cy9lcnJvcl9tc2dzXCI7XG5pbXBvcnQgeyBCaW5kaW5nVHlwZUVudW0sIFRhcmdldFR5cGVFbnVtIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9saXRlcmFsX3R5cGVzXCI7XG5pbXBvcnQgKiBhcyBNRVRBREFUQV9LRVkgZnJvbSBcIi4uL2NvbnN0YW50cy9tZXRhZGF0YV9rZXlzXCI7XG5pbXBvcnQgeyBpc1N0YWNrT3ZlcmZsb3dFeGVwdGlvbiB9IGZyb20gXCIuLi91dGlscy9leGNlcHRpb25zXCI7XG5pbXBvcnQgeyBjaXJjdWxhckRlcGVuZGVuY3lUb0V4Y2VwdGlvbiwgZ2V0U2VydmljZUlkZW50aWZpZXJBc1N0cmluZywgbGlzdE1ldGFkYXRhRm9yVGFyZ2V0LCBsaXN0UmVnaXN0ZXJlZEJpbmRpbmdzRm9yU2VydmljZUlkZW50aWZpZXIgfSBmcm9tIFwiLi4vdXRpbHMvc2VyaWFsaXphdGlvblwiO1xuaW1wb3J0IHsgQ29udGV4dCB9IGZyb20gXCIuL2NvbnRleHRcIjtcbmltcG9ydCB7IE1ldGFkYXRhIH0gZnJvbSBcIi4vbWV0YWRhdGFcIjtcbmltcG9ydCB7IFBsYW4gfSBmcm9tIFwiLi9wbGFuXCI7XG5pbXBvcnQgeyBnZXRCYXNlQ2xhc3NEZXBlbmRlbmN5Q291bnQsIGdldERlcGVuZGVuY2llcywgZ2V0RnVuY3Rpb25OYW1lIH0gZnJvbSBcIi4vcmVmbGVjdGlvbl91dGlsc1wiO1xuaW1wb3J0IHsgUmVxdWVzdCB9IGZyb20gXCIuL3JlcXVlc3RcIjtcbmltcG9ydCB7IFRhcmdldCB9IGZyb20gXCIuL3RhcmdldFwiO1xuZnVuY3Rpb24gZ2V0QmluZGluZ0RpY3Rpb25hcnkoY250bnIpIHtcbiAgICByZXR1cm4gY250bnIuX2JpbmRpbmdEaWN0aW9uYXJ5O1xufVxuZnVuY3Rpb24gX2NyZWF0ZVRhcmdldChpc011bHRpSW5qZWN0LCB0YXJnZXRUeXBlLCBzZXJ2aWNlSWRlbnRpZmllciwgbmFtZSwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBtZXRhZGF0YUtleSA9IGlzTXVsdGlJbmplY3QgPyBNRVRBREFUQV9LRVkuTVVMVElfSU5KRUNUX1RBRyA6IE1FVEFEQVRBX0tFWS5JTkpFQ1RfVEFHO1xuICAgIHZhciBpbmplY3RNZXRhZGF0YSA9IG5ldyBNZXRhZGF0YShtZXRhZGF0YUtleSwgc2VydmljZUlkZW50aWZpZXIpO1xuICAgIHZhciB0YXJnZXQgPSBuZXcgVGFyZ2V0KHRhcmdldFR5cGUsIG5hbWUsIHNlcnZpY2VJZGVudGlmaWVyLCBpbmplY3RNZXRhZGF0YSk7XG4gICAgaWYgKGtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciB0YWdNZXRhZGF0YSA9IG5ldyBNZXRhZGF0YShrZXksIHZhbHVlKTtcbiAgICAgICAgdGFyZ2V0Lm1ldGFkYXRhLnB1c2godGFnTWV0YWRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gX2dldEFjdGl2ZUJpbmRpbmdzKG1ldGFkYXRhUmVhZGVyLCBhdm9pZENvbnN0cmFpbnRzLCBjb250ZXh0LCBwYXJlbnRSZXF1ZXN0LCB0YXJnZXQpIHtcbiAgICB2YXIgYmluZGluZ3MgPSBnZXRCaW5kaW5ncyhjb250ZXh0LmNvbnRhaW5lciwgdGFyZ2V0LnNlcnZpY2VJZGVudGlmaWVyKTtcbiAgICB2YXIgYWN0aXZlQmluZGluZ3MgPSBbXTtcbiAgICBpZiAoYmluZGluZ3MubGVuZ3RoID09PSBCaW5kaW5nQ291bnQuTm9CaW5kaW5nc0F2YWlsYWJsZSAmJlxuICAgICAgICBjb250ZXh0LmNvbnRhaW5lci5vcHRpb25zLmF1dG9CaW5kSW5qZWN0YWJsZSAmJlxuICAgICAgICB0eXBlb2YgdGFyZ2V0LnNlcnZpY2VJZGVudGlmaWVyID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICAgbWV0YWRhdGFSZWFkZXIuZ2V0Q29uc3RydWN0b3JNZXRhZGF0YSh0YXJnZXQuc2VydmljZUlkZW50aWZpZXIpLmNvbXBpbGVyR2VuZXJhdGVkTWV0YWRhdGEpIHtcbiAgICAgICAgY29udGV4dC5jb250YWluZXIuYmluZCh0YXJnZXQuc2VydmljZUlkZW50aWZpZXIpLnRvU2VsZigpO1xuICAgICAgICBiaW5kaW5ncyA9IGdldEJpbmRpbmdzKGNvbnRleHQuY29udGFpbmVyLCB0YXJnZXQuc2VydmljZUlkZW50aWZpZXIpO1xuICAgIH1cbiAgICBpZiAoIWF2b2lkQ29uc3RyYWludHMpIHtcbiAgICAgICAgYWN0aXZlQmluZGluZ3MgPSBiaW5kaW5ncy5maWx0ZXIoZnVuY3Rpb24gKGJpbmRpbmcpIHtcbiAgICAgICAgICAgIHZhciByZXF1ZXN0ID0gbmV3IFJlcXVlc3QoYmluZGluZy5zZXJ2aWNlSWRlbnRpZmllciwgY29udGV4dCwgcGFyZW50UmVxdWVzdCwgYmluZGluZywgdGFyZ2V0KTtcbiAgICAgICAgICAgIHJldHVybiBiaW5kaW5nLmNvbnN0cmFpbnQocmVxdWVzdCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYWN0aXZlQmluZGluZ3MgPSBiaW5kaW5ncztcbiAgICB9XG4gICAgX3ZhbGlkYXRlQWN0aXZlQmluZGluZ0NvdW50KHRhcmdldC5zZXJ2aWNlSWRlbnRpZmllciwgYWN0aXZlQmluZGluZ3MsIHRhcmdldCwgY29udGV4dC5jb250YWluZXIpO1xuICAgIHJldHVybiBhY3RpdmVCaW5kaW5ncztcbn1cbmZ1bmN0aW9uIF92YWxpZGF0ZUFjdGl2ZUJpbmRpbmdDb3VudChzZXJ2aWNlSWRlbnRpZmllciwgYmluZGluZ3MsIHRhcmdldCwgY29udGFpbmVyKSB7XG4gICAgc3dpdGNoIChiaW5kaW5ncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSBCaW5kaW5nQ291bnQuTm9CaW5kaW5nc0F2YWlsYWJsZTpcbiAgICAgICAgICAgIGlmICh0YXJnZXQuaXNPcHRpb25hbCgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJpbmRpbmdzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlcnZpY2VJZGVudGlmaWVyU3RyaW5nID0gZ2V0U2VydmljZUlkZW50aWZpZXJBc1N0cmluZyhzZXJ2aWNlSWRlbnRpZmllcik7XG4gICAgICAgICAgICAgICAgdmFyIG1zZyA9IEVSUk9SX01TR1MuTk9UX1JFR0lTVEVSRUQ7XG4gICAgICAgICAgICAgICAgbXNnICs9IGxpc3RNZXRhZGF0YUZvclRhcmdldChzZXJ2aWNlSWRlbnRpZmllclN0cmluZywgdGFyZ2V0KTtcbiAgICAgICAgICAgICAgICBtc2cgKz0gbGlzdFJlZ2lzdGVyZWRCaW5kaW5nc0ZvclNlcnZpY2VJZGVudGlmaWVyKGNvbnRhaW5lciwgc2VydmljZUlkZW50aWZpZXJTdHJpbmcsIGdldEJpbmRpbmdzKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgY2FzZSBCaW5kaW5nQ291bnQuT25seU9uZUJpbmRpbmdBdmFpbGFibGU6XG4gICAgICAgICAgICByZXR1cm4gYmluZGluZ3M7XG4gICAgICAgIGNhc2UgQmluZGluZ0NvdW50Lk11bHRpcGxlQmluZGluZ3NBdmFpbGFibGU6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBpZiAoIXRhcmdldC5pc0FycmF5KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VydmljZUlkZW50aWZpZXJTdHJpbmcgPSBnZXRTZXJ2aWNlSWRlbnRpZmllckFzU3RyaW5nKHNlcnZpY2VJZGVudGlmaWVyKTtcbiAgICAgICAgICAgICAgICB2YXIgbXNnID0gRVJST1JfTVNHUy5BTUJJR1VPVVNfTUFUQ0ggKyBcIiBcIiArIHNlcnZpY2VJZGVudGlmaWVyU3RyaW5nO1xuICAgICAgICAgICAgICAgIG1zZyArPSBsaXN0UmVnaXN0ZXJlZEJpbmRpbmdzRm9yU2VydmljZUlkZW50aWZpZXIoY29udGFpbmVyLCBzZXJ2aWNlSWRlbnRpZmllclN0cmluZywgZ2V0QmluZGluZ3MpO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJpbmRpbmdzO1xuICAgICAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIF9jcmVhdGVTdWJSZXF1ZXN0cyhtZXRhZGF0YVJlYWRlciwgYXZvaWRDb25zdHJhaW50cywgc2VydmljZUlkZW50aWZpZXIsIGNvbnRleHQsIHBhcmVudFJlcXVlc3QsIHRhcmdldCkge1xuICAgIHZhciBhY3RpdmVCaW5kaW5ncztcbiAgICB2YXIgY2hpbGRSZXF1ZXN0O1xuICAgIGlmIChwYXJlbnRSZXF1ZXN0ID09PSBudWxsKSB7XG4gICAgICAgIGFjdGl2ZUJpbmRpbmdzID0gX2dldEFjdGl2ZUJpbmRpbmdzKG1ldGFkYXRhUmVhZGVyLCBhdm9pZENvbnN0cmFpbnRzLCBjb250ZXh0LCBudWxsLCB0YXJnZXQpO1xuICAgICAgICBjaGlsZFJlcXVlc3QgPSBuZXcgUmVxdWVzdChzZXJ2aWNlSWRlbnRpZmllciwgY29udGV4dCwgbnVsbCwgYWN0aXZlQmluZGluZ3MsIHRhcmdldCk7XG4gICAgICAgIHZhciB0aGVQbGFuID0gbmV3IFBsYW4oY29udGV4dCwgY2hpbGRSZXF1ZXN0KTtcbiAgICAgICAgY29udGV4dC5hZGRQbGFuKHRoZVBsYW4pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYWN0aXZlQmluZGluZ3MgPSBfZ2V0QWN0aXZlQmluZGluZ3MobWV0YWRhdGFSZWFkZXIsIGF2b2lkQ29uc3RyYWludHMsIGNvbnRleHQsIHBhcmVudFJlcXVlc3QsIHRhcmdldCk7XG4gICAgICAgIGNoaWxkUmVxdWVzdCA9IHBhcmVudFJlcXVlc3QuYWRkQ2hpbGRSZXF1ZXN0KHRhcmdldC5zZXJ2aWNlSWRlbnRpZmllciwgYWN0aXZlQmluZGluZ3MsIHRhcmdldCk7XG4gICAgfVxuICAgIGFjdGl2ZUJpbmRpbmdzLmZvckVhY2goZnVuY3Rpb24gKGJpbmRpbmcpIHtcbiAgICAgICAgdmFyIHN1YkNoaWxkUmVxdWVzdCA9IG51bGw7XG4gICAgICAgIGlmICh0YXJnZXQuaXNBcnJheSgpKSB7XG4gICAgICAgICAgICBzdWJDaGlsZFJlcXVlc3QgPSBjaGlsZFJlcXVlc3QuYWRkQ2hpbGRSZXF1ZXN0KGJpbmRpbmcuc2VydmljZUlkZW50aWZpZXIsIGJpbmRpbmcsIHRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoYmluZGluZy5jYWNoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN1YkNoaWxkUmVxdWVzdCA9IGNoaWxkUmVxdWVzdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYmluZGluZy50eXBlID09PSBCaW5kaW5nVHlwZUVudW0uSW5zdGFuY2UgJiYgYmluZGluZy5pbXBsZW1lbnRhdGlvblR5cGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBkZXBlbmRlbmNpZXMgPSBnZXREZXBlbmRlbmNpZXMobWV0YWRhdGFSZWFkZXIsIGJpbmRpbmcuaW1wbGVtZW50YXRpb25UeXBlKTtcbiAgICAgICAgICAgIGlmICghY29udGV4dC5jb250YWluZXIub3B0aW9ucy5za2lwQmFzZUNsYXNzQ2hlY2tzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJhc2VDbGFzc0RlcGVuZGVuY3lDb3VudCA9IGdldEJhc2VDbGFzc0RlcGVuZGVuY3lDb3VudChtZXRhZGF0YVJlYWRlciwgYmluZGluZy5pbXBsZW1lbnRhdGlvblR5cGUpO1xuICAgICAgICAgICAgICAgIGlmIChkZXBlbmRlbmNpZXMubGVuZ3RoIDwgYmFzZUNsYXNzRGVwZW5kZW5jeUNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IEVSUk9SX01TR1MuQVJHVU1FTlRTX0xFTkdUSF9NSVNNQVRDSChnZXRGdW5jdGlvbk5hbWUoYmluZGluZy5pbXBsZW1lbnRhdGlvblR5cGUpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZXBlbmRlbmNpZXMuZm9yRWFjaChmdW5jdGlvbiAoZGVwZW5kZW5jeSkge1xuICAgICAgICAgICAgICAgIF9jcmVhdGVTdWJSZXF1ZXN0cyhtZXRhZGF0YVJlYWRlciwgZmFsc2UsIGRlcGVuZGVuY3kuc2VydmljZUlkZW50aWZpZXIsIGNvbnRleHQsIHN1YkNoaWxkUmVxdWVzdCwgZGVwZW5kZW5jeSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZnVuY3Rpb24gZ2V0QmluZGluZ3MoY29udGFpbmVyLCBzZXJ2aWNlSWRlbnRpZmllcikge1xuICAgIHZhciBiaW5kaW5ncyA9IFtdO1xuICAgIHZhciBiaW5kaW5nRGljdGlvbmFyeSA9IGdldEJpbmRpbmdEaWN0aW9uYXJ5KGNvbnRhaW5lcik7XG4gICAgaWYgKGJpbmRpbmdEaWN0aW9uYXJ5Lmhhc0tleShzZXJ2aWNlSWRlbnRpZmllcikpIHtcbiAgICAgICAgYmluZGluZ3MgPSBiaW5kaW5nRGljdGlvbmFyeS5nZXQoc2VydmljZUlkZW50aWZpZXIpO1xuICAgIH1cbiAgICBlbHNlIGlmIChjb250YWluZXIucGFyZW50ICE9PSBudWxsKSB7XG4gICAgICAgIGJpbmRpbmdzID0gZ2V0QmluZGluZ3MoY29udGFpbmVyLnBhcmVudCwgc2VydmljZUlkZW50aWZpZXIpO1xuICAgIH1cbiAgICByZXR1cm4gYmluZGluZ3M7XG59XG5mdW5jdGlvbiBwbGFuKG1ldGFkYXRhUmVhZGVyLCBjb250YWluZXIsIGlzTXVsdGlJbmplY3QsIHRhcmdldFR5cGUsIHNlcnZpY2VJZGVudGlmaWVyLCBrZXksIHZhbHVlLCBhdm9pZENvbnN0cmFpbnRzKSB7XG4gICAgaWYgKGF2b2lkQ29uc3RyYWludHMgPT09IHZvaWQgMCkgeyBhdm9pZENvbnN0cmFpbnRzID0gZmFsc2U7IH1cbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KGNvbnRhaW5lcik7XG4gICAgdmFyIHRhcmdldCA9IF9jcmVhdGVUYXJnZXQoaXNNdWx0aUluamVjdCwgdGFyZ2V0VHlwZSwgc2VydmljZUlkZW50aWZpZXIsIFwiXCIsIGtleSwgdmFsdWUpO1xuICAgIHRyeSB7XG4gICAgICAgIF9jcmVhdGVTdWJSZXF1ZXN0cyhtZXRhZGF0YVJlYWRlciwgYXZvaWRDb25zdHJhaW50cywgc2VydmljZUlkZW50aWZpZXIsIGNvbnRleHQsIG51bGwsIHRhcmdldCk7XG4gICAgICAgIHJldHVybiBjb250ZXh0O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGlzU3RhY2tPdmVyZmxvd0V4ZXB0aW9uKGVycm9yKSkge1xuICAgICAgICAgICAgY2lyY3VsYXJEZXBlbmRlbmN5VG9FeGNlcHRpb24oY29udGV4dC5wbGFuLnJvb3RSZXF1ZXN0KTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVNb2NrUmVxdWVzdChjb250YWluZXIsIHNlcnZpY2VJZGVudGlmaWVyLCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIHRhcmdldCA9IG5ldyBUYXJnZXQoVGFyZ2V0VHlwZUVudW0uVmFyaWFibGUsIFwiXCIsIHNlcnZpY2VJZGVudGlmaWVyLCBuZXcgTWV0YWRhdGEoa2V5LCB2YWx1ZSkpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQoY29udGFpbmVyKTtcbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KHNlcnZpY2VJZGVudGlmaWVyLCBjb250ZXh0LCBudWxsLCBbXSwgdGFyZ2V0KTtcbiAgICByZXR1cm4gcmVxdWVzdDtcbn1cbmV4cG9ydCB7IHBsYW4sIGNyZWF0ZU1vY2tSZXF1ZXN0LCBnZXRCaW5kaW5nRGljdGlvbmFyeSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGxhbm5lci5qcy5tYXAiLCJmdW5jdGlvbiBpc1Byb21pc2Uob2JqZWN0KSB7XG4gICAgdmFyIGlzT2JqZWN0T3JGdW5jdGlvbiA9ICh0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QgIT09IG51bGwpIHx8IHR5cGVvZiBvYmplY3QgPT09ICdmdW5jdGlvbic7XG4gICAgcmV0dXJuIGlzT2JqZWN0T3JGdW5jdGlvbiAmJiB0eXBlb2Ygb2JqZWN0LnRoZW4gPT09IFwiZnVuY3Rpb25cIjtcbn1cbmZ1bmN0aW9uIGlzUHJvbWlzZU9yQ29udGFpbnNQcm9taXNlKG9iamVjdCkge1xuICAgIGlmIChpc1Byb21pc2Uob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkob2JqZWN0KSAmJiBvYmplY3Quc29tZShpc1Byb21pc2UpO1xufVxuZXhwb3J0IHsgaXNQcm9taXNlLCBpc1Byb21pc2VPckNvbnRhaW5zUHJvbWlzZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXN5bmMuanMubWFwIiwidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gICAgfVxufTtcbmltcG9ydCB7IEJpbmRpbmdTY29wZUVudW0gfSBmcm9tIFwiLi4vaW52ZXJzaWZ5XCI7XG5pbXBvcnQgeyBpc1Byb21pc2UgfSBmcm9tIFwiLi4vdXRpbHMvYXN5bmNcIjtcbmV4cG9ydCB2YXIgdHJ5R2V0RnJvbVNjb3BlID0gZnVuY3Rpb24gKHJlcXVlc3RTY29wZSwgYmluZGluZykge1xuICAgIGlmICgoYmluZGluZy5zY29wZSA9PT0gQmluZGluZ1Njb3BlRW51bS5TaW5nbGV0b24pICYmIGJpbmRpbmcuYWN0aXZhdGVkKSB7XG4gICAgICAgIHJldHVybiBiaW5kaW5nLmNhY2hlO1xuICAgIH1cbiAgICBpZiAoYmluZGluZy5zY29wZSA9PT0gQmluZGluZ1Njb3BlRW51bS5SZXF1ZXN0ICYmXG4gICAgICAgIHJlcXVlc3RTY29wZS5oYXMoYmluZGluZy5pZCkpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3RTY29wZS5nZXQoYmluZGluZy5pZCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcbmV4cG9ydCB2YXIgc2F2ZVRvU2NvcGUgPSBmdW5jdGlvbiAocmVxdWVzdFNjb3BlLCBiaW5kaW5nLCByZXN1bHQpIHtcbiAgICBpZiAoYmluZGluZy5zY29wZSA9PT0gQmluZGluZ1Njb3BlRW51bS5TaW5nbGV0b24pIHtcbiAgICAgICAgX3NhdmVUb1NpbmdsZXRvblNjb3BlKGJpbmRpbmcsIHJlc3VsdCk7XG4gICAgfVxuICAgIGlmIChiaW5kaW5nLnNjb3BlID09PSBCaW5kaW5nU2NvcGVFbnVtLlJlcXVlc3QpIHtcbiAgICAgICAgX3NhdmVUb1JlcXVlc3RTY29wZShyZXF1ZXN0U2NvcGUsIGJpbmRpbmcsIHJlc3VsdCk7XG4gICAgfVxufTtcbnZhciBfc2F2ZVRvUmVxdWVzdFNjb3BlID0gZnVuY3Rpb24gKHJlcXVlc3RTY29wZSwgYmluZGluZywgcmVzdWx0KSB7XG4gICAgaWYgKCFyZXF1ZXN0U2NvcGUuaGFzKGJpbmRpbmcuaWQpKSB7XG4gICAgICAgIHJlcXVlc3RTY29wZS5zZXQoYmluZGluZy5pZCwgcmVzdWx0KTtcbiAgICB9XG59O1xudmFyIF9zYXZlVG9TaW5nbGV0b25TY29wZSA9IGZ1bmN0aW9uIChiaW5kaW5nLCByZXN1bHQpIHtcbiAgICBiaW5kaW5nLmNhY2hlID0gcmVzdWx0O1xuICAgIGJpbmRpbmcuYWN0aXZhdGVkID0gdHJ1ZTtcbiAgICBpZiAoaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgICAgdm9pZCBfc2F2ZUFzeW5jUmVzdWx0VG9TaW5nbGV0b25TY29wZShiaW5kaW5nLCByZXN1bHQpO1xuICAgIH1cbn07XG52YXIgX3NhdmVBc3luY1Jlc3VsdFRvU2luZ2xldG9uU2NvcGUgPSBmdW5jdGlvbiAoYmluZGluZywgYXN5bmNSZXN1bHQpIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3VsdCwgZXhfMTtcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzAsIDIsICwgM10pO1xuICAgICAgICAgICAgICAgIHJldHVybiBbNCwgYXN5bmNSZXN1bHRdO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICBiaW5kaW5nLmNhY2hlID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgIHJldHVybiBbMywgM107XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgZXhfMSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICBiaW5kaW5nLmNhY2hlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBiaW5kaW5nLmFjdGl2YXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRocm93IGV4XzE7XG4gICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbMl07XG4gICAgICAgIH1cbiAgICB9KTtcbn0pOyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NvcGUuanMubWFwIiwiZXhwb3J0IHZhciBGYWN0b3J5VHlwZTtcbihmdW5jdGlvbiAoRmFjdG9yeVR5cGUpIHtcbiAgICBGYWN0b3J5VHlwZVtcIkR5bmFtaWNWYWx1ZVwiXSA9IFwidG9EeW5hbWljVmFsdWVcIjtcbiAgICBGYWN0b3J5VHlwZVtcIkZhY3RvcnlcIl0gPSBcInRvRmFjdG9yeVwiO1xuICAgIEZhY3RvcnlUeXBlW1wiUHJvdmlkZXJcIl0gPSBcInRvUHJvdmlkZXJcIjtcbn0pKEZhY3RvcnlUeXBlIHx8IChGYWN0b3J5VHlwZSA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mYWN0b3J5X3R5cGUuanMubWFwIiwiaW1wb3J0IHsgZ2V0U2VydmljZUlkZW50aWZpZXJBc1N0cmluZyB9IGZyb20gXCIuLi9pbnZlcnNpZnlcIjtcbmltcG9ydCAqIGFzIEVSUk9SX01TR1MgZnJvbSBcIi4uL2NvbnN0YW50cy9lcnJvcl9tc2dzXCI7XG5pbXBvcnQgeyBCaW5kaW5nVHlwZUVudW0gfSBmcm9tIFwiLi4vY29uc3RhbnRzL2xpdGVyYWxfdHlwZXNcIjtcbmltcG9ydCB7IEZhY3RvcnlUeXBlIH0gZnJvbSBcIi4vZmFjdG9yeV90eXBlXCI7XG5leHBvcnQgdmFyIG11bHRpQmluZFRvU2VydmljZSA9IGZ1bmN0aW9uIChjb250YWluZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNlcnZpY2UpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0eXBlcyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB0eXBlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHR5cGVzLmZvckVhY2goZnVuY3Rpb24gKHQpIHsgcmV0dXJuIGNvbnRhaW5lci5iaW5kKHQpLnRvU2VydmljZShzZXJ2aWNlKTsgfSk7XG4gICAgICAgIH07XG4gICAgfTtcbn07XG5leHBvcnQgdmFyIGVuc3VyZUZ1bGx5Qm91bmQgPSBmdW5jdGlvbiAoYmluZGluZykge1xuICAgIHZhciBib3VuZFZhbHVlID0gbnVsbDtcbiAgICBzd2l0Y2ggKGJpbmRpbmcudHlwZSkge1xuICAgICAgICBjYXNlIEJpbmRpbmdUeXBlRW51bS5Db25zdGFudFZhbHVlOlxuICAgICAgICBjYXNlIEJpbmRpbmdUeXBlRW51bS5GdW5jdGlvbjpcbiAgICAgICAgICAgIGJvdW5kVmFsdWUgPSBiaW5kaW5nLmNhY2hlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQmluZGluZ1R5cGVFbnVtLkNvbnN0cnVjdG9yOlxuICAgICAgICBjYXNlIEJpbmRpbmdUeXBlRW51bS5JbnN0YW5jZTpcbiAgICAgICAgICAgIGJvdW5kVmFsdWUgPSBiaW5kaW5nLmltcGxlbWVudGF0aW9uVHlwZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEJpbmRpbmdUeXBlRW51bS5EeW5hbWljVmFsdWU6XG4gICAgICAgICAgICBib3VuZFZhbHVlID0gYmluZGluZy5keW5hbWljVmFsdWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBCaW5kaW5nVHlwZUVudW0uUHJvdmlkZXI6XG4gICAgICAgICAgICBib3VuZFZhbHVlID0gYmluZGluZy5wcm92aWRlcjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEJpbmRpbmdUeXBlRW51bS5GYWN0b3J5OlxuICAgICAgICAgICAgYm91bmRWYWx1ZSA9IGJpbmRpbmcuZmFjdG9yeTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoYm91bmRWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICB2YXIgc2VydmljZUlkZW50aWZpZXJBc1N0cmluZyA9IGdldFNlcnZpY2VJZGVudGlmaWVyQXNTdHJpbmcoYmluZGluZy5zZXJ2aWNlSWRlbnRpZmllcik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9NU0dTLklOVkFMSURfQklORElOR19UWVBFICsgXCIgXCIgKyBzZXJ2aWNlSWRlbnRpZmllckFzU3RyaW5nKTtcbiAgICB9XG59O1xuZXhwb3J0IHZhciBnZXRGYWN0b3J5RGV0YWlscyA9IGZ1bmN0aW9uIChiaW5kaW5nKSB7XG4gICAgc3dpdGNoIChiaW5kaW5nLnR5cGUpIHtcbiAgICAgICAgY2FzZSBCaW5kaW5nVHlwZUVudW0uRmFjdG9yeTpcbiAgICAgICAgICAgIHJldHVybiB7IGZhY3Rvcnk6IGJpbmRpbmcuZmFjdG9yeSwgZmFjdG9yeVR5cGU6IEZhY3RvcnlUeXBlLkZhY3RvcnkgfTtcbiAgICAgICAgY2FzZSBCaW5kaW5nVHlwZUVudW0uUHJvdmlkZXI6XG4gICAgICAgICAgICByZXR1cm4geyBmYWN0b3J5OiBiaW5kaW5nLnByb3ZpZGVyLCBmYWN0b3J5VHlwZTogRmFjdG9yeVR5cGUuUHJvdmlkZXIgfTtcbiAgICAgICAgY2FzZSBCaW5kaW5nVHlwZUVudW0uRHluYW1pY1ZhbHVlOlxuICAgICAgICAgICAgcmV0dXJuIHsgZmFjdG9yeTogYmluZGluZy5keW5hbWljVmFsdWUsIGZhY3RvcnlUeXBlOiBGYWN0b3J5VHlwZS5EeW5hbWljVmFsdWUgfTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgZmFjdG9yeSB0eXBlIFwiICsgYmluZGluZy50eXBlKTtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmluZGluZ191dGlscy5qcy5tYXAiLCJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gICAgfVxufTtcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20sIHBhY2spIHtcbiAgICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XG4gICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xuICAgICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xufTtcbmltcG9ydCB7IE9OX0RFQUNUSVZBVElPTl9FUlJPUiwgUE9TVF9DT05TVFJVQ1RfRVJST1IsIFBSRV9ERVNUUk9ZX0VSUk9SIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9lcnJvcl9tc2dzXCI7XG5pbXBvcnQgeyBCaW5kaW5nU2NvcGVFbnVtLCBUYXJnZXRUeXBlRW51bSB9IGZyb20gXCIuLi9jb25zdGFudHMvbGl0ZXJhbF90eXBlc1wiO1xuaW1wb3J0ICogYXMgTUVUQURBVEFfS0VZIGZyb20gXCIuLi9jb25zdGFudHMvbWV0YWRhdGFfa2V5c1wiO1xuaW1wb3J0IHsgaXNQcm9taXNlLCBpc1Byb21pc2VPckNvbnRhaW5zUHJvbWlzZSB9IGZyb20gXCIuLi91dGlscy9hc3luY1wiO1xuZnVuY3Rpb24gX3Jlc29sdmVSZXF1ZXN0cyhjaGlsZFJlcXVlc3RzLCByZXNvbHZlUmVxdWVzdCkge1xuICAgIHJldHVybiBjaGlsZFJlcXVlc3RzLnJlZHVjZShmdW5jdGlvbiAocmVzb2x2ZWRSZXF1ZXN0cywgY2hpbGRSZXF1ZXN0KSB7XG4gICAgICAgIHZhciBpbmplY3Rpb24gPSByZXNvbHZlUmVxdWVzdChjaGlsZFJlcXVlc3QpO1xuICAgICAgICB2YXIgdGFyZ2V0VHlwZSA9IGNoaWxkUmVxdWVzdC50YXJnZXQudHlwZTtcbiAgICAgICAgaWYgKHRhcmdldFR5cGUgPT09IFRhcmdldFR5cGVFbnVtLkNvbnN0cnVjdG9yQXJndW1lbnQpIHtcbiAgICAgICAgICAgIHJlc29sdmVkUmVxdWVzdHMuY29uc3RydWN0b3JJbmplY3Rpb25zLnB1c2goaW5qZWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmVkUmVxdWVzdHMucHJvcGVydHlSZXF1ZXN0cy5wdXNoKGNoaWxkUmVxdWVzdCk7XG4gICAgICAgICAgICByZXNvbHZlZFJlcXVlc3RzLnByb3BlcnR5SW5qZWN0aW9ucy5wdXNoKGluamVjdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyZXNvbHZlZFJlcXVlc3RzLmlzQXN5bmMpIHtcbiAgICAgICAgICAgIHJlc29sdmVkUmVxdWVzdHMuaXNBc3luYyA9IGlzUHJvbWlzZU9yQ29udGFpbnNQcm9taXNlKGluamVjdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc29sdmVkUmVxdWVzdHM7XG4gICAgfSwgeyBjb25zdHJ1Y3RvckluamVjdGlvbnM6IFtdLCBwcm9wZXJ0eUluamVjdGlvbnM6IFtdLCBwcm9wZXJ0eVJlcXVlc3RzOiBbXSwgaXNBc3luYzogZmFsc2UgfSk7XG59XG5mdW5jdGlvbiBfY3JlYXRlSW5zdGFuY2UoY29uc3RyLCBjaGlsZFJlcXVlc3RzLCByZXNvbHZlUmVxdWVzdCkge1xuICAgIHZhciByZXN1bHQ7XG4gICAgaWYgKGNoaWxkUmVxdWVzdHMubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgcmVzb2x2ZWQgPSBfcmVzb2x2ZVJlcXVlc3RzKGNoaWxkUmVxdWVzdHMsIHJlc29sdmVSZXF1ZXN0KTtcbiAgICAgICAgdmFyIGNyZWF0ZUluc3RhbmNlV2l0aEluamVjdGlvbnNBcmcgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcmVzb2x2ZWQpLCB7IGNvbnN0cjogY29uc3RyIH0pO1xuICAgICAgICBpZiAocmVzb2x2ZWQuaXNBc3luYykge1xuICAgICAgICAgICAgcmVzdWx0ID0gY3JlYXRlSW5zdGFuY2VXaXRoSW5qZWN0aW9uc0FzeW5jKGNyZWF0ZUluc3RhbmNlV2l0aEluamVjdGlvbnNBcmcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ID0gY3JlYXRlSW5zdGFuY2VXaXRoSW5qZWN0aW9ucyhjcmVhdGVJbnN0YW5jZVdpdGhJbmplY3Rpb25zQXJnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gbmV3IGNvbnN0cigpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VXaXRoSW5qZWN0aW9ucyhhcmdzKSB7XG4gICAgdmFyIF9hO1xuICAgIHZhciBpbnN0YW5jZSA9IG5ldyAoKF9hID0gYXJncy5jb25zdHIpLmJpbmQuYXBwbHkoX2EsIF9fc3ByZWFkQXJyYXkoW3ZvaWQgMF0sIGFyZ3MuY29uc3RydWN0b3JJbmplY3Rpb25zLCBmYWxzZSkpKSgpO1xuICAgIGFyZ3MucHJvcGVydHlSZXF1ZXN0cy5mb3JFYWNoKGZ1bmN0aW9uIChyLCBpbmRleCkge1xuICAgICAgICB2YXIgcHJvcGVydHkgPSByLnRhcmdldC5pZGVudGlmaWVyO1xuICAgICAgICB2YXIgaW5qZWN0aW9uID0gYXJncy5wcm9wZXJ0eUluamVjdGlvbnNbaW5kZXhdO1xuICAgICAgICBpbnN0YW5jZVtwcm9wZXJ0eV0gPSBpbmplY3Rpb247XG4gICAgfSk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xufVxuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VXaXRoSW5qZWN0aW9uc0FzeW5jKGFyZ3MpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb25zdHJ1Y3RvckluamVjdGlvbnMsIHByb3BlcnR5SW5qZWN0aW9ucztcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0LCBwb3NzaWJseVdhaXRJbmplY3Rpb25zKGFyZ3MuY29uc3RydWN0b3JJbmplY3Rpb25zKV07XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvckluamVjdGlvbnMgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgcG9zc2libHlXYWl0SW5qZWN0aW9ucyhhcmdzLnByb3BlcnR5SW5qZWN0aW9ucyldO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlJbmplY3Rpb25zID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIsIGNyZWF0ZUluc3RhbmNlV2l0aEluamVjdGlvbnMoX19hc3NpZ24oX19hc3NpZ24oe30sIGFyZ3MpLCB7IGNvbnN0cnVjdG9ySW5qZWN0aW9uczogY29uc3RydWN0b3JJbmplY3Rpb25zLCBwcm9wZXJ0eUluamVjdGlvbnM6IHByb3BlcnR5SW5qZWN0aW9ucyB9KSldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHBvc3NpYmx5V2FpdEluamVjdGlvbnMocG9zc2libGVQcm9taXNlaW5qZWN0aW9ucykge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGluamVjdGlvbnMsIF9pLCBwb3NzaWJsZVByb21pc2VpbmplY3Rpb25zXzEsIGluamVjdGlvbjtcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgaW5qZWN0aW9ucyA9IFtdO1xuICAgICAgICAgICAgZm9yIChfaSA9IDAsIHBvc3NpYmxlUHJvbWlzZWluamVjdGlvbnNfMSA9IHBvc3NpYmxlUHJvbWlzZWluamVjdGlvbnM7IF9pIDwgcG9zc2libGVQcm9taXNlaW5qZWN0aW9uc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGluamVjdGlvbiA9IHBvc3NpYmxlUHJvbWlzZWluamVjdGlvbnNfMVtfaV07XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaW5qZWN0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICBpbmplY3Rpb25zLnB1c2goUHJvbWlzZS5hbGwoaW5qZWN0aW9uKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpbmplY3Rpb25zLnB1c2goaW5qZWN0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gWzIsIFByb21pc2UuYWxsKGluamVjdGlvbnMpXTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBfZ2V0SW5zdGFuY2VBZnRlclBvc3RDb25zdHJ1Y3QoY29uc3RyLCByZXN1bHQpIHtcbiAgICB2YXIgcG9zdENvbnN0cnVjdFJlc3VsdCA9IF9wb3N0Q29uc3RydWN0KGNvbnN0ciwgcmVzdWx0KTtcbiAgICBpZiAoaXNQcm9taXNlKHBvc3RDb25zdHJ1Y3RSZXN1bHQpKSB7XG4gICAgICAgIHJldHVybiBwb3N0Q29uc3RydWN0UmVzdWx0LnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzdWx0OyB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuZnVuY3Rpb24gX3Bvc3RDb25zdHJ1Y3QoY29uc3RyLCBpbnN0YW5jZSkge1xuICAgIHZhciBfYSwgX2I7XG4gICAgaWYgKFJlZmxlY3QuaGFzTWV0YWRhdGEoTUVUQURBVEFfS0VZLlBPU1RfQ09OU1RSVUNULCBjb25zdHIpKSB7XG4gICAgICAgIHZhciBkYXRhID0gUmVmbGVjdC5nZXRNZXRhZGF0YShNRVRBREFUQV9LRVkuUE9TVF9DT05TVFJVQ1QsIGNvbnN0cik7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gKF9iID0gKF9hID0gaW5zdGFuY2UpW2RhdGEudmFsdWVdKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihQT1NUX0NPTlNUUlVDVF9FUlJPUihjb25zdHIubmFtZSwgZS5tZXNzYWdlKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBfdmFsaWRhdGVJbnN0YW5jZVJlc29sdXRpb24oYmluZGluZywgY29uc3RyKSB7XG4gICAgaWYgKGJpbmRpbmcuc2NvcGUgIT09IEJpbmRpbmdTY29wZUVudW0uU2luZ2xldG9uKSB7XG4gICAgICAgIF90aHJvd0lmSGFuZGxpbmdEZWFjdGl2YXRpb24oYmluZGluZywgY29uc3RyKTtcbiAgICB9XG59XG5mdW5jdGlvbiBfdGhyb3dJZkhhbmRsaW5nRGVhY3RpdmF0aW9uKGJpbmRpbmcsIGNvbnN0cikge1xuICAgIHZhciBzY29wZUVycm9yTWVzc2FnZSA9IFwiQ2xhc3MgY2Fubm90IGJlIGluc3RhbnRpYXRlZCBpbiBcIiArIChiaW5kaW5nLnNjb3BlID09PSBCaW5kaW5nU2NvcGVFbnVtLlJlcXVlc3QgP1xuICAgICAgICBcInJlcXVlc3RcIiA6XG4gICAgICAgIFwidHJhbnNpZW50XCIpICsgXCIgc2NvcGUuXCI7XG4gICAgaWYgKHR5cGVvZiBiaW5kaW5nLm9uRGVhY3RpdmF0aW9uID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKE9OX0RFQUNUSVZBVElPTl9FUlJPUihjb25zdHIubmFtZSwgc2NvcGVFcnJvck1lc3NhZ2UpKTtcbiAgICB9XG4gICAgaWYgKFJlZmxlY3QuaGFzTWV0YWRhdGEoTUVUQURBVEFfS0VZLlBSRV9ERVNUUk9ZLCBjb25zdHIpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihQUkVfREVTVFJPWV9FUlJPUihjb25zdHIubmFtZSwgc2NvcGVFcnJvck1lc3NhZ2UpKTtcbiAgICB9XG59XG5mdW5jdGlvbiByZXNvbHZlSW5zdGFuY2UoYmluZGluZywgY29uc3RyLCBjaGlsZFJlcXVlc3RzLCByZXNvbHZlUmVxdWVzdCkge1xuICAgIF92YWxpZGF0ZUluc3RhbmNlUmVzb2x1dGlvbihiaW5kaW5nLCBjb25zdHIpO1xuICAgIHZhciByZXN1bHQgPSBfY3JlYXRlSW5zdGFuY2UoY29uc3RyLCBjaGlsZFJlcXVlc3RzLCByZXNvbHZlUmVxdWVzdCk7XG4gICAgaWYgKGlzUHJvbWlzZShyZXN1bHQpKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQudGhlbihmdW5jdGlvbiAocmVzb2x2ZWRSZXN1bHQpIHsgcmV0dXJuIF9nZXRJbnN0YW5jZUFmdGVyUG9zdENvbnN0cnVjdChjb25zdHIsIHJlc29sdmVkUmVzdWx0KTsgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gX2dldEluc3RhbmNlQWZ0ZXJQb3N0Q29uc3RydWN0KGNvbnN0ciwgcmVzdWx0KTtcbiAgICB9XG59XG5leHBvcnQgeyByZXNvbHZlSW5zdGFuY2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluc3RhbnRpYXRpb24uanMubWFwIiwidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gICAgfVxufTtcbmltcG9ydCAqIGFzIEVSUk9SX01TR1MgZnJvbSBcIi4uL2NvbnN0YW50cy9lcnJvcl9tc2dzXCI7XG5pbXBvcnQgeyBCaW5kaW5nVHlwZUVudW0gfSBmcm9tIFwiLi4vY29uc3RhbnRzL2xpdGVyYWxfdHlwZXNcIjtcbmltcG9ydCB7IGdldEJpbmRpbmdEaWN0aW9uYXJ5IH0gZnJvbSBcIi4uL3BsYW5uaW5nL3BsYW5uZXJcIjtcbmltcG9ydCB7IHNhdmVUb1Njb3BlLCB0cnlHZXRGcm9tU2NvcGUgfSBmcm9tIFwiLi4vc2NvcGUvc2NvcGVcIjtcbmltcG9ydCB7IGlzUHJvbWlzZSB9IGZyb20gXCIuLi91dGlscy9hc3luY1wiO1xuaW1wb3J0IHsgZ2V0RmFjdG9yeURldGFpbHMsIGVuc3VyZUZ1bGx5Qm91bmQgfSBmcm9tIFwiLi4vdXRpbHMvYmluZGluZ191dGlsc1wiO1xuaW1wb3J0IHsgdHJ5QW5kVGhyb3dFcnJvcklmU3RhY2tPdmVyZmxvdyB9IGZyb20gXCIuLi91dGlscy9leGNlcHRpb25zXCI7XG5pbXBvcnQgeyByZXNvbHZlSW5zdGFuY2UgfSBmcm9tIFwiLi9pbnN0YW50aWF0aW9uXCI7XG52YXIgX3Jlc29sdmVSZXF1ZXN0ID0gZnVuY3Rpb24gKHJlcXVlc3RTY29wZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAocmVxdWVzdCkge1xuICAgICAgICByZXF1ZXN0LnBhcmVudENvbnRleHQuc2V0Q3VycmVudFJlcXVlc3QocmVxdWVzdCk7XG4gICAgICAgIHZhciBiaW5kaW5ncyA9IHJlcXVlc3QuYmluZGluZ3M7XG4gICAgICAgIHZhciBjaGlsZFJlcXVlc3RzID0gcmVxdWVzdC5jaGlsZFJlcXVlc3RzO1xuICAgICAgICB2YXIgdGFyZ2V0SXNBbkFycmF5ID0gcmVxdWVzdC50YXJnZXQgJiYgcmVxdWVzdC50YXJnZXQuaXNBcnJheSgpO1xuICAgICAgICB2YXIgdGFyZ2V0UGFyZW50SXNOb3RBbkFycmF5ID0gIXJlcXVlc3QucGFyZW50UmVxdWVzdCB8fFxuICAgICAgICAgICAgIXJlcXVlc3QucGFyZW50UmVxdWVzdC50YXJnZXQgfHxcbiAgICAgICAgICAgICFyZXF1ZXN0LnRhcmdldCB8fFxuICAgICAgICAgICAgIXJlcXVlc3QucGFyZW50UmVxdWVzdC50YXJnZXQubWF0Y2hlc0FycmF5KHJlcXVlc3QudGFyZ2V0LnNlcnZpY2VJZGVudGlmaWVyKTtcbiAgICAgICAgaWYgKHRhcmdldElzQW5BcnJheSAmJiB0YXJnZXRQYXJlbnRJc05vdEFuQXJyYXkpIHtcbiAgICAgICAgICAgIHJldHVybiBjaGlsZFJlcXVlc3RzLm1hcChmdW5jdGlvbiAoY2hpbGRSZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgdmFyIF9mID0gX3Jlc29sdmVSZXF1ZXN0KHJlcXVlc3RTY29wZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9mKGNoaWxkUmVxdWVzdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChyZXF1ZXN0LnRhcmdldC5pc09wdGlvbmFsKCkgJiYgYmluZGluZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBiaW5kaW5nID0gYmluZGluZ3NbMF07XG4gICAgICAgICAgICByZXR1cm4gX3Jlc29sdmVCaW5kaW5nKHJlcXVlc3RTY29wZSwgcmVxdWVzdCwgYmluZGluZyk7XG4gICAgICAgIH1cbiAgICB9O1xufTtcbnZhciBfcmVzb2x2ZUZhY3RvcnlGcm9tQmluZGluZyA9IGZ1bmN0aW9uIChiaW5kaW5nLCBjb250ZXh0KSB7XG4gICAgdmFyIGZhY3RvcnlEZXRhaWxzID0gZ2V0RmFjdG9yeURldGFpbHMoYmluZGluZyk7XG4gICAgcmV0dXJuIHRyeUFuZFRocm93RXJyb3JJZlN0YWNrT3ZlcmZsb3coZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFjdG9yeURldGFpbHMuZmFjdG9yeS5iaW5kKGJpbmRpbmcpKGNvbnRleHQpOyB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgRXJyb3IoRVJST1JfTVNHUy5DSVJDVUxBUl9ERVBFTkRFTkNZX0lOX0ZBQ1RPUlkoZmFjdG9yeURldGFpbHMuZmFjdG9yeVR5cGUsIGNvbnRleHQuY3VycmVudFJlcXVlc3Quc2VydmljZUlkZW50aWZpZXIudG9TdHJpbmcoKSkpOyB9KTtcbn07XG52YXIgX2dldFJlc29sdmVkRnJvbUJpbmRpbmcgPSBmdW5jdGlvbiAocmVxdWVzdFNjb3BlLCByZXF1ZXN0LCBiaW5kaW5nKSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICB2YXIgY2hpbGRSZXF1ZXN0cyA9IHJlcXVlc3QuY2hpbGRSZXF1ZXN0cztcbiAgICBlbnN1cmVGdWxseUJvdW5kKGJpbmRpbmcpO1xuICAgIHN3aXRjaCAoYmluZGluZy50eXBlKSB7XG4gICAgICAgIGNhc2UgQmluZGluZ1R5cGVFbnVtLkNvbnN0YW50VmFsdWU6XG4gICAgICAgIGNhc2UgQmluZGluZ1R5cGVFbnVtLkZ1bmN0aW9uOlxuICAgICAgICAgICAgcmVzdWx0ID0gYmluZGluZy5jYWNoZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEJpbmRpbmdUeXBlRW51bS5Db25zdHJ1Y3RvcjpcbiAgICAgICAgICAgIHJlc3VsdCA9IGJpbmRpbmcuaW1wbGVtZW50YXRpb25UeXBlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQmluZGluZ1R5cGVFbnVtLkluc3RhbmNlOlxuICAgICAgICAgICAgcmVzdWx0ID0gcmVzb2x2ZUluc3RhbmNlKGJpbmRpbmcsIGJpbmRpbmcuaW1wbGVtZW50YXRpb25UeXBlLCBjaGlsZFJlcXVlc3RzLCBfcmVzb2x2ZVJlcXVlc3QocmVxdWVzdFNjb3BlKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJlc3VsdCA9IF9yZXNvbHZlRmFjdG9yeUZyb21CaW5kaW5nKGJpbmRpbmcsIHJlcXVlc3QucGFyZW50Q29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59O1xudmFyIF9yZXNvbHZlSW5TY29wZSA9IGZ1bmN0aW9uIChyZXF1ZXN0U2NvcGUsIGJpbmRpbmcsIHJlc29sdmVGcm9tQmluZGluZykge1xuICAgIHZhciByZXN1bHQgPSB0cnlHZXRGcm9tU2NvcGUocmVxdWVzdFNjb3BlLCBiaW5kaW5nKTtcbiAgICBpZiAocmVzdWx0ICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHJlc3VsdCA9IHJlc29sdmVGcm9tQmluZGluZygpO1xuICAgIHNhdmVUb1Njb3BlKHJlcXVlc3RTY29wZSwgYmluZGluZywgcmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBfcmVzb2x2ZUJpbmRpbmcgPSBmdW5jdGlvbiAocmVxdWVzdFNjb3BlLCByZXF1ZXN0LCBiaW5kaW5nKSB7XG4gICAgcmV0dXJuIF9yZXNvbHZlSW5TY29wZShyZXF1ZXN0U2NvcGUsIGJpbmRpbmcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IF9nZXRSZXNvbHZlZEZyb21CaW5kaW5nKHJlcXVlc3RTY29wZSwgcmVxdWVzdCwgYmluZGluZyk7XG4gICAgICAgIGlmIChpc1Byb21pc2UocmVzdWx0KSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnRoZW4oZnVuY3Rpb24gKHJlc29sdmVkKSB7IHJldHVybiBfb25BY3RpdmF0aW9uKHJlcXVlc3QsIGJpbmRpbmcsIHJlc29sdmVkKTsgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSBfb25BY3RpdmF0aW9uKHJlcXVlc3QsIGJpbmRpbmcsIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcbn07XG5mdW5jdGlvbiBfb25BY3RpdmF0aW9uKHJlcXVlc3QsIGJpbmRpbmcsIHJlc29sdmVkKSB7XG4gICAgdmFyIHJlc3VsdCA9IF9iaW5kaW5nQWN0aXZhdGlvbihyZXF1ZXN0LnBhcmVudENvbnRleHQsIGJpbmRpbmcsIHJlc29sdmVkKTtcbiAgICB2YXIgY29udGFpbmVyc0l0ZXJhdG9yID0gX2dldENvbnRhaW5lcnNJdGVyYXRvcihyZXF1ZXN0LnBhcmVudENvbnRleHQuY29udGFpbmVyKTtcbiAgICB2YXIgY29udGFpbmVyO1xuICAgIHZhciBjb250YWluZXJzSXRlcmF0b3JSZXN1bHQgPSBjb250YWluZXJzSXRlcmF0b3IubmV4dCgpO1xuICAgIGRvIHtcbiAgICAgICAgY29udGFpbmVyID0gY29udGFpbmVyc0l0ZXJhdG9yUmVzdWx0LnZhbHVlO1xuICAgICAgICB2YXIgY29udGV4dF8xID0gcmVxdWVzdC5wYXJlbnRDb250ZXh0O1xuICAgICAgICB2YXIgc2VydmljZUlkZW50aWZpZXIgPSByZXF1ZXN0LnNlcnZpY2VJZGVudGlmaWVyO1xuICAgICAgICB2YXIgYWN0aXZhdGlvbnNJdGVyYXRvciA9IF9nZXRDb250YWluZXJBY3RpdmF0aW9uc0ZvclNlcnZpY2UoY29udGFpbmVyLCBzZXJ2aWNlSWRlbnRpZmllcik7XG4gICAgICAgIGlmIChpc1Byb21pc2UocmVzdWx0KSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gX2FjdGl2YXRlQ29udGFpbmVyQXN5bmMoYWN0aXZhdGlvbnNJdGVyYXRvciwgY29udGV4dF8xLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ID0gX2FjdGl2YXRlQ29udGFpbmVyKGFjdGl2YXRpb25zSXRlcmF0b3IsIGNvbnRleHRfMSwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICBjb250YWluZXJzSXRlcmF0b3JSZXN1bHQgPSBjb250YWluZXJzSXRlcmF0b3IubmV4dCgpO1xuICAgIH0gd2hpbGUgKGNvbnRhaW5lcnNJdGVyYXRvclJlc3VsdC5kb25lICE9PSB0cnVlICYmICFnZXRCaW5kaW5nRGljdGlvbmFyeShjb250YWluZXIpLmhhc0tleShyZXF1ZXN0LnNlcnZpY2VJZGVudGlmaWVyKSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbnZhciBfYmluZGluZ0FjdGl2YXRpb24gPSBmdW5jdGlvbiAoY29udGV4dCwgYmluZGluZywgcHJldmlvdXNSZXN1bHQpIHtcbiAgICB2YXIgcmVzdWx0O1xuICAgIGlmICh0eXBlb2YgYmluZGluZy5vbkFjdGl2YXRpb24gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXN1bHQgPSBiaW5kaW5nLm9uQWN0aXZhdGlvbihjb250ZXh0LCBwcmV2aW91c1Jlc3VsdCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBwcmV2aW91c1Jlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgX2FjdGl2YXRlQ29udGFpbmVyID0gZnVuY3Rpb24gKGFjdGl2YXRpb25zSXRlcmF0b3IsIGNvbnRleHQsIHJlc3VsdCkge1xuICAgIHZhciBhY3RpdmF0aW9uID0gYWN0aXZhdGlvbnNJdGVyYXRvci5uZXh0KCk7XG4gICAgd2hpbGUgKCFhY3RpdmF0aW9uLmRvbmUpIHtcbiAgICAgICAgcmVzdWx0ID0gYWN0aXZhdGlvbi52YWx1ZShjb250ZXh0LCByZXN1bHQpO1xuICAgICAgICBpZiAoaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHJldHVybiBfYWN0aXZhdGVDb250YWluZXJBc3luYyhhY3RpdmF0aW9uc0l0ZXJhdG9yLCBjb250ZXh0LCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIGFjdGl2YXRpb24gPSBhY3RpdmF0aW9uc0l0ZXJhdG9yLm5leHQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgX2FjdGl2YXRlQ29udGFpbmVyQXN5bmMgPSBmdW5jdGlvbiAoYWN0aXZhdGlvbnNJdGVyYXRvciwgY29udGV4dCwgcmVzdWx0UHJvbWlzZSkgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0LCBhY3RpdmF0aW9uO1xuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQsIHJlc3VsdFByb21pc2VdO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICBhY3RpdmF0aW9uID0gYWN0aXZhdGlvbnNJdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICAgICAgX2EubGFiZWwgPSAyO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGlmICghIWFjdGl2YXRpb24uZG9uZSkgcmV0dXJuIFszLCA0XTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQsIGFjdGl2YXRpb24udmFsdWUoY29udGV4dCwgcmVzdWx0KV07XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIGFjdGl2YXRpb24gPSBhY3RpdmF0aW9uc0l0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzMsIDJdO1xuICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIsIHJlc3VsdF07XG4gICAgICAgIH1cbiAgICB9KTtcbn0pOyB9O1xudmFyIF9nZXRDb250YWluZXJBY3RpdmF0aW9uc0ZvclNlcnZpY2UgPSBmdW5jdGlvbiAoY29udGFpbmVyLCBzZXJ2aWNlSWRlbnRpZmllcikge1xuICAgIHZhciBhY3RpdmF0aW9ucyA9IGNvbnRhaW5lci5fYWN0aXZhdGlvbnM7XG4gICAgcmV0dXJuIGFjdGl2YXRpb25zLmhhc0tleShzZXJ2aWNlSWRlbnRpZmllcikgPyBhY3RpdmF0aW9ucy5nZXQoc2VydmljZUlkZW50aWZpZXIpLnZhbHVlcygpIDogW10udmFsdWVzKCk7XG59O1xudmFyIF9nZXRDb250YWluZXJzSXRlcmF0b3IgPSBmdW5jdGlvbiAoY29udGFpbmVyKSB7XG4gICAgdmFyIGNvbnRhaW5lcnNTdGFjayA9IFtjb250YWluZXJdO1xuICAgIHZhciBwYXJlbnQgPSBjb250YWluZXIucGFyZW50O1xuICAgIHdoaWxlIChwYXJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgY29udGFpbmVyc1N0YWNrLnB1c2gocGFyZW50KTtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICB9XG4gICAgdmFyIGdldE5leHRDb250YWluZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBuZXh0Q29udGFpbmVyID0gY29udGFpbmVyc1N0YWNrLnBvcCgpO1xuICAgICAgICBpZiAobmV4dENvbnRhaW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IG5leHRDb250YWluZXIgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiB1bmRlZmluZWQgfTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdmFyIGNvbnRhaW5lcnNJdGVyYXRvciA9IHtcbiAgICAgICAgbmV4dDogZ2V0TmV4dENvbnRhaW5lcixcbiAgICB9O1xuICAgIHJldHVybiBjb250YWluZXJzSXRlcmF0b3I7XG59O1xuZnVuY3Rpb24gcmVzb2x2ZShjb250ZXh0KSB7XG4gICAgdmFyIF9mID0gX3Jlc29sdmVSZXF1ZXN0KGNvbnRleHQucGxhbi5yb290UmVxdWVzdC5yZXF1ZXN0U2NvcGUpO1xuICAgIHJldHVybiBfZihjb250ZXh0LnBsYW4ucm9vdFJlcXVlc3QpO1xufVxuZXhwb3J0IHsgcmVzb2x2ZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzb2x2ZXIuanMubWFwIiwiaW1wb3J0ICogYXMgTUVUQURBVEFfS0VZIGZyb20gXCIuLi9jb25zdGFudHMvbWV0YWRhdGFfa2V5c1wiO1xuaW1wb3J0IHsgTWV0YWRhdGEgfSBmcm9tIFwiLi4vcGxhbm5pbmcvbWV0YWRhdGFcIjtcbnZhciB0cmF2ZXJzZUFuY2Vyc3RvcnMgPSBmdW5jdGlvbiAocmVxdWVzdCwgY29uc3RyYWludCkge1xuICAgIHZhciBwYXJlbnQgPSByZXF1ZXN0LnBhcmVudFJlcXVlc3Q7XG4gICAgaWYgKHBhcmVudCAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gY29uc3RyYWludChwYXJlbnQpID8gdHJ1ZSA6IHRyYXZlcnNlQW5jZXJzdG9ycyhwYXJlbnQsIGNvbnN0cmFpbnQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn07XG52YXIgdGFnZ2VkQ29uc3RyYWludCA9IGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhciBjb25zdHJhaW50ID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3QgIT09IG51bGwgJiYgcmVxdWVzdC50YXJnZXQgIT09IG51bGwgJiYgcmVxdWVzdC50YXJnZXQubWF0Y2hlc1RhZyhrZXkpKHZhbHVlKTtcbiAgICB9O1xuICAgIGNvbnN0cmFpbnQubWV0YURhdGEgPSBuZXcgTWV0YWRhdGEoa2V5LCB2YWx1ZSk7XG4gICAgcmV0dXJuIGNvbnN0cmFpbnQ7XG59OyB9O1xudmFyIG5hbWVkQ29uc3RyYWludCA9IHRhZ2dlZENvbnN0cmFpbnQoTUVUQURBVEFfS0VZLk5BTUVEX1RBRyk7XG52YXIgdHlwZUNvbnN0cmFpbnQgPSBmdW5jdGlvbiAodHlwZSkgeyByZXR1cm4gZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICB2YXIgYmluZGluZyA9IG51bGw7XG4gICAgaWYgKHJlcXVlc3QgIT09IG51bGwpIHtcbiAgICAgICAgYmluZGluZyA9IHJlcXVlc3QuYmluZGluZ3NbMF07XG4gICAgICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdmFyIHNlcnZpY2VJZGVudGlmaWVyID0gYmluZGluZy5zZXJ2aWNlSWRlbnRpZmllcjtcbiAgICAgICAgICAgIHJldHVybiBzZXJ2aWNlSWRlbnRpZmllciA9PT0gdHlwZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBjb25zdHJ1Y3RvciA9IHJlcXVlc3QuYmluZGluZ3NbMF0uaW1wbGVtZW50YXRpb25UeXBlO1xuICAgICAgICAgICAgcmV0dXJuIHR5cGUgPT09IGNvbnN0cnVjdG9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn07IH07XG5leHBvcnQgeyB0cmF2ZXJzZUFuY2Vyc3RvcnMsIHRhZ2dlZENvbnN0cmFpbnQsIG5hbWVkQ29uc3RyYWludCwgdHlwZUNvbnN0cmFpbnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0cmFpbnRfaGVscGVycy5qcy5tYXAiLCJpbXBvcnQgeyBCaW5kaW5nT25TeW50YXggfSBmcm9tIFwiLi9iaW5kaW5nX29uX3N5bnRheFwiO1xuaW1wb3J0IHsgbmFtZWRDb25zdHJhaW50LCB0YWdnZWRDb25zdHJhaW50LCB0cmF2ZXJzZUFuY2Vyc3RvcnMsIHR5cGVDb25zdHJhaW50IH0gZnJvbSBcIi4vY29uc3RyYWludF9oZWxwZXJzXCI7XG52YXIgQmluZGluZ1doZW5TeW50YXggPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJpbmRpbmdXaGVuU3ludGF4KGJpbmRpbmcpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZyA9IGJpbmRpbmc7XG4gICAgfVxuICAgIEJpbmRpbmdXaGVuU3ludGF4LnByb3RvdHlwZS53aGVuID0gZnVuY3Rpb24gKGNvbnN0cmFpbnQpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZy5jb25zdHJhaW50ID0gY29uc3RyYWludDtcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nT25TeW50YXgodGhpcy5fYmluZGluZyk7XG4gICAgfTtcbiAgICBCaW5kaW5nV2hlblN5bnRheC5wcm90b3R5cGUud2hlblRhcmdldE5hbWVkID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZy5jb25zdHJhaW50ID0gbmFtZWRDb25zdHJhaW50KG5hbWUpO1xuICAgICAgICByZXR1cm4gbmV3IEJpbmRpbmdPblN5bnRheCh0aGlzLl9iaW5kaW5nKTtcbiAgICB9O1xuICAgIEJpbmRpbmdXaGVuU3ludGF4LnByb3RvdHlwZS53aGVuVGFyZ2V0SXNEZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9iaW5kaW5nLmNvbnN0cmFpbnQgPSBmdW5jdGlvbiAocmVxdWVzdCkge1xuICAgICAgICAgICAgaWYgKHJlcXVlc3QgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdGFyZ2V0SXNEZWZhdWx0ID0gKHJlcXVlc3QudGFyZ2V0ICE9PSBudWxsKSAmJlxuICAgICAgICAgICAgICAgICghcmVxdWVzdC50YXJnZXQuaXNOYW1lZCgpKSAmJlxuICAgICAgICAgICAgICAgICghcmVxdWVzdC50YXJnZXQuaXNUYWdnZWQoKSk7XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0SXNEZWZhdWx0O1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbmV3IEJpbmRpbmdPblN5bnRheCh0aGlzLl9iaW5kaW5nKTtcbiAgICB9O1xuICAgIEJpbmRpbmdXaGVuU3ludGF4LnByb3RvdHlwZS53aGVuVGFyZ2V0VGFnZ2VkID0gZnVuY3Rpb24gKHRhZywgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZy5jb25zdHJhaW50ID0gdGFnZ2VkQ29uc3RyYWludCh0YWcpKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nT25TeW50YXgodGhpcy5fYmluZGluZyk7XG4gICAgfTtcbiAgICBCaW5kaW5nV2hlblN5bnRheC5wcm90b3R5cGUud2hlbkluamVjdGVkSW50byA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZy5jb25zdHJhaW50ID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0ICE9PSBudWxsICYmIHR5cGVDb25zdHJhaW50KHBhcmVudCkocmVxdWVzdC5wYXJlbnRSZXF1ZXN0KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nT25TeW50YXgodGhpcy5fYmluZGluZyk7XG4gICAgfTtcbiAgICBCaW5kaW5nV2hlblN5bnRheC5wcm90b3R5cGUud2hlblBhcmVudE5hbWVkID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZy5jb25zdHJhaW50ID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0ICE9PSBudWxsICYmIG5hbWVkQ29uc3RyYWludChuYW1lKShyZXF1ZXN0LnBhcmVudFJlcXVlc3QpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbmV3IEJpbmRpbmdPblN5bnRheCh0aGlzLl9iaW5kaW5nKTtcbiAgICB9O1xuICAgIEJpbmRpbmdXaGVuU3ludGF4LnByb3RvdHlwZS53aGVuUGFyZW50VGFnZ2VkID0gZnVuY3Rpb24gKHRhZywgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZy5jb25zdHJhaW50ID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0ICE9PSBudWxsICYmIHRhZ2dlZENvbnN0cmFpbnQodGFnKSh2YWx1ZSkocmVxdWVzdC5wYXJlbnRSZXF1ZXN0KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nT25TeW50YXgodGhpcy5fYmluZGluZyk7XG4gICAgfTtcbiAgICBCaW5kaW5nV2hlblN5bnRheC5wcm90b3R5cGUud2hlbkFueUFuY2VzdG9ySXMgPSBmdW5jdGlvbiAoYW5jZXN0b3IpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZy5jb25zdHJhaW50ID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0ICE9PSBudWxsICYmIHRyYXZlcnNlQW5jZXJzdG9ycyhyZXF1ZXN0LCB0eXBlQ29uc3RyYWludChhbmNlc3RvcikpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbmV3IEJpbmRpbmdPblN5bnRheCh0aGlzLl9iaW5kaW5nKTtcbiAgICB9O1xuICAgIEJpbmRpbmdXaGVuU3ludGF4LnByb3RvdHlwZS53aGVuTm9BbmNlc3RvcklzID0gZnVuY3Rpb24gKGFuY2VzdG9yKSB7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcuY29uc3RyYWludCA9IGZ1bmN0aW9uIChyZXF1ZXN0KSB7XG4gICAgICAgICAgICByZXR1cm4gcmVxdWVzdCAhPT0gbnVsbCAmJiAhdHJhdmVyc2VBbmNlcnN0b3JzKHJlcXVlc3QsIHR5cGVDb25zdHJhaW50KGFuY2VzdG9yKSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBuZXcgQmluZGluZ09uU3ludGF4KHRoaXMuX2JpbmRpbmcpO1xuICAgIH07XG4gICAgQmluZGluZ1doZW5TeW50YXgucHJvdG90eXBlLndoZW5BbnlBbmNlc3Rvck5hbWVkID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZy5jb25zdHJhaW50ID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0ICE9PSBudWxsICYmIHRyYXZlcnNlQW5jZXJzdG9ycyhyZXF1ZXN0LCBuYW1lZENvbnN0cmFpbnQobmFtZSkpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbmV3IEJpbmRpbmdPblN5bnRheCh0aGlzLl9iaW5kaW5nKTtcbiAgICB9O1xuICAgIEJpbmRpbmdXaGVuU3ludGF4LnByb3RvdHlwZS53aGVuTm9BbmNlc3Rvck5hbWVkID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZy5jb25zdHJhaW50ID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0ICE9PSBudWxsICYmICF0cmF2ZXJzZUFuY2Vyc3RvcnMocmVxdWVzdCwgbmFtZWRDb25zdHJhaW50KG5hbWUpKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nT25TeW50YXgodGhpcy5fYmluZGluZyk7XG4gICAgfTtcbiAgICBCaW5kaW5nV2hlblN5bnRheC5wcm90b3R5cGUud2hlbkFueUFuY2VzdG9yVGFnZ2VkID0gZnVuY3Rpb24gKHRhZywgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZy5jb25zdHJhaW50ID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0ICE9PSBudWxsICYmIHRyYXZlcnNlQW5jZXJzdG9ycyhyZXF1ZXN0LCB0YWdnZWRDb25zdHJhaW50KHRhZykodmFsdWUpKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nT25TeW50YXgodGhpcy5fYmluZGluZyk7XG4gICAgfTtcbiAgICBCaW5kaW5nV2hlblN5bnRheC5wcm90b3R5cGUud2hlbk5vQW5jZXN0b3JUYWdnZWQgPSBmdW5jdGlvbiAodGFnLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLl9iaW5kaW5nLmNvbnN0cmFpbnQgPSBmdW5jdGlvbiAocmVxdWVzdCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3QgIT09IG51bGwgJiYgIXRyYXZlcnNlQW5jZXJzdG9ycyhyZXF1ZXN0LCB0YWdnZWRDb25zdHJhaW50KHRhZykodmFsdWUpKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nT25TeW50YXgodGhpcy5fYmluZGluZyk7XG4gICAgfTtcbiAgICBCaW5kaW5nV2hlblN5bnRheC5wcm90b3R5cGUud2hlbkFueUFuY2VzdG9yTWF0Y2hlcyA9IGZ1bmN0aW9uIChjb25zdHJhaW50KSB7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcuY29uc3RyYWludCA9IGZ1bmN0aW9uIChyZXF1ZXN0KSB7XG4gICAgICAgICAgICByZXR1cm4gcmVxdWVzdCAhPT0gbnVsbCAmJiB0cmF2ZXJzZUFuY2Vyc3RvcnMocmVxdWVzdCwgY29uc3RyYWludCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBuZXcgQmluZGluZ09uU3ludGF4KHRoaXMuX2JpbmRpbmcpO1xuICAgIH07XG4gICAgQmluZGluZ1doZW5TeW50YXgucHJvdG90eXBlLndoZW5Ob0FuY2VzdG9yTWF0Y2hlcyA9IGZ1bmN0aW9uIChjb25zdHJhaW50KSB7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcuY29uc3RyYWludCA9IGZ1bmN0aW9uIChyZXF1ZXN0KSB7XG4gICAgICAgICAgICByZXR1cm4gcmVxdWVzdCAhPT0gbnVsbCAmJiAhdHJhdmVyc2VBbmNlcnN0b3JzKHJlcXVlc3QsIGNvbnN0cmFpbnQpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbmV3IEJpbmRpbmdPblN5bnRheCh0aGlzLl9iaW5kaW5nKTtcbiAgICB9O1xuICAgIHJldHVybiBCaW5kaW5nV2hlblN5bnRheDtcbn0oKSk7XG5leHBvcnQgeyBCaW5kaW5nV2hlblN5bnRheCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmluZGluZ193aGVuX3N5bnRheC5qcy5tYXAiLCJpbXBvcnQgeyBCaW5kaW5nV2hlblN5bnRheCB9IGZyb20gXCIuL2JpbmRpbmdfd2hlbl9zeW50YXhcIjtcbnZhciBCaW5kaW5nT25TeW50YXggPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJpbmRpbmdPblN5bnRheChiaW5kaW5nKSB7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcgPSBiaW5kaW5nO1xuICAgIH1cbiAgICBCaW5kaW5nT25TeW50YXgucHJvdG90eXBlLm9uQWN0aXZhdGlvbiA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcub25BY3RpdmF0aW9uID0gaGFuZGxlcjtcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nV2hlblN5bnRheCh0aGlzLl9iaW5kaW5nKTtcbiAgICB9O1xuICAgIEJpbmRpbmdPblN5bnRheC5wcm90b3R5cGUub25EZWFjdGl2YXRpb24gPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICB0aGlzLl9iaW5kaW5nLm9uRGVhY3RpdmF0aW9uID0gaGFuZGxlcjtcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nV2hlblN5bnRheCh0aGlzLl9iaW5kaW5nKTtcbiAgICB9O1xuICAgIHJldHVybiBCaW5kaW5nT25TeW50YXg7XG59KCkpO1xuZXhwb3J0IHsgQmluZGluZ09uU3ludGF4IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iaW5kaW5nX29uX3N5bnRheC5qcy5tYXAiLCJpbXBvcnQgeyBCaW5kaW5nT25TeW50YXggfSBmcm9tIFwiLi9iaW5kaW5nX29uX3N5bnRheFwiO1xuaW1wb3J0IHsgQmluZGluZ1doZW5TeW50YXggfSBmcm9tIFwiLi9iaW5kaW5nX3doZW5fc3ludGF4XCI7XG52YXIgQmluZGluZ1doZW5PblN5bnRheCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQmluZGluZ1doZW5PblN5bnRheChiaW5kaW5nKSB7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcgPSBiaW5kaW5nO1xuICAgICAgICB0aGlzLl9iaW5kaW5nV2hlblN5bnRheCA9IG5ldyBCaW5kaW5nV2hlblN5bnRheCh0aGlzLl9iaW5kaW5nKTtcbiAgICAgICAgdGhpcy5fYmluZGluZ09uU3ludGF4ID0gbmV3IEJpbmRpbmdPblN5bnRheCh0aGlzLl9iaW5kaW5nKTtcbiAgICB9XG4gICAgQmluZGluZ1doZW5PblN5bnRheC5wcm90b3R5cGUud2hlbiA9IGZ1bmN0aW9uIChjb25zdHJhaW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5kaW5nV2hlblN5bnRheC53aGVuKGNvbnN0cmFpbnQpO1xuICAgIH07XG4gICAgQmluZGluZ1doZW5PblN5bnRheC5wcm90b3R5cGUud2hlblRhcmdldE5hbWVkID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRpbmdXaGVuU3ludGF4LndoZW5UYXJnZXROYW1lZChuYW1lKTtcbiAgICB9O1xuICAgIEJpbmRpbmdXaGVuT25TeW50YXgucHJvdG90eXBlLndoZW5UYXJnZXRJc0RlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5kaW5nV2hlblN5bnRheC53aGVuVGFyZ2V0SXNEZWZhdWx0KCk7XG4gICAgfTtcbiAgICBCaW5kaW5nV2hlbk9uU3ludGF4LnByb3RvdHlwZS53aGVuVGFyZ2V0VGFnZ2VkID0gZnVuY3Rpb24gKHRhZywgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRpbmdXaGVuU3ludGF4LndoZW5UYXJnZXRUYWdnZWQodGFnLCB2YWx1ZSk7XG4gICAgfTtcbiAgICBCaW5kaW5nV2hlbk9uU3ludGF4LnByb3RvdHlwZS53aGVuSW5qZWN0ZWRJbnRvID0gZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYmluZGluZ1doZW5TeW50YXgud2hlbkluamVjdGVkSW50byhwYXJlbnQpO1xuICAgIH07XG4gICAgQmluZGluZ1doZW5PblN5bnRheC5wcm90b3R5cGUud2hlblBhcmVudE5hbWVkID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRpbmdXaGVuU3ludGF4LndoZW5QYXJlbnROYW1lZChuYW1lKTtcbiAgICB9O1xuICAgIEJpbmRpbmdXaGVuT25TeW50YXgucHJvdG90eXBlLndoZW5QYXJlbnRUYWdnZWQgPSBmdW5jdGlvbiAodGFnLCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYmluZGluZ1doZW5TeW50YXgud2hlblBhcmVudFRhZ2dlZCh0YWcsIHZhbHVlKTtcbiAgICB9O1xuICAgIEJpbmRpbmdXaGVuT25TeW50YXgucHJvdG90eXBlLndoZW5BbnlBbmNlc3RvcklzID0gZnVuY3Rpb24gKGFuY2VzdG9yKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5kaW5nV2hlblN5bnRheC53aGVuQW55QW5jZXN0b3JJcyhhbmNlc3Rvcik7XG4gICAgfTtcbiAgICBCaW5kaW5nV2hlbk9uU3ludGF4LnByb3RvdHlwZS53aGVuTm9BbmNlc3RvcklzID0gZnVuY3Rpb24gKGFuY2VzdG9yKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5kaW5nV2hlblN5bnRheC53aGVuTm9BbmNlc3RvcklzKGFuY2VzdG9yKTtcbiAgICB9O1xuICAgIEJpbmRpbmdXaGVuT25TeW50YXgucHJvdG90eXBlLndoZW5BbnlBbmNlc3Rvck5hbWVkID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRpbmdXaGVuU3ludGF4LndoZW5BbnlBbmNlc3Rvck5hbWVkKG5hbWUpO1xuICAgIH07XG4gICAgQmluZGluZ1doZW5PblN5bnRheC5wcm90b3R5cGUud2hlbkFueUFuY2VzdG9yVGFnZ2VkID0gZnVuY3Rpb24gKHRhZywgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRpbmdXaGVuU3ludGF4LndoZW5BbnlBbmNlc3RvclRhZ2dlZCh0YWcsIHZhbHVlKTtcbiAgICB9O1xuICAgIEJpbmRpbmdXaGVuT25TeW50YXgucHJvdG90eXBlLndoZW5Ob0FuY2VzdG9yTmFtZWQgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYmluZGluZ1doZW5TeW50YXgud2hlbk5vQW5jZXN0b3JOYW1lZChuYW1lKTtcbiAgICB9O1xuICAgIEJpbmRpbmdXaGVuT25TeW50YXgucHJvdG90eXBlLndoZW5Ob0FuY2VzdG9yVGFnZ2VkID0gZnVuY3Rpb24gKHRhZywgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRpbmdXaGVuU3ludGF4LndoZW5Ob0FuY2VzdG9yVGFnZ2VkKHRhZywgdmFsdWUpO1xuICAgIH07XG4gICAgQmluZGluZ1doZW5PblN5bnRheC5wcm90b3R5cGUud2hlbkFueUFuY2VzdG9yTWF0Y2hlcyA9IGZ1bmN0aW9uIChjb25zdHJhaW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5kaW5nV2hlblN5bnRheC53aGVuQW55QW5jZXN0b3JNYXRjaGVzKGNvbnN0cmFpbnQpO1xuICAgIH07XG4gICAgQmluZGluZ1doZW5PblN5bnRheC5wcm90b3R5cGUud2hlbk5vQW5jZXN0b3JNYXRjaGVzID0gZnVuY3Rpb24gKGNvbnN0cmFpbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRpbmdXaGVuU3ludGF4LndoZW5Ob0FuY2VzdG9yTWF0Y2hlcyhjb25zdHJhaW50KTtcbiAgICB9O1xuICAgIEJpbmRpbmdXaGVuT25TeW50YXgucHJvdG90eXBlLm9uQWN0aXZhdGlvbiA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5kaW5nT25TeW50YXgub25BY3RpdmF0aW9uKGhhbmRsZXIpO1xuICAgIH07XG4gICAgQmluZGluZ1doZW5PblN5bnRheC5wcm90b3R5cGUub25EZWFjdGl2YXRpb24gPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fYmluZGluZ09uU3ludGF4Lm9uRGVhY3RpdmF0aW9uKGhhbmRsZXIpO1xuICAgIH07XG4gICAgcmV0dXJuIEJpbmRpbmdXaGVuT25TeW50YXg7XG59KCkpO1xuZXhwb3J0IHsgQmluZGluZ1doZW5PblN5bnRheCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmluZGluZ193aGVuX29uX3N5bnRheC5qcy5tYXAiLCJpbXBvcnQgeyBCaW5kaW5nU2NvcGVFbnVtIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9saXRlcmFsX3R5cGVzXCI7XG5pbXBvcnQgeyBCaW5kaW5nV2hlbk9uU3ludGF4IH0gZnJvbSBcIi4vYmluZGluZ193aGVuX29uX3N5bnRheFwiO1xudmFyIEJpbmRpbmdJblN5bnRheCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQmluZGluZ0luU3ludGF4KGJpbmRpbmcpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZyA9IGJpbmRpbmc7XG4gICAgfVxuICAgIEJpbmRpbmdJblN5bnRheC5wcm90b3R5cGUuaW5SZXF1ZXN0U2NvcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcuc2NvcGUgPSBCaW5kaW5nU2NvcGVFbnVtLlJlcXVlc3Q7XG4gICAgICAgIHJldHVybiBuZXcgQmluZGluZ1doZW5PblN5bnRheCh0aGlzLl9iaW5kaW5nKTtcbiAgICB9O1xuICAgIEJpbmRpbmdJblN5bnRheC5wcm90b3R5cGUuaW5TaW5nbGV0b25TY29wZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZy5zY29wZSA9IEJpbmRpbmdTY29wZUVudW0uU2luZ2xldG9uO1xuICAgICAgICByZXR1cm4gbmV3IEJpbmRpbmdXaGVuT25TeW50YXgodGhpcy5fYmluZGluZyk7XG4gICAgfTtcbiAgICBCaW5kaW5nSW5TeW50YXgucHJvdG90eXBlLmluVHJhbnNpZW50U2NvcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcuc2NvcGUgPSBCaW5kaW5nU2NvcGVFbnVtLlRyYW5zaWVudDtcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nV2hlbk9uU3ludGF4KHRoaXMuX2JpbmRpbmcpO1xuICAgIH07XG4gICAgcmV0dXJuIEJpbmRpbmdJblN5bnRheDtcbn0oKSk7XG5leHBvcnQgeyBCaW5kaW5nSW5TeW50YXggfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJpbmRpbmdfaW5fc3ludGF4LmpzLm1hcCIsImltcG9ydCB7IEJpbmRpbmdJblN5bnRheCB9IGZyb20gXCIuL2JpbmRpbmdfaW5fc3ludGF4XCI7XG5pbXBvcnQgeyBCaW5kaW5nT25TeW50YXggfSBmcm9tIFwiLi9iaW5kaW5nX29uX3N5bnRheFwiO1xuaW1wb3J0IHsgQmluZGluZ1doZW5TeW50YXggfSBmcm9tIFwiLi9iaW5kaW5nX3doZW5fc3ludGF4XCI7XG52YXIgQmluZGluZ0luV2hlbk9uU3ludGF4ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCaW5kaW5nSW5XaGVuT25TeW50YXgoYmluZGluZykge1xuICAgICAgICB0aGlzLl9iaW5kaW5nID0gYmluZGluZztcbiAgICAgICAgdGhpcy5fYmluZGluZ1doZW5TeW50YXggPSBuZXcgQmluZGluZ1doZW5TeW50YXgodGhpcy5fYmluZGluZyk7XG4gICAgICAgIHRoaXMuX2JpbmRpbmdPblN5bnRheCA9IG5ldyBCaW5kaW5nT25TeW50YXgodGhpcy5fYmluZGluZyk7XG4gICAgICAgIHRoaXMuX2JpbmRpbmdJblN5bnRheCA9IG5ldyBCaW5kaW5nSW5TeW50YXgoYmluZGluZyk7XG4gICAgfVxuICAgIEJpbmRpbmdJbldoZW5PblN5bnRheC5wcm90b3R5cGUuaW5SZXF1ZXN0U2NvcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5kaW5nSW5TeW50YXguaW5SZXF1ZXN0U2NvcGUoKTtcbiAgICB9O1xuICAgIEJpbmRpbmdJbldoZW5PblN5bnRheC5wcm90b3R5cGUuaW5TaW5nbGV0b25TY29wZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRpbmdJblN5bnRheC5pblNpbmdsZXRvblNjb3BlKCk7XG4gICAgfTtcbiAgICBCaW5kaW5nSW5XaGVuT25TeW50YXgucHJvdG90eXBlLmluVHJhbnNpZW50U2NvcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5kaW5nSW5TeW50YXguaW5UcmFuc2llbnRTY29wZSgpO1xuICAgIH07XG4gICAgQmluZGluZ0luV2hlbk9uU3ludGF4LnByb3RvdHlwZS53aGVuID0gZnVuY3Rpb24gKGNvbnN0cmFpbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRpbmdXaGVuU3ludGF4LndoZW4oY29uc3RyYWludCk7XG4gICAgfTtcbiAgICBCaW5kaW5nSW5XaGVuT25TeW50YXgucHJvdG90eXBlLndoZW5UYXJnZXROYW1lZCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5kaW5nV2hlblN5bnRheC53aGVuVGFyZ2V0TmFtZWQobmFtZSk7XG4gICAgfTtcbiAgICBCaW5kaW5nSW5XaGVuT25TeW50YXgucHJvdG90eXBlLndoZW5UYXJnZXRJc0RlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5kaW5nV2hlblN5bnRheC53aGVuVGFyZ2V0SXNEZWZhdWx0KCk7XG4gICAgfTtcbiAgICBCaW5kaW5nSW5XaGVuT25TeW50YXgucHJvdG90eXBlLndoZW5UYXJnZXRUYWdnZWQgPSBmdW5jdGlvbiAodGFnLCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYmluZGluZ1doZW5TeW50YXgud2hlblRhcmdldFRhZ2dlZCh0YWcsIHZhbHVlKTtcbiAgICB9O1xuICAgIEJpbmRpbmdJbldoZW5PblN5bnRheC5wcm90b3R5cGUud2hlbkluamVjdGVkSW50byA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRpbmdXaGVuU3ludGF4LndoZW5JbmplY3RlZEludG8ocGFyZW50KTtcbiAgICB9O1xuICAgIEJpbmRpbmdJbldoZW5PblN5bnRheC5wcm90b3R5cGUud2hlblBhcmVudE5hbWVkID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRpbmdXaGVuU3ludGF4LndoZW5QYXJlbnROYW1lZChuYW1lKTtcbiAgICB9O1xuICAgIEJpbmRpbmdJbldoZW5PblN5bnRheC5wcm90b3R5cGUud2hlblBhcmVudFRhZ2dlZCA9IGZ1bmN0aW9uICh0YWcsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5kaW5nV2hlblN5bnRheC53aGVuUGFyZW50VGFnZ2VkKHRhZywgdmFsdWUpO1xuICAgIH07XG4gICAgQmluZGluZ0luV2hlbk9uU3ludGF4LnByb3RvdHlwZS53aGVuQW55QW5jZXN0b3JJcyA9IGZ1bmN0aW9uIChhbmNlc3Rvcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fYmluZGluZ1doZW5TeW50YXgud2hlbkFueUFuY2VzdG9ySXMoYW5jZXN0b3IpO1xuICAgIH07XG4gICAgQmluZGluZ0luV2hlbk9uU3ludGF4LnByb3RvdHlwZS53aGVuTm9BbmNlc3RvcklzID0gZnVuY3Rpb24gKGFuY2VzdG9yKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5kaW5nV2hlblN5bnRheC53aGVuTm9BbmNlc3RvcklzKGFuY2VzdG9yKTtcbiAgICB9O1xuICAgIEJpbmRpbmdJbldoZW5PblN5bnRheC5wcm90b3R5cGUud2hlbkFueUFuY2VzdG9yTmFtZWQgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYmluZGluZ1doZW5TeW50YXgud2hlbkFueUFuY2VzdG9yTmFtZWQobmFtZSk7XG4gICAgfTtcbiAgICBCaW5kaW5nSW5XaGVuT25TeW50YXgucHJvdG90eXBlLndoZW5BbnlBbmNlc3RvclRhZ2dlZCA9IGZ1bmN0aW9uICh0YWcsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5kaW5nV2hlblN5bnRheC53aGVuQW55QW5jZXN0b3JUYWdnZWQodGFnLCB2YWx1ZSk7XG4gICAgfTtcbiAgICBCaW5kaW5nSW5XaGVuT25TeW50YXgucHJvdG90eXBlLndoZW5Ob0FuY2VzdG9yTmFtZWQgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYmluZGluZ1doZW5TeW50YXgud2hlbk5vQW5jZXN0b3JOYW1lZChuYW1lKTtcbiAgICB9O1xuICAgIEJpbmRpbmdJbldoZW5PblN5bnRheC5wcm90b3R5cGUud2hlbk5vQW5jZXN0b3JUYWdnZWQgPSBmdW5jdGlvbiAodGFnLCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYmluZGluZ1doZW5TeW50YXgud2hlbk5vQW5jZXN0b3JUYWdnZWQodGFnLCB2YWx1ZSk7XG4gICAgfTtcbiAgICBCaW5kaW5nSW5XaGVuT25TeW50YXgucHJvdG90eXBlLndoZW5BbnlBbmNlc3Rvck1hdGNoZXMgPSBmdW5jdGlvbiAoY29uc3RyYWludCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYmluZGluZ1doZW5TeW50YXgud2hlbkFueUFuY2VzdG9yTWF0Y2hlcyhjb25zdHJhaW50KTtcbiAgICB9O1xuICAgIEJpbmRpbmdJbldoZW5PblN5bnRheC5wcm90b3R5cGUud2hlbk5vQW5jZXN0b3JNYXRjaGVzID0gZnVuY3Rpb24gKGNvbnN0cmFpbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRpbmdXaGVuU3ludGF4LndoZW5Ob0FuY2VzdG9yTWF0Y2hlcyhjb25zdHJhaW50KTtcbiAgICB9O1xuICAgIEJpbmRpbmdJbldoZW5PblN5bnRheC5wcm90b3R5cGUub25BY3RpdmF0aW9uID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRpbmdPblN5bnRheC5vbkFjdGl2YXRpb24oaGFuZGxlcik7XG4gICAgfTtcbiAgICBCaW5kaW5nSW5XaGVuT25TeW50YXgucHJvdG90eXBlLm9uRGVhY3RpdmF0aW9uID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRpbmdPblN5bnRheC5vbkRlYWN0aXZhdGlvbihoYW5kbGVyKTtcbiAgICB9O1xuICAgIHJldHVybiBCaW5kaW5nSW5XaGVuT25TeW50YXg7XG59KCkpO1xuZXhwb3J0IHsgQmluZGluZ0luV2hlbk9uU3ludGF4IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iaW5kaW5nX2luX3doZW5fb25fc3ludGF4LmpzLm1hcCIsImltcG9ydCAqIGFzIEVSUk9SX01TR1MgZnJvbSBcIi4uL2NvbnN0YW50cy9lcnJvcl9tc2dzXCI7XG5pbXBvcnQgeyBCaW5kaW5nU2NvcGVFbnVtLCBCaW5kaW5nVHlwZUVudW0gfSBmcm9tIFwiLi4vY29uc3RhbnRzL2xpdGVyYWxfdHlwZXNcIjtcbmltcG9ydCB7IEJpbmRpbmdJbldoZW5PblN5bnRheCB9IGZyb20gXCIuL2JpbmRpbmdfaW5fd2hlbl9vbl9zeW50YXhcIjtcbmltcG9ydCB7IEJpbmRpbmdXaGVuT25TeW50YXggfSBmcm9tIFwiLi9iaW5kaW5nX3doZW5fb25fc3ludGF4XCI7XG52YXIgQmluZGluZ1RvU3ludGF4ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCaW5kaW5nVG9TeW50YXgoYmluZGluZykge1xuICAgICAgICB0aGlzLl9iaW5kaW5nID0gYmluZGluZztcbiAgICB9XG4gICAgQmluZGluZ1RvU3ludGF4LnByb3RvdHlwZS50byA9IGZ1bmN0aW9uIChjb25zdHJ1Y3Rvcikge1xuICAgICAgICB0aGlzLl9iaW5kaW5nLnR5cGUgPSBCaW5kaW5nVHlwZUVudW0uSW5zdGFuY2U7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcuaW1wbGVtZW50YXRpb25UeXBlID0gY29uc3RydWN0b3I7XG4gICAgICAgIHJldHVybiBuZXcgQmluZGluZ0luV2hlbk9uU3ludGF4KHRoaXMuX2JpbmRpbmcpO1xuICAgIH07XG4gICAgQmluZGluZ1RvU3ludGF4LnByb3RvdHlwZS50b1NlbGYgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fYmluZGluZy5zZXJ2aWNlSWRlbnRpZmllciAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJcIiArIEVSUk9SX01TR1MuSU5WQUxJRF9UT19TRUxGX1ZBTFVFKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2VsZiA9IHRoaXMuX2JpbmRpbmcuc2VydmljZUlkZW50aWZpZXI7XG4gICAgICAgIHJldHVybiB0aGlzLnRvKHNlbGYpO1xuICAgIH07XG4gICAgQmluZGluZ1RvU3ludGF4LnByb3RvdHlwZS50b0NvbnN0YW50VmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZy50eXBlID0gQmluZGluZ1R5cGVFbnVtLkNvbnN0YW50VmFsdWU7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcuY2FjaGUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fYmluZGluZy5keW5hbWljVmFsdWUgPSBudWxsO1xuICAgICAgICB0aGlzLl9iaW5kaW5nLmltcGxlbWVudGF0aW9uVHlwZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcuc2NvcGUgPSBCaW5kaW5nU2NvcGVFbnVtLlNpbmdsZXRvbjtcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nV2hlbk9uU3ludGF4KHRoaXMuX2JpbmRpbmcpO1xuICAgIH07XG4gICAgQmluZGluZ1RvU3ludGF4LnByb3RvdHlwZS50b0R5bmFtaWNWYWx1ZSA9IGZ1bmN0aW9uIChmdW5jKSB7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcudHlwZSA9IEJpbmRpbmdUeXBlRW51bS5EeW5hbWljVmFsdWU7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcuY2FjaGUgPSBudWxsO1xuICAgICAgICB0aGlzLl9iaW5kaW5nLmR5bmFtaWNWYWx1ZSA9IGZ1bmM7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcuaW1wbGVtZW50YXRpb25UeXBlID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nSW5XaGVuT25TeW50YXgodGhpcy5fYmluZGluZyk7XG4gICAgfTtcbiAgICBCaW5kaW5nVG9TeW50YXgucHJvdG90eXBlLnRvQ29uc3RydWN0b3IgPSBmdW5jdGlvbiAoY29uc3RydWN0b3IpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZy50eXBlID0gQmluZGluZ1R5cGVFbnVtLkNvbnN0cnVjdG9yO1xuICAgICAgICB0aGlzLl9iaW5kaW5nLmltcGxlbWVudGF0aW9uVHlwZSA9IGNvbnN0cnVjdG9yO1xuICAgICAgICB0aGlzLl9iaW5kaW5nLnNjb3BlID0gQmluZGluZ1Njb3BlRW51bS5TaW5nbGV0b247XG4gICAgICAgIHJldHVybiBuZXcgQmluZGluZ1doZW5PblN5bnRheCh0aGlzLl9iaW5kaW5nKTtcbiAgICB9O1xuICAgIEJpbmRpbmdUb1N5bnRheC5wcm90b3R5cGUudG9GYWN0b3J5ID0gZnVuY3Rpb24gKGZhY3RvcnkpIHtcbiAgICAgICAgdGhpcy5fYmluZGluZy50eXBlID0gQmluZGluZ1R5cGVFbnVtLkZhY3Rvcnk7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcuZmFjdG9yeSA9IGZhY3Rvcnk7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcuc2NvcGUgPSBCaW5kaW5nU2NvcGVFbnVtLlNpbmdsZXRvbjtcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nV2hlbk9uU3ludGF4KHRoaXMuX2JpbmRpbmcpO1xuICAgIH07XG4gICAgQmluZGluZ1RvU3ludGF4LnByb3RvdHlwZS50b0Z1bmN0aW9uID0gZnVuY3Rpb24gKGZ1bmMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBmdW5jICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9NU0dTLklOVkFMSURfRlVOQ1RJT05fQklORElORyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJpbmRpbmdXaGVuT25TeW50YXggPSB0aGlzLnRvQ29uc3RhbnRWYWx1ZShmdW5jKTtcbiAgICAgICAgdGhpcy5fYmluZGluZy50eXBlID0gQmluZGluZ1R5cGVFbnVtLkZ1bmN0aW9uO1xuICAgICAgICB0aGlzLl9iaW5kaW5nLnNjb3BlID0gQmluZGluZ1Njb3BlRW51bS5TaW5nbGV0b247XG4gICAgICAgIHJldHVybiBiaW5kaW5nV2hlbk9uU3ludGF4O1xuICAgIH07XG4gICAgQmluZGluZ1RvU3ludGF4LnByb3RvdHlwZS50b0F1dG9GYWN0b3J5ID0gZnVuY3Rpb24gKHNlcnZpY2VJZGVudGlmaWVyKSB7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcudHlwZSA9IEJpbmRpbmdUeXBlRW51bS5GYWN0b3J5O1xuICAgICAgICB0aGlzLl9iaW5kaW5nLmZhY3RvcnkgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICAgICAgdmFyIGF1dG9mYWN0b3J5ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY29udGV4dC5jb250YWluZXIuZ2V0KHNlcnZpY2VJZGVudGlmaWVyKTsgfTtcbiAgICAgICAgICAgIHJldHVybiBhdXRvZmFjdG9yeTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fYmluZGluZy5zY29wZSA9IEJpbmRpbmdTY29wZUVudW0uU2luZ2xldG9uO1xuICAgICAgICByZXR1cm4gbmV3IEJpbmRpbmdXaGVuT25TeW50YXgodGhpcy5fYmluZGluZyk7XG4gICAgfTtcbiAgICBCaW5kaW5nVG9TeW50YXgucHJvdG90eXBlLnRvQXV0b05hbWVkRmFjdG9yeSA9IGZ1bmN0aW9uIChzZXJ2aWNlSWRlbnRpZmllcikge1xuICAgICAgICB0aGlzLl9iaW5kaW5nLnR5cGUgPSBCaW5kaW5nVHlwZUVudW0uRmFjdG9yeTtcbiAgICAgICAgdGhpcy5fYmluZGluZy5mYWN0b3J5ID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAobmFtZWQpIHsgcmV0dXJuIGNvbnRleHQuY29udGFpbmVyLmdldE5hbWVkKHNlcnZpY2VJZGVudGlmaWVyLCBuYW1lZCk7IH07XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBuZXcgQmluZGluZ1doZW5PblN5bnRheCh0aGlzLl9iaW5kaW5nKTtcbiAgICB9O1xuICAgIEJpbmRpbmdUb1N5bnRheC5wcm90b3R5cGUudG9Qcm92aWRlciA9IGZ1bmN0aW9uIChwcm92aWRlcikge1xuICAgICAgICB0aGlzLl9iaW5kaW5nLnR5cGUgPSBCaW5kaW5nVHlwZUVudW0uUHJvdmlkZXI7XG4gICAgICAgIHRoaXMuX2JpbmRpbmcucHJvdmlkZXIgPSBwcm92aWRlcjtcbiAgICAgICAgdGhpcy5fYmluZGluZy5zY29wZSA9IEJpbmRpbmdTY29wZUVudW0uU2luZ2xldG9uO1xuICAgICAgICByZXR1cm4gbmV3IEJpbmRpbmdXaGVuT25TeW50YXgodGhpcy5fYmluZGluZyk7XG4gICAgfTtcbiAgICBCaW5kaW5nVG9TeW50YXgucHJvdG90eXBlLnRvU2VydmljZSA9IGZ1bmN0aW9uIChzZXJ2aWNlKSB7XG4gICAgICAgIHRoaXMudG9EeW5hbWljVmFsdWUoZnVuY3Rpb24gKGNvbnRleHQpIHsgcmV0dXJuIGNvbnRleHQuY29udGFpbmVyLmdldChzZXJ2aWNlKTsgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gQmluZGluZ1RvU3ludGF4O1xufSgpKTtcbmV4cG9ydCB7IEJpbmRpbmdUb1N5bnRheCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmluZGluZ190b19zeW50YXguanMubWFwIiwidmFyIENvbnRhaW5lclNuYXBzaG90ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb250YWluZXJTbmFwc2hvdCgpIHtcbiAgICB9XG4gICAgQ29udGFpbmVyU25hcHNob3Qub2YgPSBmdW5jdGlvbiAoYmluZGluZ3MsIG1pZGRsZXdhcmUsIGFjdGl2YXRpb25zLCBkZWFjdGl2YXRpb25zLCBtb2R1bGVBY3RpdmF0aW9uU3RvcmUpIHtcbiAgICAgICAgdmFyIHNuYXBzaG90ID0gbmV3IENvbnRhaW5lclNuYXBzaG90KCk7XG4gICAgICAgIHNuYXBzaG90LmJpbmRpbmdzID0gYmluZGluZ3M7XG4gICAgICAgIHNuYXBzaG90Lm1pZGRsZXdhcmUgPSBtaWRkbGV3YXJlO1xuICAgICAgICBzbmFwc2hvdC5kZWFjdGl2YXRpb25zID0gZGVhY3RpdmF0aW9ucztcbiAgICAgICAgc25hcHNob3QuYWN0aXZhdGlvbnMgPSBhY3RpdmF0aW9ucztcbiAgICAgICAgc25hcHNob3QubW9kdWxlQWN0aXZhdGlvblN0b3JlID0gbW9kdWxlQWN0aXZhdGlvblN0b3JlO1xuICAgICAgICByZXR1cm4gc25hcHNob3Q7XG4gICAgfTtcbiAgICByZXR1cm4gQ29udGFpbmVyU25hcHNob3Q7XG59KCkpO1xuZXhwb3J0IHsgQ29udGFpbmVyU25hcHNob3QgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnRhaW5lcl9zbmFwc2hvdC5qcy5tYXAiLCJpbXBvcnQgKiBhcyBFUlJPUl9NU0dTIGZyb20gXCIuLi9jb25zdGFudHMvZXJyb3JfbXNnc1wiO1xuaW1wb3J0IHsgaXNDbG9uYWJsZSB9IGZyb20gXCIuLi91dGlscy9jbG9uYWJsZVwiO1xudmFyIExvb2t1cCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTG9va3VwKCkge1xuICAgICAgICB0aGlzLl9tYXAgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIExvb2t1cC5wcm90b3R5cGUuZ2V0TWFwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFwO1xuICAgIH07XG4gICAgTG9va3VwLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoc2VydmljZUlkZW50aWZpZXIsIHZhbHVlKSB7XG4gICAgICAgIGlmIChzZXJ2aWNlSWRlbnRpZmllciA9PT0gbnVsbCB8fCBzZXJ2aWNlSWRlbnRpZmllciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfTVNHUy5OVUxMX0FSR1VNRU5UKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX01TR1MuTlVMTF9BUkdVTUVOVCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy5fbWFwLmdldChzZXJ2aWNlSWRlbnRpZmllcik7XG4gICAgICAgIGlmIChlbnRyeSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBlbnRyeS5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX21hcC5zZXQoc2VydmljZUlkZW50aWZpZXIsIFt2YWx1ZV0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBMb29rdXAucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChzZXJ2aWNlSWRlbnRpZmllcikge1xuICAgICAgICBpZiAoc2VydmljZUlkZW50aWZpZXIgPT09IG51bGwgfHwgc2VydmljZUlkZW50aWZpZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX01TR1MuTlVMTF9BUkdVTUVOVCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy5fbWFwLmdldChzZXJ2aWNlSWRlbnRpZmllcik7XG4gICAgICAgIGlmIChlbnRyeSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfTVNHUy5LRVlfTk9UX0ZPVU5EKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTG9va3VwLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoc2VydmljZUlkZW50aWZpZXIpIHtcbiAgICAgICAgaWYgKHNlcnZpY2VJZGVudGlmaWVyID09PSBudWxsIHx8IHNlcnZpY2VJZGVudGlmaWVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9NU0dTLk5VTExfQVJHVU1FTlQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fbWFwLmRlbGV0ZShzZXJ2aWNlSWRlbnRpZmllcikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9NU0dTLktFWV9OT1RfRk9VTkQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBMb29rdXAucHJvdG90eXBlLnJlbW92ZUludGVyc2VjdGlvbiA9IGZ1bmN0aW9uIChsb29rdXApIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy50cmF2ZXJzZShmdW5jdGlvbiAoc2VydmljZUlkZW50aWZpZXIsIHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgbG9va3VwQWN0aXZhdGlvbnMgPSBsb29rdXAuaGFzS2V5KHNlcnZpY2VJZGVudGlmaWVyKSA/IGxvb2t1cC5nZXQoc2VydmljZUlkZW50aWZpZXIpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKGxvb2t1cEFjdGl2YXRpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmlsdGVyZWRWYWx1ZXMgPSB2YWx1ZS5maWx0ZXIoZnVuY3Rpb24gKGxvb2t1cFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhbG9va3VwQWN0aXZhdGlvbnMuc29tZShmdW5jdGlvbiAobW9kdWxlQWN0aXZhdGlvbikgeyByZXR1cm4gbG9va3VwVmFsdWUgPT09IG1vZHVsZUFjdGl2YXRpb247IH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIF90aGlzLl9zZXRWYWx1ZShzZXJ2aWNlSWRlbnRpZmllciwgZmlsdGVyZWRWYWx1ZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIExvb2t1cC5wcm90b3R5cGUucmVtb3ZlQnlDb25kaXRpb24gPSBmdW5jdGlvbiAoY29uZGl0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciByZW1vdmFscyA9IFtdO1xuICAgICAgICB0aGlzLl9tYXAuZm9yRWFjaChmdW5jdGlvbiAoZW50cmllcywga2V5KSB7XG4gICAgICAgICAgICB2YXIgdXBkYXRlZEVudHJpZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgZW50cmllc18xID0gZW50cmllczsgX2kgPCBlbnRyaWVzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc18xW19pXTtcbiAgICAgICAgICAgICAgICB2YXIgcmVtb3ZlID0gY29uZGl0aW9uKGVudHJ5KTtcbiAgICAgICAgICAgICAgICBpZiAocmVtb3ZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92YWxzLnB1c2goZW50cnkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlZEVudHJpZXMucHVzaChlbnRyeSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMuX3NldFZhbHVlKGtleSwgdXBkYXRlZEVudHJpZXMpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlbW92YWxzO1xuICAgIH07XG4gICAgTG9va3VwLnByb3RvdHlwZS5oYXNLZXkgPSBmdW5jdGlvbiAoc2VydmljZUlkZW50aWZpZXIpIHtcbiAgICAgICAgaWYgKHNlcnZpY2VJZGVudGlmaWVyID09PSBudWxsIHx8IHNlcnZpY2VJZGVudGlmaWVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9NU0dTLk5VTExfQVJHVU1FTlQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXAuaGFzKHNlcnZpY2VJZGVudGlmaWVyKTtcbiAgICB9O1xuICAgIExvb2t1cC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb3B5ID0gbmV3IExvb2t1cCgpO1xuICAgICAgICB0aGlzLl9tYXAuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbiAoYikgeyByZXR1cm4gY29weS5hZGQoa2V5LCBpc0Nsb25hYmxlKGIpID8gYi5jbG9uZSgpIDogYik7IH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvcHk7XG4gICAgfTtcbiAgICBMb29rdXAucHJvdG90eXBlLnRyYXZlcnNlID0gZnVuY3Rpb24gKGZ1bmMpIHtcbiAgICAgICAgdGhpcy5fbWFwLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgIGZ1bmMoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgTG9va3VwLnByb3RvdHlwZS5fc2V0VmFsdWUgPSBmdW5jdGlvbiAoc2VydmljZUlkZW50aWZpZXIsIHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLl9tYXAuc2V0KHNlcnZpY2VJZGVudGlmaWVyLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9tYXAuZGVsZXRlKHNlcnZpY2VJZGVudGlmaWVyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIExvb2t1cDtcbn0oKSk7XG5leHBvcnQgeyBMb29rdXAgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvb2t1cC5qcy5tYXAiLCJmdW5jdGlvbiBpc0Nsb25hYmxlKG9iaikge1xuICAgIHJldHVybiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpXG4gICAgICAgICYmIChvYmogIT09IG51bGwpXG4gICAgICAgICYmICgnY2xvbmUnIGluIG9iailcbiAgICAgICAgJiYgdHlwZW9mIG9iai5jbG9uZSA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydCB7IGlzQ2xvbmFibGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNsb25hYmxlLmpzLm1hcCIsImltcG9ydCB7IExvb2t1cCB9IGZyb20gXCIuL2xvb2t1cFwiO1xudmFyIE1vZHVsZUFjdGl2YXRpb25TdG9yZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTW9kdWxlQWN0aXZhdGlvblN0b3JlKCkge1xuICAgICAgICB0aGlzLl9tYXAgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIE1vZHVsZUFjdGl2YXRpb25TdG9yZS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKG1vZHVsZUlkKSB7XG4gICAgICAgIGlmICh0aGlzLl9tYXAuaGFzKG1vZHVsZUlkKSkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZXJzID0gdGhpcy5fbWFwLmdldChtb2R1bGVJZCk7XG4gICAgICAgICAgICB0aGlzLl9tYXAuZGVsZXRlKG1vZHVsZUlkKTtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVycztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0RW1wdHlIYW5kbGVyc1N0b3JlKCk7XG4gICAgfTtcbiAgICBNb2R1bGVBY3RpdmF0aW9uU3RvcmUucHJvdG90eXBlLmFkZERlYWN0aXZhdGlvbiA9IGZ1bmN0aW9uIChtb2R1bGVJZCwgc2VydmljZUlkZW50aWZpZXIsIG9uRGVhY3RpdmF0aW9uKSB7XG4gICAgICAgIHRoaXMuX2dldE1vZHVsZUFjdGl2YXRpb25IYW5kbGVycyhtb2R1bGVJZClcbiAgICAgICAgICAgIC5vbkRlYWN0aXZhdGlvbnMuYWRkKHNlcnZpY2VJZGVudGlmaWVyLCBvbkRlYWN0aXZhdGlvbik7XG4gICAgfTtcbiAgICBNb2R1bGVBY3RpdmF0aW9uU3RvcmUucHJvdG90eXBlLmFkZEFjdGl2YXRpb24gPSBmdW5jdGlvbiAobW9kdWxlSWQsIHNlcnZpY2VJZGVudGlmaWVyLCBvbkFjdGl2YXRpb24pIHtcbiAgICAgICAgdGhpcy5fZ2V0TW9kdWxlQWN0aXZhdGlvbkhhbmRsZXJzKG1vZHVsZUlkKVxuICAgICAgICAgICAgLm9uQWN0aXZhdGlvbnMuYWRkKHNlcnZpY2VJZGVudGlmaWVyLCBvbkFjdGl2YXRpb24pO1xuICAgIH07XG4gICAgTW9kdWxlQWN0aXZhdGlvblN0b3JlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNsb25lID0gbmV3IE1vZHVsZUFjdGl2YXRpb25TdG9yZSgpO1xuICAgICAgICB0aGlzLl9tYXAuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcnNTdG9yZSwgbW9kdWxlSWQpIHtcbiAgICAgICAgICAgIGNsb25lLl9tYXAuc2V0KG1vZHVsZUlkLCB7XG4gICAgICAgICAgICAgICAgb25BY3RpdmF0aW9uczogaGFuZGxlcnNTdG9yZS5vbkFjdGl2YXRpb25zLmNsb25lKCksXG4gICAgICAgICAgICAgICAgb25EZWFjdGl2YXRpb25zOiBoYW5kbGVyc1N0b3JlLm9uRGVhY3RpdmF0aW9ucy5jbG9uZSgpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgfTtcbiAgICBNb2R1bGVBY3RpdmF0aW9uU3RvcmUucHJvdG90eXBlLl9nZXRNb2R1bGVBY3RpdmF0aW9uSGFuZGxlcnMgPSBmdW5jdGlvbiAobW9kdWxlSWQpIHtcbiAgICAgICAgdmFyIG1vZHVsZUFjdGl2YXRpb25IYW5kbGVycyA9IHRoaXMuX21hcC5nZXQobW9kdWxlSWQpO1xuICAgICAgICBpZiAobW9kdWxlQWN0aXZhdGlvbkhhbmRsZXJzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG1vZHVsZUFjdGl2YXRpb25IYW5kbGVycyA9IHRoaXMuX2dldEVtcHR5SGFuZGxlcnNTdG9yZSgpO1xuICAgICAgICAgICAgdGhpcy5fbWFwLnNldChtb2R1bGVJZCwgbW9kdWxlQWN0aXZhdGlvbkhhbmRsZXJzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbW9kdWxlQWN0aXZhdGlvbkhhbmRsZXJzO1xuICAgIH07XG4gICAgTW9kdWxlQWN0aXZhdGlvblN0b3JlLnByb3RvdHlwZS5fZ2V0RW1wdHlIYW5kbGVyc1N0b3JlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaGFuZGxlcnNTdG9yZSA9IHtcbiAgICAgICAgICAgIG9uQWN0aXZhdGlvbnM6IG5ldyBMb29rdXAoKSxcbiAgICAgICAgICAgIG9uRGVhY3RpdmF0aW9uczogbmV3IExvb2t1cCgpXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBoYW5kbGVyc1N0b3JlO1xuICAgIH07XG4gICAgcmV0dXJuIE1vZHVsZUFjdGl2YXRpb25TdG9yZTtcbn0oKSk7XG5leHBvcnQgeyBNb2R1bGVBY3RpdmF0aW9uU3RvcmUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZHVsZV9hY3RpdmF0aW9uX3N0b3JlLmpzLm1hcCIsInZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgICB9XG59O1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSwgcGFjaykge1xuICAgIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcbiAgICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XG4gICAgICAgICAgICBhcltpXSA9IGZyb21baV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XG59O1xuaW1wb3J0IHsgQmluZGluZyB9IGZyb20gXCIuLi9iaW5kaW5ncy9iaW5kaW5nXCI7XG5pbXBvcnQgKiBhcyBFUlJPUl9NU0dTIGZyb20gXCIuLi9jb25zdGFudHMvZXJyb3JfbXNnc1wiO1xuaW1wb3J0IHsgQmluZGluZ1Njb3BlRW51bSwgVGFyZ2V0VHlwZUVudW0gfSBmcm9tIFwiLi4vY29uc3RhbnRzL2xpdGVyYWxfdHlwZXNcIjtcbmltcG9ydCAqIGFzIE1FVEFEQVRBX0tFWSBmcm9tIFwiLi4vY29uc3RhbnRzL21ldGFkYXRhX2tleXNcIjtcbmltcG9ydCB7IE1ldGFkYXRhUmVhZGVyIH0gZnJvbSBcIi4uL3BsYW5uaW5nL21ldGFkYXRhX3JlYWRlclwiO1xuaW1wb3J0IHsgY3JlYXRlTW9ja1JlcXVlc3QsIGdldEJpbmRpbmdEaWN0aW9uYXJ5LCBwbGFuIH0gZnJvbSBcIi4uL3BsYW5uaW5nL3BsYW5uZXJcIjtcbmltcG9ydCB7IHJlc29sdmUgfSBmcm9tIFwiLi4vcmVzb2x1dGlvbi9yZXNvbHZlclwiO1xuaW1wb3J0IHsgQmluZGluZ1RvU3ludGF4IH0gZnJvbSBcIi4uL3N5bnRheC9iaW5kaW5nX3RvX3N5bnRheFwiO1xuaW1wb3J0IHsgaXNQcm9taXNlLCBpc1Byb21pc2VPckNvbnRhaW5zUHJvbWlzZSB9IGZyb20gXCIuLi91dGlscy9hc3luY1wiO1xuaW1wb3J0IHsgaWQgfSBmcm9tIFwiLi4vdXRpbHMvaWRcIjtcbmltcG9ydCB7IGdldFNlcnZpY2VJZGVudGlmaWVyQXNTdHJpbmcgfSBmcm9tIFwiLi4vdXRpbHMvc2VyaWFsaXphdGlvblwiO1xuaW1wb3J0IHsgQ29udGFpbmVyU25hcHNob3QgfSBmcm9tIFwiLi9jb250YWluZXJfc25hcHNob3RcIjtcbmltcG9ydCB7IExvb2t1cCB9IGZyb20gXCIuL2xvb2t1cFwiO1xuaW1wb3J0IHsgTW9kdWxlQWN0aXZhdGlvblN0b3JlIH0gZnJvbSBcIi4vbW9kdWxlX2FjdGl2YXRpb25fc3RvcmVcIjtcbnZhciBDb250YWluZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbnRhaW5lcihjb250YWluZXJPcHRpb25zKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gY29udGFpbmVyT3B0aW9ucyB8fCB7fTtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJcIiArIEVSUk9SX01TR1MuQ09OVEFJTkVSX09QVElPTlNfTVVTVF9CRV9BTl9PQkpFQ1QpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmRlZmF1bHRTY29wZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBvcHRpb25zLmRlZmF1bHRTY29wZSA9IEJpbmRpbmdTY29wZUVudW0uVHJhbnNpZW50O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9wdGlvbnMuZGVmYXVsdFNjb3BlICE9PSBCaW5kaW5nU2NvcGVFbnVtLlNpbmdsZXRvbiAmJlxuICAgICAgICAgICAgb3B0aW9ucy5kZWZhdWx0U2NvcGUgIT09IEJpbmRpbmdTY29wZUVudW0uVHJhbnNpZW50ICYmXG4gICAgICAgICAgICBvcHRpb25zLmRlZmF1bHRTY29wZSAhPT0gQmluZGluZ1Njb3BlRW51bS5SZXF1ZXN0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJcIiArIEVSUk9SX01TR1MuQ09OVEFJTkVSX09QVElPTlNfSU5WQUxJRF9ERUZBVUxUX1NDT1BFKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5hdXRvQmluZEluamVjdGFibGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgb3B0aW9ucy5hdXRvQmluZEluamVjdGFibGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5hdXRvQmluZEluamVjdGFibGUgIT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJcIiArIEVSUk9SX01TR1MuQ09OVEFJTkVSX09QVElPTlNfSU5WQUxJRF9BVVRPX0JJTkRfSU5KRUNUQUJMRSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuc2tpcEJhc2VDbGFzc0NoZWNrcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBvcHRpb25zLnNraXBCYXNlQ2xhc3NDaGVja3MgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5za2lwQmFzZUNsYXNzQ2hlY2tzICE9PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiXCIgKyBFUlJPUl9NU0dTLkNPTlRBSU5FUl9PUFRJT05TX0lOVkFMSURfU0tJUF9CQVNFX0NIRUNLKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICAgICAgICBhdXRvQmluZEluamVjdGFibGU6IG9wdGlvbnMuYXV0b0JpbmRJbmplY3RhYmxlLFxuICAgICAgICAgICAgZGVmYXVsdFNjb3BlOiBvcHRpb25zLmRlZmF1bHRTY29wZSxcbiAgICAgICAgICAgIHNraXBCYXNlQ2xhc3NDaGVja3M6IG9wdGlvbnMuc2tpcEJhc2VDbGFzc0NoZWNrc1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmlkID0gaWQoKTtcbiAgICAgICAgdGhpcy5fYmluZGluZ0RpY3Rpb25hcnkgPSBuZXcgTG9va3VwKCk7XG4gICAgICAgIHRoaXMuX3NuYXBzaG90cyA9IFtdO1xuICAgICAgICB0aGlzLl9taWRkbGV3YXJlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fYWN0aXZhdGlvbnMgPSBuZXcgTG9va3VwKCk7XG4gICAgICAgIHRoaXMuX2RlYWN0aXZhdGlvbnMgPSBuZXcgTG9va3VwKCk7XG4gICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fbWV0YWRhdGFSZWFkZXIgPSBuZXcgTWV0YWRhdGFSZWFkZXIoKTtcbiAgICAgICAgdGhpcy5fbW9kdWxlQWN0aXZhdGlvblN0b3JlID0gbmV3IE1vZHVsZUFjdGl2YXRpb25TdG9yZSgpO1xuICAgIH1cbiAgICBDb250YWluZXIubWVyZ2UgPSBmdW5jdGlvbiAoY29udGFpbmVyMSwgY29udGFpbmVyMikge1xuICAgICAgICB2YXIgY29udGFpbmVycyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDI7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgY29udGFpbmVyc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29udGFpbmVyID0gbmV3IENvbnRhaW5lcigpO1xuICAgICAgICB2YXIgdGFyZ2V0Q29udGFpbmVycyA9IF9fc3ByZWFkQXJyYXkoW2NvbnRhaW5lcjEsIGNvbnRhaW5lcjJdLCBjb250YWluZXJzLCB0cnVlKS5tYXAoZnVuY3Rpb24gKHRhcmdldENvbnRhaW5lcikgeyByZXR1cm4gZ2V0QmluZGluZ0RpY3Rpb25hcnkodGFyZ2V0Q29udGFpbmVyKTsgfSk7XG4gICAgICAgIHZhciBiaW5kaW5nRGljdGlvbmFyeSA9IGdldEJpbmRpbmdEaWN0aW9uYXJ5KGNvbnRhaW5lcik7XG4gICAgICAgIGZ1bmN0aW9uIGNvcHlEaWN0aW9uYXJ5KG9yaWdpbiwgZGVzdGluYXRpb24pIHtcbiAgICAgICAgICAgIG9yaWdpbi50cmF2ZXJzZShmdW5jdGlvbiAoX2tleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uIChiaW5kaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmFkZChiaW5kaW5nLnNlcnZpY2VJZGVudGlmaWVyLCBiaW5kaW5nLmNsb25lKCkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0Q29udGFpbmVycy5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXRCaW5kaW5nRGljdGlvbmFyeSkge1xuICAgICAgICAgICAgY29weURpY3Rpb25hcnkodGFyZ2V0QmluZGluZ0RpY3Rpb25hcnksIGJpbmRpbmdEaWN0aW9uYXJ5KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjb250YWluZXI7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBtb2R1bGVzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBtb2R1bGVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGdldEhlbHBlcnMgPSB0aGlzLl9nZXRDb250YWluZXJNb2R1bGVIZWxwZXJzRmFjdG9yeSgpO1xuICAgICAgICBmb3IgKHZhciBfYSA9IDAsIG1vZHVsZXNfMSA9IG1vZHVsZXM7IF9hIDwgbW9kdWxlc18xLmxlbmd0aDsgX2ErKykge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRNb2R1bGUgPSBtb2R1bGVzXzFbX2FdO1xuICAgICAgICAgICAgdmFyIGNvbnRhaW5lck1vZHVsZUhlbHBlcnMgPSBnZXRIZWxwZXJzKGN1cnJlbnRNb2R1bGUuaWQpO1xuICAgICAgICAgICAgY3VycmVudE1vZHVsZS5yZWdpc3RyeShjb250YWluZXJNb2R1bGVIZWxwZXJzLmJpbmRGdW5jdGlvbiwgY29udGFpbmVyTW9kdWxlSGVscGVycy51bmJpbmRGdW5jdGlvbiwgY29udGFpbmVyTW9kdWxlSGVscGVycy5pc2JvdW5kRnVuY3Rpb24sIGNvbnRhaW5lck1vZHVsZUhlbHBlcnMucmViaW5kRnVuY3Rpb24sIGNvbnRhaW5lck1vZHVsZUhlbHBlcnMudW5iaW5kQXN5bmNGdW5jdGlvbiwgY29udGFpbmVyTW9kdWxlSGVscGVycy5vbkFjdGl2YXRpb25GdW5jdGlvbiwgY29udGFpbmVyTW9kdWxlSGVscGVycy5vbkRlYWN0aXZhdGlvbkZ1bmN0aW9uKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5sb2FkQXN5bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBtb2R1bGVzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBtb2R1bGVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGdldEhlbHBlcnMsIF9hLCBtb2R1bGVzXzIsIGN1cnJlbnRNb2R1bGUsIGNvbnRhaW5lck1vZHVsZUhlbHBlcnM7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRIZWxwZXJzID0gdGhpcy5fZ2V0Q29udGFpbmVyTW9kdWxlSGVscGVyc0ZhY3RvcnkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gMCwgbW9kdWxlc18yID0gbW9kdWxlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoX2EgPCBtb2R1bGVzXzIubGVuZ3RoKSkgcmV0dXJuIFszLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRNb2R1bGUgPSBtb2R1bGVzXzJbX2FdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyTW9kdWxlSGVscGVycyA9IGdldEhlbHBlcnMoY3VycmVudE1vZHVsZS5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIGN1cnJlbnRNb2R1bGUucmVnaXN0cnkoY29udGFpbmVyTW9kdWxlSGVscGVycy5iaW5kRnVuY3Rpb24sIGNvbnRhaW5lck1vZHVsZUhlbHBlcnMudW5iaW5kRnVuY3Rpb24sIGNvbnRhaW5lck1vZHVsZUhlbHBlcnMuaXNib3VuZEZ1bmN0aW9uLCBjb250YWluZXJNb2R1bGVIZWxwZXJzLnJlYmluZEZ1bmN0aW9uLCBjb250YWluZXJNb2R1bGVIZWxwZXJzLnVuYmluZEFzeW5jRnVuY3Rpb24sIGNvbnRhaW5lck1vZHVsZUhlbHBlcnMub25BY3RpdmF0aW9uRnVuY3Rpb24sIGNvbnRhaW5lck1vZHVsZUhlbHBlcnMub25EZWFjdGl2YXRpb25GdW5jdGlvbildO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDM7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hKys7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMsIDFdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS51bmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBtb2R1bGVzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBtb2R1bGVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgbW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGUpIHtcbiAgICAgICAgICAgIHZhciBkZWFjdGl2YXRpb25zID0gX3RoaXMuX3JlbW92ZU1vZHVsZUJpbmRpbmdzKG1vZHVsZS5pZCk7XG4gICAgICAgICAgICBfdGhpcy5fZGVhY3RpdmF0ZVNpbmdsZXRvbnMoZGVhY3RpdmF0aW9ucyk7XG4gICAgICAgICAgICBfdGhpcy5fcmVtb3ZlTW9kdWxlSGFuZGxlcnMobW9kdWxlLmlkKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLnVubG9hZEFzeW5jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbW9kdWxlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgbW9kdWxlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSwgbW9kdWxlc18zLCBtb2R1bGVfMSwgZGVhY3RpdmF0aW9ucztcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gMCwgbW9kdWxlc18zID0gbW9kdWxlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoX2EgPCBtb2R1bGVzXzMubGVuZ3RoKSkgcmV0dXJuIFszLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZHVsZV8xID0gbW9kdWxlc18zW19hXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYWN0aXZhdGlvbnMgPSB0aGlzLl9yZW1vdmVNb2R1bGVCaW5kaW5ncyhtb2R1bGVfMS5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIHRoaXMuX2RlYWN0aXZhdGVTaW5nbGV0b25zQXN5bmMoZGVhY3RpdmF0aW9ucyldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVNb2R1bGVIYW5kbGVycyhtb2R1bGVfMS5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDM7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hKys7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMsIDFdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKHNlcnZpY2VJZGVudGlmaWVyKSB7XG4gICAgICAgIHZhciBzY29wZSA9IHRoaXMub3B0aW9ucy5kZWZhdWx0U2NvcGUgfHwgQmluZGluZ1Njb3BlRW51bS5UcmFuc2llbnQ7XG4gICAgICAgIHZhciBiaW5kaW5nID0gbmV3IEJpbmRpbmcoc2VydmljZUlkZW50aWZpZXIsIHNjb3BlKTtcbiAgICAgICAgdGhpcy5fYmluZGluZ0RpY3Rpb25hcnkuYWRkKHNlcnZpY2VJZGVudGlmaWVyLCBiaW5kaW5nKTtcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5kaW5nVG9TeW50YXgoYmluZGluZyk7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLnJlYmluZCA9IGZ1bmN0aW9uIChzZXJ2aWNlSWRlbnRpZmllcikge1xuICAgICAgICB0aGlzLnVuYmluZChzZXJ2aWNlSWRlbnRpZmllcik7XG4gICAgICAgIHJldHVybiB0aGlzLmJpbmQoc2VydmljZUlkZW50aWZpZXIpO1xuICAgIH07XG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5yZWJpbmRBc3luYyA9IGZ1bmN0aW9uIChzZXJ2aWNlSWRlbnRpZmllcikge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCwgdGhpcy51bmJpbmRBc3luYyhzZXJ2aWNlSWRlbnRpZmllcildO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIsIHRoaXMuYmluZChzZXJ2aWNlSWRlbnRpZmllcildO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gKHNlcnZpY2VJZGVudGlmaWVyKSB7XG4gICAgICAgIGlmICh0aGlzLl9iaW5kaW5nRGljdGlvbmFyeS5oYXNLZXkoc2VydmljZUlkZW50aWZpZXIpKSB7XG4gICAgICAgICAgICB2YXIgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5nRGljdGlvbmFyeS5nZXQoc2VydmljZUlkZW50aWZpZXIpO1xuICAgICAgICAgICAgdGhpcy5fZGVhY3RpdmF0ZVNpbmdsZXRvbnMoYmluZGluZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3JlbW92ZVNlcnZpY2VGcm9tRGljdGlvbmFyeShzZXJ2aWNlSWRlbnRpZmllcik7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLnVuYmluZEFzeW5jID0gZnVuY3Rpb24gKHNlcnZpY2VJZGVudGlmaWVyKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBiaW5kaW5ncztcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5fYmluZGluZ0RpY3Rpb25hcnkuaGFzS2V5KHNlcnZpY2VJZGVudGlmaWVyKSkgcmV0dXJuIFszLCAyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ0RpY3Rpb25hcnkuZ2V0KHNlcnZpY2VJZGVudGlmaWVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgdGhpcy5fZGVhY3RpdmF0ZVNpbmdsZXRvbnNBc3luYyhiaW5kaW5ncyldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDI7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZVNlcnZpY2VGcm9tRGljdGlvbmFyeShzZXJ2aWNlSWRlbnRpZmllcik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzJdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUudW5iaW5kQWxsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLl9iaW5kaW5nRGljdGlvbmFyeS50cmF2ZXJzZShmdW5jdGlvbiAoX2tleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIF90aGlzLl9kZWFjdGl2YXRlU2luZ2xldG9ucyh2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9iaW5kaW5nRGljdGlvbmFyeSA9IG5ldyBMb29rdXAoKTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUudW5iaW5kQWxsQXN5bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBwcm9taXNlcztcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmluZGluZ0RpY3Rpb25hcnkudHJhdmVyc2UoZnVuY3Rpb24gKF9rZXksIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaChfdGhpcy5fZGVhY3RpdmF0ZVNpbmdsZXRvbnNBc3luYyh2YWx1ZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIFByb21pc2UuYWxsKHByb21pc2VzKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2JpbmRpbmdEaWN0aW9uYXJ5ID0gbmV3IExvb2t1cCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLm9uQWN0aXZhdGlvbiA9IGZ1bmN0aW9uIChzZXJ2aWNlSWRlbnRpZmllciwgb25BY3RpdmF0aW9uKSB7XG4gICAgICAgIHRoaXMuX2FjdGl2YXRpb25zLmFkZChzZXJ2aWNlSWRlbnRpZmllciwgb25BY3RpdmF0aW9uKTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUub25EZWFjdGl2YXRpb24gPSBmdW5jdGlvbiAoc2VydmljZUlkZW50aWZpZXIsIG9uRGVhY3RpdmF0aW9uKSB7XG4gICAgICAgIHRoaXMuX2RlYWN0aXZhdGlvbnMuYWRkKHNlcnZpY2VJZGVudGlmaWVyLCBvbkRlYWN0aXZhdGlvbik7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLmlzQm91bmQgPSBmdW5jdGlvbiAoc2VydmljZUlkZW50aWZpZXIpIHtcbiAgICAgICAgdmFyIGJvdW5kID0gdGhpcy5fYmluZGluZ0RpY3Rpb25hcnkuaGFzS2V5KHNlcnZpY2VJZGVudGlmaWVyKTtcbiAgICAgICAgaWYgKCFib3VuZCAmJiB0aGlzLnBhcmVudCkge1xuICAgICAgICAgICAgYm91bmQgPSB0aGlzLnBhcmVudC5pc0JvdW5kKHNlcnZpY2VJZGVudGlmaWVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYm91bmQ7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLmlzQ3VycmVudEJvdW5kID0gZnVuY3Rpb24gKHNlcnZpY2VJZGVudGlmaWVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5kaW5nRGljdGlvbmFyeS5oYXNLZXkoc2VydmljZUlkZW50aWZpZXIpO1xuICAgIH07XG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5pc0JvdW5kTmFtZWQgPSBmdW5jdGlvbiAoc2VydmljZUlkZW50aWZpZXIsIG5hbWVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzQm91bmRUYWdnZWQoc2VydmljZUlkZW50aWZpZXIsIE1FVEFEQVRBX0tFWS5OQU1FRF9UQUcsIG5hbWVkKTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuaXNCb3VuZFRhZ2dlZCA9IGZ1bmN0aW9uIChzZXJ2aWNlSWRlbnRpZmllciwga2V5LCB2YWx1ZSkge1xuICAgICAgICB2YXIgYm91bmQgPSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMuX2JpbmRpbmdEaWN0aW9uYXJ5Lmhhc0tleShzZXJ2aWNlSWRlbnRpZmllcikpIHtcbiAgICAgICAgICAgIHZhciBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdEaWN0aW9uYXJ5LmdldChzZXJ2aWNlSWRlbnRpZmllcik7XG4gICAgICAgICAgICB2YXIgcmVxdWVzdF8xID0gY3JlYXRlTW9ja1JlcXVlc3QodGhpcywgc2VydmljZUlkZW50aWZpZXIsIGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgYm91bmQgPSBiaW5kaW5ncy5zb21lKGZ1bmN0aW9uIChiKSB7IHJldHVybiBiLmNvbnN0cmFpbnQocmVxdWVzdF8xKTsgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFib3VuZCAmJiB0aGlzLnBhcmVudCkge1xuICAgICAgICAgICAgYm91bmQgPSB0aGlzLnBhcmVudC5pc0JvdW5kVGFnZ2VkKHNlcnZpY2VJZGVudGlmaWVyLCBrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYm91bmQ7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLnNuYXBzaG90ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9zbmFwc2hvdHMucHVzaChDb250YWluZXJTbmFwc2hvdC5vZih0aGlzLl9iaW5kaW5nRGljdGlvbmFyeS5jbG9uZSgpLCB0aGlzLl9taWRkbGV3YXJlLCB0aGlzLl9hY3RpdmF0aW9ucy5jbG9uZSgpLCB0aGlzLl9kZWFjdGl2YXRpb25zLmNsb25lKCksIHRoaXMuX21vZHVsZUFjdGl2YXRpb25TdG9yZS5jbG9uZSgpKSk7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLnJlc3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzbmFwc2hvdCA9IHRoaXMuX3NuYXBzaG90cy5wb3AoKTtcbiAgICAgICAgaWYgKHNuYXBzaG90ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9NU0dTLk5PX01PUkVfU05BUFNIT1RTX0FWQUlMQUJMRSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYmluZGluZ0RpY3Rpb25hcnkgPSBzbmFwc2hvdC5iaW5kaW5ncztcbiAgICAgICAgdGhpcy5fYWN0aXZhdGlvbnMgPSBzbmFwc2hvdC5hY3RpdmF0aW9ucztcbiAgICAgICAgdGhpcy5fZGVhY3RpdmF0aW9ucyA9IHNuYXBzaG90LmRlYWN0aXZhdGlvbnM7XG4gICAgICAgIHRoaXMuX21pZGRsZXdhcmUgPSBzbmFwc2hvdC5taWRkbGV3YXJlO1xuICAgICAgICB0aGlzLl9tb2R1bGVBY3RpdmF0aW9uU3RvcmUgPSBzbmFwc2hvdC5tb2R1bGVBY3RpdmF0aW9uU3RvcmU7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLmNyZWF0ZUNoaWxkID0gZnVuY3Rpb24gKGNvbnRhaW5lck9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGNoaWxkID0gbmV3IENvbnRhaW5lcihjb250YWluZXJPcHRpb25zIHx8IHRoaXMub3B0aW9ucyk7XG4gICAgICAgIGNoaWxkLnBhcmVudCA9IHRoaXM7XG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuYXBwbHlNaWRkbGV3YXJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbWlkZGxld2FyZXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIG1pZGRsZXdhcmVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGluaXRpYWwgPSAodGhpcy5fbWlkZGxld2FyZSkgPyB0aGlzLl9taWRkbGV3YXJlIDogdGhpcy5fcGxhbkFuZFJlc29sdmUoKTtcbiAgICAgICAgdGhpcy5fbWlkZGxld2FyZSA9IG1pZGRsZXdhcmVzLnJlZHVjZShmdW5jdGlvbiAocHJldiwgY3VycikgeyByZXR1cm4gY3VycihwcmV2KTsgfSwgaW5pdGlhbCk7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLmFwcGx5Q3VzdG9tTWV0YWRhdGFSZWFkZXIgPSBmdW5jdGlvbiAobWV0YWRhdGFSZWFkZXIpIHtcbiAgICAgICAgdGhpcy5fbWV0YWRhdGFSZWFkZXIgPSBtZXRhZGF0YVJlYWRlcjtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHNlcnZpY2VJZGVudGlmaWVyKSB7XG4gICAgICAgIHZhciBnZXRBcmdzID0gdGhpcy5fZ2V0Tm90QWxsQXJncyhzZXJ2aWNlSWRlbnRpZmllciwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0QnV0VGhyb3dJZkFzeW5jKGdldEFyZ3MpO1xuICAgIH07XG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5nZXRBc3luYyA9IGZ1bmN0aW9uIChzZXJ2aWNlSWRlbnRpZmllcikge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZ2V0QXJncztcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBnZXRBcmdzID0gdGhpcy5fZ2V0Tm90QWxsQXJncyhzZXJ2aWNlSWRlbnRpZmllciwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiwgdGhpcy5fZ2V0KGdldEFyZ3MpXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuZ2V0VGFnZ2VkID0gZnVuY3Rpb24gKHNlcnZpY2VJZGVudGlmaWVyLCBrZXksIHZhbHVlKSB7XG4gICAgICAgIHZhciBnZXRBcmdzID0gdGhpcy5fZ2V0Tm90QWxsQXJncyhzZXJ2aWNlSWRlbnRpZmllciwgZmFsc2UsIGtleSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0QnV0VGhyb3dJZkFzeW5jKGdldEFyZ3MpO1xuICAgIH07XG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5nZXRUYWdnZWRBc3luYyA9IGZ1bmN0aW9uIChzZXJ2aWNlSWRlbnRpZmllciwga2V5LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZ2V0QXJncztcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBnZXRBcmdzID0gdGhpcy5fZ2V0Tm90QWxsQXJncyhzZXJ2aWNlSWRlbnRpZmllciwgZmFsc2UsIGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiwgdGhpcy5fZ2V0KGdldEFyZ3MpXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuZ2V0TmFtZWQgPSBmdW5jdGlvbiAoc2VydmljZUlkZW50aWZpZXIsIG5hbWVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFRhZ2dlZChzZXJ2aWNlSWRlbnRpZmllciwgTUVUQURBVEFfS0VZLk5BTUVEX1RBRywgbmFtZWQpO1xuICAgIH07XG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5nZXROYW1lZEFzeW5jID0gZnVuY3Rpb24gKHNlcnZpY2VJZGVudGlmaWVyLCBuYW1lZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRUYWdnZWRBc3luYyhzZXJ2aWNlSWRlbnRpZmllciwgTUVUQURBVEFfS0VZLk5BTUVEX1RBRywgbmFtZWQpO1xuICAgIH07XG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5nZXRBbGwgPSBmdW5jdGlvbiAoc2VydmljZUlkZW50aWZpZXIpIHtcbiAgICAgICAgdmFyIGdldEFyZ3MgPSB0aGlzLl9nZXRBbGxBcmdzKHNlcnZpY2VJZGVudGlmaWVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldEJ1dFRocm93SWZBc3luYyhnZXRBcmdzKTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuZ2V0QWxsQXN5bmMgPSBmdW5jdGlvbiAoc2VydmljZUlkZW50aWZpZXIpIHtcbiAgICAgICAgdmFyIGdldEFyZ3MgPSB0aGlzLl9nZXRBbGxBcmdzKHNlcnZpY2VJZGVudGlmaWVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldEFsbChnZXRBcmdzKTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuZ2V0QWxsVGFnZ2VkID0gZnVuY3Rpb24gKHNlcnZpY2VJZGVudGlmaWVyLCBrZXksIHZhbHVlKSB7XG4gICAgICAgIHZhciBnZXRBcmdzID0gdGhpcy5fZ2V0Tm90QWxsQXJncyhzZXJ2aWNlSWRlbnRpZmllciwgdHJ1ZSwga2V5LCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRCdXRUaHJvd0lmQXN5bmMoZ2V0QXJncyk7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLmdldEFsbFRhZ2dlZEFzeW5jID0gZnVuY3Rpb24gKHNlcnZpY2VJZGVudGlmaWVyLCBrZXksIHZhbHVlKSB7XG4gICAgICAgIHZhciBnZXRBcmdzID0gdGhpcy5fZ2V0Tm90QWxsQXJncyhzZXJ2aWNlSWRlbnRpZmllciwgdHJ1ZSwga2V5LCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRBbGwoZ2V0QXJncyk7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLmdldEFsbE5hbWVkID0gZnVuY3Rpb24gKHNlcnZpY2VJZGVudGlmaWVyLCBuYW1lZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRBbGxUYWdnZWQoc2VydmljZUlkZW50aWZpZXIsIE1FVEFEQVRBX0tFWS5OQU1FRF9UQUcsIG5hbWVkKTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuZ2V0QWxsTmFtZWRBc3luYyA9IGZ1bmN0aW9uIChzZXJ2aWNlSWRlbnRpZmllciwgbmFtZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QWxsVGFnZ2VkQXN5bmMoc2VydmljZUlkZW50aWZpZXIsIE1FVEFEQVRBX0tFWS5OQU1FRF9UQUcsIG5hbWVkKTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uIChjb25zdHJ1Y3RvckZ1bmN0aW9uKSB7XG4gICAgICAgIHZhciBpc0JvdW5kID0gdGhpcy5pc0JvdW5kKGNvbnN0cnVjdG9yRnVuY3Rpb24pO1xuICAgICAgICBpZiAoIWlzQm91bmQpIHtcbiAgICAgICAgICAgIHRoaXMuYmluZChjb25zdHJ1Y3RvckZ1bmN0aW9uKS50b1NlbGYoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzb2x2ZWQgPSB0aGlzLmdldChjb25zdHJ1Y3RvckZ1bmN0aW9uKTtcbiAgICAgICAgaWYgKCFpc0JvdW5kKSB7XG4gICAgICAgICAgICB0aGlzLnVuYmluZChjb25zdHJ1Y3RvckZ1bmN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzb2x2ZWQ7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLl9wcmVEZXN0cm95ID0gZnVuY3Rpb24gKGNvbnN0cnVjdG9yLCBpbnN0YW5jZSkge1xuICAgICAgICBpZiAoUmVmbGVjdC5oYXNNZXRhZGF0YShNRVRBREFUQV9LRVkuUFJFX0RFU1RST1ksIGNvbnN0cnVjdG9yKSkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBSZWZsZWN0LmdldE1ldGFkYXRhKE1FVEFEQVRBX0tFWS5QUkVfREVTVFJPWSwgY29uc3RydWN0b3IpO1xuICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlW2RhdGEudmFsdWVdKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuX3JlbW92ZU1vZHVsZUhhbmRsZXJzID0gZnVuY3Rpb24gKG1vZHVsZUlkKSB7XG4gICAgICAgIHZhciBtb2R1bGVBY3RpdmF0aW9uc0hhbmRsZXJzID0gdGhpcy5fbW9kdWxlQWN0aXZhdGlvblN0b3JlLnJlbW92ZShtb2R1bGVJZCk7XG4gICAgICAgIHRoaXMuX2FjdGl2YXRpb25zLnJlbW92ZUludGVyc2VjdGlvbihtb2R1bGVBY3RpdmF0aW9uc0hhbmRsZXJzLm9uQWN0aXZhdGlvbnMpO1xuICAgICAgICB0aGlzLl9kZWFjdGl2YXRpb25zLnJlbW92ZUludGVyc2VjdGlvbihtb2R1bGVBY3RpdmF0aW9uc0hhbmRsZXJzLm9uRGVhY3RpdmF0aW9ucyk7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLl9yZW1vdmVNb2R1bGVCaW5kaW5ncyA9IGZ1bmN0aW9uIChtb2R1bGVJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYmluZGluZ0RpY3Rpb25hcnkucmVtb3ZlQnlDb25kaXRpb24oZnVuY3Rpb24gKGJpbmRpbmcpIHsgcmV0dXJuIGJpbmRpbmcubW9kdWxlSWQgPT09IG1vZHVsZUlkOyB9KTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuX2RlYWN0aXZhdGUgPSBmdW5jdGlvbiAoYmluZGluZywgaW5zdGFuY2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGNvbnN0cnVjdG9yID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGluc3RhbmNlKS5jb25zdHJ1Y3RvcjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9kZWFjdGl2YXRpb25zLmhhc0tleShiaW5kaW5nLnNlcnZpY2VJZGVudGlmaWVyKSkge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9kZWFjdGl2YXRlQ29udGFpbmVyKGluc3RhbmNlLCB0aGlzLl9kZWFjdGl2YXRpb25zLmdldChiaW5kaW5nLnNlcnZpY2VJZGVudGlmaWVyKS52YWx1ZXMoKSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzUHJvbWlzZShyZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9oYW5kbGVEZWFjdGl2YXRpb25FcnJvcihyZXN1bHQudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fcHJvcGFnYXRlQ29udGFpbmVyRGVhY3RpdmF0aW9uVGhlbkJpbmRpbmdBbmRQcmVEZXN0cm95QXN5bmMoYmluZGluZywgaW5zdGFuY2UsIGNvbnN0cnVjdG9yKTsgfSksIGNvbnN0cnVjdG9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcHJvcGFnYXRlRGVhY3RpdmF0aW9uUmVzdWx0ID0gdGhpcy5fcHJvcGFnYXRlQ29udGFpbmVyRGVhY3RpdmF0aW9uVGhlbkJpbmRpbmdBbmRQcmVEZXN0cm95KGJpbmRpbmcsIGluc3RhbmNlLCBjb25zdHJ1Y3Rvcik7XG4gICAgICAgICAgICBpZiAoaXNQcm9taXNlKHByb3BhZ2F0ZURlYWN0aXZhdGlvblJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faGFuZGxlRGVhY3RpdmF0aW9uRXJyb3IocHJvcGFnYXRlRGVhY3RpdmF0aW9uUmVzdWx0LCBjb25zdHJ1Y3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfTVNHUy5PTl9ERUFDVElWQVRJT05fRVJST1IoY29uc3RydWN0b3IubmFtZSwgZXgubWVzc2FnZSkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLl9oYW5kbGVEZWFjdGl2YXRpb25FcnJvciA9IGZ1bmN0aW9uIChhc3luY1Jlc3VsdCwgY29uc3RydWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGV4XzE7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzAsIDIsICwgM10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBhc3luY1Jlc3VsdF07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMywgM107XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4XzEgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfTVNHUy5PTl9ERUFDVElWQVRJT05fRVJST1IoY29uc3RydWN0b3IubmFtZSwgZXhfMS5tZXNzYWdlKSk7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFsyXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLl9kZWFjdGl2YXRlQ29udGFpbmVyID0gZnVuY3Rpb24gKGluc3RhbmNlLCBkZWFjdGl2YXRpb25zSXRlcmF0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGRlYWN0aXZhdGlvbiA9IGRlYWN0aXZhdGlvbnNJdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIHdoaWxlIChkZWFjdGl2YXRpb24udmFsdWUpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBkZWFjdGl2YXRpb24udmFsdWUoaW5zdGFuY2UpO1xuICAgICAgICAgICAgaWYgKGlzUHJvbWlzZShyZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLl9kZWFjdGl2YXRlQ29udGFpbmVyQXN5bmMoaW5zdGFuY2UsIGRlYWN0aXZhdGlvbnNJdGVyYXRvcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWFjdGl2YXRpb24gPSBkZWFjdGl2YXRpb25zSXRlcmF0b3IubmV4dCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLl9kZWFjdGl2YXRlQ29udGFpbmVyQXN5bmMgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIGRlYWN0aXZhdGlvbnNJdGVyYXRvcikge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZGVhY3RpdmF0aW9uO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgZGVhY3RpdmF0aW9uID0gZGVhY3RpdmF0aW9uc0l0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkZWFjdGl2YXRpb24udmFsdWUpIHJldHVybiBbMywgM107XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIGRlYWN0aXZhdGlvbi52YWx1ZShpbnN0YW5jZSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWFjdGl2YXRpb24gPSBkZWFjdGl2YXRpb25zSXRlcmF0b3IubmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCAxXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzJdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuX2dldENvbnRhaW5lck1vZHVsZUhlbHBlcnNGYWN0b3J5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgc2V0TW9kdWxlSWQgPSBmdW5jdGlvbiAoYmluZGluZ1RvU3ludGF4LCBtb2R1bGVJZCkge1xuICAgICAgICAgICAgYmluZGluZ1RvU3ludGF4Ll9iaW5kaW5nLm1vZHVsZUlkID0gbW9kdWxlSWQ7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBnZXRCaW5kRnVuY3Rpb24gPSBmdW5jdGlvbiAobW9kdWxlSWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoc2VydmljZUlkZW50aWZpZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgYmluZGluZ1RvU3ludGF4ID0gX3RoaXMuYmluZChzZXJ2aWNlSWRlbnRpZmllcik7XG4gICAgICAgICAgICAgICAgc2V0TW9kdWxlSWQoYmluZGluZ1RvU3ludGF4LCBtb2R1bGVJZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJpbmRpbmdUb1N5bnRheDtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHZhciBnZXRVbmJpbmRGdW5jdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoc2VydmljZUlkZW50aWZpZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMudW5iaW5kKHNlcnZpY2VJZGVudGlmaWVyKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHZhciBnZXRVbmJpbmRBc3luY0Z1bmN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzZXJ2aWNlSWRlbnRpZmllcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy51bmJpbmRBc3luYyhzZXJ2aWNlSWRlbnRpZmllcik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICB2YXIgZ2V0SXNib3VuZEZ1bmN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzZXJ2aWNlSWRlbnRpZmllcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5pc0JvdW5kKHNlcnZpY2VJZGVudGlmaWVyKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHZhciBnZXRSZWJpbmRGdW5jdGlvbiA9IGZ1bmN0aW9uIChtb2R1bGVJZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzZXJ2aWNlSWRlbnRpZmllcikge1xuICAgICAgICAgICAgICAgIHZhciBiaW5kaW5nVG9TeW50YXggPSBfdGhpcy5yZWJpbmQoc2VydmljZUlkZW50aWZpZXIpO1xuICAgICAgICAgICAgICAgIHNldE1vZHVsZUlkKGJpbmRpbmdUb1N5bnRheCwgbW9kdWxlSWQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBiaW5kaW5nVG9TeW50YXg7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICB2YXIgZ2V0T25BY3RpdmF0aW9uRnVuY3Rpb24gPSBmdW5jdGlvbiAobW9kdWxlSWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoc2VydmljZUlkZW50aWZpZXIsIG9uQWN0aXZhdGlvbikge1xuICAgICAgICAgICAgICAgIF90aGlzLl9tb2R1bGVBY3RpdmF0aW9uU3RvcmUuYWRkQWN0aXZhdGlvbihtb2R1bGVJZCwgc2VydmljZUlkZW50aWZpZXIsIG9uQWN0aXZhdGlvbik7XG4gICAgICAgICAgICAgICAgX3RoaXMub25BY3RpdmF0aW9uKHNlcnZpY2VJZGVudGlmaWVyLCBvbkFjdGl2YXRpb24pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGdldE9uRGVhY3RpdmF0aW9uRnVuY3Rpb24gPSBmdW5jdGlvbiAobW9kdWxlSWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoc2VydmljZUlkZW50aWZpZXIsIG9uRGVhY3RpdmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX21vZHVsZUFjdGl2YXRpb25TdG9yZS5hZGREZWFjdGl2YXRpb24obW9kdWxlSWQsIHNlcnZpY2VJZGVudGlmaWVyLCBvbkRlYWN0aXZhdGlvbik7XG4gICAgICAgICAgICAgICAgX3RoaXMub25EZWFjdGl2YXRpb24oc2VydmljZUlkZW50aWZpZXIsIG9uRGVhY3RpdmF0aW9uKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobUlkKSB7IHJldHVybiAoe1xuICAgICAgICAgICAgYmluZEZ1bmN0aW9uOiBnZXRCaW5kRnVuY3Rpb24obUlkKSxcbiAgICAgICAgICAgIGlzYm91bmRGdW5jdGlvbjogZ2V0SXNib3VuZEZ1bmN0aW9uKCksXG4gICAgICAgICAgICBvbkFjdGl2YXRpb25GdW5jdGlvbjogZ2V0T25BY3RpdmF0aW9uRnVuY3Rpb24obUlkKSxcbiAgICAgICAgICAgIG9uRGVhY3RpdmF0aW9uRnVuY3Rpb246IGdldE9uRGVhY3RpdmF0aW9uRnVuY3Rpb24obUlkKSxcbiAgICAgICAgICAgIHJlYmluZEZ1bmN0aW9uOiBnZXRSZWJpbmRGdW5jdGlvbihtSWQpLFxuICAgICAgICAgICAgdW5iaW5kRnVuY3Rpb246IGdldFVuYmluZEZ1bmN0aW9uKCksXG4gICAgICAgICAgICB1bmJpbmRBc3luY0Z1bmN0aW9uOiBnZXRVbmJpbmRBc3luY0Z1bmN0aW9uKClcbiAgICAgICAgfSk7IH07XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLl9nZXRBbGwgPSBmdW5jdGlvbiAoZ2V0QXJncykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwodGhpcy5fZ2V0KGdldEFyZ3MpKTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuX2dldCA9IGZ1bmN0aW9uIChnZXRBcmdzKSB7XG4gICAgICAgIHZhciBwbGFuQW5kUmVzb2x2ZUFyZ3MgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZ2V0QXJncyksIHsgY29udGV4dEludGVyY2VwdG9yOiBmdW5jdGlvbiAoY29udGV4dCkgeyByZXR1cm4gY29udGV4dDsgfSwgdGFyZ2V0VHlwZTogVGFyZ2V0VHlwZUVudW0uVmFyaWFibGUgfSk7XG4gICAgICAgIGlmICh0aGlzLl9taWRkbGV3YXJlKSB7XG4gICAgICAgICAgICB2YXIgbWlkZGxld2FyZVJlc3VsdCA9IHRoaXMuX21pZGRsZXdhcmUocGxhbkFuZFJlc29sdmVBcmdzKTtcbiAgICAgICAgICAgIGlmIChtaWRkbGV3YXJlUmVzdWx0ID09PSB1bmRlZmluZWQgfHwgbWlkZGxld2FyZVJlc3VsdCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9NU0dTLklOVkFMSURfTUlERExFV0FSRV9SRVRVUk4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1pZGRsZXdhcmVSZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3BsYW5BbmRSZXNvbHZlKCkocGxhbkFuZFJlc29sdmVBcmdzKTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuX2dldEJ1dFRocm93SWZBc3luYyA9IGZ1bmN0aW9uIChnZXRBcmdzKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9nZXQoZ2V0QXJncyk7XG4gICAgICAgIGlmIChpc1Byb21pc2VPckNvbnRhaW5zUHJvbWlzZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfTVNHUy5MQVpZX0lOX1NZTkMoZ2V0QXJncy5zZXJ2aWNlSWRlbnRpZmllcikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLl9nZXRBbGxBcmdzID0gZnVuY3Rpb24gKHNlcnZpY2VJZGVudGlmaWVyKSB7XG4gICAgICAgIHZhciBnZXRBbGxBcmdzID0ge1xuICAgICAgICAgICAgYXZvaWRDb25zdHJhaW50czogdHJ1ZSxcbiAgICAgICAgICAgIGlzTXVsdGlJbmplY3Q6IHRydWUsXG4gICAgICAgICAgICBzZXJ2aWNlSWRlbnRpZmllcjogc2VydmljZUlkZW50aWZpZXIsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBnZXRBbGxBcmdzO1xuICAgIH07XG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5fZ2V0Tm90QWxsQXJncyA9IGZ1bmN0aW9uIChzZXJ2aWNlSWRlbnRpZmllciwgaXNNdWx0aUluamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgICB2YXIgZ2V0Tm90QWxsQXJncyA9IHtcbiAgICAgICAgICAgIGF2b2lkQ29uc3RyYWludHM6IGZhbHNlLFxuICAgICAgICAgICAgaXNNdWx0aUluamVjdDogaXNNdWx0aUluamVjdCxcbiAgICAgICAgICAgIHNlcnZpY2VJZGVudGlmaWVyOiBzZXJ2aWNlSWRlbnRpZmllcixcbiAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gZ2V0Tm90QWxsQXJncztcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuX3BsYW5BbmRSZXNvbHZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gcGxhbihfdGhpcy5fbWV0YWRhdGFSZWFkZXIsIF90aGlzLCBhcmdzLmlzTXVsdGlJbmplY3QsIGFyZ3MudGFyZ2V0VHlwZSwgYXJncy5zZXJ2aWNlSWRlbnRpZmllciwgYXJncy5rZXksIGFyZ3MudmFsdWUsIGFyZ3MuYXZvaWRDb25zdHJhaW50cyk7XG4gICAgICAgICAgICBjb250ZXh0ID0gYXJncy5jb250ZXh0SW50ZXJjZXB0b3IoY29udGV4dCk7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gcmVzb2x2ZShjb250ZXh0KTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLl9kZWFjdGl2YXRlSWZTaW5nbGV0b24gPSBmdW5jdGlvbiAoYmluZGluZykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIWJpbmRpbmcuYWN0aXZhdGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUHJvbWlzZShiaW5kaW5nLmNhY2hlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGJpbmRpbmcuY2FjaGUudGhlbihmdW5jdGlvbiAocmVzb2x2ZWQpIHsgcmV0dXJuIF90aGlzLl9kZWFjdGl2YXRlKGJpbmRpbmcsIHJlc29sdmVkKTsgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlYWN0aXZhdGUoYmluZGluZywgYmluZGluZy5jYWNoZSk7XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLl9kZWFjdGl2YXRlU2luZ2xldG9ucyA9IGZ1bmN0aW9uIChiaW5kaW5ncykge1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGJpbmRpbmdzXzEgPSBiaW5kaW5nczsgX2kgPCBiaW5kaW5nc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGJpbmRpbmcgPSBiaW5kaW5nc18xW19pXTtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9kZWFjdGl2YXRlSWZTaW5nbGV0b24oYmluZGluZyk7XG4gICAgICAgICAgICBpZiAoaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfTVNHUy5BU1lOQ19VTkJJTkRfUkVRVUlSRUQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLl9kZWFjdGl2YXRlU2luZ2xldG9uc0FzeW5jID0gZnVuY3Rpb24gKGJpbmRpbmdzKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCwgUHJvbWlzZS5hbGwoYmluZGluZ3MubWFwKGZ1bmN0aW9uIChiKSB7IHJldHVybiBfdGhpcy5fZGVhY3RpdmF0ZUlmU2luZ2xldG9uKGIpOyB9KSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzJdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuX3Byb3BhZ2F0ZUNvbnRhaW5lckRlYWN0aXZhdGlvblRoZW5CaW5kaW5nQW5kUHJlRGVzdHJveSA9IGZ1bmN0aW9uIChiaW5kaW5nLCBpbnN0YW5jZSwgY29uc3RydWN0b3IpIHtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVhY3RpdmF0ZS5iaW5kKHRoaXMucGFyZW50KShiaW5kaW5nLCBpbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYmluZGluZ0RlYWN0aXZhdGlvbkFuZFByZURlc3Ryb3koYmluZGluZywgaW5zdGFuY2UsIGNvbnN0cnVjdG9yKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5fcHJvcGFnYXRlQ29udGFpbmVyRGVhY3RpdmF0aW9uVGhlbkJpbmRpbmdBbmRQcmVEZXN0cm95QXN5bmMgPSBmdW5jdGlvbiAoYmluZGluZywgaW5zdGFuY2UsIGNvbnN0cnVjdG9yKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5wYXJlbnQpIHJldHVybiBbMywgMl07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIHRoaXMuX2RlYWN0aXZhdGUuYmluZCh0aGlzLnBhcmVudCkoYmluZGluZywgaW5zdGFuY2UpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gWzQsIHRoaXMuX2JpbmRpbmdEZWFjdGl2YXRpb25BbmRQcmVEZXN0cm95QXN5bmMoYmluZGluZywgaW5zdGFuY2UsIGNvbnN0cnVjdG9yKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gNDtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzJdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUuX3JlbW92ZVNlcnZpY2VGcm9tRGljdGlvbmFyeSA9IGZ1bmN0aW9uIChzZXJ2aWNlSWRlbnRpZmllcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5fYmluZGluZ0RpY3Rpb25hcnkucmVtb3ZlKHNlcnZpY2VJZGVudGlmaWVyKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX01TR1MuQ0FOTk9UX1VOQklORCArIFwiIFwiICsgZ2V0U2VydmljZUlkZW50aWZpZXJBc1N0cmluZyhzZXJ2aWNlSWRlbnRpZmllcikpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb250YWluZXIucHJvdG90eXBlLl9iaW5kaW5nRGVhY3RpdmF0aW9uQW5kUHJlRGVzdHJveSA9IGZ1bmN0aW9uIChiaW5kaW5nLCBpbnN0YW5jZSwgY29uc3RydWN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHR5cGVvZiBiaW5kaW5nLm9uRGVhY3RpdmF0aW9uID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBiaW5kaW5nLm9uRGVhY3RpdmF0aW9uKGluc3RhbmNlKTtcbiAgICAgICAgICAgIGlmIChpc1Byb21pc2UocmVzdWx0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fcHJlRGVzdHJveShjb25zdHJ1Y3RvciwgaW5zdGFuY2UpOyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcHJlRGVzdHJveShjb25zdHJ1Y3RvciwgaW5zdGFuY2UpO1xuICAgIH07XG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5fYmluZGluZ0RlYWN0aXZhdGlvbkFuZFByZURlc3Ryb3lBc3luYyA9IGZ1bmN0aW9uIChiaW5kaW5nLCBpbnN0YW5jZSwgY29uc3RydWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodHlwZW9mIGJpbmRpbmcub25EZWFjdGl2YXRpb24gPT09IFwiZnVuY3Rpb25cIikpIHJldHVybiBbMywgMl07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIGJpbmRpbmcub25EZWFjdGl2YXRpb24oaW5zdGFuY2UpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAyO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBbNCwgdGhpcy5fcHJlRGVzdHJveShjb25zdHJ1Y3RvciwgaW5zdGFuY2UpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gQ29udGFpbmVyO1xufSgpKTtcbmV4cG9ydCB7IENvbnRhaW5lciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udGFpbmVyLmpzLm1hcCIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsInZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbmltcG9ydCB7IHRlZywgaW5qZWN0YWJsZSB9IGZyb20gXCJAc3JjL2luZGV4XCI7XG5pbXBvcnQgJy4vc3R5bGUuY3NzJztcbi8v0LjQvdC20LXQutGC0LjRgNGD0LXQvNCw0Y8g0YHRg9GJ0L3QvtGB0YLRjCDRgi7QtS4g0L7QvdCwINGD0LzQtdC10YIg0YDQsNCx0L7RgtCw0YLRjCDRgSDQutC+0L3RgtC10LnQvdC10YDQvtC8XG5sZXQgVEVHX0N1c3RvbSA9IGNsYXNzIFRFR19DdXN0b20ge1xuICAgIGdldCBURUdfanF1ZXJ5KCkgeyByZXR1cm4gdGVnKHRoaXMuVEVHKTsgfVxuICAgIGdldCBURUcoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjc3M6ICdjdXN0b20nLFxuICAgICAgICAgICAgaHRtbDogJ3Rlc3QxJyxcbiAgICAgICAgICAgIGZ1bjogKGV4KSA9PiB0aGlzLlRlZyA9IGV4XG4gICAgICAgIH07XG4gICAgfVxufTtcblRFR19DdXN0b20gPSBfX2RlY29yYXRlKFtcbiAgICBpbmplY3RhYmxlKClcbl0sIFRFR19DdXN0b20pO1xuZXhwb3J0IHsgVEVHX0N1c3RvbSB9O1xuIiwidmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xuaW1wb3J0IHsgaW5qZWN0YWJsZSwgdGVnIH0gZnJvbSBcIkBzcmMvaW5kZXhcIjtcbmxldCBUZWdfbWluID0gY2xhc3MgVGVnX21pbiB7XG4gICAgVEVHX2pxdWVyeShBUkdTID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuQVJHUyA9IEFSR1M7XG4gICAgICAgIHJldHVybiB0ZWcodGhpcy5URUcpO1xuICAgIH1cbiAgICBnZXQgVEVHKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZnVuOiAoZXgpID0+IHRoaXMuZnVuX3RlZyhleClcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZ2V0IFRFRzIoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmdW46IChleCkgPT4gdGhpcy5mdW5fdGVnKGV4KVxuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5fdGVnKGV4KSB7XG4gICAgICAgIHRoaXMuVGVnID0gZXg7XG4gICAgfVxufTtcblRlZ19taW4gPSBfX2RlY29yYXRlKFtcbiAgICBpbmplY3RhYmxlKClcbl0sIFRlZ19taW4pO1xuZXhwb3J0IHsgVGVnX21pbiB9O1xuIiwidmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xuaW1wb3J0IHsgdGVnLCDQodC+0LXQtNC40L3QuNGC0YzQodCy0L7QudGB0YLQstCw0J7QsdGK0LXQutGC0L7QsiwgaW5qZWN0YWJsZSwgVGVnX21pbiB9IGZyb20gXCJAc3JjL2luZGV4XCI7XG4vKipcbiAqINCw0LLRgtC+INC90LDQt9C90LDRh9C10L3QuNC1INC+0LHRitC10LrRgtGDIFRlZyDQuCBPQkpcbiAqXG4gKiBAY2xhc3MgY2xhc3MyMzA0MDkxOTMwXG4gKiBAZXh0ZW5kcyB7dGVnMjMwNDE4MTcwM31cbiAqL1xubGV0IFRlZ19vYmogPSBjbGFzcyBUZWdfb2JqIGV4dGVuZHMgVGVnX21pbiB7XG4gICAgVEVHX2pxdWVyeShBUkdTID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuQVJHUyA9IEFSR1M7XG4gICAgICAgIHJldHVybiB0ZWcodGhpcy5URUcyKTtcbiAgICB9XG4gICAgZnVuX3RlZyhleCkge1xuICAgICAgICBzdXBlci5mdW5fdGVnKGV4KTtcbiAgICAgICAgZXguZGF0YSgnT0JKJywgdGhpcyk7XG4gICAgfVxuICAgIGdldCBURUcoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjc3M6ICdjdXN0b20nLFxuICAgICAgICAgICAgaHRtbDogJ3Rlc3QxJyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZ2V0IFRFRzIoKSB7XG4gICAgICAgIGxldCBvYmogPSB0aGlzLlRFRztcbiAgICAgICAgaWYgKHRoaXMuY29uc3RydWN0b3IubmFtZSA9PSAnVGVnX29iaicpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG9iajIgPSBzdXBlci5URUcyO1xuICAgICAgICByZXR1cm4g0KHQvtC10LTQuNC90LjRgtGM0KHQstC+0LnRgdGC0LLQsNCe0LHRitC10LrRgtC+0LIob2JqLCBvYmoyKTtcbiAgICB9XG59O1xuVGVnX29iaiA9IF9fZGVjb3JhdGUoW1xuICAgIGluamVjdGFibGUoKVxuXSwgVGVnX29iaik7XG5leHBvcnQgeyBUZWdfb2JqIH07XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJ2YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgTWVudV8yMjA2MTYxMDUyXzE7XG5pbXBvcnQgeyBUZWdfc2hvdywg0JTQvtCx0LDQstC40YLRjNCh0L7QsdGL0YLQuNC10J7QsdGK0LXQutGC0YMsINCf0L7QutCw0LfQsNGC0YzQrdC70LXQvNC10L3RgtCc0YvRiNGM0Y4sIHRlZywgaW5qZWN0YWJsZSB9IGZyb20gXCJAc3JjL2luZGV4XCI7XG5pbXBvcnQgJy4vc3R5bGUuY3NzJztcbmxldCBNZW51XzIyMDYxNjEwNTIgPSBNZW51XzIyMDYxNjEwNTJfMSA9IGNsYXNzIE1lbnVfMjIwNjE2MTA1MiBleHRlbmRzIFRlZ19zaG93IHtcbiAgICAvL2FyZzpbe25hbWU6J2tleScsdGl0bGU6J9C60LvRjtGHINC6INCy0YvQv9C+0LvQvdC10L3QuNGOIGpzINGE0YPQvdC60YbQuNC4INC00LvRjyBtZW51J30se25hbWU6J2V2Jyx0aXRsZTonZXZlbnQnfSx7bmFtZTonZWwnLHRpdGxlOidlbGVtZW50J31dLFxuICAgIG1haW4oYXJnKSB7XG4gICAgICAgIC8vINCR0LvQvtC60LjRgNGD0LXQvCDQstGB0L/Qu9GL0LLQsNC90LjQtSDRgdC+0LHRi9GC0LjRjyBjb250ZXh0bWVudVxuICAgICAgICBhcmcuZXYgPSBhcmcuZXYgfHwgd2luZG93LmV2ZW50O1xuICAgICAgICBhcmcuZXYuY2FuY2VsQnViYmxlID0gdHJ1ZTtcbiAgICAgICAgLy8g0J/QvtC60LDQt9GL0LLQsNC10Lwg0YHQvtCx0YHRgtCy0LXQvdC90L7QtSDQutC+0L3RgtC10LrRgdGC0L3QvtC1INC80LXQvdGOXG4gICAgICAgIHRoaXMuVGVnLmNzcygnZGlzcGxheScsICcnKTtcbiAgICAgICAgdGhpcy5UZWcuZW1wdHkoKTtcbiAgICAgICAgaWYgKGFyZy5mdW4pIHtcbiAgICAgICAgICAgIGxldCBNID0gYXJnLmZ1bih7IG1lbnU6IHRoaXMuVGVnLCBlbDogYXJnLmVsIH0pO1xuICAgICAgICAgICAgaWYgKE0pIHtcbiAgICAgICAgICAgICAgICBNLmJvZHkgPSB0aGlzLlRlZztcbiAgICAgICAgICAgICAgICB0ZWcoTSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy/Qv9C+0LrQsNC30LDRgtGMINGA0Y/QtNC+0LxcbiAgICAgICAg0J/QvtC60LDQt9Cw0YLRjNCt0LvQtdC80LXQvdGC0JzRi9GI0YzRjih0aGlzLlRlZyk7XG4gICAgICAgIC8vINCR0LvQvtC60LjRgNGD0LXQvCDQstGB0L/Qu9GL0LLQsNC90LjQtSDRgdGC0LDQvdC00LDRgNGC0L3QvtCz0L4g0LHRgNCw0YPQt9C10YDQvdC+0LPQviDQvNC10L3RjlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGV2X25vbmUoKSB7XG4gICAgICAgIHRoaXMuVGVnLmNzcygnZGlzcGxheScsICdub25lJyk7XG4gICAgfVxuICAgIGZ1bl90ZWcoZXgpIHtcbiAgICAgICAgTWVudV8yMjA2MTYxMDUyXzEuSW5zdGFuY2UgPSB0aGlzO1xuICAgICAgICBzdXBlci5mdW5fdGVnKGV4KTtcbiAgICAgICAg0JTQvtCx0LDQstC40YLRjNCh0L7QsdGL0YLQuNC10J7QsdGK0LXQutGC0YMoZG9jdW1lbnQsICdjb250ZXh0bWVudScsICgpID0+IE1lbnVfMjIwNjE2MTA1Ml8xLkluc3RhbmNlLmV2X25vbmUoKSk7XG4gICAgICAgINCU0L7QsdCw0LLQuNGC0YzQodC+0LHRi9GC0LjQtdCe0LHRitC10LrRgtGDKGRvY3VtZW50LCBcImNsaWNrXCIsICgpID0+IE1lbnVfMjIwNjE2MTA1Ml8xLkluc3RhbmNlLmV2X25vbmUoKSk7XG4gICAgfVxuICAgIGdldCBURUcoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjbGFzc2VzOiAnTUVOVScsXG4gICAgICAgICAgICBhdHRyOiB7IGlkOiAnY29udGV4dE1lbnVJZCcgfSxcbiAgICAgICAgICAgIGNzczogJ21lbnUnLFxuICAgICAgICAgICAgaHRtbDogWyd0ZXN0J11cbiAgICAgICAgfTtcbiAgICB9XG59O1xuTWVudV8yMjA2MTYxMDUyID0gTWVudV8yMjA2MTYxMDUyXzEgPSBfX2RlY29yYXRlKFtcbiAgICBpbmplY3RhYmxlKClcbl0sIE1lbnVfMjIwNjE2MTA1Mik7XG5leHBvcnQgeyBNZW51XzIyMDYxNjEwNTIgfTtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsInZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbmltcG9ydCB7IGluamVjdGFibGUsIFRlZ19zaG93LCBibzUyIH0gZnJvbSBcIkBzcmMvaW5kZXhcIjtcbmltcG9ydCAnLi9zdHlsZS5jc3MnO1xubGV0IEZtX2FicyA9IGNsYXNzIEZtX2FicyBleHRlbmRzIFRlZ19zaG93IHtcbiAgICAvL9C/0L7RgdC70LUg0YHQvtC30LTQsNC90LjRjyDQpNC+0YDQvNGLXG4gICAgZ2V0IFRFR19ib2R5KCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2xhc3NlczogJ2ZtLWFicy1ib2R5JyxcbiAgICAgICAgICAgIGh0bWw6ICdlbXB0eSdcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZ2V0IFRFRygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNsYXNzZXM6ICdmbS1hYnMnLFxuICAgICAgICAgICAgY3NzOiAnZm0tYWJzJyxcbiAgICAgICAgICAgIGh0bWw6IHRoaXMuVEVHX2JvZHksXG4gICAgICAgICAgICBldmVudDoge1xuICAgICAgICAgICAgICAgIGNsaWNrOiAoKSA9PiB0aGlzLmNsaWNrKClcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNsaWNrKCkge1xuICAgICAgICB0aGlzLlRlZy5jc3MoJ3otaW5kZXgnLCAoKSA9PiB7XG4gICAgICAgICAgICBibzUyLnogKz0gMTtcbiAgICAgICAgICAgIHJldHVybiBibzUyLno7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzaG93KGFyZ3MpIHtcbiAgICAgICAgc3VwZXIuc2hvdyh1bmRlZmluZWQpO1xuICAgICAgICB0aGlzLlRlZy5kcmFnZ2FibGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgINCk0L7RgNC80LDQktCm0LXQvdGC0YDQtSgpIHtcbiAgICAgICAgdGhpcy5UZWcuY3NzKCdsZWZ0JywgJzUwJScpO1xuICAgICAgICB0aGlzLlRlZy5jc3MoJ3RvcCcsICc1MCUnKTtcbiAgICB9XG59O1xuRm1fYWJzID0gX19kZWNvcmF0ZShbXG4gICAgaW5qZWN0YWJsZSgpXG5dLCBGbV9hYnMpO1xuZXhwb3J0IHsgRm1fYWJzIH07XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgeyBUZWdfb2JqIH0gZnJvbSBcIkBzcmMvaW5kZXhcIjtcbmltcG9ydCAnLi9zdHlsZS5jc3MnO1xuZXhwb3J0IGNsYXNzIEZtX2JvZHkgZXh0ZW5kcyBUZWdfb2JqIHtcbiAgICBmdW5fdGVnKGV4KSB7XG4gICAgICAgIHN1cGVyLmZ1bl90ZWcoZXgpO1xuICAgICAgICBGbV9ib2R5Lkluc3RhbmNlID0gdGhpcztcbiAgICB9XG4gICAgZ2V0IFRFRygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNzczogJ0ZtLWJvZHknLFxuICAgICAgICAgICAgaHRtbDoge1xuICAgICAgICAgICAgICAgIGh0bWw6IFtcbiAgICAgICAgICAgICAgICAgICAgeyBodG1sOiAndGVzdCcgfSxcbiAgICAgICAgICAgICAgICAgICAgeyBodG1sOiAndGVzdCcgfSxcbiAgICAgICAgICAgICAgICAgICAgeyBodG1sOiAndGVzdCcgfSxcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXZlbnQ6IHtcbiAgICAgICAgICAgICAgICBjb250ZXh0bWVudTogKGFyZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbDogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgaHRtbDogJ3Rlc3QnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFRZUEVTLCBDb250YWluZXIsIFRlZ19taW4sIFRlZ19vYmosIFRlZ19zaG93LCBNZW51XzIyMDYxNjEwNTIsIFRFR19DdXN0b20sIEZtX2JvZHksIEZtX2FicywgfSBmcm9tIFwiQHNyYy9pbmRleFwiO1xuY29uc3Qg0JrQvtC90YLQtdC50L3QtdGAID0gbmV3IENvbnRhaW5lcigpO1xuLy/QvNGLINGB0LrQu9Cw0LTRi9Cy0LDQtdC8INC60LvQsNGB0YEgQ3VzdG9tINC/0L7QtCDQvNC10YLQutC+0LkgVFlQRVMuSVRFR19DdXN0b20g0YDQtdCw0LvQuNC30YPRjtGJ0LjQuSDQuNC90YLQtdGA0YTQtdC50YEgSVRFR19DdXN0b21cbtCa0L7QvdGC0LXQudC90LXRgC5iaW5kKFRZUEVTLklURUdfQ3VzdG9tKS50byhUZWdfbWluKTtcbtCa0L7QvdGC0LXQudC90LXRgC5iaW5kKFRZUEVTLklURUdfQ3VzdG9tKS50byhUZWdfb2JqKTtcbtCa0L7QvdGC0LXQudC90LXRgC5iaW5kKFRZUEVTLklURUdfQ3VzdG9tKS50byhUZWdfc2hvdyk7XG7QmtC+0L3RgtC10LnQvdC10YAuYmluZChUWVBFUy5JVEVHX0N1c3RvbSkudG8oVEVHX0N1c3RvbSk7XG7QmtC+0L3RgtC10LnQvdC10YAuYmluZChUWVBFUy5JRm1fYWJzKS50byhGbV9hYnMpO1xu0JrQvtC90YLQtdC50L3QtdGALmJpbmQoVFlQRVMuSU1lbnVfMjIwNjE2MTA1MikudG8oTWVudV8yMjA2MTYxMDUyKTtcbtCa0L7QvdGC0LXQudC90LXRgC5iaW5kKFRZUEVTLkZtX2JvZHkpLnRvKEZtX2JvZHkpO1xuZXhwb3J0IHsg0JrQvtC90YLQtdC50L3QtdGAIH07XG4iLCJpbXBvcnQgeyBUWVBFUywg0JrQvtC90YLQtdC50L3QtdGAIH0gZnJvbSBcIkBzcmMvaW5kZXhcIjtcbmNsYXNzIEluZGV4IHtcbiAgICDQnNC10YLQvtC0KCkge1xuICAgICAgICBjb25zdCBib2R5ID0g0JrQvtC90YLQtdC50L3QtdGALmdldChUWVBFUy5GbV9ib2R5KTtcbiAgICAgICAgY29uc3QgbWVudSA9INCa0L7QvdGC0LXQudC90LXRgC5nZXQoVFlQRVMuSU1lbnVfMjIwNjE2MTA1Mik7XG4gICAgICAgIC8vY29uc3Qg0Y3QutC3ID0g0JrQvtC90YLQtdC50L3QtdGALmdldDxGbV9hYnM+KFRZUEVTLklGbV9hYnMpXG4gICAgICAgIGJvZHkuVEVHX2pxdWVyeSgpO1xuICAgICAgICBtZW51LlRFR19qcXVlcnkoKTtcbiAgICB9XG59XG5jb25zdCDQodC10YDQstC40YEgPSBuZXcgSW5kZXgoKTtcbtCh0LXRgNCy0LjRgS7QnNC10YLQvtC0KCk7XG5leHBvcnQgeyDQodC10YDQstC40YEgfTtcbiIsInZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbmltcG9ydCB7IGluamVjdGFibGUsIFRlZ19vYmosINCf0L7QutCw0LfQsNGC0YzQrdC70LXQvNC10L3RgtCc0YvRiNGM0Y4gfSBmcm9tIFwiQHNyYy9pbmRleFwiO1xuLyoqXG4gKiBPQkog0YEg0YTRg9C90LrRhtC40LXQuSDQv9C+0YHQu9C1INGB0L7Qt9C00LDQvdC40Y8gc2hvd1xuICpcbiAqIEBjbGFzcyBjbGFzczIzMDMyNTE3NTRcbiAqIEBleHRlbmRzIHtUZWdfb2JqfVxuICogQGltcGxlbWVudHMge0lUZWdfc2hvd31cbiAqL1xubGV0IFRlZ19zaG93ID0gY2xhc3MgVGVnX3Nob3cgZXh0ZW5kcyBUZWdfb2JqIHtcbiAgICAvL0ZVTlMgPSB7IHBvczogZnVuMjMwNDA3MTM0OSB9XG4gICAgZnVuX3RlZyhleCkge1xuICAgICAgICBzdXBlci5mdW5fdGVnKGV4KTtcbiAgICAgICAgdGhpcy5zaG93KHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIHNob3coYXJncykge1xuICAgICAgICDQn9C+0LrQsNC30LDRgtGM0K3Qu9C10LzQtdC90YLQnNGL0YjRjNGOKHRoaXMuVGVnKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8v0L/QvtC40YHQuijQvtGC0LrRgNGL0YLQuNC1KSDQvtCx0YrQtdC60YLQsCDQv9C+INC60LvQsNGB0YHRgyDQuCDQvtC00LjQvdC+0YfQutC1XG4gICAgLy9zdGF0aWMgY3MuU2luZ2xlINCy0YHQtdCz0LTQsCDQv9GA0LjQstGP0LfQsNC9INC6INGD0L3QuNC60LDQu9GM0L3QvtC80YMgY3Mg0LrQu9Cw0YHRgdGDLCDQutC+0YLQvtGA0YvQuSDRgdC+0LfQtNCw0ZHRgiDRgtC+0LvRjNC60L4g0L7QtNC40L0g0Y3QutC30LXQvNC/0LvRj9GAXG4gICAgc3RhdGljIHNob3coQVJHUykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGxldCBjcyA9IHR5cGVvZiAoQVJHUy5jcykgPT0gJ3N0cmluZycgPyBldmFsKEFSR1MuY3MpIDogQVJHUy5jcztcbiAgICAgICAgaWYgKCgoX2EgPSBjcy5TaW5nbGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5UZWcpID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY3MuU2luZ2xlID0gbmV3IGNzKEFSR1MpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy/QstGL0L/QvtC70L3QtdC90LjQtSDRgdC60YDRi9GC0L3QviDRh9C10YDQtdC3INC40L3RgtC10YDRhNC10LnRgVxuICAgICAgICAgICAgY3MuU2luZ2xlLnNob3codW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgc2hvd19pZChBUkdTKSB7XG4gICAgICAgIGxldCB0SUQgPSAkKCcuaWQnICsgQVJHUy5pZCk7XG4gICAgICAgIHJldHVybiB0SUQubGVuZ3RoID09IDAgPyBuZXcgQVJHUy5jcyhBUkdTKSA6IHRJRC5kYXRhKCdPQkonKS5zaG93KHVuZGVmaW5lZCk7XG4gICAgfVxufTtcblRlZ19zaG93ID0gX19kZWNvcmF0ZShbXG4gICAgaW5qZWN0YWJsZSgpXG5dLCBUZWdfc2hvdyk7XG5leHBvcnQgeyBUZWdfc2hvdyB9O1xuLy/QvdCw0LnRgtC4INGE0LDQudC7XG4vL2JvNTIuZlsyMzAzMjUxNzU0XSA9IChBUkdTKSA9PiBUZWdfZmluZF9zaG93LnNob3coQVJHUylcbiIsImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0J1ZmZlcihhcmcpIHtcbiAgcmV0dXJuIGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0J1xuICAgICYmIHR5cGVvZiBhcmcuY29weSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcuZmlsbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcucmVhZFVJbnQ4ID09PSAnZnVuY3Rpb24nO1xufSIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIHx8XG4gIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIHZhciBkZXNjcmlwdG9ycyA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgZGVzY3JpcHRvcnNba2V5c1tpXV0gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5c1tpXSk7XG4gICAgfVxuICAgIHJldHVybiBkZXNjcmlwdG9ycztcbiAgfTtcblxudmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7XG5leHBvcnRzLmZvcm1hdCA9IGZ1bmN0aW9uKGYpIHtcbiAgaWYgKCFpc1N0cmluZyhmKSkge1xuICAgIHZhciBvYmplY3RzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIG9iamVjdHMucHVzaChpbnNwZWN0KGFyZ3VtZW50c1tpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0cy5qb2luKCcgJyk7XG4gIH1cblxuICB2YXIgaSA9IDE7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBzdHIgPSBTdHJpbmcoZikucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uKHgpIHtcbiAgICBpZiAoeCA9PT0gJyUlJykgcmV0dXJuICclJztcbiAgICBpZiAoaSA+PSBsZW4pIHJldHVybiB4O1xuICAgIHN3aXRjaCAoeCkge1xuICAgICAgY2FzZSAnJXMnOiByZXR1cm4gU3RyaW5nKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclZCc6IHJldHVybiBOdW1iZXIoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVqJzpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnc1tpKytdKTtcbiAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gICAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB4O1xuICAgIH1cbiAgfSk7XG4gIGZvciAodmFyIHggPSBhcmdzW2ldOyBpIDwgbGVuOyB4ID0gYXJnc1srK2ldKSB7XG4gICAgaWYgKGlzTnVsbCh4KSB8fCAhaXNPYmplY3QoeCkpIHtcbiAgICAgIHN0ciArPSAnICcgKyB4O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgKz0gJyAnICsgaW5zcGVjdCh4KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn07XG5cblxuLy8gTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cbi8vIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXG4vLyBJZiAtLW5vLWRlcHJlY2F0aW9uIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuZXhwb3J0cy5kZXByZWNhdGUgPSBmdW5jdGlvbihmbiwgbXNnKSB7XG4gIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5ub0RlcHJlY2F0aW9uID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgLy8gQWxsb3cgZm9yIGRlcHJlY2F0aW5nIHRoaW5ncyBpbiB0aGUgcHJvY2VzcyBvZiBzdGFydGluZyB1cC5cbiAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmRlcHJlY2F0ZShmbiwgbXNnKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIGlmIChwcm9jZXNzLnRocm93RGVwcmVjYXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MudHJhY2VEZXByZWNhdGlvbikge1xuICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1zZyk7XG4gICAgICB9XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBkZXByZWNhdGVkO1xufTtcblxuXG52YXIgZGVidWdzID0ge307XG52YXIgZGVidWdFbnZpcm9uO1xuZXhwb3J0cy5kZWJ1Z2xvZyA9IGZ1bmN0aW9uKHNldCkge1xuICBpZiAoaXNVbmRlZmluZWQoZGVidWdFbnZpcm9uKSlcbiAgICBkZWJ1Z0Vudmlyb24gPSBwcm9jZXNzLmVudi5OT0RFX0RFQlVHIHx8ICcnO1xuICBzZXQgPSBzZXQudG9VcHBlckNhc2UoKTtcbiAgaWYgKCFkZWJ1Z3Nbc2V0XSkge1xuICAgIGlmIChuZXcgUmVnRXhwKCdcXFxcYicgKyBzZXQgKyAnXFxcXGInLCAnaScpLnRlc3QoZGVidWdFbnZpcm9uKSkge1xuICAgICAgdmFyIHBpZCA9IHByb2Nlc3MucGlkO1xuICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG1zZyA9IGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJyVzICVkOiAlcycsIHNldCwgcGlkLCBtc2cpO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHt9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVidWdzW3NldF07XG59O1xuXG5cbi8qKlxuICogRWNob3MgdGhlIHZhbHVlIG9mIGEgdmFsdWUuIFRyeXMgdG8gcHJpbnQgdGhlIHZhbHVlIG91dFxuICogaW4gdGhlIGJlc3Qgd2F5IHBvc3NpYmxlIGdpdmVuIHRoZSBkaWZmZXJlbnQgdHlwZXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHByaW50IG91dC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbmFsIG9wdGlvbnMgb2JqZWN0IHRoYXQgYWx0ZXJzIHRoZSBvdXRwdXQuXG4gKi9cbi8qIGxlZ2FjeTogb2JqLCBzaG93SGlkZGVuLCBkZXB0aCwgY29sb3JzKi9cbmZ1bmN0aW9uIGluc3BlY3Qob2JqLCBvcHRzKSB7XG4gIC8vIGRlZmF1bHQgb3B0aW9uc1xuICB2YXIgY3R4ID0ge1xuICAgIHNlZW46IFtdLFxuICAgIHN0eWxpemU6IHN0eWxpemVOb0NvbG9yXG4gIH07XG4gIC8vIGxlZ2FjeS4uLlxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAzKSBjdHguZGVwdGggPSBhcmd1bWVudHNbMl07XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDQpIGN0eC5jb2xvcnMgPSBhcmd1bWVudHNbM107XG4gIGlmIChpc0Jvb2xlYW4ob3B0cykpIHtcbiAgICAvLyBsZWdhY3kuLi5cbiAgICBjdHguc2hvd0hpZGRlbiA9IG9wdHM7XG4gIH0gZWxzZSBpZiAob3B0cykge1xuICAgIC8vIGdvdCBhbiBcIm9wdGlvbnNcIiBvYmplY3RcbiAgICBleHBvcnRzLl9leHRlbmQoY3R4LCBvcHRzKTtcbiAgfVxuICAvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG4gIGlmIChpc1VuZGVmaW5lZChjdHguc2hvd0hpZGRlbikpIGN0eC5zaG93SGlkZGVuID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguZGVwdGgpKSBjdHguZGVwdGggPSAyO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmNvbG9ycykpIGN0eC5jb2xvcnMgPSBmYWxzZTtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jdXN0b21JbnNwZWN0KSkgY3R4LmN1c3RvbUluc3BlY3QgPSB0cnVlO1xuICBpZiAoY3R4LmNvbG9ycykgY3R4LnN0eWxpemUgPSBzdHlsaXplV2l0aENvbG9yO1xuICByZXR1cm4gZm9ybWF0VmFsdWUoY3R4LCBvYmosIGN0eC5kZXB0aCk7XG59XG5leHBvcnRzLmluc3BlY3QgPSBpbnNwZWN0O1xuXG5cbi8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQU5TSV9lc2NhcGVfY29kZSNncmFwaGljc1xuaW5zcGVjdC5jb2xvcnMgPSB7XG4gICdib2xkJyA6IFsxLCAyMl0sXG4gICdpdGFsaWMnIDogWzMsIDIzXSxcbiAgJ3VuZGVybGluZScgOiBbNCwgMjRdLFxuICAnaW52ZXJzZScgOiBbNywgMjddLFxuICAnd2hpdGUnIDogWzM3LCAzOV0sXG4gICdncmV5JyA6IFs5MCwgMzldLFxuICAnYmxhY2snIDogWzMwLCAzOV0sXG4gICdibHVlJyA6IFszNCwgMzldLFxuICAnY3lhbicgOiBbMzYsIDM5XSxcbiAgJ2dyZWVuJyA6IFszMiwgMzldLFxuICAnbWFnZW50YScgOiBbMzUsIDM5XSxcbiAgJ3JlZCcgOiBbMzEsIDM5XSxcbiAgJ3llbGxvdycgOiBbMzMsIDM5XVxufTtcblxuLy8gRG9uJ3QgdXNlICdibHVlJyBub3QgdmlzaWJsZSBvbiBjbWQuZXhlXG5pbnNwZWN0LnN0eWxlcyA9IHtcbiAgJ3NwZWNpYWwnOiAnY3lhbicsXG4gICdudW1iZXInOiAneWVsbG93JyxcbiAgJ2Jvb2xlYW4nOiAneWVsbG93JyxcbiAgJ3VuZGVmaW5lZCc6ICdncmV5JyxcbiAgJ251bGwnOiAnYm9sZCcsXG4gICdzdHJpbmcnOiAnZ3JlZW4nLFxuICAnZGF0ZSc6ICdtYWdlbnRhJyxcbiAgLy8gXCJuYW1lXCI6IGludGVudGlvbmFsbHkgbm90IHN0eWxpbmdcbiAgJ3JlZ2V4cCc6ICdyZWQnXG59O1xuXG5cbmZ1bmN0aW9uIHN0eWxpemVXaXRoQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgdmFyIHN0eWxlID0gaW5zcGVjdC5zdHlsZXNbc3R5bGVUeXBlXTtcblxuICBpZiAoc3R5bGUpIHtcbiAgICByZXR1cm4gJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVswXSArICdtJyArIHN0ciArXG4gICAgICAgICAgICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMV0gKyAnbSc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHN0eWxpemVOb0NvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHJldHVybiBzdHI7XG59XG5cblxuZnVuY3Rpb24gYXJyYXlUb0hhc2goYXJyYXkpIHtcbiAgdmFyIGhhc2ggPSB7fTtcblxuICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uKHZhbCwgaWR4KSB7XG4gICAgaGFzaFt2YWxdID0gdHJ1ZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGhhc2g7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0VmFsdWUoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzKSB7XG4gIC8vIFByb3ZpZGUgYSBob29rIGZvciB1c2VyLXNwZWNpZmllZCBpbnNwZWN0IGZ1bmN0aW9ucy5cbiAgLy8gQ2hlY2sgdGhhdCB2YWx1ZSBpcyBhbiBvYmplY3Qgd2l0aCBhbiBpbnNwZWN0IGZ1bmN0aW9uIG9uIGl0XG4gIGlmIChjdHguY3VzdG9tSW5zcGVjdCAmJlxuICAgICAgdmFsdWUgJiZcbiAgICAgIGlzRnVuY3Rpb24odmFsdWUuaW5zcGVjdCkgJiZcbiAgICAgIC8vIEZpbHRlciBvdXQgdGhlIHV0aWwgbW9kdWxlLCBpdCdzIGluc3BlY3QgZnVuY3Rpb24gaXMgc3BlY2lhbFxuICAgICAgdmFsdWUuaW5zcGVjdCAhPT0gZXhwb3J0cy5pbnNwZWN0ICYmXG4gICAgICAvLyBBbHNvIGZpbHRlciBvdXQgYW55IHByb3RvdHlwZSBvYmplY3RzIHVzaW5nIHRoZSBjaXJjdWxhciBjaGVjay5cbiAgICAgICEodmFsdWUuY29uc3RydWN0b3IgJiYgdmFsdWUuY29uc3RydWN0b3IucHJvdG90eXBlID09PSB2YWx1ZSkpIHtcbiAgICB2YXIgcmV0ID0gdmFsdWUuaW5zcGVjdChyZWN1cnNlVGltZXMsIGN0eCk7XG4gICAgaWYgKCFpc1N0cmluZyhyZXQpKSB7XG4gICAgICByZXQgPSBmb3JtYXRWYWx1ZShjdHgsIHJldCwgcmVjdXJzZVRpbWVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8vIFByaW1pdGl2ZSB0eXBlcyBjYW5ub3QgaGF2ZSBwcm9wZXJ0aWVzXG4gIHZhciBwcmltaXRpdmUgPSBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSk7XG4gIGlmIChwcmltaXRpdmUpIHtcbiAgICByZXR1cm4gcHJpbWl0aXZlO1xuICB9XG5cbiAgLy8gTG9vayB1cCB0aGUga2V5cyBvZiB0aGUgb2JqZWN0LlxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcbiAgdmFyIHZpc2libGVLZXlzID0gYXJyYXlUb0hhc2goa2V5cyk7XG5cbiAgaWYgKGN0eC5zaG93SGlkZGVuKSB7XG4gICAga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHZhbHVlKTtcbiAgfVxuXG4gIC8vIElFIGRvZXNuJ3QgbWFrZSBlcnJvciBmaWVsZHMgbm9uLWVudW1lcmFibGVcbiAgLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2R3dzUyc2J0KHY9dnMuOTQpLmFzcHhcbiAgaWYgKGlzRXJyb3IodmFsdWUpXG4gICAgICAmJiAoa2V5cy5pbmRleE9mKCdtZXNzYWdlJykgPj0gMCB8fCBrZXlzLmluZGV4T2YoJ2Rlc2NyaXB0aW9uJykgPj0gMCkpIHtcbiAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgLy8gU29tZSB0eXBlIG9mIG9iamVjdCB3aXRob3V0IHByb3BlcnRpZXMgY2FuIGJlIHNob3J0Y3V0dGVkLlxuICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcbiAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgIHZhciBuYW1lID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tGdW5jdGlvbicgKyBuYW1lICsgJ10nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH1cbiAgICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAnZGF0ZScpO1xuICAgIH1cbiAgICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGJhc2UgPSAnJywgYXJyYXkgPSBmYWxzZSwgYnJhY2VzID0gWyd7JywgJ30nXTtcblxuICAvLyBNYWtlIEFycmF5IHNheSB0aGF0IHRoZXkgYXJlIEFycmF5XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIGFycmF5ID0gdHJ1ZTtcbiAgICBicmFjZXMgPSBbJ1snLCAnXSddO1xuICB9XG5cbiAgLy8gTWFrZSBmdW5jdGlvbnMgc2F5IHRoYXQgdGhleSBhcmUgZnVuY3Rpb25zXG4gIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgIHZhciBuID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG4gICAgYmFzZSA9ICcgW0Z1bmN0aW9uJyArIG4gKyAnXSc7XG4gIH1cblxuICAvLyBNYWtlIFJlZ0V4cHMgc2F5IHRoYXQgdGhleSBhcmUgUmVnRXhwc1xuICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICAvLyBNYWtlIGRhdGVzIHdpdGggcHJvcGVydGllcyBmaXJzdCBzYXkgdGhlIGRhdGVcbiAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgRGF0ZS5wcm90b3R5cGUudG9VVENTdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICAvLyBNYWtlIGVycm9yIHdpdGggbWVzc2FnZSBmaXJzdCBzYXkgdGhlIGVycm9yXG4gIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gIH1cblxuICBpZiAoa2V5cy5sZW5ndGggPT09IDAgJiYgKCFhcnJheSB8fCB2YWx1ZS5sZW5ndGggPT0gMCkpIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArIGJyYWNlc1sxXTtcbiAgfVxuXG4gIGlmIChyZWN1cnNlVGltZXMgPCAwKSB7XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbT2JqZWN0XScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG5cbiAgY3R4LnNlZW4ucHVzaCh2YWx1ZSk7XG5cbiAgdmFyIG91dHB1dDtcbiAgaWYgKGFycmF5KSB7XG4gICAgb3V0cHV0ID0gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cyk7XG4gIH0gZWxzZSB7XG4gICAgb3V0cHV0ID0ga2V5cy5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSk7XG4gICAgfSk7XG4gIH1cblxuICBjdHguc2Vlbi5wb3AoKTtcblxuICByZXR1cm4gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKSB7XG4gIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCd1bmRlZmluZWQnLCAndW5kZWZpbmVkJyk7XG4gIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICB2YXIgc2ltcGxlID0gJ1xcJycgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkucmVwbGFjZSgvXlwifFwiJC9nLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJykgKyAnXFwnJztcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoc2ltcGxlLCAnc3RyaW5nJyk7XG4gIH1cbiAgaWYgKGlzTnVtYmVyKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ251bWJlcicpO1xuICBpZiAoaXNCb29sZWFuKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ2Jvb2xlYW4nKTtcbiAgLy8gRm9yIHNvbWUgcmVhc29uIHR5cGVvZiBudWxsIGlzIFwib2JqZWN0XCIsIHNvIHNwZWNpYWwgY2FzZSBoZXJlLlxuICBpZiAoaXNOdWxsKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ251bGwnLCAnbnVsbCcpO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEVycm9yKHZhbHVlKSB7XG4gIHJldHVybiAnWycgKyBFcnJvci5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgKyAnXSc7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cykge1xuICB2YXIgb3V0cHV0ID0gW107XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5KHZhbHVlLCBTdHJpbmcoaSkpKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIFN0cmluZyhpKSwgdHJ1ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXQucHVzaCgnJyk7XG4gICAgfVxuICB9XG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoIWtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG4gICAgICAgICAga2V5LCB0cnVlKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KSB7XG4gIHZhciBuYW1lLCBzdHIsIGRlc2M7XG4gIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZhbHVlLCBrZXkpIHx8IHsgdmFsdWU6IHZhbHVlW2tleV0gfTtcbiAgaWYgKGRlc2MuZ2V0KSB7XG4gICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlci9TZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuICBpZiAoIWhhc093blByb3BlcnR5KHZpc2libGVLZXlzLCBrZXkpKSB7XG4gICAgbmFtZSA9ICdbJyArIGtleSArICddJztcbiAgfVxuICBpZiAoIXN0cikge1xuICAgIGlmIChjdHguc2Vlbi5pbmRleE9mKGRlc2MudmFsdWUpIDwgMCkge1xuICAgICAgaWYgKGlzTnVsbChyZWN1cnNlVGltZXMpKSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIHJlY3Vyc2VUaW1lcyAtIDEpO1xuICAgICAgfVxuICAgICAgaWYgKHN0ci5pbmRleE9mKCdcXG4nKSA+IC0xKSB7XG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIHN0ciA9IHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKS5zdWJzdHIoMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyID0gJ1xcbicgKyBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbQ2lyY3VsYXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzVW5kZWZpbmVkKG5hbWUpKSB7XG4gICAgaWYgKGFycmF5ICYmIGtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIG5hbWUgPSBKU09OLnN0cmluZ2lmeSgnJyArIGtleSk7XG4gICAgaWYgKG5hbWUubWF0Y2goL15cIihbYS16QS1aX11bYS16QS1aXzAtOV0qKVwiJC8pKSB7XG4gICAgICBuYW1lID0gbmFtZS5zdWJzdHIoMSwgbmFtZS5sZW5ndGggLSAyKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnbmFtZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvKF5cInxcIiQpL2csIFwiJ1wiKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnc3RyaW5nJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5hbWUgKyAnOiAnICsgc3RyO1xufVxuXG5cbmZ1bmN0aW9uIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKSB7XG4gIHZhciBudW1MaW5lc0VzdCA9IDA7XG4gIHZhciBsZW5ndGggPSBvdXRwdXQucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGN1cikge1xuICAgIG51bUxpbmVzRXN0Kys7XG4gICAgaWYgKGN1ci5pbmRleE9mKCdcXG4nKSA+PSAwKSBudW1MaW5lc0VzdCsrO1xuICAgIHJldHVybiBwcmV2ICsgY3VyLnJlcGxhY2UoL1xcdTAwMWJcXFtcXGRcXGQ/bS9nLCAnJykubGVuZ3RoICsgMTtcbiAgfSwgMCk7XG5cbiAgaWYgKGxlbmd0aCA+IDYwKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArXG4gICAgICAgICAgIChiYXNlID09PSAnJyA/ICcnIDogYmFzZSArICdcXG4gJykgK1xuICAgICAgICAgICAnICcgK1xuICAgICAgICAgICBvdXRwdXQuam9pbignLFxcbiAgJykgK1xuICAgICAgICAgICAnICcgK1xuICAgICAgICAgICBicmFjZXNbMV07XG4gIH1cblxuICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArICcgJyArIG91dHB1dC5qb2luKCcsICcpICsgJyAnICsgYnJhY2VzWzFdO1xufVxuXG5cbi8vIE5PVEU6IFRoZXNlIHR5cGUgY2hlY2tpbmcgZnVuY3Rpb25zIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIGBpbnN0YW5jZW9mYFxuLy8gYmVjYXVzZSBpdCBpcyBmcmFnaWxlIGFuZCBjYW4gYmUgZWFzaWx5IGZha2VkIHdpdGggYE9iamVjdC5jcmVhdGUoKWAuXG5mdW5jdGlvbiBpc0FycmF5KGFyKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGFyKTtcbn1cbmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJztcbn1cbmV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuO1xuXG5mdW5jdGlvbiBpc051bGwoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbCA9IGlzTnVsbDtcblxuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsT3JVbmRlZmluZWQgPSBpc051bGxPclVuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcblxuZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcbn1cbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcblxuZnVuY3Rpb24gaXNTeW1ib2woYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3ltYm9sJztcbn1cbmV4cG9ydHMuaXNTeW1ib2wgPSBpc1N5bWJvbDtcblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbmV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNSZWdFeHAocmUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHJlKSAmJiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcblxuZnVuY3Rpb24gaXNEYXRlKGQpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGQpICYmIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5leHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcblxuZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiBpc09iamVjdChlKSAmJlxuICAgICAgKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7XG59XG5leHBvcnRzLmlzRXJyb3IgPSBpc0Vycm9yO1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcgfHwgIC8vIEVTNiBzeW1ib2xcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xufVxuZXhwb3J0cy5pc1ByaW1pdGl2ZSA9IGlzUHJpbWl0aXZlO1xuXG5leHBvcnRzLmlzQnVmZmVyID0gcmVxdWlyZSgnLi9zdXBwb3J0L2lzQnVmZmVyJyk7XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cblxuXG5mdW5jdGlvbiBwYWQobikge1xuICByZXR1cm4gbiA8IDEwID8gJzAnICsgbi50b1N0cmluZygxMCkgOiBuLnRvU3RyaW5nKDEwKTtcbn1cblxuXG52YXIgbW9udGhzID0gWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsXG4gICAgICAgICAgICAgICdPY3QnLCAnTm92JywgJ0RlYyddO1xuXG4vLyAyNiBGZWIgMTY6MTk6MzRcbmZ1bmN0aW9uIHRpbWVzdGFtcCgpIHtcbiAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xuICB2YXIgdGltZSA9IFtwYWQoZC5nZXRIb3VycygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0TWludXRlcygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0U2Vjb25kcygpKV0uam9pbignOicpO1xuICByZXR1cm4gW2QuZ2V0RGF0ZSgpLCBtb250aHNbZC5nZXRNb250aCgpXSwgdGltZV0uam9pbignICcpO1xufVxuXG5cbi8vIGxvZyBpcyBqdXN0IGEgdGhpbiB3cmFwcGVyIHRvIGNvbnNvbGUubG9nIHRoYXQgcHJlcGVuZHMgYSB0aW1lc3RhbXBcbmV4cG9ydHMubG9nID0gZnVuY3Rpb24oKSB7XG4gIGNvbnNvbGUubG9nKCclcyAtICVzJywgdGltZXN0YW1wKCksIGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cykpO1xufTtcblxuXG4vKipcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlci5cbiAqXG4gKiBUaGUgRnVuY3Rpb24ucHJvdG90eXBlLmluaGVyaXRzIGZyb20gbGFuZy5qcyByZXdyaXR0ZW4gYXMgYSBzdGFuZGFsb25lXG4gKiBmdW5jdGlvbiAobm90IG9uIEZ1bmN0aW9uLnByb3RvdHlwZSkuIE5PVEU6IElmIHRoaXMgZmlsZSBpcyB0byBiZSBsb2FkZWRcbiAqIGR1cmluZyBib290c3RyYXBwaW5nIHRoaXMgZnVuY3Rpb24gbmVlZHMgdG8gYmUgcmV3cml0dGVuIHVzaW5nIHNvbWUgbmF0aXZlXG4gKiBmdW5jdGlvbnMgYXMgcHJvdG90eXBlIHNldHVwIHVzaW5nIG5vcm1hbCBKYXZhU2NyaXB0IGRvZXMgbm90IHdvcmsgYXNcbiAqIGV4cGVjdGVkIGR1cmluZyBib290c3RyYXBwaW5nIChzZWUgbWlycm9yLmpzIGluIHIxMTQ5MDMpLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gd2hpY2ggbmVlZHMgdG8gaW5oZXJpdCB0aGVcbiAqICAgICBwcm90b3R5cGUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gdG8gaW5oZXJpdCBwcm90b3R5cGUgZnJvbS5cbiAqL1xuZXhwb3J0cy5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmV4cG9ydHMuX2V4dGVuZCA9IGZ1bmN0aW9uKG9yaWdpbiwgYWRkKSB7XG4gIC8vIERvbid0IGRvIGFueXRoaW5nIGlmIGFkZCBpc24ndCBhbiBvYmplY3RcbiAgaWYgKCFhZGQgfHwgIWlzT2JqZWN0KGFkZCkpIHJldHVybiBvcmlnaW47XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhZGQpO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgb3JpZ2luW2tleXNbaV1dID0gYWRkW2tleXNbaV1dO1xuICB9XG4gIHJldHVybiBvcmlnaW47XG59O1xuXG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuXG52YXIga0N1c3RvbVByb21pc2lmaWVkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgPyBTeW1ib2woJ3V0aWwucHJvbWlzaWZ5LmN1c3RvbScpIDogdW5kZWZpbmVkO1xuXG5leHBvcnRzLnByb21pc2lmeSA9IGZ1bmN0aW9uIHByb21pc2lmeShvcmlnaW5hbCkge1xuICBpZiAodHlwZW9mIG9yaWdpbmFsICE9PSAnZnVuY3Rpb24nKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcIm9yaWdpbmFsXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uJyk7XG5cbiAgaWYgKGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCAmJiBvcmlnaW5hbFtrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2xdKSB7XG4gICAgdmFyIGZuID0gb3JpZ2luYWxba0N1c3RvbVByb21pc2lmaWVkU3ltYm9sXTtcbiAgICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJ1dGlsLnByb21pc2lmeS5jdXN0b21cIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24nKTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wsIHtcbiAgICAgIHZhbHVlOiBmbiwgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiBmYWxzZSwgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgZnVuY3Rpb24gZm4oKSB7XG4gICAgdmFyIHByb21pc2VSZXNvbHZlLCBwcm9taXNlUmVqZWN0O1xuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcHJvbWlzZVJlc29sdmUgPSByZXNvbHZlO1xuICAgICAgcHJvbWlzZVJlamVjdCA9IHJlamVjdDtcbiAgICB9KTtcblxuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICAgIH1cbiAgICBhcmdzLnB1c2goZnVuY3Rpb24gKGVyciwgdmFsdWUpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcHJvbWlzZVJlamVjdChlcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvbWlzZVJlc29sdmUodmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdHJ5IHtcbiAgICAgIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcHJvbWlzZVJlamVjdChlcnIpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGZuLCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob3JpZ2luYWwpKTtcblxuICBpZiAoa0N1c3RvbVByb21pc2lmaWVkU3ltYm9sKSBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCwge1xuICAgIHZhbHVlOiBmbiwgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiBmYWxzZSwgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoXG4gICAgZm4sXG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvcmlnaW5hbClcbiAgKTtcbn1cblxuZXhwb3J0cy5wcm9taXNpZnkuY3VzdG9tID0ga0N1c3RvbVByb21pc2lmaWVkU3ltYm9sXG5cbmZ1bmN0aW9uIGNhbGxiYWNraWZ5T25SZWplY3RlZChyZWFzb24sIGNiKSB7XG4gIC8vIGAhcmVhc29uYCBndWFyZCBpbnNwaXJlZCBieSBibHVlYmlyZCAoUmVmOiBodHRwczovL2dvby5nbC90NUlTNk0pLlxuICAvLyBCZWNhdXNlIGBudWxsYCBpcyBhIHNwZWNpYWwgZXJyb3IgdmFsdWUgaW4gY2FsbGJhY2tzIHdoaWNoIG1lYW5zIFwibm8gZXJyb3JcbiAgLy8gb2NjdXJyZWRcIiwgd2UgZXJyb3Itd3JhcCBzbyB0aGUgY2FsbGJhY2sgY29uc3VtZXIgY2FuIGRpc3Rpbmd1aXNoIGJldHdlZW5cbiAgLy8gXCJ0aGUgcHJvbWlzZSByZWplY3RlZCB3aXRoIG51bGxcIiBvciBcInRoZSBwcm9taXNlIGZ1bGZpbGxlZCB3aXRoIHVuZGVmaW5lZFwiLlxuICBpZiAoIXJlYXNvbikge1xuICAgIHZhciBuZXdSZWFzb24gPSBuZXcgRXJyb3IoJ1Byb21pc2Ugd2FzIHJlamVjdGVkIHdpdGggYSBmYWxzeSB2YWx1ZScpO1xuICAgIG5ld1JlYXNvbi5yZWFzb24gPSByZWFzb247XG4gICAgcmVhc29uID0gbmV3UmVhc29uO1xuICB9XG4gIHJldHVybiBjYihyZWFzb24pO1xufVxuXG5mdW5jdGlvbiBjYWxsYmFja2lmeShvcmlnaW5hbCkge1xuICBpZiAodHlwZW9mIG9yaWdpbmFsICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwib3JpZ2luYWxcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24nKTtcbiAgfVxuXG4gIC8vIFdlIERPIE5PVCByZXR1cm4gdGhlIHByb21pc2UgYXMgaXQgZ2l2ZXMgdGhlIHVzZXIgYSBmYWxzZSBzZW5zZSB0aGF0XG4gIC8vIHRoZSBwcm9taXNlIGlzIGFjdHVhbGx5IHNvbWVob3cgcmVsYXRlZCB0byB0aGUgY2FsbGJhY2sncyBleGVjdXRpb25cbiAgLy8gYW5kIHRoYXQgdGhlIGNhbGxiYWNrIHRocm93aW5nIHdpbGwgcmVqZWN0IHRoZSBwcm9taXNlLlxuICBmdW5jdGlvbiBjYWxsYmFja2lmaWVkKCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICAgIH1cblxuICAgIHZhciBtYXliZUNiID0gYXJncy5wb3AoKTtcbiAgICBpZiAodHlwZW9mIG1heWJlQ2IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBsYXN0IGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbicpO1xuICAgIH1cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGNiID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbWF5YmVDYi5hcHBseShzZWxmLCBhcmd1bWVudHMpO1xuICAgIH07XG4gICAgLy8gSW4gdHJ1ZSBub2RlIHN0eWxlIHdlIHByb2Nlc3MgdGhlIGNhbGxiYWNrIG9uIGBuZXh0VGlja2Agd2l0aCBhbGwgdGhlXG4gICAgLy8gaW1wbGljYXRpb25zIChzdGFjaywgYHVuY2F1Z2h0RXhjZXB0aW9uYCwgYGFzeW5jX2hvb2tzYClcbiAgICBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKVxuICAgICAgLnRoZW4oZnVuY3Rpb24ocmV0KSB7IHByb2Nlc3MubmV4dFRpY2soY2IsIG51bGwsIHJldCkgfSxcbiAgICAgICAgICAgIGZ1bmN0aW9uKHJlaikgeyBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNraWZ5T25SZWplY3RlZCwgcmVqLCBjYikgfSk7XG4gIH1cblxuICBPYmplY3Quc2V0UHJvdG90eXBlT2YoY2FsbGJhY2tpZmllZCwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG9yaWdpbmFsKSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGNhbGxiYWNraWZpZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob3JpZ2luYWwpKTtcbiAgcmV0dXJuIGNhbGxiYWNraWZpZWQ7XG59XG5leHBvcnRzLmNhbGxiYWNraWZ5ID0gY2FsbGJhY2tpZnk7XG4iLCJmdW5jdGlvbiB3ZWJwYWNrRW1wdHlDb250ZXh0KHJlcSkge1xuXHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0dGhyb3cgZTtcbn1cbndlYnBhY2tFbXB0eUNvbnRleHQua2V5cyA9ICgpID0+IChbXSk7XG53ZWJwYWNrRW1wdHlDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrRW1wdHlDb250ZXh0O1xud2VicGFja0VtcHR5Q29udGV4dC5pZCA9IDUxMztcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0VtcHR5Q29udGV4dDsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MTMpO1xuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsIiQiLCJ1aSIsInZlcnNpb24iLCJvcmlnIiwiZXZlbnRUeXBlIiwid2lkZ2V0VXVpZCIsIndpZGdldFNsaWNlIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImNsZWFuRGF0YSIsImVsZW1zIiwiZXZlbnRzIiwiZWxlbSIsIl9kYXRhIiwicmVtb3ZlIiwidHJpZ2dlckhhbmRsZXIiLCJlIiwid2lkZ2V0IiwibmFtZSIsImJhc2UiLCJleGlzdGluZ0NvbnN0cnVjdG9yIiwiY29uc3RydWN0b3IiLCJiYXNlUHJvdG90eXBlIiwicHJveGllZFByb3RvdHlwZSIsIm5hbWVzcGFjZSIsInNwbGl0IiwiZnVsbE5hbWUiLCJXaWRnZXQiLCJpc0FycmF5IiwiZXh0ZW5kIiwiYXBwbHkiLCJleHByIiwicHNldWRvcyIsInRvTG93ZXJDYXNlIiwib3B0aW9ucyIsImVsZW1lbnQiLCJfY3JlYXRlV2lkZ2V0IiwiYXJndW1lbnRzIiwiX3Byb3RvIiwiX2NoaWxkQ29uc3RydWN0b3JzIiwiZWFjaCIsInByb3AiLCJ2YWx1ZSIsImlzRnVuY3Rpb24iLCJfc3VwZXIiLCJfc3VwZXJBcHBseSIsImFyZ3MiLCJyZXR1cm5WYWx1ZSIsIl9fc3VwZXIiLCJfX3N1cGVyQXBwbHkiLCJ3aWRnZXRFdmVudFByZWZpeCIsIndpZGdldE5hbWUiLCJ3aWRnZXRGdWxsTmFtZSIsImNoaWxkIiwiY2hpbGRQcm90b3R5cGUiLCJicmlkZ2UiLCJ0YXJnZXQiLCJrZXkiLCJpbnB1dCIsImNhbGwiLCJpbnB1dEluZGV4IiwiaW5wdXRMZW5ndGgiLCJoYXNPd25Qcm9wZXJ0eSIsImlzUGxhaW5PYmplY3QiLCJvYmplY3QiLCJmbiIsImlzTWV0aG9kQ2FsbCIsIm1ldGhvZFZhbHVlIiwiaW5zdGFuY2UiLCJjaGFyQXQiLCJqcXVlcnkiLCJwdXNoU3RhY2siLCJnZXQiLCJlcnJvciIsIm9wdGlvbiIsIl9pbml0IiwiZGVmYXVsdEVsZW1lbnQiLCJjbGFzc2VzIiwiZGlzYWJsZWQiLCJjcmVhdGUiLCJ1dWlkIiwiZXZlbnROYW1lc3BhY2UiLCJiaW5kaW5ncyIsImhvdmVyYWJsZSIsImZvY3VzYWJsZSIsImNsYXNzZXNFbGVtZW50TG9va3VwIiwiX29uIiwiZXZlbnQiLCJkZXN0cm95IiwiZG9jdW1lbnQiLCJzdHlsZSIsIm93bmVyRG9jdW1lbnQiLCJ3aW5kb3ciLCJkZWZhdWx0VmlldyIsInBhcmVudFdpbmRvdyIsIl9nZXRDcmVhdGVPcHRpb25zIiwiX2NyZWF0ZSIsIl9zZXRPcHRpb25EaXNhYmxlZCIsIl90cmlnZ2VyIiwiX2dldENyZWF0ZUV2ZW50RGF0YSIsIm5vb3AiLCJ0aGF0IiwiX2Rlc3Ryb3kiLCJfcmVtb3ZlQ2xhc3MiLCJvZmYiLCJyZW1vdmVEYXRhIiwicmVtb3ZlQXR0ciIsInBhcnRzIiwiY3VyT3B0aW9uIiwic2hpZnQiLCJwb3AiLCJfc2V0T3B0aW9ucyIsIl9zZXRPcHRpb24iLCJfc2V0T3B0aW9uQ2xhc3NlcyIsImNsYXNzS2V5IiwiZWxlbWVudHMiLCJjdXJyZW50RWxlbWVudHMiLCJhZGRDbGFzcyIsIl9jbGFzc2VzIiwia2V5cyIsImFkZCIsIl90b2dnbGVDbGFzcyIsImVuYWJsZSIsImRpc2FibGUiLCJmdWxsIiwicHJvY2Vzc0NsYXNzU3RyaW5nIiwiY2hlY2tPcHRpb24iLCJjdXJyZW50IiwidW5pcXVlU29ydCIsIm5vdCIsIm1hdGNoIiwiZXh0cmEiLCJfdW50cmFja0NsYXNzZXNFbGVtZW50IiwiaW5BcnJheSIsIl9hZGRDbGFzcyIsInRvZ2dsZUNsYXNzIiwic3VwcHJlc3NEaXNhYmxlZENoZWNrIiwiaGFuZGxlcnMiLCJkZWxlZ2F0ZUVsZW1lbnQiLCJoYW5kbGVyIiwiaGFuZGxlclByb3h5IiwiaGFzQ2xhc3MiLCJndWlkIiwiZXZlbnROYW1lIiwic2VsZWN0b3IiLCJvbiIsIl9vZmYiLCJfZGVsYXkiLCJkZWxheSIsInNldFRpbWVvdXQiLCJfaG92ZXJhYmxlIiwibW91c2VlbnRlciIsImN1cnJlbnRUYXJnZXQiLCJtb3VzZWxlYXZlIiwiX2ZvY3VzYWJsZSIsImZvY3VzaW4iLCJmb2N1c291dCIsInR5cGUiLCJjYWxsYmFjayIsIkV2ZW50Iiwib3JpZ2luYWxFdmVudCIsInRyaWdnZXIiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJzaG93IiwiaGlkZSIsIm1ldGhvZCIsImRlZmF1bHRFZmZlY3QiLCJoYXNPcHRpb25zIiwiZWZmZWN0IiwiZWZmZWN0TmFtZSIsImR1cmF0aW9uIiwiaXNFbXB0eU9iamVjdCIsImNvbXBsZXRlIiwiZWZmZWN0cyIsImVhc2luZyIsInF1ZXVlIiwibmV4dCIsImNhY2hlZFNjcm9sbGJhcldpZHRoIiwibWF4IiwiTWF0aCIsImFicyIsInJob3Jpem9udGFsIiwicnZlcnRpY2FsIiwicm9mZnNldCIsInJwb3NpdGlvbiIsInJwZXJjZW50IiwiX3Bvc2l0aW9uIiwicG9zaXRpb24iLCJnZXRPZmZzZXRzIiwib2Zmc2V0cyIsIndpZHRoIiwiaGVpZ2h0IiwicGFyc2VGbG9hdCIsInRlc3QiLCJwYXJzZUNzcyIsInByb3BlcnR5IiwicGFyc2VJbnQiLCJjc3MiLCJzY3JvbGxiYXJXaWR0aCIsIncxIiwidzIiLCJkaXYiLCJpbm5lckRpdiIsImNoaWxkcmVuIiwiYXBwZW5kIiwib2Zmc2V0V2lkdGgiLCJjbGllbnRXaWR0aCIsImdldFNjcm9sbEluZm8iLCJ3aXRoaW4iLCJvdmVyZmxvd1giLCJpc1dpbmRvdyIsImlzRG9jdW1lbnQiLCJvdmVyZmxvd1kiLCJoYXNPdmVyZmxvd1giLCJzY3JvbGxXaWR0aCIsInNjcm9sbEhlaWdodCIsImdldFdpdGhpbkluZm8iLCJ3aXRoaW5FbGVtZW50Iiwibm9kZVR5cGUiLCJvZmZzZXQiLCJsZWZ0IiwidG9wIiwic2Nyb2xsTGVmdCIsInNjcm9sbFRvcCIsIm91dGVyV2lkdGgiLCJvdXRlckhlaWdodCIsIm9mIiwiYXRPZmZzZXQiLCJ0YXJnZXRXaWR0aCIsInRhcmdldEhlaWdodCIsInRhcmdldE9mZnNldCIsImJhc2VQb3NpdGlvbiIsImRpbWVuc2lvbnMiLCJyYXciLCJzY3JvbGxJbmZvIiwiY29sbGlzaW9uIiwicHJldmVudERlZmF1bHQiLCJwYWdlWSIsInBhZ2VYIiwiYXQiLCJob3Jpem9udGFsT2Zmc2V0IiwidmVydGljYWxPZmZzZXQiLCJwb3MiLCJleGVjIiwiY29sbGlzaW9uUG9zaXRpb24iLCJ1c2luZyIsImVsZW1XaWR0aCIsImVsZW1IZWlnaHQiLCJtYXJnaW5MZWZ0IiwibWFyZ2luVG9wIiwiY29sbGlzaW9uV2lkdGgiLCJjb2xsaXNpb25IZWlnaHQiLCJteU9mZnNldCIsIm15IiwiZGlyIiwicHJvcHMiLCJyaWdodCIsImJvdHRvbSIsImZlZWRiYWNrIiwiaG9yaXpvbnRhbCIsInZlcnRpY2FsIiwiaW1wb3J0YW50IiwiZml0IiwibmV3T3ZlclJpZ2h0Iiwid2l0aGluT2Zmc2V0IiwiY29sbGlzaW9uUG9zTGVmdCIsIm92ZXJMZWZ0Iiwib3ZlclJpZ2h0IiwibmV3T3ZlckJvdHRvbSIsImNvbGxpc2lvblBvc1RvcCIsIm92ZXJUb3AiLCJvdmVyQm90dG9tIiwiZmxpcCIsIm5ld092ZXJMZWZ0Iiwib2Zmc2V0TGVmdCIsIm5ld092ZXJUb3AiLCJvZmZzZXRUb3AiLCJmbGlwZml0IiwiY3JlYXRlUHNldWRvIiwiZGF0YU5hbWUiLCJkaXNhYmxlU2VsZWN0aW9uIiwiY3JlYXRlRWxlbWVudCIsImVuYWJsZVNlbGVjdGlvbiIsImhhc1RhYmluZGV4IiwibWFwTmFtZSIsImltZyIsImZvY3VzYWJsZUlmVmlzaWJsZSIsImZpZWxkc2V0Iiwibm9kZU5hbWUiLCJwYXJlbnROb2RlIiwiaHJlZiIsImlzIiwiY2xvc2VzdCIsInZpc2liaWxpdHkiLCJwYXJlbnQiLCJ2aXNpYmxlIiwiYXR0ciIsImZvcm0iLCJmb3JtUmVzZXRNaXhpbiIsIl9mb3JtUmVzZXRIYW5kbGVyIiwiaW5zdGFuY2VzIiwicmVmcmVzaCIsIl9iaW5kRm9ybVJlc2V0SGFuZGxlciIsIl91bmJpbmRGb3JtUmVzZXRIYW5kbGVyIiwic3BsaWNlIiwic3Vic3RyaW5nIiwic2lkZSIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsInJlZHVjZSIsInNpemUiLCJib3JkZXIiLCJtYXJnaW4iLCJhZGRCYWNrIiwicHJldk9iamVjdCIsImZpbHRlciIsImtleUNvZGUiLCJCQUNLU1BBQ0UiLCJDT01NQSIsIkRFTEVURSIsIkRPV04iLCJFTkQiLCJFTlRFUiIsIkVTQ0FQRSIsIkhPTUUiLCJMRUZUIiwiUEFHRV9ET1dOIiwiUEFHRV9VUCIsIlBFUklPRCIsIlJJR0hUIiwiU1BBQ0UiLCJUQUIiLCJVUCIsImVzY2FwZVNlbGVjdG9yIiwic2VsZWN0b3JFc2NhcGUiLCJyZXBsYWNlIiwibGFiZWxzIiwiYW5jZXN0b3IiLCJhbmNlc3RvcnMiLCJlcSIsInBhcmVudHMiLCJsYXN0Iiwic2libGluZ3MiLCJmaW5kIiwic2Nyb2xsUGFyZW50IiwiaW5jbHVkZUhpZGRlbiIsImV4Y2x1ZGVTdGF0aWNQYXJlbnQiLCJvdmVyZmxvd1JlZ2V4IiwidGFiYmFibGUiLCJ0YWJJbmRleCIsInVuaXF1ZUlkIiwicmVtb3ZlVW5pcXVlSWQiLCJpZSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIm1vdXNlSGFuZGxlZCIsImNhbmNlbCIsImRpc3RhbmNlIiwiX21vdXNlSW5pdCIsIl9tb3VzZURvd24iLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJzdGFydGVkIiwiX21vdXNlRGVzdHJveSIsIl9tb3VzZU1vdmVEZWxlZ2F0ZSIsIl9tb3VzZVVwRGVsZWdhdGUiLCJfbW91c2VNb3ZlZCIsIl9tb3VzZVN0YXJ0ZWQiLCJfbW91c2VVcCIsIl9tb3VzZURvd25FdmVudCIsImJ0bklzTGVmdCIsIndoaWNoIiwiZWxJc0NhbmNlbCIsIl9tb3VzZUNhcHR1cmUiLCJtb3VzZURlbGF5TWV0IiwiX21vdXNlRGVsYXlUaW1lciIsIl9tb3VzZURpc3RhbmNlTWV0IiwiX21vdXNlRGVsYXlNZXQiLCJfbW91c2VTdGFydCIsIl9tb3VzZU1vdmUiLCJkb2N1bWVudE1vZGUiLCJidXR0b24iLCJhbHRLZXkiLCJjdHJsS2V5IiwibWV0YUtleSIsInNoaWZ0S2V5IiwiaWdub3JlTWlzc2luZ1doaWNoIiwiX21vdXNlRHJhZyIsIl9tb3VzZVN0b3AiLCJjbGVhclRpbWVvdXQiLCJwbHVnaW4iLCJzZXQiLCJwcm90byIsInBsdWdpbnMiLCJhbGxvd0Rpc2Nvbm5lY3RlZCIsInNhZmVBY3RpdmVFbGVtZW50IiwiYWN0aXZlRWxlbWVudCIsImJvZHkiLCJzYWZlQmx1ciIsIm1vdXNlIiwiYWRkQ2xhc3NlcyIsImFwcGVuZFRvIiwiYXhpcyIsImNvbm5lY3RUb1NvcnRhYmxlIiwiY29udGFpbm1lbnQiLCJjdXJzb3IiLCJjdXJzb3JBdCIsImdyaWQiLCJoYW5kbGUiLCJoZWxwZXIiLCJpZnJhbWVGaXgiLCJvcGFjaXR5IiwicmVmcmVzaFBvc2l0aW9ucyIsInJldmVydCIsInJldmVydER1cmF0aW9uIiwic2NvcGUiLCJzY3JvbGwiLCJzY3JvbGxTZW5zaXRpdml0eSIsInNjcm9sbFNwZWVkIiwic25hcCIsInNuYXBNb2RlIiwic25hcFRvbGVyYW5jZSIsInN0YWNrIiwiekluZGV4IiwiZHJhZyIsInN0YXJ0Iiwic3RvcCIsIl9zZXRQb3NpdGlvblJlbGF0aXZlIiwiX3NldEhhbmRsZUNsYXNzTmFtZSIsIl9yZW1vdmVIYW5kbGVDbGFzc05hbWUiLCJkZXN0cm95T25DbGVhciIsIm8iLCJfZ2V0SGFuZGxlIiwiX2JsdXJBY3RpdmVFbGVtZW50IiwiX2Jsb2NrRnJhbWVzIiwiaWZyYW1lQmxvY2tzIiwiaWZyYW1lIiwiX3VuYmxvY2tGcmFtZXMiLCJfY3JlYXRlSGVscGVyIiwiX2NhY2hlSGVscGVyUHJvcG9ydGlvbnMiLCJkZG1hbmFnZXIiLCJfY2FjaGVNYXJnaW5zIiwiY3NzUG9zaXRpb24iLCJvZmZzZXRQYXJlbnQiLCJoYXNGaXhlZEFuY2VzdG9yIiwicG9zaXRpb25BYnMiLCJfcmVmcmVzaE9mZnNldHMiLCJvcmlnaW5hbFBvc2l0aW9uIiwiX2dlbmVyYXRlUG9zaXRpb24iLCJvcmlnaW5hbFBhZ2VYIiwib3JpZ2luYWxQYWdlWSIsIl9hZGp1c3RPZmZzZXRGcm9tSGVscGVyIiwiX3NldENvbnRhaW5tZW50IiwiX2NsZWFyIiwiZHJvcEJlaGF2aW91ciIsInByZXBhcmVPZmZzZXRzIiwiZHJhZ1N0YXJ0IiwibWFyZ2lucyIsIl9nZXRQYXJlbnRPZmZzZXQiLCJyZWxhdGl2ZSIsIl9nZXRSZWxhdGl2ZU9mZnNldCIsImNsaWNrIiwibm9Qcm9wYWdhdGlvbiIsIl9jb252ZXJ0UG9zaXRpb25UbyIsIl91aUhhc2giLCJkcm9wcGVkIiwiZHJvcCIsImFuaW1hdGUiLCJkcmFnU3RvcCIsImhhbmRsZUVsZW1lbnQiLCJoZWxwZXJJc0Z1bmN0aW9uIiwiY2xvbmUiLCJvYmoiLCJoZWxwZXJQcm9wb3J0aW9ucyIsIl9pc1Jvb3ROb2RlIiwidGFnTmFtZSIsInBvIiwiY29udGFpbnMiLCJwIiwic2Nyb2xsSXNSb290Tm9kZSIsImlzVXNlclNjcm9sbGFibGUiLCJjIiwiY2UiLCJyZWxhdGl2ZUNvbnRhaW5lciIsIm9mZnNldEhlaWdodCIsImQiLCJtb2QiLCJjb25zdHJhaW5Qb3NpdGlvbiIsImNvIiwicm91bmQiLCJjYW5jZWxIZWxwZXJSZW1vdmFsIiwiZHJhZ2dhYmxlIiwidWlTb3J0YWJsZSIsInNvcnRhYmxlcyIsInNvcnRhYmxlIiwiaXNPdmVyIiwiX3N0b3JlZENTUyIsInBsYWNlaG9sZGVyIiwiX2hlbHBlciIsImlubmVybW9zdEludGVyc2VjdGluZyIsIl9pbnRlcnNlY3RzV2l0aCIsImNvbnRhaW5lckNhY2hlIiwiX3BhcmVudCIsImN1cnJlbnRJdGVtIiwiZnJvbU91dHNpZGUiLCJfcmV2ZXJ0IiwidCIsIl9jdXJzb3IiLCJfb3BhY2l0eSIsInNjcm9sbFBhcmVudE5vdEhpZGRlbiIsIm92ZXJmbG93T2Zmc2V0Iiwic2Nyb2xsZWQiLCJzbmFwRWxlbWVudHMiLCJTdHJpbmciLCJpdGVtcyIsIiR0IiwiJG8iLCJpbnN0IiwidHMiLCJicyIsImxzIiwicnMiLCJsIiwiciIsImIiLCJmaXJzdCIsIngxIiwieDIiLCJ5MSIsInkyIiwic25hcHBpbmciLCJyZWxlYXNlIiwic25hcEl0ZW0iLCJtaW4iLCJncm91cCIsIm1ha2VBcnJheSIsInNvcnQiLCJhIiwiX3pJbmRleCIsImFjY2VwdCIsImdyZWVkeSIsInRvbGVyYW5jZSIsImFjdGl2YXRlIiwiZGVhY3RpdmF0ZSIsIm91dCIsIm92ZXIiLCJwcm9wb3J0aW9ucyIsImlzb3ZlciIsImlzb3V0IiwiX2FkZFRvTWFuYWdlciIsImRyb3BwYWJsZXMiLCJfc3BsaWNlIiwiX2FjdGl2YXRlIiwiX2FkZEFjdGl2ZUNsYXNzIiwiX2RlYWN0aXZhdGUiLCJfcmVtb3ZlQWN0aXZlQ2xhc3MiLCJfb3ZlciIsIl9hZGRIb3ZlckNsYXNzIiwiX291dCIsIl9yZW1vdmVIb3ZlckNsYXNzIiwiX2Ryb3AiLCJjdXN0b20iLCJjaGlsZHJlbkludGVyc2VjdGlvbiIsImRyb3BwYWJsZSIsImludGVyc2VjdCIsImlzT3ZlckF4aXMiLCJ4IiwicmVmZXJlbmNlIiwidG9sZXJhbmNlTW9kZSIsImFic29sdXRlIiwiaiIsIm0iLCJkcm9wcGFibGVzTG9vcCIsInBhcmVudHNVbnRpbCIsImdyZWVkeUNoaWxkIiwicGFyZW50SW5zdGFuY2UiLCJpbnRlcnNlY3RzIiwidWlCYWNrQ29tcGF0IiwiaG92ZXJDbGFzcyIsImFjdGl2ZUNsYXNzIiwicmVtb3ZlQ2xhc3MiLCJhbHNvUmVzaXplIiwiYW5pbWF0ZUR1cmF0aW9uIiwiYW5pbWF0ZUVhc2luZyIsImFzcGVjdFJhdGlvIiwiYXV0b0hpZGUiLCJnaG9zdCIsImhhbmRsZXMiLCJtYXhIZWlnaHQiLCJtYXhXaWR0aCIsIm1pbkhlaWdodCIsIm1pbldpZHRoIiwicmVzaXplIiwiX251bSIsIl9pc051bWJlciIsImlzTmFOIiwiX2hhc1Njcm9sbCIsImVsIiwiaGFzIiwiX2FzcGVjdFJhdGlvIiwib3JpZ2luYWxFbGVtZW50IiwiX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHMiLCJ3cmFwIiwicmVzaXphYmxlIiwiZWxlbWVudElzV3JhcHBlciIsIm1hcmdpblJpZ2h0IiwibWFyZ2luQm90dG9tIiwib3JpZ2luYWxSZXNpemVTdHlsZSIsInpvb20iLCJkaXNwbGF5IiwiX3Byb3BvcnRpb25hbGx5UmVzaXplIiwiX3NldHVwSGFuZGxlcyIsIl9oYW5kbGVzIiwicmVzaXppbmciLCJ3cmFwcGVyIiwiZXhwIiwiaW5zZXJ0QWZ0ZXIiLCJfcmVtb3ZlSGFuZGxlcyIsIm4iLCJobmFtZSIsInMiLCJ3Iiwic2UiLCJzdyIsIm5lIiwibnciLCJ0cmltIiwiX3JlbmRlckF4aXMiLCJwYWRQb3MiLCJwYWRXcmFwcGVyIiwiY2xhc3NOYW1lIiwiY2FwdHVyZSIsImN1cmxlZnQiLCJjdXJ0b3AiLCJfcmVuZGVyUHJveHkiLCJvcmlnaW5hbFNpemUiLCJzaXplRGlmZiIsIm9yaWdpbmFsTW91c2VQb3NpdGlvbiIsIl9wcm9wYWdhdGUiLCJzbXAiLCJkeCIsImR5IiwiX2NoYW5nZSIsIl91cGRhdGVQcmV2UHJvcGVydGllcyIsIl91cGRhdGVWaXJ0dWFsQm91bmRhcmllcyIsIl91cGRhdGVSYXRpbyIsIl9yZXNwZWN0U2l6ZSIsIl91cGRhdGVDYWNoZSIsIl9hcHBseUNoYW5nZXMiLCJwciIsImlzdGEiLCJzb2Zmc2V0aCIsInNvZmZzZXR3IiwicHJldlBvc2l0aW9uIiwicHJldlNpemUiLCJmb3JjZUFzcGVjdFJhdGlvIiwicE1pbldpZHRoIiwicE1heFdpZHRoIiwicE1pbkhlaWdodCIsInBNYXhIZWlnaHQiLCJJbmZpbml0eSIsIl92Qm91bmRhcmllcyIsImNwb3MiLCJjc2l6ZSIsImlzbWF4dyIsImlzbWF4aCIsImlzbWludyIsImlzbWluaCIsImR3IiwiZGgiLCJjdyIsImNoIiwiX2dldFBhZGRpbmdQbHVzQm9yZGVyRGltZW5zaW9ucyIsIndpZHRocyIsImJvcmRlcnMiLCJwYWRkaW5ncyIsInByZWwiLCJvdXRlckRpbWVuc2lvbnMiLCJlbGVtZW50T2Zmc2V0IiwiY3MiLCJzdGVwIiwib2MiLCJjb250YWluZXJFbGVtZW50IiwiY29udGFpbmVyT2Zmc2V0IiwiY29udGFpbmVyUG9zaXRpb24iLCJwYXJlbnREYXRhIiwiY29udGFpbmVyU2l6ZSIsIndvc2V0IiwiaG9zZXQiLCJpc1BhcmVudCIsImlzT2Zmc2V0UmVsYXRpdmUiLCJjcCIsInBSYXRpbyIsImNvcCIsImNvbnRpbnVlUmVzaXplIiwiaG8iLCJoIiwib3MiLCJvcCIsImRlbHRhIiwic3VtIiwicmVtb3ZlQ2hpbGQiLCJncmlkWCIsImdyaWRZIiwib3giLCJveSIsIm5ld1dpZHRoIiwibmV3SGVpZ2h0IiwiaXNNYXhXaWR0aCIsImlzTWF4SGVpZ2h0IiwiaXNNaW5XaWR0aCIsImlzTWluSGVpZ2h0IiwiYXV0b1JlZnJlc2giLCJzZWxlY3RlZCIsInNlbGVjdGluZyIsInVuc2VsZWN0ZWQiLCJ1bnNlbGVjdGluZyIsImRyYWdnZWQiLCJlbGVtZW50UG9zIiwic2VsZWN0ZWVzIiwiJHRoaXMiLCJzZWxlY3RlZU9mZnNldCIsIiRlbGVtZW50Iiwic3RhcnRzZWxlY3RlZCIsIm9wb3MiLCJzZWxlY3RlZSIsImRvU2VsZWN0IiwidG1wIiwiaGl0IiwicmVhZHkiLCJjb25uZWN0V2l0aCIsImRyb3BPbkVtcHR5IiwiZm9yY2VQbGFjZWhvbGRlclNpemUiLCJmb3JjZUhlbHBlclNpemUiLCJiZWZvcmVTdG9wIiwiY2hhbmdlIiwicmVjZWl2ZSIsInVwZGF0ZSIsIl9pc092ZXJBeGlzIiwiX2lzRmxvYXRpbmciLCJvdmVycmlkZUhhbmRsZSIsInZhbGlkSGFuZGxlIiwicmV2ZXJ0aW5nIiwiX3JlZnJlc2hJdGVtcyIsIl9yZW1vdmVDdXJyZW50c0Zyb21JdGVtcyIsIm5vQWN0aXZhdGlvbiIsImN1cnJlbnRDb250YWluZXIiLCJkb21Qb3NpdGlvbiIsInByZXYiLCJfY3JlYXRlUGxhY2Vob2xkZXIiLCJzdG9yZWRDdXJzb3IiLCJzdG9yZWRTdHlsZXNoZWV0IiwiX3N0b3JlZE9wYWNpdHkiLCJfc3RvcmVkWkluZGV4IiwiX3ByZXNlcnZlSGVscGVyUHJvcG9ydGlvbnMiLCJjb250YWluZXJzIiwiZHJhZ2dpbmciLCJpdGVtRWxlbWVudCIsImludGVyc2VjdGlvbiIsImxhc3RQb3NpdGlvbkFicyIsIl9pbnRlcnNlY3RzV2l0aFBvaW50ZXIiLCJkaXJlY3Rpb24iLCJfaW50ZXJzZWN0c1dpdGhTaWRlcyIsIl9yZWFycmFuZ2UiLCJfY29udGFjdENvbnRhaW5lcnMiLCJjdXIiLCJhbmltYXRpb24iLCJfbm9GaW5hbFNvcnQiLCJhZnRlciIsInByZXBlbmQiLCJzZXJpYWxpemUiLCJfZ2V0SXRlbXNBc2pRdWVyeSIsImNvbm5lY3RlZCIsInN0ciIsInJlcyIsImF0dHJpYnV0ZSIsImV4cHJlc3Npb24iLCJ0b0FycmF5IiwicmV0IiwiZHlDbGljayIsImR4Q2xpY2siLCJpc092ZXJFbGVtZW50SGVpZ2h0IiwiaXNPdmVyRWxlbWVudFdpZHRoIiwiaXNPdmVyRWxlbWVudCIsImZvcmNlUG9pbnRlckZvckNvbnRhaW5lcnMiLCJmbG9hdGluZyIsInZlcnRpY2FsRGlyZWN0aW9uIiwiaG9yaXpvbnRhbERpcmVjdGlvbiIsIl9nZXREcmFnVmVydGljYWxEaXJlY3Rpb24iLCJfZ2V0RHJhZ0hvcml6b250YWxEaXJlY3Rpb24iLCJpc092ZXJCb3R0b21IYWxmIiwiaXNPdmVyUmlnaHRIYWxmIiwiX2Nvbm5lY3RXaXRoIiwicXVlcmllcyIsImFkZEl0ZW1zIiwiZ3JlcCIsInRhcmdldERhdGEiLCJfcXVlcmllcyIsInF1ZXJpZXNMZW5ndGgiLCJmYXN0IiwidG9sZXJhbmNlRWxlbWVudCIsInJlZnJlc2hDb250YWluZXJzIiwiX2NyZWF0ZVRyUGxhY2Vob2xkZXIiLCJjb250YWluZXIiLCJzb3VyY2VUciIsInRhcmdldFRyIiwiZGlzdCIsIml0ZW1XaXRoTGVhc3REaXN0YW5jZSIsInBvc1Byb3BlcnR5Iiwic2l6ZVByb3BlcnR5IiwibmVhckJvdHRvbSIsImlubmVybW9zdENvbnRhaW5lciIsImlubmVybW9zdEluZGV4IiwiYXBwZW5kQ2hpbGQiLCJoYXJkUmVmcmVzaCIsImluc2VydEJlZm9yZSIsIm5leHRTaWJsaW5nIiwiY291bnRlciIsImRlbGF5ZWRUcmlnZ2VycyIsImJlZm9yZSIsImRlbGF5RXZlbnQiLCJfaW5zdCIsInNlbmRlciIsImFjdGl2ZSIsImNvbGxhcHNpYmxlIiwiaGVhZGVyIiwiaGVpZ2h0U3R5bGUiLCJpY29ucyIsImFjdGl2ZUhlYWRlciIsImJlZm9yZUFjdGl2YXRlIiwiaGlkZVByb3BzIiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwic2hvd1Byb3BzIiwicHJldlNob3ciLCJwcmV2SGlkZSIsIl9wcm9jZXNzUGFuZWxzIiwiaGVhZGVycyIsIl9yZWZyZXNoIiwicGFuZWwiLCJfY3JlYXRlSWNvbnMiLCJpY29uIiwicHJlcGVuZFRvIiwiX2Rlc3Ryb3lJY29ucyIsImNvbnRlbnRzIiwiX3NldHVwRXZlbnRzIiwiX2tleWRvd24iLCJjdXJyZW50SW5kZXgiLCJpbmRleCIsInRvRm9jdXMiLCJfZXZlbnRIYW5kbGVyIiwiX3BhbmVsS2V5RG93biIsInByZXZIZWFkZXJzIiwicHJldlBhbmVscyIsInBhbmVscyIsIl9maW5kQWN0aXZlIiwiaGVhZGVySWQiLCJwYW5lbElkIiwiaXNWaXNpYmxlIiwia2V5ZG93biIsImFjdGl2ZUNoaWxkcmVuIiwiY2xpY2tlZENoaWxkcmVuIiwiY2xpY2tlZCIsImNsaWNrZWRJc0FjdGl2ZSIsImNvbGxhcHNpbmciLCJ0b1Nob3ciLCJ0b0hpZGUiLCJldmVudERhdGEiLCJvbGRIZWFkZXIiLCJvbGRQYW5lbCIsIm5ld0hlYWRlciIsIm5ld1BhbmVsIiwiX3RvZ2dsZSIsIl9hbmltYXRlIiwiX3RvZ2dsZUNvbXBsZXRlIiwidG90YWwiLCJhZGp1c3QiLCJib3hTaXppbmciLCJkb3duIiwibm93IiwiZngiLCJzdWJtZW51IiwibWVudXMiLCJyb2xlIiwiYmx1ciIsImZvY3VzIiwic2VsZWN0IiwiYWN0aXZlTWVudSIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiZXhwYW5kIiwidGltZXIiLCJwcmV2aW91c0ZpbHRlciIsImFjdHVhbFRhcmdldCIsImtlZXBBY3RpdmVJdGVtIiwiY29sbGFwc2VBbGwiLCJfY2xvc2VPbkRvY3VtZW50Q2xpY2siLCJzdWJtZW51cyIsImNoYXJhY3RlciIsInNraXAiLCJwcmV2aW91c1BhZ2UiLCJuZXh0UGFnZSIsIl9tb3ZlIiwicHJldmlvdXMiLCJjb2xsYXBzZSIsImZyb21DaGFyQ29kZSIsImZpbHRlclRpbWVyIiwiX2ZpbHRlck1lbnVJdGVtcyIsIm5leHRBbGwiLCJuZXdTdWJtZW51cyIsIm5ld0l0ZW1zIiwibmV3V3JhcHBlcnMiLCJtZW51Iiwic3VibWVudUNhcmV0IiwiX2lzRGl2aWRlciIsIl9pdGVtUm9sZSIsImxpc3Rib3giLCJuZXN0ZWQiLCJmb2N1c2VkIiwiYWN0aXZlUGFyZW50IiwiX3Njcm9sbEludG9WaWV3IiwiX2Nsb3NlIiwiX3N0YXJ0T3BlbmluZyIsImJvcmRlclRvcCIsImVsZW1lbnRIZWlnaHQiLCJpdGVtSGVpZ2h0IiwiZnJvbUZvY3VzIiwiX29wZW4iLCJhbGwiLCJjdXJyZW50TWVudSIsInN0YXJ0TWVudSIsInRleHQiLCJuZXdJdGVtIiwiaXNGaXJzdEl0ZW0iLCJwcmV2QWxsIiwiaXNMYXN0SXRlbSIsImVzY2FwZWRDaGFyYWN0ZXIiLCJyZWdleCIsIlJlZ0V4cCIsImF1dG9Gb2N1cyIsIm1pbkxlbmd0aCIsInNvdXJjZSIsImNsb3NlIiwib3BlbiIsInJlc3BvbnNlIiwic2VhcmNoIiwicmVxdWVzdEluZGV4IiwicGVuZGluZyIsInN1cHByZXNzS2V5UHJlc3MiLCJzdXBwcmVzc0tleVByZXNzUmVwZWF0Iiwic3VwcHJlc3NJbnB1dCIsImlzVGV4dGFyZWEiLCJpc0lucHV0IiwiaXNNdWx0aUxpbmUiLCJfaXNDb250ZW50RWRpdGFibGUiLCJ2YWx1ZU1ldGhvZCIsImlzTmV3TWVudSIsIl9rZXlFdmVudCIsIl92YWx1ZSIsInRlcm0iLCJfc2VhcmNoVGltZW91dCIsImtleXByZXNzIiwic2VsZWN0ZWRJdGVtIiwiY2FuY2VsQmx1ciIsInNlYXJjaGluZyIsIl9pbml0U291cmNlIiwiX2FwcGVuZFRvIiwibW91c2Vkb3duIiwibWVudWZvY3VzIiwibGFiZWwiLCJvbmUiLCJsaXZlUmVnaW9uIiwibWVudXNlbGVjdCIsImJlZm9yZXVubG9hZCIsInhociIsImFib3J0IiwiX2lzRXZlbnRUYXJnZXRJbldpZGdldCIsIm1lbnVFbGVtZW50IiwiX2Nsb3NlT25DbGlja091dHNpZGUiLCJhcnJheSIsInVybCIsInJlcXVlc3QiLCJhdXRvY29tcGxldGUiLCJhamF4IiwiZGF0YVR5cGUiLCJzdWNjZXNzIiwiZXF1YWxWYWx1ZXMiLCJtZW51VmlzaWJsZSIsIm1vZGlmaWVyS2V5IiwiX3NlYXJjaCIsImNhbmNlbFNlYXJjaCIsIl9yZXNwb25zZSIsInByb3h5IiwiX19yZXNwb25zZSIsIl9ub3JtYWxpemUiLCJfc3VnZ2VzdCIsInVsIiwiZW1wdHkiLCJfcmVuZGVyTWVudSIsIl9yZXNpemVNZW51IiwiX3JlbmRlckl0ZW1EYXRhIiwiX3JlbmRlckl0ZW0iLCJrZXlFdmVudCIsImVkaXRhYmxlIiwiZXNjYXBlUmVnZXgiLCJtYXRjaGVyIiwibWVzc2FnZXMiLCJub1Jlc3VsdHMiLCJyZXN1bHRzIiwiYW1vdW50IiwibWVzc2FnZSIsImRhdGVwaWNrZXJfaW5zdEFjdGl2ZSIsInJoYXNoIiwiY29udHJvbGdyb3VwQ29ybmVyUmVnZXgiLCJEYXRlcGlja2VyIiwiX2N1ckluc3QiLCJfZGlzYWJsZWRJbnB1dHMiLCJfZGF0ZXBpY2tlclNob3dpbmciLCJfaW5EaWFsb2ciLCJfbWFpbkRpdklkIiwiX2lubGluZUNsYXNzIiwiX2FwcGVuZENsYXNzIiwiX3RyaWdnZXJDbGFzcyIsIl9kaWFsb2dDbGFzcyIsIl9kaXNhYmxlQ2xhc3MiLCJfdW5zZWxlY3RhYmxlQ2xhc3MiLCJfY3VycmVudENsYXNzIiwiX2RheU92ZXJDbGFzcyIsInJlZ2lvbmFsIiwiY2xvc2VUZXh0IiwicHJldlRleHQiLCJuZXh0VGV4dCIsImN1cnJlbnRUZXh0IiwibW9udGhOYW1lcyIsIm1vbnRoTmFtZXNTaG9ydCIsImRheU5hbWVzIiwiZGF5TmFtZXNTaG9ydCIsImRheU5hbWVzTWluIiwid2Vla0hlYWRlciIsImRhdGVGb3JtYXQiLCJmaXJzdERheSIsImlzUlRMIiwic2hvd01vbnRoQWZ0ZXJZZWFyIiwieWVhclN1ZmZpeCIsIl9kZWZhdWx0cyIsInNob3dPbiIsInNob3dBbmltIiwic2hvd09wdGlvbnMiLCJkZWZhdWx0RGF0ZSIsImFwcGVuZFRleHQiLCJidXR0b25UZXh0IiwiYnV0dG9uSW1hZ2UiLCJidXR0b25JbWFnZU9ubHkiLCJoaWRlSWZOb1ByZXZOZXh0IiwibmF2aWdhdGlvbkFzRGF0ZUZvcm1hdCIsImdvdG9DdXJyZW50IiwiY2hhbmdlTW9udGgiLCJjaGFuZ2VZZWFyIiwieWVhclJhbmdlIiwic2hvd090aGVyTW9udGhzIiwic2VsZWN0T3RoZXJNb250aHMiLCJzaG93V2VlayIsImNhbGN1bGF0ZVdlZWsiLCJpc284NjAxV2VlayIsInNob3J0WWVhckN1dG9mZiIsIm1pbkRhdGUiLCJtYXhEYXRlIiwiYmVmb3JlU2hvd0RheSIsImJlZm9yZVNob3ciLCJvblNlbGVjdCIsIm9uQ2hhbmdlTW9udGhZZWFyIiwib25DbG9zZSIsIm51bWJlck9mTW9udGhzIiwic2hvd0N1cnJlbnRBdFBvcyIsInN0ZXBNb250aHMiLCJzdGVwQmlnTW9udGhzIiwiYWx0RmllbGQiLCJhbHRGb3JtYXQiLCJjb25zdHJhaW5JbnB1dCIsInNob3dCdXR0b25QYW5lbCIsImF1dG9TaXplIiwiZW4iLCJkcERpdiIsImRhdGVwaWNrZXJfYmluZEhvdmVyIiwiaW5kZXhPZiIsImRhdGVwaWNrZXJfaGFuZGxlTW91c2VvdmVyIiwiZGF0ZXBpY2tlciIsIl9pc0Rpc2FibGVkRGF0ZXBpY2tlciIsImlubGluZSIsImRhdGVwaWNrZXJfZXh0ZW5kUmVtb3ZlIiwic3Bpbm5lck1vZGlmZXIiLCJ2YWwiLCJvbmx5VmlzaWJsZSIsIl9lbmhhbmNlIiwiX2NhbGxDaGlsZE1ldGhvZCIsImNoaWxkV2lkZ2V0cyIsImNvbnRyb2xncm91cExhYmVsIiwidW53cmFwIiwiX2luaXRXaWRnZXRzIiwid3JhcEFsbCIsImluc3RhbmNlT3B0aW9ucyIsIl9yZXNvbHZlQ2xhc3Nlc1ZhbHVlcyIsIndpZGdldEVsZW1lbnQiLCJfdXBkYXRlQ29ybmVyQ2xhc3MiLCJfYnVpbGRTaW1wbGVPcHRpb25zIiwicmVzdWx0IiwiX3NwaW5uZXJPcHRpb25zIiwiX2J1dHRvbk9wdGlvbnMiLCJfY2hlY2tib3hyYWRpb09wdGlvbnMiLCJfc2VsZWN0bWVudU9wdGlvbnMiLCJtaWRkbGUiLCJvbmx5IiwiX3JlYWRUeXBlIiwib3JpZ2luYWxMYWJlbCIsIm91dGVySFRNTCIsImNoZWNrZWQiLCJfdXBkYXRlTGFiZWwiLCJfdXBkYXRlSWNvbiIsIl9nZXRSYWRpb0dyb3VwIiwibmFtZVNlbGVjdG9yIiwiX3RvZ2dsZUNsYXNzZXMiLCJjaGVja2JveHJhZGlvIiwiaWNvblNwYWNlIiwidG9BZGQiLCJpc0Rpc2FibGVkIiwiaWNvblBvc2l0aW9uIiwic2hvd0xhYmVsIiwiaHRtbCIsImhhc1RpdGxlIiwiX3VwZGF0ZVRvb2x0aXAiLCJ0aXRsZSIsImRpc3BsYXlCbG9jayIsIl9hdHRhY2hJY29uIiwiX2F0dGFjaEljb25TcGFjZSIsIm5ld1Nob3dMYWJlbCIsIm5ld0ljb24iLCJwcmltYXJ5Iiwic2Vjb25kYXJ5IiwiYnV0dG9uc2V0IiwiY29udHJvbGdyb3VwIiwibWFya2VyQ2xhc3NOYW1lIiwibWF4Um93cyIsIl93aWRnZXREYXRlcGlja2VyIiwic2V0RGVmYXVsdHMiLCJzZXR0aW5ncyIsIl9hdHRhY2hEYXRlcGlja2VyIiwiX25ld0luc3QiLCJfY29ubmVjdERhdGVwaWNrZXIiLCJfaW5saW5lRGF0ZXBpY2tlciIsInNlbGVjdGVkRGF5Iiwic2VsZWN0ZWRNb250aCIsInNlbGVjdGVkWWVhciIsImRyYXdNb250aCIsImRyYXdZZWFyIiwiX2F0dGFjaG1lbnRzIiwiX2RvS2V5RG93biIsIl9kb0tleVByZXNzIiwiX2RvS2V5VXAiLCJfYXV0b1NpemUiLCJfZGlzYWJsZURhdGVwaWNrZXIiLCJfZ2V0IiwiX3Nob3dEYXRlcGlja2VyIiwic3JjIiwiYWx0IiwiX2xhc3RJbnB1dCIsIl9oaWRlRGF0ZXBpY2tlciIsImZpbmRNYXgiLCJtYXhJIiwiZGF0ZSIsIkRhdGUiLCJuYW1lcyIsInNldE1vbnRoIiwic2V0RGF0ZSIsImdldERheSIsIl9mb3JtYXREYXRlIiwiZGl2U3BhbiIsIl9zZXREYXRlIiwiX2dldERlZmF1bHREYXRlIiwiX3VwZGF0ZURhdGVwaWNrZXIiLCJfdXBkYXRlQWx0ZXJuYXRlIiwiX2RpYWxvZ0RhdGVwaWNrZXIiLCJicm93c2VyV2lkdGgiLCJicm93c2VySGVpZ2h0Iiwic2Nyb2xsWCIsInNjcm9sbFkiLCJfZGlhbG9nSW5zdCIsIl9kaWFsb2dJbnB1dCIsIl9wb3MiLCJkb2N1bWVudEVsZW1lbnQiLCJjbGllbnRIZWlnaHQiLCJibG9ja1VJIiwiX2Rlc3Ryb3lEYXRlcGlja2VyIiwiJHRhcmdldCIsIl9lbmFibGVEYXRlcGlja2VyIiwiZW5kIiwiX2dldEluc3QiLCJlcnIiLCJfb3B0aW9uRGF0ZXBpY2tlciIsIl9nZXREYXRlRGF0ZXBpY2tlciIsIl9nZXRNaW5NYXhEYXRlIiwiX2NoYW5nZURhdGVwaWNrZXIiLCJfcmVmcmVzaERhdGVwaWNrZXIiLCJfc2V0RGF0ZURhdGVwaWNrZXIiLCJub0RlZmF1bHQiLCJfc2V0RGF0ZUZyb21GaWVsZCIsIl9nZXREYXRlIiwiZGF0ZVN0ciIsInNlbCIsImhhbmRsZWQiLCJfc2VsZWN0RGF5IiwiX2FkanVzdERhdGUiLCJfY2xlYXJEYXRlIiwiX2dvdG9Ub2RheSIsInN0b3BQcm9wYWdhdGlvbiIsImNoYXJzIiwiY2hyIiwiX3Bvc3NpYmxlQ2hhcnMiLCJjaGFyQ29kZSIsImxhc3RWYWwiLCJwYXJzZURhdGUiLCJfZ2V0Rm9ybWF0Q29uZmlnIiwiYmVmb3JlU2hvd1NldHRpbmdzIiwiaXNGaXhlZCIsIl9maW5kUG9zIiwiX2NoZWNrT2Zmc2V0IiwiZGF0ZXBpY2tlcl9nZXRaaW5kZXgiLCJfc2hvdWxkRm9jdXNJbnB1dCIsIl9nZW5lcmF0ZUhUTUwiLCJfYXR0YWNoSGFuZGxlcnMiLCJvcmlneWVhcnNodG1sIiwibnVtTW9udGhzIiwiX2dldE51bWJlck9mTW9udGhzIiwiY29scyIsImFjdGl2ZUNlbGwiLCJ5ZWFyc2h0bWwiLCJyZXBsYWNlV2l0aCIsImRwV2lkdGgiLCJkcEhlaWdodCIsImlucHV0V2lkdGgiLCJpbnB1dEhlaWdodCIsInZpZXdXaWR0aCIsInZpZXdIZWlnaHQiLCJoaWRkZW4iLCJwb3N0UHJvY2VzcyIsIl90aWR5RGlhbG9nIiwidW5ibG9ja1VJIiwiX2NoZWNrRXh0ZXJuYWxDbGljayIsInBlcmlvZCIsIl9hZGp1c3RJbnN0RGF0ZSIsImN1cnJlbnREYXkiLCJjdXJyZW50TW9udGgiLCJjdXJyZW50WWVhciIsImdldERhdGUiLCJnZXRNb250aCIsImdldEZ1bGxZZWFyIiwiX25vdGlmeUNoYW5nZSIsIl9zZWxlY3RNb250aFllYXIiLCJzZWxlY3RlZEluZGV4IiwibW9udGgiLCJ5ZWFyIiwidGQiLCJfc2VsZWN0RGF0ZSIsImZvcm1hdERhdGUiLCJub1dlZWtlbmRzIiwiZGF5IiwidGltZSIsImNoZWNrRGF0ZSIsImdldFRpbWUiLCJmbG9vciIsImZvcm1hdCIsImlGb3JtYXQiLCJkaW0iLCJpVmFsdWUiLCJzaG9ydFllYXJDdXRvZmZUZW1wIiwiZG95IiwibGl0ZXJhbCIsImxvb2tBaGVhZCIsIm1hdGNoZXMiLCJnZXROdW1iZXIiLCJpc0RvdWJsZWQiLCJkaWdpdHMiLCJudW0iLCJnZXROYW1lIiwic2hvcnROYW1lcyIsImxvbmdOYW1lcyIsInYiLCJwYWlyIiwic3Vic3RyIiwiY2hlY2tMaXRlcmFsIiwiX3RpY2tzVG8xOTcwIiwiX2dldERheXNJbk1vbnRoIiwiX2RheWxpZ2h0U2F2aW5nQWRqdXN0IiwiQVRPTSIsIkNPT0tJRSIsIklTT184NjAxIiwiUkZDXzgyMiIsIlJGQ184NTAiLCJSRkNfMTAzNiIsIlJGQ18xMTIzIiwiUkZDXzI4MjIiLCJSU1MiLCJUSUNLUyIsIlRJTUVTVEFNUCIsIlczQyIsImZvcm1hdE51bWJlciIsImxlbiIsImZvcm1hdE5hbWUiLCJvdXRwdXQiLCJkYXRlcyIsIl9yZXN0cmljdE1pbk1heCIsIl9kZXRlcm1pbmVEYXRlIiwibmV3RGF0ZSIsInBhdHRlcm4iLCJvZmZzZXRTdHJpbmciLCJvZmZzZXROdW1lcmljIiwic2V0SG91cnMiLCJzZXRNaW51dGVzIiwic2V0U2Vjb25kcyIsInNldE1pbGxpc2Vjb25kcyIsImdldEhvdXJzIiwibm9DaGFuZ2UiLCJjbGVhciIsIm9yaWdNb250aCIsIm9yaWdZZWFyIiwidG9kYXkiLCJzZWxlY3REYXkiLCJnZXRBdHRyaWJ1dGUiLCJzZWxlY3RNb250aCIsInNlbGVjdFllYXIiLCJtYXhEcmF3IiwiZ290b0RhdGUiLCJjb250cm9scyIsImJ1dHRvblBhbmVsIiwiZG93Iiwicm93IiwiY29sIiwic2VsZWN0ZWREYXRlIiwiY29ybmVyQ2xhc3MiLCJjYWxlbmRlciIsInRoZWFkIiwiZGF5c0luTW9udGgiLCJsZWFkRGF5cyIsImN1clJvd3MiLCJudW1Sb3dzIiwicHJpbnREYXRlIiwiZFJvdyIsInRib2R5IiwiZGF5U2V0dGluZ3MiLCJvdGhlck1vbnRoIiwidW5zZWxlY3RhYmxlIiwidGVtcERhdGUiLCJpc011bHRpTW9udGgiLCJjdXJyZW50RGF0ZSIsIl9jYW5BZGp1c3RNb250aCIsIl9pc0luUmFuZ2UiLCJfZ2VuZXJhdGVNb250aFllYXJIZWFkZXIiLCJfZ2V0Rmlyc3REYXlPZk1vbnRoIiwiY2VpbCIsImluTWluWWVhciIsImluTWF4WWVhciIsInllYXJzIiwidGhpc1llYXIiLCJkZXRlcm1pbmVZZWFyIiwiZW5kWWVhciIsIm1vbnRoSHRtbCIsIm9uQ2hhbmdlIiwibWluTWF4IiwiY3VyWWVhciIsImN1ck1vbnRoIiwieWVhclNwbGl0IiwibWluWWVhciIsIm1heFllYXIiLCJpbml0aWFsaXplZCIsIm90aGVyQXJncyIsImF1dG9PcGVuIiwiYnV0dG9ucyIsImNsb3NlT25Fc2NhcGUiLCJtb2RhbCIsInRvcE9mZnNldCIsImJlZm9yZUNsb3NlIiwicmVzaXplU3RhcnQiLCJyZXNpemVTdG9wIiwic2l6ZVJlbGF0ZWRPcHRpb25zIiwicmVzaXphYmxlUmVsYXRlZE9wdGlvbnMiLCJvcmlnaW5hbENzcyIsIm9yaWdpbmFsVGl0bGUiLCJfY3JlYXRlV3JhcHBlciIsInVpRGlhbG9nIiwiX2NyZWF0ZVRpdGxlYmFyIiwiX2NyZWF0ZUJ1dHRvblBhbmUiLCJfbWFrZURyYWdnYWJsZSIsIl9tYWtlUmVzaXphYmxlIiwiX2lzT3BlbiIsIl90cmFja0ZvY3VzIiwiX3VudHJhY2tJbnN0YW5jZSIsIl9kZXN0cm95T3ZlcmxheSIsImRldGFjaCIsIl9mb2N1c2VkRWxlbWVudCIsIm9wZW5lciIsIl9oaWRlIiwiaXNPcGVuIiwibW92ZVRvVG9wIiwiX21vdmVUb1RvcCIsInNpbGVudCIsIm1vdmVkIiwiekluZGljZXMiLCJ6SW5kZXhNYXgiLCJfZm9jdXNUYWJiYWJsZSIsIl9zaXplIiwiX2NyZWF0ZU92ZXJsYXkiLCJvdmVybGF5IiwiX3Nob3ciLCJfbWFrZUZvY3VzVGFyZ2V0IiwiaGFzRm9jdXMiLCJ1aURpYWxvZ0J1dHRvblBhbmUiLCJ1aURpYWxvZ1RpdGxlYmFyQ2xvc2UiLCJfa2VlcEZvY3VzIiwiY2hlY2tGb2N1cyIsInRhYmJhYmxlcyIsInVpRGlhbG9nVGl0bGUiLCJ1aURpYWxvZ1RpdGxlYmFyIiwiX3RpdGxlIiwidWlCdXR0b25TZXQiLCJfY3JlYXRlQnV0dG9ucyIsImJ1dHRvbk9wdGlvbnMiLCJmaWx0ZXJlZFVpIiwicmVzaXplSGFuZGxlcyIsIl9taW5IZWlnaHQiLCJfdHJhY2tpbmdJbnN0YW5jZXMiLCJ1bnNoaWZ0IiwiZXhpc3RzIiwicmVzaXphYmxlT3B0aW9ucyIsImlzRHJhZ2dhYmxlIiwiaXNSZXNpemFibGUiLCJub25Db250ZW50SGVpZ2h0IiwibWluQ29udGVudEhlaWdodCIsIm1heENvbnRlbnRIZWlnaHQiLCJfYWxsb3dJbnRlcmFjdGlvbiIsImlzT3BlbmluZyIsIm92ZXJsYXlzIiwiZGlhbG9nIiwiZGlhbG9nQ2xhc3MiLCJvbGRWYWx1ZSIsIl9jb25zdHJhaW5lZFZhbHVlIiwidmFsdWVEaXYiLCJfcmVmcmVzaFZhbHVlIiwibmV3VmFsdWUiLCJpbmRldGVybWluYXRlIiwiX3BlcmNlbnRhZ2UiLCJwZXJjZW50YWdlIiwidG9nZ2xlIiwidG9GaXhlZCIsIm92ZXJsYXlEaXYiLCJzZWxlY3RtZW51SWQiLCJpZHMiLCJfZHJhd0J1dHRvbiIsIl9kcmF3TWVudSIsIl9yZW5kZXJlZCIsIm1lbnVJdGVtcyIsIl9wYXJzZU9wdGlvbiIsInRhYmluZGV4IiwiYnV0dG9uSXRlbSIsIl9yZW5kZXJCdXR0b25JdGVtIiwiX3Jlc2l6ZUJ1dHRvbiIsIl9idXR0b25FdmVudHMiLCJfcmVmcmVzaE1lbnUiLCJtZW51V3JhcCIsIm1lbnVJbnN0YW5jZSIsIl9zZXRTZWxlY3Rpb24iLCJfc2VsZWN0IiwiZm9jdXNJbmRleCIsIl9nZXRTZWxlY3RlZEl0ZW0iLCJfcGFyc2VPcHRpb25zIiwiX3NldEFyaWEiLCJfdG9nZ2xlQXR0ciIsIl9kb2N1bWVudENsaWNrIiwicmFuZ2UiLCJtZW51V2lkZ2V0IiwiX3NldFRleHQiLCJjdXJyZW50T3B0Z3JvdXAiLCJsaSIsIm9wdGdyb3VwIiwic2VsZWN0aW9uIiwiZ2V0U2VsZWN0aW9uIiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJyYW5nZUNvdW50IiwiZ2V0UmFuZ2VBdCIsImNyZWF0ZVJhbmdlIiwiX3NlbGVjdEZvY3VzZWRJdGVtIiwib2xkSW5kZXgiLCJvcmllbnRhdGlvbiIsInZhbHVlcyIsInNsaWRlIiwibnVtUGFnZXMiLCJfa2V5U2xpZGluZyIsIl9tb3VzZVNsaWRpbmciLCJfYW5pbWF0ZU9mZiIsIl9oYW5kbGVJbmRleCIsIl9kZXRlY3RPcmllbnRhdGlvbiIsIl9jYWxjdWxhdGVOZXdNYXgiLCJfY3JlYXRlUmFuZ2UiLCJfY3JlYXRlSGFuZGxlcyIsImhhbmRsZUNvdW50IiwiZXhpc3RpbmdIYW5kbGVzIiwiX3ZhbHVlTWluIiwiX2hhbmRsZUV2ZW50cyIsIm5vcm1WYWx1ZSIsImNsb3Nlc3RIYW5kbGUiLCJtb3VzZU92ZXJIYW5kbGUiLCJlbGVtZW50U2l6ZSIsInkiLCJfbm9ybVZhbHVlRnJvbU1vdXNlIiwiX3ZhbHVlTWF4IiwidGhpc0Rpc3RhbmNlIiwiX2xhc3RDaGFuZ2VkVmFsdWUiLCJfc3RhcnQiLCJfY2xpY2tPZmZzZXQiLCJfc2xpZGUiLCJfc3RvcCIsInBpeGVsVG90YWwiLCJwaXhlbE1vdXNlIiwicGVyY2VudE1vdXNlIiwidmFsdWVUb3RhbCIsInZhbHVlTW91c2UiLCJfdHJpbUFsaWduVmFsdWUiLCJ1aUhhc2giLCJoYW5kbGVJbmRleCIsIl9oYXNNdWx0aXBsZVZhbHVlcyIsIm5ld1ZhbCIsIm90aGVyVmFsIiwiY3VycmVudFZhbHVlIiwibmV3VmFsdWVzIiwidmFscyIsIl92YWx1ZXMiLCJ2YWxzTGVuZ3RoIiwiX3JlZnJlc2hSYW5nZSIsInZhbE1vZFN0ZXAiLCJhbGlnblZhbHVlIiwiX3ByZWNpc2lvbiIsInByZWNpc2lvbiIsIl9wcmVjaXNpb25PZiIsImRlY2ltYWwiLCJsYXN0VmFsUGVyY2VudCIsInZhbFBlcmNlbnQiLCJ2YWx1ZU1pbiIsInZhbHVlTWF4Iiwib1JhbmdlIiwiX3NldCIsImN1clZhbCIsImtleXVwIiwiY3VsdHVyZSIsInVwIiwiaW5jcmVtZW50YWwiLCJudW1iZXJGb3JtYXQiLCJwYWdlIiwic3BpbiIsIl9kcmF3IiwiX2V2ZW50cyIsIm1vdXNld2hlZWwiLCJzcGlubmluZyIsIl9zcGluIiwibW91c2V3aGVlbFRpbWVyIiwiX3JlcGVhdCIsInVpU3Bpbm5lciIsInN0ZXBzIiwiX2FkanVzdFZhbHVlIiwiX2luY3JlbWVudCIsImFib3ZlTWluIiwicHJldlZhbHVlIiwiX3BhcnNlIiwiX2Zvcm1hdCIsIkdsb2JhbGl6ZSIsImlzVmFsaWQiLCJhbGxvd0FueSIsInBhcnNlZCIsInN0ZXBVcCIsIl9zdGVwVXAiLCJzdGVwRG93biIsIl9zdGVwRG93biIsInBhZ2VVcCIsInBhZ2VzIiwicGFnZURvd24iLCJzcGlubmVyIiwiX3VpU3Bpbm5lckh0bWwiLCJfYnV0dG9uSHRtbCIsImJlZm9yZUxvYWQiLCJsb2FkIiwiX2lzTG9jYWwiLCJhbmNob3IiLCJhbmNob3JVcmwiLCJsb2NhdGlvblVybCIsImxvY2F0aW9uIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiaGFzaCIsInJ1bm5pbmciLCJfcHJvY2Vzc1RhYnMiLCJfaW5pdGlhbEFjdGl2ZSIsInVuaXF1ZSIsInRhYnMiLCJhbmNob3JzIiwibG9jYXRpb25IYXNoIiwidGFiIiwiX2dldFBhbmVsRm9yVGFiIiwiX3RhYktleWRvd24iLCJmb2N1c2VkVGFiIiwiZ29pbmdGb3J3YXJkIiwiX2hhbmRsZVBhZ2VOYXYiLCJhY3RpdmF0aW5nIiwiX2ZvY3VzTmV4dFRhYiIsIl9wYW5lbEtleWRvd24iLCJfZmluZE5leHRUYWIiLCJsYXN0VGFiSW5kZXgiLCJfc2V0dXBIZWlnaHRTdHlsZSIsIl9zYW5pdGl6ZVNlbGVjdG9yIiwibGlzIiwidGFibGlzdCIsInByZXZUYWJzIiwicHJldkFuY2hvcnMiLCJfZ2V0TGlzdCIsImFuY2hvcklkIiwib3JpZ2luYWxBcmlhQ29udHJvbHMiLCJfY3JlYXRlUGFuZWwiLCJvbGRUYWIiLCJuZXdUYWIiLCJfZ2V0SW5kZXgiLCJtZXJnZSIsImpxWEhSIiwic3RhdHVzIiwiX2FqYXhTZXR0aW5ncyIsInN0YXR1c1RleHQiLCJkb25lIiwiZmFpbCIsImJlZm9yZVNlbmQiLCJhamF4U2V0dGluZ3MiLCJ0cmFjayIsIl9hZGREZXNjcmliZWRCeSIsImRlc2NyaWJlZGJ5IiwiX3JlbW92ZURlc2NyaWJlZEJ5IiwibW91c2VvdmVyIiwidG9vbHRpcHMiLCJkaXNhYmxlZFRpdGxlcyIsInRvb2x0aXBEYXRhIiwiX3VwZGF0ZUNvbnRlbnQiLCJfZGlzYWJsZSIsIl9lbmFibGUiLCJibHVyRXZlbnQiLCJfcmVnaXN0ZXJDbG9zZUhhbmRsZXJzIiwiY29udGVudE9wdGlvbiIsInRvb2x0aXAiLCJkZWxheWVkU2hvdyIsImExMXlDb250ZW50IiwicG9zaXRpb25PcHRpb24iLCJfZmluZCIsIl90b29sdGlwIiwibW91c2Vtb3ZlIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiaW50ZXJ2YWwiLCJmYWtlRXZlbnQiLCJfcmVtb3ZlVG9vbHRpcCIsImNsb3NpbmciLCJoaWRpbmciLCJ0b29sdGlwQ2xhc3MiLCJiYXNlRWFzaW5ncyIsImRhdGFTcGFjZSIsImRhdGFTcGFjZVN0eWxlIiwiZGF0YVNwYWNlQW5pbWF0ZWQiLCJqUXVlcnkiLCJjb2xvcnMiLCJycGx1c2VxdWFscyIsInN0cmluZ1BhcnNlcnMiLCJyZSIsInBhcnNlIiwiZXhlY1Jlc3VsdCIsInNwYWNlIiwiY29sb3IiLCJDb2xvciIsImdyZWVuIiwiYmx1ZSIsImFscGhhIiwic3BhY2VzIiwicmdiYSIsInJlZCIsImlkeCIsImhzbGEiLCJodWUiLCJzYXR1cmF0aW9uIiwibGlnaHRuZXNzIiwicHJvcFR5cGVzIiwic3VwcG9ydCIsInN1cHBvcnRFbGVtIiwiY2xhbXAiLCJhbGxvd0VtcHR5IiwiZGVmIiwic3RyaW5nUGFyc2UiLCJzdHJpbmciLCJfcmdiYSIsInBhcnNlciIsInNwYWNlTmFtZSIsImNhY2hlIiwidHJhbnNwYXJlbnQiLCJodWUycmdiIiwicSIsImNzc1RleHQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJfZGVmYXVsdCIsInRvIiwiZnJvbSIsImNvbXBhcmUiLCJzYW1lIiwiXyIsImxvY2FsQ2FjaGUiLCJpc0NhY2hlIiwiX3NwYWNlIiwidXNlZCIsInRyYW5zaXRpb24iLCJvdGhlciIsInN0YXJ0Q29sb3IiLCJzdGFydFZhbHVlIiwiZW5kVmFsdWUiLCJibGVuZCIsIm9wYXF1ZSIsInJnYiIsInRvUmdiYVN0cmluZyIsInByZWZpeCIsInRvSHNsYVN0cmluZyIsInRvSGV4U3RyaW5nIiwiaW5jbHVkZUFscGhhIiwiZyIsImRpZmYiLCJhcnIiLCJsb2NhbCIsInZ0eXBlIiwiX2hzbGEiLCJob29rIiwiaG9va3MiLCJjc3NIb29rcyIsImN1ckVsZW0iLCJjb2xvckluaXQiLCJib3JkZXJDb2xvciIsImV4cGFuZGVkIiwicGFydCIsImFxdWEiLCJibGFjayIsImZ1Y2hzaWEiLCJncmF5IiwibGltZSIsIm1hcm9vbiIsIm5hdnkiLCJvbGl2ZSIsInB1cnBsZSIsInNpbHZlciIsInRlYWwiLCJ3aGl0ZSIsInllbGxvdyIsImNsYXNzQW5pbWF0aW9uQWN0aW9ucyIsInNob3J0aGFuZFN0eWxlcyIsImJvcmRlckJvdHRvbSIsImJvcmRlckxlZnQiLCJib3JkZXJSaWdodCIsImJvcmRlcldpZHRoIiwicGFkZGluZyIsImdldEVsZW1lbnRTdHlsZXMiLCJnZXRDb21wdXRlZFN0eWxlIiwiY3VycmVudFN0eWxlIiwic3R5bGVzIiwiY2FtZWxDYXNlIiwic2V0QXR0ciIsImFuaW1hdGVDbGFzcyIsInNwZWVkIiwiYXBwbHlDbGFzc0NoYW5nZSIsImFuaW1hdGVkIiwiYmFzZUNsYXNzIiwiYWxsQW5pbWF0aW9ucyIsImFjdGlvbiIsIm9sZFN0eWxlIiwibmV3U3R5bGUiLCJzdHlsZURpZmZlcmVuY2UiLCJzdHlsZUluZm8iLCJkZmQiLCJEZWZlcnJlZCIsIm9wdHMiLCJyZXNvbHZlIiwicHJvbWlzZSIsIndoZW4iLCJjbGFzc05hbWVzIiwiZm9yY2UiLCJzd2l0Y2hDbGFzcyIsIl9ub3JtYWxpemVBcmd1bWVudHMiLCJzcGVlZHMiLCJzdGFuZGFyZEFuaW1hdGlvbk9wdGlvbiIsInBhcnNlQ2xpcCIsInNhdmUiLCJyZXN0b3JlIiwic2V0TW9kZSIsIm1vZGUiLCJjcmVhdGVXcmFwcGVyIiwiZm9udFNpemUiLCJiYWNrZ3JvdW5kIiwicmVtb3ZlV3JhcHBlciIsImRlZmluZSIsInNjYWxlZERpbWVuc2lvbnMiLCJwZXJjZW50IiwiY2xpcFRvQm94IiwiY2xpcCIsInF1ZXVlTGVuZ3RoIiwiY291bnQiLCJkZXF1ZXVlIiwic2F2ZVN0eWxlIiwicmVzdG9yZVN0eWxlIiwiZ2V0QmFzZWxpbmUiLCJvcmlnaW4iLCJvcmlnaW5hbCIsImNyZWF0ZVBsYWNlaG9sZGVyIiwicmVtb3ZlUGxhY2Vob2xkZXIiLCJkYXRhS2V5IiwiY2xlYW5VcCIsInNldFRyYW5zaXRpb24iLCJmYWN0b3IiLCJ1bml0IiwiY3NzVW5pdCIsImVmZmVjdE1ldGhvZCIsImRlZmF1bHRNb2RlIiwicXVldWVOYW1lIiwibW9kZXMiLCJwcmVmaWx0ZXIiLCJub3JtYWxpemVkTW9kZSIsInJ1biIsImNzc0NsaXAiLCJjbGlwT2JqIiwidHJhbnNmZXIiLCJ0YXJnZXRGaXhlZCIsImZpeFRvcCIsImZpeExlZnQiLCJlbmRQb3NpdGlvbiIsInN0YXJ0UG9zaXRpb24iLCJjbGlwSW5pdCIsInBvdyIsIlNpbmUiLCJjb3MiLCJQSSIsIkNpcmMiLCJzcXJ0IiwiRWxhc3RpYyIsInNpbiIsIkJhY2siLCJCb3VuY2UiLCJwb3cyIiwiYm91bmNlIiwiZWFzZUluIiwidXBBbmltIiwiZG93bkFuaW0iLCJyZWZWYWx1ZSIsInRpbWVzIiwiYW5pbXMiLCJyZWYiLCJtb3Rpb24iLCJxdWV1ZWxlbiIsImJvdGgiLCJvcHBvc2l0ZU1vdGlvbiIsIm14Iiwicm93cyIsInBpZWNlcyIsImNlbGxzIiwiY2hpbGRDb21wbGV0ZSIsIm92ZXJmbG93IiwiaG9yaXpGaXJzdCIsImFuaW1hdGlvbjEiLCJhbmltYXRpb24yIiwiYmFja2dyb3VuZEltYWdlIiwiYmFzZWxpbmUiLCJ0ZW1wIiwiY1Byb3BzIiwidlByb3BzIiwiaFByb3BzIiwic2NhbGUiLCJjaGlsZE9yaWdpbmFsIiwiY2hpbGRGcm9tIiwiY2hpbGRUbyIsIm5ld09wdGlvbnMiLCJmYWRlIiwic2hvd2hpZGUiLCJhbmltYXRlVG8iLCJwb3NpdGl2ZU1vdGlvbiIsInN0YXJ0Q2xpcCIsInN0YXJ0UmVmIiwiZ2xvYmFsIiwiZmFjdG9yeSIsIkVycm9yIiwibm9HbG9iYWwiLCJnZXRQcm90byIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwiZmxhdCIsImNsYXNzMnR5cGUiLCJoYXNPd24iLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzIiwibm9uY2UiLCJub01vZHVsZSIsIkRPTUV2YWwiLCJjb2RlIiwibm9kZSIsImRvYyIsInNjcmlwdCIsInNldEF0dHJpYnV0ZSIsImhlYWQiLCJ0b1R5cGUiLCJyaHRtbFN1ZmZpeCIsImNvbnRleHQiLCJpbml0IiwiaXNBcnJheUxpa2UiLCJldmVuIiwiX2VsZW0iLCJvZGQiLCJjb3B5IiwiY29weUlzQXJyYXkiLCJkZWVwIiwiZXhwYW5kbyIsInJhbmRvbSIsImlzUmVhZHkiLCJtc2ciLCJDdG9yIiwiZ2xvYmFsRXZhbCIsInRleHRDb250ZW50Iiwibm9kZVZhbHVlIiwiaXNYTUxEb2MiLCJuYW1lc3BhY2VVUkkiLCJkb2NFbGVtIiwic2Vjb25kIiwiaW52ZXJ0IiwiY2FsbGJhY2tFeHBlY3QiLCJhcmciLCJTeW1ib2wiLCJpdGVyYXRvciIsIl9pIiwid2hpdGVzcGFjZSIsInJ0cmltQ1NTIiwiYnVwIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJyY3NzZXNjYXBlIiwiZmNzc2VzY2FwZSIsImFzQ29kZVBvaW50IiwiY2hhckNvZGVBdCIsInByZWZlcnJlZERvYyIsInB1c2hOYXRpdmUiLCJFeHByIiwib3V0ZXJtb3N0Q29udGV4dCIsInNvcnRJbnB1dCIsImhhc0R1cGxpY2F0ZSIsImRvY3VtZW50SXNIVE1MIiwicmJ1Z2d5UVNBIiwiZGlycnVucyIsImNsYXNzQ2FjaGUiLCJjcmVhdGVDYWNoZSIsInRva2VuQ2FjaGUiLCJjb21waWxlckNhY2hlIiwibm9ubmF0aXZlU2VsZWN0b3JDYWNoZSIsInNvcnRPcmRlciIsImJvb2xlYW5zIiwiaWRlbnRpZmllciIsImF0dHJpYnV0ZXMiLCJyd2hpdGVzcGFjZSIsInJjb21tYSIsInJsZWFkaW5nQ29tYmluYXRvciIsInJkZXNjZW5kIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwiSUQiLCJDTEFTUyIsIlRBRyIsIkFUVFIiLCJQU0VVRE8iLCJDSElMRCIsImJvb2wiLCJuZWVkc0NvbnRleHQiLCJyaW5wdXRzIiwicmhlYWRlciIsInJxdWlja0V4cHIiLCJyc2libGluZyIsInJ1bmVzY2FwZSIsImZ1bmVzY2FwZSIsImVzY2FwZSIsIm5vbkhleCIsImhpZ2giLCJ1bmxvYWRIYW5kbGVyIiwic2V0RG9jdW1lbnQiLCJpbkRpc2FibGVkRmllbGRzZXQiLCJhZGRDb21iaW5hdG9yIiwiY2hpbGROb2RlcyIsImVscyIsInNlZWQiLCJuaWQiLCJncm91cHMiLCJuZXdTZWxlY3RvciIsIm5ld0NvbnRleHQiLCJnZXRFbGVtZW50QnlJZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInRlc3RDb250ZXh0IiwidG9rZW5pemUiLCJ0b1NlbGVjdG9yIiwicXVlcnlTZWxlY3RvckFsbCIsInFzYUVycm9yIiwicmVtb3ZlQXR0cmlidXRlIiwiY2FjaGVMZW5ndGgiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiY3JlYXRlUG9zaXRpb25hbFBzZXVkbyIsImFyZ3VtZW50IiwibWF0Y2hJbmRleGVzIiwic3ViV2luZG93Iiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJhZGRFdmVudExpc3RlbmVyIiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjc3NIYXMiLCJxdWVyeVNlbGVjdG9yIiwiYXR0cklkIiwiZ2V0QXR0cmlidXRlTm9kZSIsInRhZyIsImlubmVySFRNTCIsInNvcnREZXRhY2hlZCIsIm1hdGNoZXNTZWxlY3RvciIsImF0dHJIYW5kbGUiLCJkdXBsaWNhdGVzIiwic29ydFN0YWJsZSIsInByZUZpbHRlciIsImV4Y2VzcyIsInVucXVvdGVkIiwibm9kZU5hbWVTZWxlY3RvciIsImV4cGVjdGVkTm9kZU5hbWUiLCJvcGVyYXRvciIsImNoZWNrIiwid2hhdCIsIl9hcmd1bWVudCIsInNpbXBsZSIsImZvcndhcmQiLCJvZlR5cGUiLCJfY29udGV4dCIsInhtbCIsIm91dGVyQ2FjaGUiLCJub2RlSW5kZXgiLCJ1c2VDYWNoZSIsImZpcnN0Q2hpbGQiLCJsYXN0Q2hpbGQiLCJwc2V1ZG8iLCJzZXRGaWx0ZXJzIiwibWF0Y2hlZCIsImNvbXBpbGUiLCJ1bm1hdGNoZWQiLCJsYW5nIiwiZWxlbUxhbmciLCJyb290IiwiZW5hYmxlZCIsIl9tYXRjaEluZGV4ZXMiLCJsdCIsImd0IiwibnRoIiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwic3VibWl0IiwicmVzZXQiLCJwYXJzZU9ubHkiLCJ0b2tlbnMiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJjYWNoZWQiLCJjb21iaW5hdG9yIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwib2xkQ2FjaGUiLCJuZXdDYWNoZSIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJjb25kZW5zZSIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsIm1hdGNoZXJPdXQiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJjb250ZXh0cyIsIm11bHRpcGxlQ29udGV4dHMiLCJtYXRjaGVySW4iLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsImltcGxpY2l0UmVsYXRpdmUiLCJtYXRjaENvbnRleHQiLCJtYXRjaEFueUNvbnRleHQiLCJzZXRNYXRjaGVycyIsImVsZW1lbnRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJkaXJydW5zVW5pcXVlIiwibWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzIiwidG9rZW4iLCJjb21waWxlZCIsImZpbHRlcnMiLCJnZXRUZXh0IiwiaXNYTUwiLCJzZWxlY3RvcnMiLCJ1bnRpbCIsInRydW5jYXRlIiwicm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJ3aW5ub3ciLCJxdWFsaWZpZXIiLCJzZWxmIiwicm9vdGpRdWVyeSIsInBhcnNlSFRNTCIsInJwYXJlbnRzcHJldiIsImd1YXJhbnRlZWRVbmlxdWUiLCJzaWJsaW5nIiwidGFyZ2V0cyIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsInJldmVyc2UiLCJybm90aHRtbHdoaXRlIiwiSWRlbnRpdHkiLCJUaHJvd2VyIiwiZXgiLCJhZG9wdFZhbHVlIiwicmVqZWN0Iiwibm9WYWx1ZSIsInRoZW4iLCJDYWxsYmFja3MiLCJmbGFnIiwiY3JlYXRlT3B0aW9ucyIsImZpcmluZyIsIm1lbW9yeSIsImZpcmVkIiwibG9ja2VkIiwiZmlyaW5nSW5kZXgiLCJmaXJlIiwib25jZSIsInN0b3BPbkZhbHNlIiwibG9jayIsImZpcmVXaXRoIiwiZnVuYyIsInR1cGxlcyIsInN0YXRlIiwiYWx3YXlzIiwiZGVmZXJyZWQiLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwibWF4RGVwdGgiLCJkZXB0aCIsInNwZWNpYWwiLCJtaWdodFRocm93IiwiVHlwZUVycm9yIiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwicHJvY2VzcyIsImV4Y2VwdGlvbkhvb2siLCJyZWplY3RXaXRoIiwiZ2V0RXJyb3JIb29rIiwiZ2V0U3RhY2tIb29rIiwic3RhdGVTdHJpbmciLCJzaW5nbGVWYWx1ZSIsInJlbWFpbmluZyIsInJlc29sdmVDb250ZXh0cyIsInJlc29sdmVWYWx1ZXMiLCJ1cGRhdGVGdW5jIiwicmVycm9yTmFtZXMiLCJhc3luY0Vycm9yIiwiY29uc29sZSIsIndhcm4iLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5TGlzdCIsImNvbXBsZXRlZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjYXRjaCIsInJlYWR5V2FpdCIsIndhaXQiLCJyZWFkeVN0YXRlIiwiZG9TY3JvbGwiLCJhY2Nlc3MiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsImJ1bGsiLCJfa2V5Iiwicm1zUHJlZml4IiwicmRhc2hBbHBoYSIsImZjYW1lbENhc2UiLCJfYWxsIiwibGV0dGVyIiwidG9VcHBlckNhc2UiLCJhY2NlcHREYXRhIiwib3duZXIiLCJEYXRhIiwidWlkIiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJoYXNEYXRhIiwiZGF0YVByaXYiLCJkYXRhVXNlciIsInJicmFjZSIsInJtdWx0aURhc2giLCJkYXRhQXR0ciIsImdldERhdGEiLCJfcmVtb3ZlRGF0YSIsImF0dHJzIiwic3RhcnRMZW5ndGgiLCJfcXVldWVIb29rcyIsInNldHRlciIsImNsZWFyUXVldWUiLCJkZWZlciIsInBudW0iLCJyY3NzTnVtIiwiY3NzRXhwYW5kIiwiaXNBdHRhY2hlZCIsImNvbXBvc2VkIiwiZ2V0Um9vdE5vZGUiLCJpc0hpZGRlbldpdGhpblRyZWUiLCJhZGp1c3RDU1MiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsIm1heEl0ZXJhdGlvbnMiLCJpbml0aWFsIiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsImRlZmF1bHREaXNwbGF5TWFwIiwiZ2V0RGVmYXVsdERpc3BsYXkiLCJzaG93SGlkZSIsInJjaGVja2FibGVUeXBlIiwicnRhZ05hbWUiLCJyc2NyaXB0VHlwZSIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJjaGVja0Nsb25lIiwiY2xvbmVOb2RlIiwibm9DbG9uZUNoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJ3cmFwTWFwIiwidHIiLCJnZXRBbGwiLCJzZXRHbG9iYWxFdmFsIiwicmVmRWxlbWVudHMiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwicmh0bWwiLCJidWlsZEZyYWdtZW50Iiwic2NyaXB0cyIsImlnbm9yZWQiLCJhdHRhY2hlZCIsImZyYWdtZW50Iiwibm9kZXMiLCJodG1sUHJlZmlsdGVyIiwiY3JlYXRlVGV4dE5vZGUiLCJydHlwZW5hbWVzcGFjZSIsInJldHVyblRydWUiLCJyZXR1cm5GYWxzZSIsInR5cGVzIiwib3JpZ0ZuIiwibGV2ZXJhZ2VOYXRpdmUiLCJpc1NldHVwIiwic2F2ZWQiLCJpc1RyaWdnZXIiLCJkZWxlZ2F0ZVR5cGUiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJoYW5kbGVPYmoiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiYmluZFR5cGUiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJuYXRpdmVFdmVudCIsImhhbmRsZXJRdWV1ZSIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJybmFtZXNwYWNlIiwicG9zdERpc3BhdGNoIiwibWF0Y2hlZEhhbmRsZXJzIiwibWF0Y2hlZFNlbGVjdG9ycyIsImFkZFByb3AiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJub0J1YmJsZSIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZWxhdGVkVGFyZ2V0IiwidGltZVN0YW1wIiwiaXNTaW11bGF0ZWQiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImNoYW5nZWRUb3VjaGVzIiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsInZpZXciLCJjbGllbnRYIiwiY2xpZW50WSIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9pbnRlcklkIiwicG9pbnRlclR5cGUiLCJzY3JlZW5YIiwic2NyZWVuWSIsInRhcmdldFRvdWNoZXMiLCJ0b0VsZW1lbnQiLCJ0b3VjaGVzIiwiZm9jdXNNYXBwZWRIYW5kbGVyIiwic2ltdWxhdGUiLCJhdHRhY2hlcyIsImRhdGFIb2xkZXIiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJyZWxhdGVkIiwicm5vSW5uZXJodG1sIiwicmNoZWNrZWQiLCJyY2xlYW5TY3JpcHQiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsImNsb25lQ29weUV2ZW50IiwiZGVzdCIsInVkYXRhT2xkIiwidWRhdGFDdXIiLCJmaXhJbnB1dCIsImRvbU1hbmlwIiwiY29sbGVjdGlvbiIsImhhc1NjcmlwdHMiLCJpTm9DbG9uZSIsInZhbHVlSXNGdW5jdGlvbiIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsInJlcGxhY2VDaGlsZCIsInJlcGxhY2VBbGwiLCJpbnNlcnQiLCJybnVtbm9ucHgiLCJyY3VzdG9tUHJvcCIsImdldFN0eWxlcyIsInN3YXAiLCJvbGQiLCJyYm94U3R5bGUiLCJjdXJDU1MiLCJjb21wdXRlZCIsImlzQ3VzdG9tUHJvcCIsImdldFByb3BlcnR5VmFsdWUiLCJwaXhlbEJveFN0eWxlcyIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwiY29tcHV0ZVN0eWxlVGVzdHMiLCJkaXZTdHlsZSIsInBpeGVsUG9zaXRpb25WYWwiLCJyZWxpYWJsZU1hcmdpbkxlZnRWYWwiLCJyb3VuZFBpeGVsTWVhc3VyZXMiLCJwaXhlbEJveFN0eWxlc1ZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwic2Nyb2xsYm94U2l6ZVZhbCIsIm1lYXN1cmUiLCJyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwiYm94U2l6aW5nUmVsaWFibGUiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5MZWZ0Iiwic2Nyb2xsYm94U2l6ZSIsInJlbGlhYmxlVHJEaW1lbnNpb25zIiwidGFibGUiLCJ0ckNoaWxkIiwidHJTdHlsZSIsImNzc1ByZWZpeGVzIiwiZW1wdHlTdHlsZSIsInZlbmRvclByb3BzIiwiZmluYWxQcm9wTmFtZSIsImNzc1Byb3BzIiwiY2FwTmFtZSIsInZlbmRvclByb3BOYW1lIiwicmRpc3BsYXlzd2FwIiwiY3NzU2hvdyIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0Iiwic2V0UG9zaXRpdmVOdW1iZXIiLCJzdWJ0cmFjdCIsImJveE1vZGVsQWRqdXN0bWVudCIsImRpbWVuc2lvbiIsImJveCIsImlzQm9yZGVyQm94IiwiY29tcHV0ZWRWYWwiLCJtYXJnaW5EZWx0YSIsImdldFdpZHRoT3JIZWlnaHQiLCJ2YWx1ZUlzQm9yZGVyQm94Iiwib2Zmc2V0UHJvcCIsImdldENsaWVudFJlY3RzIiwiVHdlZW4iLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlU2xpY2UiLCJjb2x1bW5Db3VudCIsImZsZXhHcm93IiwiZmxleFNocmluayIsImdyaWRBcmVhIiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3RhcnQiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTdGFydCIsImxpbmVIZWlnaHQiLCJvcmRlciIsIm9ycGhhbnMiLCJ3aWRvd3MiLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJvcmlnTmFtZSIsInNldFByb3BlcnR5IiwiaXNGaW5pdGUiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJzY3JvbGxib3hTaXplQnVnZ3kiLCJzdWZmaXgiLCJwcm9wSG9va3MiLCJlYXNlZCIsImxpbmVhciIsInN3aW5nIiwiZnhOb3ciLCJpblByb2dyZXNzIiwicmZ4dHlwZXMiLCJycnVuIiwic2NoZWR1bGUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ0aWNrIiwiY3JlYXRlRnhOb3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsImNyZWF0ZVR3ZWVuIiwiQW5pbWF0aW9uIiwidHdlZW5lcnMiLCJwcm9wZXJ0aWVzIiwic3RvcHBlZCIsInByZWZpbHRlcnMiLCJjdXJyZW50VGltZSIsInN0YXJ0VGltZSIsInR3ZWVucyIsInNwZWNpYWxFYXNpbmciLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJnb3RvRW5kIiwicHJvcEZpbHRlciIsImJpbmQiLCJhbmltIiwidHdlZW5lciIsIm9sZGZpcmUiLCJwcm9wVHdlZW4iLCJyZXN0b3JlRGlzcGxheSIsImlzQm94IiwiZGF0YVNob3ciLCJ1bnF1ZXVlZCIsIm9wdCIsImZhZGVUbyIsIm9wdGFsbCIsImRvQW5pbWF0aW9uIiwiZmluaXNoIiwic3RvcFF1ZXVlIiwidGltZXJzIiwiY3NzRm4iLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsInNsb3ciLCJ0aW1lb3V0IiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwiblR5cGUiLCJhdHRySG9va3MiLCJhdHRyTmFtZXMiLCJnZXR0ZXIiLCJsb3dlcmNhc2VOYW1lIiwicmZvY3VzYWJsZSIsInJjbGlja2FibGUiLCJzdHJpcEFuZENvbGxhcHNlIiwiZ2V0Q2xhc3MiLCJjbGFzc2VzVG9BcnJheSIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwiY3VyVmFsdWUiLCJmaW5hbFZhbHVlIiwic3RhdGVWYWwiLCJpc1ZhbGlkVmFsdWUiLCJycmV0dXJuIiwidmFsSG9va3MiLCJvcHRpb25TZXQiLCJycXVlcnkiLCJwYXJzZVhNTCIsInBhcnNlckVycm9yRWxlbSIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJmb2N1c01vcnBoIiwic3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2siLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwibGFzdEVsZW1lbnQiLCJldmVudFBhdGgiLCJyYnJhY2tldCIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwiYnVpbGRQYXJhbXMiLCJ0cmFkaXRpb25hbCIsInBhcmFtIiwidmFsdWVPckZ1bmN0aW9uIiwic2VyaWFsaXplQXJyYXkiLCJyMjAiLCJyYW50aUNhY2hlIiwicmhlYWRlcnMiLCJybm9Db250ZW50IiwicnByb3RvY29sIiwidHJhbnNwb3J0cyIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZGF0YVR5cGVzIiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJpbnNwZWN0ZWQiLCJzZWVraW5nVHJhbnNwb3J0IiwiaW5zcGVjdCIsInByZWZpbHRlck9yRmFjdG9yeSIsImRhdGFUeXBlT3JUcmFuc3BvcnQiLCJhamF4RXh0ZW5kIiwiZmxhdE9wdGlvbnMiLCJsYXN0TW9kaWZpZWQiLCJldGFnIiwiaXNMb2NhbCIsInByb3RvY29sIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsImpzb24iLCJyZXNwb25zZUZpZWxkcyIsImNvbnZlcnRlcnMiLCJhamF4U2V0dXAiLCJhamF4UHJlZmlsdGVyIiwiYWpheFRyYW5zcG9ydCIsInRyYW5zcG9ydCIsImNhY2hlVVJMIiwicmVzcG9uc2VIZWFkZXJzU3RyaW5nIiwicmVzcG9uc2VIZWFkZXJzIiwidGltZW91dFRpbWVyIiwidXJsQW5jaG9yIiwiZmlyZUdsb2JhbHMiLCJ1bmNhY2hlZCIsImNhbGxiYWNrQ29udGV4dCIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJzdGF0dXNDb2RlIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0SGVhZGVyc05hbWVzIiwic3RyQWJvcnQiLCJnZXRSZXNwb25zZUhlYWRlciIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwibWltZVR5cGUiLCJmaW5hbFRleHQiLCJjcm9zc0RvbWFpbiIsImhvc3QiLCJoYXNDb250ZW50IiwiaWZNb2RpZmllZCIsInNlbmQiLCJuYXRpdmVTdGF0dXNUZXh0IiwicmVzcG9uc2VzIiwiaXNTdWNjZXNzIiwibW9kaWZpZWQiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJmaXJzdERhdGFUeXBlIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsImNvbnYyIiwiY29udiIsImRhdGFGaWx0ZXIiLCJ0aHJvd3MiLCJhamF4Q29udmVydCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsImh0bWxJc0Z1bmN0aW9uIiwiWE1MSHR0cFJlcXVlc3QiLCJ4aHJTdWNjZXNzU3RhdHVzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImVycm9yQ2FsbGJhY2siLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJvbmFib3J0Iiwib250aW1lb3V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0IiwiYmluYXJ5Iiwic2NyaXB0QXR0cnMiLCJjaGFyc2V0Iiwic2NyaXB0Q2hhcnNldCIsImV2dCIsIm9sZENhbGxiYWNrcyIsInJqc29ucCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImtlZXBTY3JpcHRzIiwicGFyYW1zIiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsInJlY3QiLCJ3aW4iLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0IiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsInJ0cmltIiwiaG9sZFJlYWR5IiwiaG9sZCIsInBhcnNlSlNPTiIsImlzTnVtZXJpYyIsIl9qUXVlcnkiLCJfJCIsIm5vQ29uZmxpY3QiLCJSZWZsZWN0IiwiRnVuY3Rpb24iLCJleHBvcnRlciIsIm1ha2VFeHBvcnRlciIsInN1cHBvcnRzU3ltYm9sIiwidG9QcmltaXRpdmVTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsIml0ZXJhdG9yU3ltYm9sIiwic3VwcG9ydHNDcmVhdGUiLCJzdXBwb3J0c1Byb3RvIiwiX19wcm90b19fIiwiZG93bkxldmVsIiwiSGFzaE1hcCIsIk1ha2VEaWN0aW9uYXJ5IiwiZnVuY3Rpb25Qcm90b3R5cGUiLCJ1c2VQb2x5ZmlsbCIsImVudiIsIl9NYXAiLCJNYXAiLCJlbnRyaWVzIiwiY2FjaGVTZW50aW5lbCIsImFycmF5U2VudGluZWwiLCJNYXBJdGVyYXRvciIsIl9pbmRleCIsIl9rZXlzIiwiX3NlbGVjdG9yIiwidGhyb3ciLCJyZXR1cm4iLCJfY2FjaGVLZXkiLCJfY2FjaGVJbmRleCIsImRlbGV0ZSIsImdldEtleSIsImdldFZhbHVlIiwiZ2V0RW50cnkiLCJDcmVhdGVNYXBQb2x5ZmlsbCIsIl9TZXQiLCJTZXQiLCJfbWFwIiwiTWV0YWRhdGEiLCJXZWFrTWFwIiwiVVVJRF9TSVpFIiwicm9vdEtleSIsIkNyZWF0ZVVuaXF1ZUtleSIsIkdldE9yQ3JlYXRlV2Vha01hcFRhYmxlIiwiQ3JlYXRlVVVJRCIsIkZpbGxSYW5kb21CeXRlcyIsImJ1ZmZlciIsIlVpbnQ4QXJyYXkiLCJjcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJtc0NyeXB0byIsImJ5dGUiLCJDcmVhdGVXZWFrTWFwUG9seWZpbGwiLCJHZXRPckNyZWF0ZU1ldGFkYXRhTWFwIiwiTyIsIlAiLCJDcmVhdGUiLCJ0YXJnZXRNZXRhZGF0YSIsIklzVW5kZWZpbmVkIiwibWV0YWRhdGFNYXAiLCJPcmRpbmFyeUhhc01ldGFkYXRhIiwiTWV0YWRhdGFLZXkiLCJPcmRpbmFyeUhhc093bk1ldGFkYXRhIiwiT3JkaW5hcnlHZXRQcm90b3R5cGVPZiIsIklzTnVsbCIsIk9yZGluYXJ5R2V0TWV0YWRhdGEiLCJPcmRpbmFyeUdldE93bk1ldGFkYXRhIiwiT3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSIsIk1ldGFkYXRhVmFsdWUiLCJPcmRpbmFyeU1ldGFkYXRhS2V5cyIsIm93bktleXMiLCJPcmRpbmFyeU93bk1ldGFkYXRhS2V5cyIsInBhcmVudEtleXMiLCJvd25LZXlzXzEiLCJfYSIsInBhcmVudEtleXNfMSIsIkdldE1ldGhvZCIsIklzQ2FsbGFibGUiLCJJc09iamVjdCIsIkdldEl0ZXJhdG9yIiwiSXRlcmF0b3JTdGVwIiwibmV4dFZhbHVlIiwiSXRlcmF0b3JDbG9zZSIsIlR5cGUiLCJUb1ByaW1pdGl2ZSIsIlByZWZlcnJlZFR5cGUiLCJoaW50IiwiZXhvdGljVG9QcmltIiwidG9TdHJpbmdfMSIsInZhbHVlT2YiLCJ0b1N0cmluZ18yIiwiT3JkaW5hcnlUb1ByaW1pdGl2ZSIsIlRvUHJvcGVydHlLZXkiLCJUb1N0cmluZyIsIklzQXJyYXkiLCJJc0NvbnN0cnVjdG9yIiwiViIsImYiLCJwcm90b3R5cGVQcm90byIsIl9fIiwiZGVjb3JhdG9ycyIsInByb3BlcnR5S2V5IiwiZGVjb3JhdGVkIiwiZGVjb3JhdG9yIiwiRGVjb3JhdGVDb25zdHJ1Y3RvciIsImRlc2NyaXB0b3IiLCJEZWNvcmF0ZVByb3BlcnR5IiwibWV0YWRhdGFLZXkiLCJtZXRhZGF0YVZhbHVlIiwiSXNQcm9wZXJ0eUtleSIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJpbmRleEJ5SWRlbnRpZmllciIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsImFwaSIsImRvbUFQSSIsIm5ld09iaiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJtZW1vIiwic3R5bGVUYXJnZXQiLCJIVE1MSUZyYW1lRWxlbWVudCIsImdldFRhcmdldCIsInNldEF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImpDbGFzcyIsIm9iajEiLCJvYmoyIiwiaXNfZnVucyIsImZvckVhY2giLCJob3N0bmFtZSIsInoiLCJqZnVuX2V2IiwiZXYiLCJudW1iZXIiLCJUZWciLCJ1c2VDYXB0dXJlIiwiY29udGV4dG1lbnUiLCJNZW51XzIyMDYxNjEwNTIiLCJJbnN0YW5jZSIsIm1haW4iLCJmdW4iLCJhdHRhY2hFdmVudCIsImFsZXJ0IiwidGVnIiwiRVgiLCJtb2RpZiIsImFzc2lnbiIsImF0cl9kYXRhIiwiZGF0YV92YXJzIiwiQ1NTIiwiY3JlYXRlX2FyciIsImxvZyIsIlRZUEVTIiwiSVRFR19DdXN0b20iLCJmb3IiLCJJVGVnX21pbiIsIklUZWdfb2JqIiwiSVRlZ19zaG93IiwiSUZtX2FicyIsIklNZW51XzIyMDYxNjEwNTIiLCJGbV9ib2R5IiwiRFVQTElDQVRFRF9JTkpFQ1RBQkxFX0RFQ09SQVRPUiIsIk5VTExfQVJHVU1FTlQiLCJLRVlfTk9UX0ZPVU5EIiwiQU1CSUdVT1VTX01BVENIIiwiTk9UX1JFR0lTVEVSRUQiLCJNSVNTSU5HX0lOSkVDVEFCTEVfQU5OT1RBVElPTiIsIk1JU1NJTkdfSU5KRUNUX0FOTk9UQVRJT04iLCJDSVJDVUxBUl9ERVBFTkRFTkNZIiwiQVJHVU1FTlRTX0xFTkdUSF9NSVNNQVRDSCIsIk9OX0RFQUNUSVZBVElPTl9FUlJPUiIsImNsYXp6IiwiZXJyb3JNZXNzYWdlIiwiU1RBQ0tfT1ZFUkZMT1ciLCJOQU1FRF9UQUciLCJOQU1FX1RBRyIsIlVOTUFOQUdFRF9UQUciLCJPUFRJT05BTF9UQUciLCJJTkpFQ1RfVEFHIiwiTVVMVElfSU5KRUNUX1RBRyIsIlBBUkFNX1RZUEVTIiwiREVTSUdOX1BBUkFNX1RZUEVTIiwiUE9TVF9DT05TVFJVQ1QiLCJQUkVfREVTVFJPWSIsIk5PTl9DVVNUT01fVEFHX0tFWVMiLCJpbmplY3RhYmxlIiwiaGFzT3duTWV0YWRhdGEiLCJnZXRNZXRhZGF0YSIsImRlZmluZU1ldGFkYXRhIiwiQmluZGluZ1Njb3BlRW51bSIsIkJpbmRpbmdUeXBlRW51bSIsIkNvbnN0YW50VmFsdWUiLCJDb25zdHJ1Y3RvciIsIkR5bmFtaWNWYWx1ZSIsIkZhY3RvcnkiLCJJbnZhbGlkIiwiUHJvdmlkZXIiLCJUYXJnZXRUeXBlRW51bSIsIkNsYXNzUHJvcGVydHkiLCJDb25zdHJ1Y3RvckFyZ3VtZW50IiwiVmFyaWFibGUiLCJpZENvdW50ZXIiLCJCaW5kaW5nIiwic2VydmljZUlkZW50aWZpZXIiLCJhY3RpdmF0ZWQiLCJjb25zdHJhaW50IiwiaW1wbGVtZW50YXRpb25UeXBlIiwicHJvdmlkZXIiLCJvbkFjdGl2YXRpb24iLCJvbkRlYWN0aXZhdGlvbiIsImR5bmFtaWNWYWx1ZSIsIk1ldGFkYXRhUmVhZGVyIiwiZ2V0Q29uc3RydWN0b3JNZXRhZGF0YSIsImNvbnN0cnVjdG9yRnVuYyIsImNvbXBpbGVyR2VuZXJhdGVkTWV0YWRhdGEiLCJ1c2VyR2VuZXJhdGVkTWV0YWRhdGEiLCJnZXRQcm9wZXJ0aWVzTWV0YWRhdGEiLCJCaW5kaW5nQ291bnQiLCJNdWx0aXBsZUJpbmRpbmdzQXZhaWxhYmxlIiwiTm9CaW5kaW5nc0F2YWlsYWJsZSIsIk9ubHlPbmVCaW5kaW5nQXZhaWxhYmxlIiwiaXNTdGFja092ZXJmbG93RXhlcHRpb24iLCJSYW5nZUVycm9yIiwiZ2V0U2VydmljZUlkZW50aWZpZXJBc1N0cmluZyIsImxpc3RSZWdpc3RlcmVkQmluZGluZ3NGb3JTZXJ2aWNlSWRlbnRpZmllciIsImdldEJpbmRpbmdzIiwicmVnaXN0ZXJlZEJpbmRpbmdzTGlzdCIsInJlZ2lzdGVyZWRCaW5kaW5ncyIsImJpbmRpbmciLCJnZXRGdW5jdGlvbk5hbWUiLCJtZXRhRGF0YSIsImFscmVhZHlEZXBlbmRlbmN5Q2hhaW4iLCJwYXJlbnRSZXF1ZXN0IiwiY2lyY3VsYXJEZXBlbmRlbmN5VG9FeGNlcHRpb24iLCJjaGlsZFJlcXVlc3RzIiwiY2hpbGRSZXF1ZXN0Iiwic2VydmljZXMiLCJfY3JlYXRlU3RyaW5nQXJyIiwicmVxIiwiZGVwZW5kZW5jeUNoYWluVG9TdHJpbmciLCJuYW1lXzEiLCJDb250ZXh0IiwiYWRkUGxhbiIsInBsYW4iLCJzZXRDdXJyZW50UmVxdWVzdCIsImN1cnJlbnRSZXF1ZXN0IiwiUGxhbiIsInBhcmVudENvbnRleHQiLCJyb290UmVxdWVzdCIsIkxhenlTZXJ2aWNlSWRlbnRpZmVyIiwiY2IiLCJfY2IiLCJRdWVyeWFibGVTdHJpbmciLCJzdGFydHNXaXRoIiwic2VhcmNoU3RyaW5nIiwiZW5kc1dpdGgiLCJyZXZlcnNlU3RyaW5nIiwicmV2ZXJzZVNlYXJjaFN0cmluZyIsImVxdWFscyIsImNvbXBhcmVTdHJpbmciLCJUYXJnZXQiLCJuYW1lZE9yVGFnZ2VkIiwicXVlcnlhYmxlTmFtZSIsIm1ldGFkYXRhIiwibWV0YWRhdGFJdGVtIiwiaGFzVGFnIiwibWF0Y2hlc0FycmF5IiwibWF0Y2hlc1RhZyIsImlzTmFtZWQiLCJpc1RhZ2dlZCIsInNvbWUiLCJldmVyeSIsImlzT3B0aW9uYWwiLCJnZXROYW1lZFRhZyIsImdldEN1c3RvbVRhZ3MiLCJtYXRjaGVzTmFtZWRUYWciLCJfdGhpcyIsIl9fc3ByZWFkQXJyYXkiLCJwYWNrIiwiYXIiLCJnZXRUYXJnZXRzIiwibWV0YWRhdGFSZWFkZXIiLCJjb25zdHJ1Y3Rvck5hbWUiLCJpc0Jhc2VDbGFzcyIsInNlcnZpY2VJZGVudGlmaWVycyIsImNvbnN0cnVjdG9yQXJnc01ldGFkYXRhIiwiaGFzVXNlckRlY2xhcmVkVW5rbm93bkluamVjdGlvbnMiLCJoYXNPcHRpb25hbFBhcmFtZXRlcnMiLCJjb25zdHJ1Y3RvclRhcmdldHMiLCJpdGVyYXRpb25zIiwiZ2V0Q29uc3RydWN0b3JBcmdzQXNUYXJnZXQiLCJnZXRDb25zdHJ1Y3RvckFyZ3NBc1RhcmdldHMiLCJwcm9wZXJ0eVRhcmdldHMiLCJnZXRDbGFzc1Byb3BzQXNUYXJnZXRzIiwiZm9ybWF0VGFyZ2V0TWV0YWRhdGEiLCJpc01hbmFnZWQiLCJ1bm1hbmFnZWQiLCJpbmplY3QiLCJtdWx0aUluamVjdCIsInRhcmdldE5hbWUiLCJfZ2V0U2VydmljZUlkZW50aWZpZXJGb3JQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsImNsYXNzUHJvcHNNZXRhZGF0YSIsInN5bWJvbEtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJrZXlzXzEiLCJiYXNlQ29uc3RydWN0b3IiLCJiYXNlVGFyZ2V0cyIsImdldEJhc2VDbGFzc0RlcGVuZGVuY3lDb3VudCIsInVubWFuYWdlZENvdW50IiwiZGVwZW5kZW5jeUNvdW50IiwidGFyZ2V0TWV0YWRhdGFNYXAiLCJSZXF1ZXN0IiwicmVxdWVzdFNjb3BlIiwiYWRkQ2hpbGRSZXF1ZXN0IiwiZ2V0QmluZGluZ0RpY3Rpb25hcnkiLCJjbnRuciIsIl9iaW5kaW5nRGljdGlvbmFyeSIsIl9nZXRBY3RpdmVCaW5kaW5ncyIsImF2b2lkQ29uc3RyYWludHMiLCJhY3RpdmVCaW5kaW5ncyIsImF1dG9CaW5kSW5qZWN0YWJsZSIsInRvU2VsZiIsInNlcnZpY2VJZGVudGlmaWVyU3RyaW5nIiwibV8xIiwibmFtZWRUYWciLCJvdGhlclRhZ3MiLCJsaXN0TWV0YWRhdGFGb3JUYXJnZXQiLCJfdmFsaWRhdGVBY3RpdmVCaW5kaW5nQ291bnQiLCJfY3JlYXRlU3ViUmVxdWVzdHMiLCJ0aGVQbGFuIiwic3ViQ2hpbGRSZXF1ZXN0IiwiZGVwZW5kZW5jaWVzIiwiZ2V0RGVwZW5kZW5jaWVzIiwic2tpcEJhc2VDbGFzc0NoZWNrcyIsImJhc2VDbGFzc0RlcGVuZGVuY3lDb3VudCIsImRlcGVuZGVuY3kiLCJiaW5kaW5nRGljdGlvbmFyeSIsImhhc0tleSIsImlzUHJvbWlzZSIsImlzUHJvbWlzZU9yQ29udGFpbnNQcm9taXNlIiwiRmFjdG9yeVR5cGUiLCJfc2F2ZUFzeW5jUmVzdWx0VG9TaW5nbGV0b25TY29wZSIsImFzeW5jUmVzdWx0IiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJnZW5lcmF0b3IiLCJleF8xIiwic2VudCIsInRyeXMiLCJvcHMiLCJ2ZXJiIiwiX19nZW5lcmF0b3IiLCJQcm9taXNlIiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJfX2Fzc2lnbiIsImNyZWF0ZUluc3RhbmNlV2l0aEluamVjdGlvbnMiLCJjb25zdHIiLCJjb25zdHJ1Y3RvckluamVjdGlvbnMiLCJwcm9wZXJ0eVJlcXVlc3RzIiwiaW5qZWN0aW9uIiwicHJvcGVydHlJbmplY3Rpb25zIiwicG9zc2libHlXYWl0SW5qZWN0aW9ucyIsInBvc3NpYmxlUHJvbWlzZWluamVjdGlvbnMiLCJpbmplY3Rpb25zIiwicG9zc2libGVQcm9taXNlaW5qZWN0aW9uc18xIiwiX2dldEluc3RhbmNlQWZ0ZXJQb3N0Q29uc3RydWN0IiwicG9zdENvbnN0cnVjdFJlc3VsdCIsIl9iIiwiaGFzTWV0YWRhdGEiLCJfcG9zdENvbnN0cnVjdCIsIl9yZXNvbHZlUmVxdWVzdCIsInRhcmdldElzQW5BcnJheSIsInRhcmdldFBhcmVudElzTm90QW5BcnJheSIsIl9mIiwiX3Jlc29sdmVCaW5kaW5nIiwiX3Jlc29sdmVGYWN0b3J5RnJvbUJpbmRpbmciLCJmYWN0b3J5RGV0YWlscyIsImZhY3RvcnlUeXBlIiwiZ2V0RmFjdG9yeURldGFpbHMiLCJ0cnlBbmRUaHJvd0Vycm9ySWZTdGFja092ZXJmbG93IiwiX2dldFJlc29sdmVkRnJvbUJpbmRpbmciLCJib3VuZFZhbHVlIiwic2VydmljZUlkZW50aWZpZXJBc1N0cmluZyIsImVuc3VyZUZ1bGx5Qm91bmQiLCJyZXNvbHZlUmVxdWVzdCIsInNjb3BlRXJyb3JNZXNzYWdlIiwiX3Rocm93SWZIYW5kbGluZ0RlYWN0aXZhdGlvbiIsIl92YWxpZGF0ZUluc3RhbmNlUmVzb2x1dGlvbiIsInJlc29sdmVkIiwicmVzb2x2ZWRSZXF1ZXN0cyIsImlzQXN5bmMiLCJfcmVzb2x2ZVJlcXVlc3RzIiwiY3JlYXRlSW5zdGFuY2VXaXRoSW5qZWN0aW9uc0FyZyIsImNyZWF0ZUluc3RhbmNlV2l0aEluamVjdGlvbnNBc3luYyIsIl9jcmVhdGVJbnN0YW5jZSIsInJlc29sdmVkUmVzdWx0IiwicmVzb2x2ZUluc3RhbmNlIiwiX3Jlc29sdmVJblNjb3BlIiwicmVzb2x2ZUZyb21CaW5kaW5nIiwidHJ5R2V0RnJvbVNjb3BlIiwiX3NhdmVUb1NpbmdsZXRvblNjb3BlIiwiX3NhdmVUb1JlcXVlc3RTY29wZSIsInNhdmVUb1Njb3BlIiwiX29uQWN0aXZhdGlvbiIsIl9iaW5kaW5nQWN0aXZhdGlvbiIsImNvbnRhaW5lcnNJdGVyYXRvciIsIl9nZXRDb250YWluZXJzSXRlcmF0b3IiLCJjb250YWluZXJzSXRlcmF0b3JSZXN1bHQiLCJjb250ZXh0XzEiLCJhY3RpdmF0aW9uc0l0ZXJhdG9yIiwiX2dldENvbnRhaW5lckFjdGl2YXRpb25zRm9yU2VydmljZSIsIl9hY3RpdmF0ZUNvbnRhaW5lckFzeW5jIiwiX2FjdGl2YXRlQ29udGFpbmVyIiwicHJldmlvdXNSZXN1bHQiLCJhY3RpdmF0aW9uIiwicmVzdWx0UHJvbWlzZSIsImFjdGl2YXRpb25zIiwiX2FjdGl2YXRpb25zIiwiY29udGFpbmVyc1N0YWNrIiwibmV4dENvbnRhaW5lciIsInRyYXZlcnNlQW5jZXJzdG9ycyIsInRhZ2dlZENvbnN0cmFpbnQiLCJuYW1lZENvbnN0cmFpbnQiLCJ0eXBlQ29uc3RyYWludCIsIkJpbmRpbmdXaGVuU3ludGF4IiwiX2JpbmRpbmciLCJCaW5kaW5nT25TeW50YXgiLCJ3aGVuVGFyZ2V0TmFtZWQiLCJ3aGVuVGFyZ2V0SXNEZWZhdWx0Iiwid2hlblRhcmdldFRhZ2dlZCIsIndoZW5JbmplY3RlZEludG8iLCJ3aGVuUGFyZW50TmFtZWQiLCJ3aGVuUGFyZW50VGFnZ2VkIiwid2hlbkFueUFuY2VzdG9ySXMiLCJ3aGVuTm9BbmNlc3RvcklzIiwid2hlbkFueUFuY2VzdG9yTmFtZWQiLCJ3aGVuTm9BbmNlc3Rvck5hbWVkIiwid2hlbkFueUFuY2VzdG9yVGFnZ2VkIiwid2hlbk5vQW5jZXN0b3JUYWdnZWQiLCJ3aGVuQW55QW5jZXN0b3JNYXRjaGVzIiwid2hlbk5vQW5jZXN0b3JNYXRjaGVzIiwiQmluZGluZ1doZW5PblN5bnRheCIsIl9iaW5kaW5nV2hlblN5bnRheCIsIl9iaW5kaW5nT25TeW50YXgiLCJCaW5kaW5nSW5TeW50YXgiLCJpblJlcXVlc3RTY29wZSIsImluU2luZ2xldG9uU2NvcGUiLCJpblRyYW5zaWVudFNjb3BlIiwiQmluZGluZ0luV2hlbk9uU3ludGF4IiwiX2JpbmRpbmdJblN5bnRheCIsIkJpbmRpbmdUb1N5bnRheCIsInRvQ29uc3RhbnRWYWx1ZSIsInRvRHluYW1pY1ZhbHVlIiwidG9Db25zdHJ1Y3RvciIsInRvRmFjdG9yeSIsInRvRnVuY3Rpb24iLCJiaW5kaW5nV2hlbk9uU3ludGF4IiwidG9BdXRvRmFjdG9yeSIsInRvQXV0b05hbWVkRmFjdG9yeSIsIm5hbWVkIiwiZ2V0TmFtZWQiLCJ0b1Byb3ZpZGVyIiwidG9TZXJ2aWNlIiwic2VydmljZSIsIkNvbnRhaW5lclNuYXBzaG90IiwibWlkZGxld2FyZSIsImRlYWN0aXZhdGlvbnMiLCJtb2R1bGVBY3RpdmF0aW9uU3RvcmUiLCJzbmFwc2hvdCIsIkxvb2t1cCIsImdldE1hcCIsImVudHJ5IiwicmVtb3ZlSW50ZXJzZWN0aW9uIiwibG9va3VwIiwidHJhdmVyc2UiLCJsb29rdXBBY3RpdmF0aW9ucyIsImZpbHRlcmVkVmFsdWVzIiwibG9va3VwVmFsdWUiLCJtb2R1bGVBY3RpdmF0aW9uIiwiX3NldFZhbHVlIiwicmVtb3ZlQnlDb25kaXRpb24iLCJjb25kaXRpb24iLCJyZW1vdmFscyIsInVwZGF0ZWRFbnRyaWVzIiwiZW50cmllc18xIiwiTW9kdWxlQWN0aXZhdGlvblN0b3JlIiwibW9kdWxlSWQiLCJfZ2V0RW1wdHlIYW5kbGVyc1N0b3JlIiwiYWRkRGVhY3RpdmF0aW9uIiwiX2dldE1vZHVsZUFjdGl2YXRpb25IYW5kbGVycyIsIm9uRGVhY3RpdmF0aW9ucyIsImFkZEFjdGl2YXRpb24iLCJvbkFjdGl2YXRpb25zIiwiaGFuZGxlcnNTdG9yZSIsIm1vZHVsZUFjdGl2YXRpb25IYW5kbGVycyIsIkNvbnRhaW5lciIsImNvbnRhaW5lck9wdGlvbnMiLCJkZWZhdWx0U2NvcGUiLCJfc25hcHNob3RzIiwiX21pZGRsZXdhcmUiLCJfZGVhY3RpdmF0aW9ucyIsIl9tZXRhZGF0YVJlYWRlciIsIl9tb2R1bGVBY3RpdmF0aW9uU3RvcmUiLCJjb250YWluZXIxIiwiY29udGFpbmVyMiIsInRhcmdldENvbnRhaW5lcnMiLCJ0YXJnZXRDb250YWluZXIiLCJ0YXJnZXRCaW5kaW5nRGljdGlvbmFyeSIsImRlc3RpbmF0aW9uIiwiZ2V0SGVscGVycyIsIl9nZXRDb250YWluZXJNb2R1bGVIZWxwZXJzRmFjdG9yeSIsIm1vZHVsZXNfMSIsImN1cnJlbnRNb2R1bGUiLCJjb250YWluZXJNb2R1bGVIZWxwZXJzIiwicmVnaXN0cnkiLCJiaW5kRnVuY3Rpb24iLCJ1bmJpbmRGdW5jdGlvbiIsImlzYm91bmRGdW5jdGlvbiIsInJlYmluZEZ1bmN0aW9uIiwidW5iaW5kQXN5bmNGdW5jdGlvbiIsIm9uQWN0aXZhdGlvbkZ1bmN0aW9uIiwib25EZWFjdGl2YXRpb25GdW5jdGlvbiIsImxvYWRBc3luYyIsIm1vZHVsZXNfMiIsInVubG9hZCIsIl9yZW1vdmVNb2R1bGVCaW5kaW5ncyIsIl9kZWFjdGl2YXRlU2luZ2xldG9ucyIsIl9yZW1vdmVNb2R1bGVIYW5kbGVycyIsInVubG9hZEFzeW5jIiwibW9kdWxlc18zIiwibW9kdWxlXzEiLCJfZGVhY3RpdmF0ZVNpbmdsZXRvbnNBc3luYyIsInJlYmluZCIsInJlYmluZEFzeW5jIiwidW5iaW5kQXN5bmMiLCJfcmVtb3ZlU2VydmljZUZyb21EaWN0aW9uYXJ5IiwidW5iaW5kQWxsIiwidW5iaW5kQWxsQXN5bmMiLCJwcm9taXNlcyIsImlzQm91bmQiLCJib3VuZCIsImlzQ3VycmVudEJvdW5kIiwiaXNCb3VuZE5hbWVkIiwiaXNCb3VuZFRhZ2dlZCIsInJlcXVlc3RfMSIsImNyZWF0ZU1vY2tSZXF1ZXN0IiwiY3JlYXRlQ2hpbGQiLCJhcHBseU1pZGRsZXdhcmUiLCJtaWRkbGV3YXJlcyIsIl9wbGFuQW5kUmVzb2x2ZSIsImN1cnIiLCJhcHBseUN1c3RvbU1ldGFkYXRhUmVhZGVyIiwiZ2V0QXJncyIsIl9nZXROb3RBbGxBcmdzIiwiX2dldEJ1dFRocm93SWZBc3luYyIsImdldEFzeW5jIiwiZ2V0VGFnZ2VkIiwiZ2V0VGFnZ2VkQXN5bmMiLCJnZXROYW1lZEFzeW5jIiwiX2dldEFsbEFyZ3MiLCJnZXRBbGxBc3luYyIsIl9nZXRBbGwiLCJnZXRBbGxUYWdnZWQiLCJnZXRBbGxUYWdnZWRBc3luYyIsImdldEFsbE5hbWVkIiwiZ2V0QWxsTmFtZWRBc3luYyIsImNvbnN0cnVjdG9yRnVuY3Rpb24iLCJfcHJlRGVzdHJveSIsIm1vZHVsZUFjdGl2YXRpb25zSGFuZGxlcnMiLCJfZGVhY3RpdmF0ZUNvbnRhaW5lciIsIl9oYW5kbGVEZWFjdGl2YXRpb25FcnJvciIsIl9wcm9wYWdhdGVDb250YWluZXJEZWFjdGl2YXRpb25UaGVuQmluZGluZ0FuZFByZURlc3Ryb3lBc3luYyIsInByb3BhZ2F0ZURlYWN0aXZhdGlvblJlc3VsdCIsIl9wcm9wYWdhdGVDb250YWluZXJEZWFjdGl2YXRpb25UaGVuQmluZGluZ0FuZFByZURlc3Ryb3kiLCJkZWFjdGl2YXRpb25zSXRlcmF0b3IiLCJkZWFjdGl2YXRpb24iLCJfZGVhY3RpdmF0ZUNvbnRhaW5lckFzeW5jIiwic2V0TW9kdWxlSWQiLCJiaW5kaW5nVG9TeW50YXgiLCJnZXRSZWJpbmRGdW5jdGlvbiIsImdldE9uQWN0aXZhdGlvbkZ1bmN0aW9uIiwiZ2V0T25EZWFjdGl2YXRpb25GdW5jdGlvbiIsIm1JZCIsInBsYW5BbmRSZXNvbHZlQXJncyIsImNvbnRleHRJbnRlcmNlcHRvciIsInRhcmdldFR5cGUiLCJtaWRkbGV3YXJlUmVzdWx0IiwiaXNNdWx0aUluamVjdCIsImluamVjdE1ldGFkYXRhIiwidGFnTWV0YWRhdGEiLCJfY3JlYXRlVGFyZ2V0IiwiX2RlYWN0aXZhdGVJZlNpbmdsZXRvbiIsImJpbmRpbmdzXzEiLCJfYmluZGluZ0RlYWN0aXZhdGlvbkFuZFByZURlc3Ryb3kiLCJfYmluZGluZ0RlYWN0aXZhdGlvbkFuZFByZURlc3Ryb3lBc3luYyIsImxvY2FscyIsIlRFR19DdXN0b20iLCJURUdfanF1ZXJ5IiwiVEVHIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImRlY29yYXRlIiwiX19kZWNvcmF0ZSIsIlRlZ19taW4iLCJBUkdTIiwiZnVuX3RlZyIsIlRFRzIiLCJUZWdfb2JqIiwic3VwZXIiLCJNZW51XzIyMDYxNjEwNTJfMSIsImNhbmNlbEJ1YmJsZSIsIk0iLCJldl9ub25lIiwiRm1fYWJzIiwiVEVHX2JvZHkiLCJUZWdfc2hvdyIsImV2YWwiLCJTaW5nbGUiLCJzaG93X2lkIiwidElEIiwiY3RvciIsInN1cGVyQ3RvciIsInN1cGVyXyIsIlRlbXBDdG9yIiwiZmlsbCIsInJlYWRVSW50OCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZXNjcmlwdG9ycyIsImZvcm1hdFJlZ0V4cCIsImlzU3RyaW5nIiwib2JqZWN0cyIsIk51bWJlciIsImlzTnVsbCIsImlzT2JqZWN0IiwiZGVwcmVjYXRlIiwibm9EZXByZWNhdGlvbiIsIndhcm5lZCIsInRocm93RGVwcmVjYXRpb24iLCJ0cmFjZURlcHJlY2F0aW9uIiwidHJhY2UiLCJkZWJ1Z0Vudmlyb24iLCJkZWJ1Z3MiLCJjdHgiLCJzZWVuIiwic3R5bGl6ZSIsInN0eWxpemVOb0NvbG9yIiwiaXNCb29sZWFuIiwic2hvd0hpZGRlbiIsIl9leHRlbmQiLCJpc1VuZGVmaW5lZCIsImN1c3RvbUluc3BlY3QiLCJzdHlsaXplV2l0aENvbG9yIiwiZm9ybWF0VmFsdWUiLCJzdHlsZVR5cGUiLCJyZWN1cnNlVGltZXMiLCJwcmltaXRpdmUiLCJpc051bWJlciIsImZvcm1hdFByaW1pdGl2ZSIsInZpc2libGVLZXlzIiwiYXJyYXlUb0hhc2giLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiaXNFcnJvciIsImZvcm1hdEVycm9yIiwiaXNSZWdFeHAiLCJpc0RhdGUiLCJicmFjZXMiLCJ0b1VUQ1N0cmluZyIsImZvcm1hdFByb3BlcnR5IiwiZm9ybWF0QXJyYXkiLCJyZWR1Y2VUb1NpbmdsZVN0cmluZyIsImxpbmUiLCJvYmplY3RUb1N0cmluZyIsInBhZCIsImRlYnVnbG9nIiwiTk9ERV9ERUJVRyIsInBpZCIsImlzTnVsbE9yVW5kZWZpbmVkIiwiaXNTeW1ib2wiLCJpc1ByaW1pdGl2ZSIsImlzQnVmZmVyIiwibW9udGhzIiwiaW5oZXJpdHMiLCJrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wiLCJjYWxsYmFja2lmeU9uUmVqZWN0ZWQiLCJyZWFzb24iLCJuZXdSZWFzb24iLCJwcm9taXNpZnkiLCJwcm9taXNlUmVzb2x2ZSIsInByb21pc2VSZWplY3QiLCJzZXRQcm90b3R5cGVPZiIsImRlZmluZVByb3BlcnRpZXMiLCJjYWxsYmFja2lmeSIsImNhbGxiYWNraWZpZWQiLCJtYXliZUNiIiwibmV4dFRpY2siLCJyZWoiLCJ3ZWJwYWNrRW1wdHlDb250ZXh0IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJfX2VzTW9kdWxlIiwiZGVmaW5pdGlvbiIsImdsb2JhbFRoaXMiLCJuYyIsIl9fd2VicGFja19leHBvcnRzX18iXSwic291cmNlUm9vdCI6IiJ9